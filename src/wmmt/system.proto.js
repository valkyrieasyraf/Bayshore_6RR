/*eslint-disable block-scoped-var, id-length, no-control-regex, no-magic-numbers, no-prototype-builtins, no-redeclare, no-shadow, no-var, sort-vars*/
import * as $protobuf from "protobufjs/minimal";

// Common aliases
const $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;

// Exported root namespace
const $root = $protobuf.roots["default"] || ($protobuf.roots["default"] = {});

export const sys = $root.sys = (() => {

    /**
     * Namespace sys.
     * @exports sys
     * @namespace
     */
    const sys = {};

    sys.protobuf = (function() {

        /**
         * Namespace protobuf.
         * @memberof sys
         * @namespace
         */
        const protobuf = {};

        /**
         * State enum.
         * @name sys.protobuf.State
         * @enum {number}
         * @property {number} State_None=0 State_None value
         * @property {number} State_Checking=1 State_Checking value
         * @property {number} State_NG=2 State_NG value
         * @property {number} State_OK=3 State_OK value
         */
        protobuf.State = (function() {
            const valuesById = {}, values = Object.create(valuesById);
            values[valuesById[0] = "State_None"] = 0;
            values[valuesById[1] = "State_Checking"] = 1;
            values[valuesById[2] = "State_NG"] = 2;
            values[valuesById[3] = "State_OK"] = 3;
            return values;
        })();

        /**
         * BanaCoinPaymentState enum.
         * @name sys.protobuf.BanaCoinPaymentState
         * @enum {number}
         * @property {number} BC_SUCCESS=0 BC_SUCCESS value
         * @property {number} BC_SHORTAGE=1 BC_SHORTAGE value
         * @property {number} BC_BNID_MEMBER_ERROR=2 BC_BNID_MEMBER_ERROR value
         * @property {number} BC_UNKNOWN_ERROR=3 BC_UNKNOWN_ERROR value
         * @property {number} BC_BNID_SYSTEM_ERROR=4 BC_BNID_SYSTEM_ERROR value
         * @property {number} BC_BNID_VERIFY_ERROR=5 BC_BNID_VERIFY_ERROR value
         * @property {number} BC_BNID_EXECUTE_ERROR=6 BC_BNID_EXECUTE_ERROR value
         * @property {number} BC_BNID_SERVER_UNAVAILABLE=99 BC_BNID_SERVER_UNAVAILABLE value
         */
        protobuf.BanaCoinPaymentState = (function() {
            const valuesById = {}, values = Object.create(valuesById);
            values[valuesById[0] = "BC_SUCCESS"] = 0;
            values[valuesById[1] = "BC_SHORTAGE"] = 1;
            values[valuesById[2] = "BC_BNID_MEMBER_ERROR"] = 2;
            values[valuesById[3] = "BC_UNKNOWN_ERROR"] = 3;
            values[valuesById[4] = "BC_BNID_SYSTEM_ERROR"] = 4;
            values[valuesById[5] = "BC_BNID_VERIFY_ERROR"] = 5;
            values[valuesById[6] = "BC_BNID_EXECUTE_ERROR"] = 6;
            values[valuesById[99] = "BC_BNID_SERVER_UNAVAILABLE"] = 99;
            return values;
        })();

        protobuf.Log = (function() {

            /**
             * Properties of a Log.
             * @memberof sys.protobuf
             * @interface ILog
             * @property {Array.<sys.protobuf.Log.IError>|null} [errors] Log errors
             */

            /**
             * Constructs a new Log.
             * @memberof sys.protobuf
             * @classdesc Represents a Log.
             * @implements ILog
             * @constructor
             * @param {sys.protobuf.ILog=} [properties] Properties to set
             */
            function Log(properties) {
                this.errors = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Log errors.
             * @member {Array.<sys.protobuf.Log.IError>} errors
             * @memberof sys.protobuf.Log
             * @instance
             */
            Log.prototype.errors = $util.emptyArray;

            /**
             * Creates a new Log instance using the specified properties.
             * @function create
             * @memberof sys.protobuf.Log
             * @static
             * @param {sys.protobuf.ILog=} [properties] Properties to set
             * @returns {sys.protobuf.Log} Log instance
             */
            Log.create = function create(properties) {
                return new Log(properties);
            };

            /**
             * Encodes the specified Log message. Does not implicitly {@link sys.protobuf.Log.verify|verify} messages.
             * @function encode
             * @memberof sys.protobuf.Log
             * @static
             * @param {sys.protobuf.ILog} message Log message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Log.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.errors != null && message.errors.length)
                    for (let i = 0; i < message.errors.length; ++i)
                        $root.sys.protobuf.Log.Error.encode(message.errors[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified Log message, length delimited. Does not implicitly {@link sys.protobuf.Log.verify|verify} messages.
             * @function encodeDelimited
             * @memberof sys.protobuf.Log
             * @static
             * @param {sys.protobuf.ILog} message Log message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Log.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a Log message from the specified reader or buffer.
             * @function decode
             * @memberof sys.protobuf.Log
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {sys.protobuf.Log} Log
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Log.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.sys.protobuf.Log();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            if (!(message.errors && message.errors.length))
                                message.errors = [];
                            message.errors.push($root.sys.protobuf.Log.Error.decode(reader, reader.uint32()));
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a Log message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof sys.protobuf.Log
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {sys.protobuf.Log} Log
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Log.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a Log message.
             * @function verify
             * @memberof sys.protobuf.Log
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Log.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.errors != null && message.hasOwnProperty("errors")) {
                    if (!Array.isArray(message.errors))
                        return "errors: array expected";
                    for (let i = 0; i < message.errors.length; ++i) {
                        let error = $root.sys.protobuf.Log.Error.verify(message.errors[i]);
                        if (error)
                            return "errors." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a Log message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof sys.protobuf.Log
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {sys.protobuf.Log} Log
             */
            Log.fromObject = function fromObject(object) {
                if (object instanceof $root.sys.protobuf.Log)
                    return object;
                let message = new $root.sys.protobuf.Log();
                if (object.errors) {
                    if (!Array.isArray(object.errors))
                        throw TypeError(".sys.protobuf.Log.errors: array expected");
                    message.errors = [];
                    for (let i = 0; i < object.errors.length; ++i) {
                        if (typeof object.errors[i] !== "object")
                            throw TypeError(".sys.protobuf.Log.errors: object expected");
                        message.errors[i] = $root.sys.protobuf.Log.Error.fromObject(object.errors[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from a Log message. Also converts values to other types if specified.
             * @function toObject
             * @memberof sys.protobuf.Log
             * @static
             * @param {sys.protobuf.Log} message Log
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Log.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.errors = [];
                if (message.errors && message.errors.length) {
                    object.errors = [];
                    for (let j = 0; j < message.errors.length; ++j)
                        object.errors[j] = $root.sys.protobuf.Log.Error.toObject(message.errors[j], options);
                }
                return object;
            };

            /**
             * Converts this Log to JSON.
             * @function toJSON
             * @memberof sys.protobuf.Log
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Log.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for Log
             * @function getTypeUrl
             * @memberof sys.protobuf.Log
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            Log.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/sys.protobuf.Log";
            };

            Log.Error = (function() {

                /**
                 * Properties of an Error.
                 * @memberof sys.protobuf.Log
                 * @interface IError
                 * @property {number} timestamp Error timestamp
                 * @property {number} code Error code
                 */

                /**
                 * Constructs a new Error.
                 * @memberof sys.protobuf.Log
                 * @classdesc Represents an Error.
                 * @implements IError
                 * @constructor
                 * @param {sys.protobuf.Log.IError=} [properties] Properties to set
                 */
                function Error(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * Error timestamp.
                 * @member {number} timestamp
                 * @memberof sys.protobuf.Log.Error
                 * @instance
                 */
                Error.prototype.timestamp = 0;

                /**
                 * Error code.
                 * @member {number} code
                 * @memberof sys.protobuf.Log.Error
                 * @instance
                 */
                Error.prototype.code = 0;

                /**
                 * Creates a new Error instance using the specified properties.
                 * @function create
                 * @memberof sys.protobuf.Log.Error
                 * @static
                 * @param {sys.protobuf.Log.IError=} [properties] Properties to set
                 * @returns {sys.protobuf.Log.Error} Error instance
                 */
                Error.create = function create(properties) {
                    return new Error(properties);
                };

                /**
                 * Encodes the specified Error message. Does not implicitly {@link sys.protobuf.Log.Error.verify|verify} messages.
                 * @function encode
                 * @memberof sys.protobuf.Log.Error
                 * @static
                 * @param {sys.protobuf.Log.IError} message Error message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Error.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.timestamp);
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.code);
                    return writer;
                };

                /**
                 * Encodes the specified Error message, length delimited. Does not implicitly {@link sys.protobuf.Log.Error.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof sys.protobuf.Log.Error
                 * @static
                 * @param {sys.protobuf.Log.IError} message Error message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Error.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes an Error message from the specified reader or buffer.
                 * @function decode
                 * @memberof sys.protobuf.Log.Error
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {sys.protobuf.Log.Error} Error
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Error.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.sys.protobuf.Log.Error();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.timestamp = reader.uint32();
                                break;
                            }
                        case 2: {
                                message.code = reader.uint32();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    if (!message.hasOwnProperty("timestamp"))
                        throw $util.ProtocolError("missing required 'timestamp'", { instance: message });
                    if (!message.hasOwnProperty("code"))
                        throw $util.ProtocolError("missing required 'code'", { instance: message });
                    return message;
                };

                /**
                 * Decodes an Error message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof sys.protobuf.Log.Error
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {sys.protobuf.Log.Error} Error
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Error.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies an Error message.
                 * @function verify
                 * @memberof sys.protobuf.Log.Error
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Error.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (!$util.isInteger(message.timestamp))
                        return "timestamp: integer expected";
                    if (!$util.isInteger(message.code))
                        return "code: integer expected";
                    return null;
                };

                /**
                 * Creates an Error message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof sys.protobuf.Log.Error
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {sys.protobuf.Log.Error} Error
                 */
                Error.fromObject = function fromObject(object) {
                    if (object instanceof $root.sys.protobuf.Log.Error)
                        return object;
                    let message = new $root.sys.protobuf.Log.Error();
                    if (object.timestamp != null)
                        message.timestamp = object.timestamp >>> 0;
                    if (object.code != null)
                        message.code = object.code >>> 0;
                    return message;
                };

                /**
                 * Creates a plain object from an Error message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof sys.protobuf.Log.Error
                 * @static
                 * @param {sys.protobuf.Log.Error} message Error
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Error.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        object.timestamp = 0;
                        object.code = 0;
                    }
                    if (message.timestamp != null && message.hasOwnProperty("timestamp"))
                        object.timestamp = message.timestamp;
                    if (message.code != null && message.hasOwnProperty("code"))
                        object.code = message.code;
                    return object;
                };

                /**
                 * Converts this Error to JSON.
                 * @function toJSON
                 * @memberof sys.protobuf.Log.Error
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Error.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                /**
                 * Gets the default type url for Error
                 * @function getTypeUrl
                 * @memberof sys.protobuf.Log.Error
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                Error.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/sys.protobuf.Log.Error";
                };

                return Error;
            })();

            return Log;
        })();

        protobuf.BanaCoinPaymentLog = (function() {

            /**
             * Properties of a BanaCoinPaymentLog.
             * @memberof sys.protobuf
             * @interface IBanaCoinPaymentLog
             * @property {Array.<sys.protobuf.BanaCoinPaymentLog.IPayment>|null} [payments] BanaCoinPaymentLog payments
             */

            /**
             * Constructs a new BanaCoinPaymentLog.
             * @memberof sys.protobuf
             * @classdesc Represents a BanaCoinPaymentLog.
             * @implements IBanaCoinPaymentLog
             * @constructor
             * @param {sys.protobuf.IBanaCoinPaymentLog=} [properties] Properties to set
             */
            function BanaCoinPaymentLog(properties) {
                this.payments = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * BanaCoinPaymentLog payments.
             * @member {Array.<sys.protobuf.BanaCoinPaymentLog.IPayment>} payments
             * @memberof sys.protobuf.BanaCoinPaymentLog
             * @instance
             */
            BanaCoinPaymentLog.prototype.payments = $util.emptyArray;

            /**
             * Creates a new BanaCoinPaymentLog instance using the specified properties.
             * @function create
             * @memberof sys.protobuf.BanaCoinPaymentLog
             * @static
             * @param {sys.protobuf.IBanaCoinPaymentLog=} [properties] Properties to set
             * @returns {sys.protobuf.BanaCoinPaymentLog} BanaCoinPaymentLog instance
             */
            BanaCoinPaymentLog.create = function create(properties) {
                return new BanaCoinPaymentLog(properties);
            };

            /**
             * Encodes the specified BanaCoinPaymentLog message. Does not implicitly {@link sys.protobuf.BanaCoinPaymentLog.verify|verify} messages.
             * @function encode
             * @memberof sys.protobuf.BanaCoinPaymentLog
             * @static
             * @param {sys.protobuf.IBanaCoinPaymentLog} message BanaCoinPaymentLog message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            BanaCoinPaymentLog.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.payments != null && message.payments.length)
                    for (let i = 0; i < message.payments.length; ++i)
                        $root.sys.protobuf.BanaCoinPaymentLog.Payment.encode(message.payments[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified BanaCoinPaymentLog message, length delimited. Does not implicitly {@link sys.protobuf.BanaCoinPaymentLog.verify|verify} messages.
             * @function encodeDelimited
             * @memberof sys.protobuf.BanaCoinPaymentLog
             * @static
             * @param {sys.protobuf.IBanaCoinPaymentLog} message BanaCoinPaymentLog message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            BanaCoinPaymentLog.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a BanaCoinPaymentLog message from the specified reader or buffer.
             * @function decode
             * @memberof sys.protobuf.BanaCoinPaymentLog
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {sys.protobuf.BanaCoinPaymentLog} BanaCoinPaymentLog
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            BanaCoinPaymentLog.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.sys.protobuf.BanaCoinPaymentLog();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            if (!(message.payments && message.payments.length))
                                message.payments = [];
                            message.payments.push($root.sys.protobuf.BanaCoinPaymentLog.Payment.decode(reader, reader.uint32()));
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a BanaCoinPaymentLog message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof sys.protobuf.BanaCoinPaymentLog
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {sys.protobuf.BanaCoinPaymentLog} BanaCoinPaymentLog
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            BanaCoinPaymentLog.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a BanaCoinPaymentLog message.
             * @function verify
             * @memberof sys.protobuf.BanaCoinPaymentLog
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            BanaCoinPaymentLog.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.payments != null && message.hasOwnProperty("payments")) {
                    if (!Array.isArray(message.payments))
                        return "payments: array expected";
                    for (let i = 0; i < message.payments.length; ++i) {
                        let error = $root.sys.protobuf.BanaCoinPaymentLog.Payment.verify(message.payments[i]);
                        if (error)
                            return "payments." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a BanaCoinPaymentLog message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof sys.protobuf.BanaCoinPaymentLog
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {sys.protobuf.BanaCoinPaymentLog} BanaCoinPaymentLog
             */
            BanaCoinPaymentLog.fromObject = function fromObject(object) {
                if (object instanceof $root.sys.protobuf.BanaCoinPaymentLog)
                    return object;
                let message = new $root.sys.protobuf.BanaCoinPaymentLog();
                if (object.payments) {
                    if (!Array.isArray(object.payments))
                        throw TypeError(".sys.protobuf.BanaCoinPaymentLog.payments: array expected");
                    message.payments = [];
                    for (let i = 0; i < object.payments.length; ++i) {
                        if (typeof object.payments[i] !== "object")
                            throw TypeError(".sys.protobuf.BanaCoinPaymentLog.payments: object expected");
                        message.payments[i] = $root.sys.protobuf.BanaCoinPaymentLog.Payment.fromObject(object.payments[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from a BanaCoinPaymentLog message. Also converts values to other types if specified.
             * @function toObject
             * @memberof sys.protobuf.BanaCoinPaymentLog
             * @static
             * @param {sys.protobuf.BanaCoinPaymentLog} message BanaCoinPaymentLog
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            BanaCoinPaymentLog.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.payments = [];
                if (message.payments && message.payments.length) {
                    object.payments = [];
                    for (let j = 0; j < message.payments.length; ++j)
                        object.payments[j] = $root.sys.protobuf.BanaCoinPaymentLog.Payment.toObject(message.payments[j], options);
                }
                return object;
            };

            /**
             * Converts this BanaCoinPaymentLog to JSON.
             * @function toJSON
             * @memberof sys.protobuf.BanaCoinPaymentLog
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            BanaCoinPaymentLog.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for BanaCoinPaymentLog
             * @function getTypeUrl
             * @memberof sys.protobuf.BanaCoinPaymentLog
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            BanaCoinPaymentLog.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/sys.protobuf.BanaCoinPaymentLog";
            };

            BanaCoinPaymentLog.Payment = (function() {

                /**
                 * Properties of a Payment.
                 * @memberof sys.protobuf.BanaCoinPaymentLog
                 * @interface IPayment
                 * @property {number} date Payment date
                 * @property {string|null} [contactNumber] Payment contactNumber
                 * @property {sys.protobuf.BanaCoinPaymentState} state Payment state
                 * @property {number|null} [cost] Payment cost
                 * @property {string} accessCode Payment accessCode
                 * @property {string} personId Payment personId
                 */

                /**
                 * Constructs a new Payment.
                 * @memberof sys.protobuf.BanaCoinPaymentLog
                 * @classdesc Represents a Payment.
                 * @implements IPayment
                 * @constructor
                 * @param {sys.protobuf.BanaCoinPaymentLog.IPayment=} [properties] Properties to set
                 */
                function Payment(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * Payment date.
                 * @member {number} date
                 * @memberof sys.protobuf.BanaCoinPaymentLog.Payment
                 * @instance
                 */
                Payment.prototype.date = 0;

                /**
                 * Payment contactNumber.
                 * @member {string} contactNumber
                 * @memberof sys.protobuf.BanaCoinPaymentLog.Payment
                 * @instance
                 */
                Payment.prototype.contactNumber = "";

                /**
                 * Payment state.
                 * @member {sys.protobuf.BanaCoinPaymentState} state
                 * @memberof sys.protobuf.BanaCoinPaymentLog.Payment
                 * @instance
                 */
                Payment.prototype.state = 0;

                /**
                 * Payment cost.
                 * @member {number} cost
                 * @memberof sys.protobuf.BanaCoinPaymentLog.Payment
                 * @instance
                 */
                Payment.prototype.cost = 0;

                /**
                 * Payment accessCode.
                 * @member {string} accessCode
                 * @memberof sys.protobuf.BanaCoinPaymentLog.Payment
                 * @instance
                 */
                Payment.prototype.accessCode = "";

                /**
                 * Payment personId.
                 * @member {string} personId
                 * @memberof sys.protobuf.BanaCoinPaymentLog.Payment
                 * @instance
                 */
                Payment.prototype.personId = "";

                /**
                 * Creates a new Payment instance using the specified properties.
                 * @function create
                 * @memberof sys.protobuf.BanaCoinPaymentLog.Payment
                 * @static
                 * @param {sys.protobuf.BanaCoinPaymentLog.IPayment=} [properties] Properties to set
                 * @returns {sys.protobuf.BanaCoinPaymentLog.Payment} Payment instance
                 */
                Payment.create = function create(properties) {
                    return new Payment(properties);
                };

                /**
                 * Encodes the specified Payment message. Does not implicitly {@link sys.protobuf.BanaCoinPaymentLog.Payment.verify|verify} messages.
                 * @function encode
                 * @memberof sys.protobuf.BanaCoinPaymentLog.Payment
                 * @static
                 * @param {sys.protobuf.BanaCoinPaymentLog.IPayment} message Payment message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Payment.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.date);
                    if (message.contactNumber != null && Object.hasOwnProperty.call(message, "contactNumber"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.contactNumber);
                    writer.uint32(/* id 3, wireType 0 =*/24).int32(message.state);
                    if (message.cost != null && Object.hasOwnProperty.call(message, "cost"))
                        writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.cost);
                    writer.uint32(/* id 6, wireType 2 =*/50).string(message.accessCode);
                    writer.uint32(/* id 7, wireType 2 =*/58).string(message.personId);
                    return writer;
                };

                /**
                 * Encodes the specified Payment message, length delimited. Does not implicitly {@link sys.protobuf.BanaCoinPaymentLog.Payment.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof sys.protobuf.BanaCoinPaymentLog.Payment
                 * @static
                 * @param {sys.protobuf.BanaCoinPaymentLog.IPayment} message Payment message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Payment.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a Payment message from the specified reader or buffer.
                 * @function decode
                 * @memberof sys.protobuf.BanaCoinPaymentLog.Payment
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {sys.protobuf.BanaCoinPaymentLog.Payment} Payment
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Payment.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.sys.protobuf.BanaCoinPaymentLog.Payment();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.date = reader.uint32();
                                break;
                            }
                        case 2: {
                                message.contactNumber = reader.string();
                                break;
                            }
                        case 3: {
                                message.state = reader.int32();
                                break;
                            }
                        case 4: {
                                message.cost = reader.uint32();
                                break;
                            }
                        case 6: {
                                message.accessCode = reader.string();
                                break;
                            }
                        case 7: {
                                message.personId = reader.string();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    if (!message.hasOwnProperty("date"))
                        throw $util.ProtocolError("missing required 'date'", { instance: message });
                    if (!message.hasOwnProperty("state"))
                        throw $util.ProtocolError("missing required 'state'", { instance: message });
                    if (!message.hasOwnProperty("accessCode"))
                        throw $util.ProtocolError("missing required 'accessCode'", { instance: message });
                    if (!message.hasOwnProperty("personId"))
                        throw $util.ProtocolError("missing required 'personId'", { instance: message });
                    return message;
                };

                /**
                 * Decodes a Payment message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof sys.protobuf.BanaCoinPaymentLog.Payment
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {sys.protobuf.BanaCoinPaymentLog.Payment} Payment
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Payment.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a Payment message.
                 * @function verify
                 * @memberof sys.protobuf.BanaCoinPaymentLog.Payment
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Payment.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (!$util.isInteger(message.date))
                        return "date: integer expected";
                    if (message.contactNumber != null && message.hasOwnProperty("contactNumber"))
                        if (!$util.isString(message.contactNumber))
                            return "contactNumber: string expected";
                    switch (message.state) {
                    default:
                        return "state: enum value expected";
                    case 0:
                    case 1:
                    case 2:
                    case 3:
                    case 4:
                    case 5:
                    case 6:
                    case 99:
                        break;
                    }
                    if (message.cost != null && message.hasOwnProperty("cost"))
                        if (!$util.isInteger(message.cost))
                            return "cost: integer expected";
                    if (!$util.isString(message.accessCode))
                        return "accessCode: string expected";
                    if (!$util.isString(message.personId))
                        return "personId: string expected";
                    return null;
                };

                /**
                 * Creates a Payment message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof sys.protobuf.BanaCoinPaymentLog.Payment
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {sys.protobuf.BanaCoinPaymentLog.Payment} Payment
                 */
                Payment.fromObject = function fromObject(object) {
                    if (object instanceof $root.sys.protobuf.BanaCoinPaymentLog.Payment)
                        return object;
                    let message = new $root.sys.protobuf.BanaCoinPaymentLog.Payment();
                    if (object.date != null)
                        message.date = object.date >>> 0;
                    if (object.contactNumber != null)
                        message.contactNumber = String(object.contactNumber);
                    switch (object.state) {
                    default:
                        if (typeof object.state === "number") {
                            message.state = object.state;
                            break;
                        }
                        break;
                    case "BC_SUCCESS":
                    case 0:
                        message.state = 0;
                        break;
                    case "BC_SHORTAGE":
                    case 1:
                        message.state = 1;
                        break;
                    case "BC_BNID_MEMBER_ERROR":
                    case 2:
                        message.state = 2;
                        break;
                    case "BC_UNKNOWN_ERROR":
                    case 3:
                        message.state = 3;
                        break;
                    case "BC_BNID_SYSTEM_ERROR":
                    case 4:
                        message.state = 4;
                        break;
                    case "BC_BNID_VERIFY_ERROR":
                    case 5:
                        message.state = 5;
                        break;
                    case "BC_BNID_EXECUTE_ERROR":
                    case 6:
                        message.state = 6;
                        break;
                    case "BC_BNID_SERVER_UNAVAILABLE":
                    case 99:
                        message.state = 99;
                        break;
                    }
                    if (object.cost != null)
                        message.cost = object.cost >>> 0;
                    if (object.accessCode != null)
                        message.accessCode = String(object.accessCode);
                    if (object.personId != null)
                        message.personId = String(object.personId);
                    return message;
                };

                /**
                 * Creates a plain object from a Payment message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof sys.protobuf.BanaCoinPaymentLog.Payment
                 * @static
                 * @param {sys.protobuf.BanaCoinPaymentLog.Payment} message Payment
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Payment.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        object.date = 0;
                        object.contactNumber = "";
                        object.state = options.enums === String ? "BC_SUCCESS" : 0;
                        object.cost = 0;
                        object.accessCode = "";
                        object.personId = "";
                    }
                    if (message.date != null && message.hasOwnProperty("date"))
                        object.date = message.date;
                    if (message.contactNumber != null && message.hasOwnProperty("contactNumber"))
                        object.contactNumber = message.contactNumber;
                    if (message.state != null && message.hasOwnProperty("state"))
                        object.state = options.enums === String ? $root.sys.protobuf.BanaCoinPaymentState[message.state] === undefined ? message.state : $root.sys.protobuf.BanaCoinPaymentState[message.state] : message.state;
                    if (message.cost != null && message.hasOwnProperty("cost"))
                        object.cost = message.cost;
                    if (message.accessCode != null && message.hasOwnProperty("accessCode"))
                        object.accessCode = message.accessCode;
                    if (message.personId != null && message.hasOwnProperty("personId"))
                        object.personId = message.personId;
                    return object;
                };

                /**
                 * Converts this Payment to JSON.
                 * @function toJSON
                 * @memberof sys.protobuf.BanaCoinPaymentLog.Payment
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Payment.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                /**
                 * Gets the default type url for Payment
                 * @function getTypeUrl
                 * @memberof sys.protobuf.BanaCoinPaymentLog.Payment
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                Payment.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/sys.protobuf.BanaCoinPaymentLog.Payment";
                };

                return Payment;
            })();

            return BanaCoinPaymentLog;
        })();

        protobuf.Operation = (function() {

            /**
             * Properties of an Operation.
             * @memberof sys.protobuf
             * @interface IOperation
             * @property {number|null} [authorizationAt] Operation authorizationAt
             * @property {wm.protobuf.IGameFeatureVersion|null} [featureVersion] Operation featureVersion
             */

            /**
             * Constructs a new Operation.
             * @memberof sys.protobuf
             * @classdesc Represents an Operation.
             * @implements IOperation
             * @constructor
             * @param {sys.protobuf.IOperation=} [properties] Properties to set
             */
            function Operation(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Operation authorizationAt.
             * @member {number} authorizationAt
             * @memberof sys.protobuf.Operation
             * @instance
             */
            Operation.prototype.authorizationAt = 0;

            /**
             * Operation featureVersion.
             * @member {wm.protobuf.IGameFeatureVersion|null|undefined} featureVersion
             * @memberof sys.protobuf.Operation
             * @instance
             */
            Operation.prototype.featureVersion = null;

            /**
             * Creates a new Operation instance using the specified properties.
             * @function create
             * @memberof sys.protobuf.Operation
             * @static
             * @param {sys.protobuf.IOperation=} [properties] Properties to set
             * @returns {sys.protobuf.Operation} Operation instance
             */
            Operation.create = function create(properties) {
                return new Operation(properties);
            };

            /**
             * Encodes the specified Operation message. Does not implicitly {@link sys.protobuf.Operation.verify|verify} messages.
             * @function encode
             * @memberof sys.protobuf.Operation
             * @static
             * @param {sys.protobuf.IOperation} message Operation message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Operation.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.authorizationAt != null && Object.hasOwnProperty.call(message, "authorizationAt"))
                    writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.authorizationAt);
                if (message.featureVersion != null && Object.hasOwnProperty.call(message, "featureVersion"))
                    $root.wm.protobuf.GameFeatureVersion.encode(message.featureVersion, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified Operation message, length delimited. Does not implicitly {@link sys.protobuf.Operation.verify|verify} messages.
             * @function encodeDelimited
             * @memberof sys.protobuf.Operation
             * @static
             * @param {sys.protobuf.IOperation} message Operation message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Operation.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an Operation message from the specified reader or buffer.
             * @function decode
             * @memberof sys.protobuf.Operation
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {sys.protobuf.Operation} Operation
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Operation.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.sys.protobuf.Operation();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.authorizationAt = reader.uint32();
                            break;
                        }
                    case 2: {
                            message.featureVersion = $root.wm.protobuf.GameFeatureVersion.decode(reader, reader.uint32());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an Operation message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof sys.protobuf.Operation
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {sys.protobuf.Operation} Operation
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Operation.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an Operation message.
             * @function verify
             * @memberof sys.protobuf.Operation
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Operation.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.authorizationAt != null && message.hasOwnProperty("authorizationAt"))
                    if (!$util.isInteger(message.authorizationAt))
                        return "authorizationAt: integer expected";
                if (message.featureVersion != null && message.hasOwnProperty("featureVersion")) {
                    let error = $root.wm.protobuf.GameFeatureVersion.verify(message.featureVersion);
                    if (error)
                        return "featureVersion." + error;
                }
                return null;
            };

            /**
             * Creates an Operation message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof sys.protobuf.Operation
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {sys.protobuf.Operation} Operation
             */
            Operation.fromObject = function fromObject(object) {
                if (object instanceof $root.sys.protobuf.Operation)
                    return object;
                let message = new $root.sys.protobuf.Operation();
                if (object.authorizationAt != null)
                    message.authorizationAt = object.authorizationAt >>> 0;
                if (object.featureVersion != null) {
                    if (typeof object.featureVersion !== "object")
                        throw TypeError(".sys.protobuf.Operation.featureVersion: object expected");
                    message.featureVersion = $root.wm.protobuf.GameFeatureVersion.fromObject(object.featureVersion);
                }
                return message;
            };

            /**
             * Creates a plain object from an Operation message. Also converts values to other types if specified.
             * @function toObject
             * @memberof sys.protobuf.Operation
             * @static
             * @param {sys.protobuf.Operation} message Operation
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Operation.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.authorizationAt = 0;
                    object.featureVersion = null;
                }
                if (message.authorizationAt != null && message.hasOwnProperty("authorizationAt"))
                    object.authorizationAt = message.authorizationAt;
                if (message.featureVersion != null && message.hasOwnProperty("featureVersion"))
                    object.featureVersion = $root.wm.protobuf.GameFeatureVersion.toObject(message.featureVersion, options);
                return object;
            };

            /**
             * Converts this Operation to JSON.
             * @function toJSON
             * @memberof sys.protobuf.Operation
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Operation.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for Operation
             * @function getTypeUrl
             * @memberof sys.protobuf.Operation
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            Operation.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/sys.protobuf.Operation";
            };

            return Operation;
        })();

        protobuf.PreviousPlaceID = (function() {

            /**
             * Properties of a PreviousPlaceID.
             * @memberof sys.protobuf
             * @interface IPreviousPlaceID
             * @property {string|null} [placeId] PreviousPlaceID placeId
             * @property {number|null} [updateAt] PreviousPlaceID updateAt
             */

            /**
             * Constructs a new PreviousPlaceID.
             * @memberof sys.protobuf
             * @classdesc Represents a PreviousPlaceID.
             * @implements IPreviousPlaceID
             * @constructor
             * @param {sys.protobuf.IPreviousPlaceID=} [properties] Properties to set
             */
            function PreviousPlaceID(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * PreviousPlaceID placeId.
             * @member {string} placeId
             * @memberof sys.protobuf.PreviousPlaceID
             * @instance
             */
            PreviousPlaceID.prototype.placeId = "";

            /**
             * PreviousPlaceID updateAt.
             * @member {number} updateAt
             * @memberof sys.protobuf.PreviousPlaceID
             * @instance
             */
            PreviousPlaceID.prototype.updateAt = 0;

            /**
             * Creates a new PreviousPlaceID instance using the specified properties.
             * @function create
             * @memberof sys.protobuf.PreviousPlaceID
             * @static
             * @param {sys.protobuf.IPreviousPlaceID=} [properties] Properties to set
             * @returns {sys.protobuf.PreviousPlaceID} PreviousPlaceID instance
             */
            PreviousPlaceID.create = function create(properties) {
                return new PreviousPlaceID(properties);
            };

            /**
             * Encodes the specified PreviousPlaceID message. Does not implicitly {@link sys.protobuf.PreviousPlaceID.verify|verify} messages.
             * @function encode
             * @memberof sys.protobuf.PreviousPlaceID
             * @static
             * @param {sys.protobuf.IPreviousPlaceID} message PreviousPlaceID message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PreviousPlaceID.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.placeId != null && Object.hasOwnProperty.call(message, "placeId"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.placeId);
                if (message.updateAt != null && Object.hasOwnProperty.call(message, "updateAt"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.updateAt);
                return writer;
            };

            /**
             * Encodes the specified PreviousPlaceID message, length delimited. Does not implicitly {@link sys.protobuf.PreviousPlaceID.verify|verify} messages.
             * @function encodeDelimited
             * @memberof sys.protobuf.PreviousPlaceID
             * @static
             * @param {sys.protobuf.IPreviousPlaceID} message PreviousPlaceID message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PreviousPlaceID.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a PreviousPlaceID message from the specified reader or buffer.
             * @function decode
             * @memberof sys.protobuf.PreviousPlaceID
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {sys.protobuf.PreviousPlaceID} PreviousPlaceID
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PreviousPlaceID.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.sys.protobuf.PreviousPlaceID();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.placeId = reader.string();
                            break;
                        }
                    case 2: {
                            message.updateAt = reader.uint32();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a PreviousPlaceID message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof sys.protobuf.PreviousPlaceID
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {sys.protobuf.PreviousPlaceID} PreviousPlaceID
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PreviousPlaceID.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a PreviousPlaceID message.
             * @function verify
             * @memberof sys.protobuf.PreviousPlaceID
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            PreviousPlaceID.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.placeId != null && message.hasOwnProperty("placeId"))
                    if (!$util.isString(message.placeId))
                        return "placeId: string expected";
                if (message.updateAt != null && message.hasOwnProperty("updateAt"))
                    if (!$util.isInteger(message.updateAt))
                        return "updateAt: integer expected";
                return null;
            };

            /**
             * Creates a PreviousPlaceID message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof sys.protobuf.PreviousPlaceID
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {sys.protobuf.PreviousPlaceID} PreviousPlaceID
             */
            PreviousPlaceID.fromObject = function fromObject(object) {
                if (object instanceof $root.sys.protobuf.PreviousPlaceID)
                    return object;
                let message = new $root.sys.protobuf.PreviousPlaceID();
                if (object.placeId != null)
                    message.placeId = String(object.placeId);
                if (object.updateAt != null)
                    message.updateAt = object.updateAt >>> 0;
                return message;
            };

            /**
             * Creates a plain object from a PreviousPlaceID message. Also converts values to other types if specified.
             * @function toObject
             * @memberof sys.protobuf.PreviousPlaceID
             * @static
             * @param {sys.protobuf.PreviousPlaceID} message PreviousPlaceID
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            PreviousPlaceID.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.placeId = "";
                    object.updateAt = 0;
                }
                if (message.placeId != null && message.hasOwnProperty("placeId"))
                    object.placeId = message.placeId;
                if (message.updateAt != null && message.hasOwnProperty("updateAt"))
                    object.updateAt = message.updateAt;
                return object;
            };

            /**
             * Converts this PreviousPlaceID to JSON.
             * @function toJSON
             * @memberof sys.protobuf.PreviousPlaceID
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            PreviousPlaceID.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for PreviousPlaceID
             * @function getTypeUrl
             * @memberof sys.protobuf.PreviousPlaceID
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            PreviousPlaceID.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/sys.protobuf.PreviousPlaceID";
            };

            return PreviousPlaceID;
        })();

        protobuf.Status = (function() {

            /**
             * Properties of a Status.
             * @memberof sys.protobuf
             * @interface IStatus
             * @property {sys.protobuf.State} state Status state
             * @property {string|null} [name] Status name
             * @property {number|null} [address] Status address
             * @property {number|null} [value] Status value
             * @property {number|null} [value2] Status value2
             */

            /**
             * Constructs a new Status.
             * @memberof sys.protobuf
             * @classdesc Represents a Status.
             * @implements IStatus
             * @constructor
             * @param {sys.protobuf.IStatus=} [properties] Properties to set
             */
            function Status(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Status state.
             * @member {sys.protobuf.State} state
             * @memberof sys.protobuf.Status
             * @instance
             */
            Status.prototype.state = 0;

            /**
             * Status name.
             * @member {string} name
             * @memberof sys.protobuf.Status
             * @instance
             */
            Status.prototype.name = "";

            /**
             * Status address.
             * @member {number} address
             * @memberof sys.protobuf.Status
             * @instance
             */
            Status.prototype.address = 0;

            /**
             * Status value.
             * @member {number} value
             * @memberof sys.protobuf.Status
             * @instance
             */
            Status.prototype.value = 0;

            /**
             * Status value2.
             * @member {number} value2
             * @memberof sys.protobuf.Status
             * @instance
             */
            Status.prototype.value2 = 0;

            /**
             * Creates a new Status instance using the specified properties.
             * @function create
             * @memberof sys.protobuf.Status
             * @static
             * @param {sys.protobuf.IStatus=} [properties] Properties to set
             * @returns {sys.protobuf.Status} Status instance
             */
            Status.create = function create(properties) {
                return new Status(properties);
            };

            /**
             * Encodes the specified Status message. Does not implicitly {@link sys.protobuf.Status.verify|verify} messages.
             * @function encode
             * @memberof sys.protobuf.Status
             * @static
             * @param {sys.protobuf.IStatus} message Status message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Status.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.state);
                if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.name);
                if (message.address != null && Object.hasOwnProperty.call(message, "address"))
                    writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.address);
                if (message.value != null && Object.hasOwnProperty.call(message, "value"))
                    writer.uint32(/* id 4, wireType 0 =*/32).int32(message.value);
                if (message.value2 != null && Object.hasOwnProperty.call(message, "value2"))
                    writer.uint32(/* id 5, wireType 0 =*/40).int32(message.value2);
                return writer;
            };

            /**
             * Encodes the specified Status message, length delimited. Does not implicitly {@link sys.protobuf.Status.verify|verify} messages.
             * @function encodeDelimited
             * @memberof sys.protobuf.Status
             * @static
             * @param {sys.protobuf.IStatus} message Status message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Status.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a Status message from the specified reader or buffer.
             * @function decode
             * @memberof sys.protobuf.Status
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {sys.protobuf.Status} Status
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Status.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.sys.protobuf.Status();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.state = reader.int32();
                            break;
                        }
                    case 2: {
                            message.name = reader.string();
                            break;
                        }
                    case 3: {
                            message.address = reader.uint32();
                            break;
                        }
                    case 4: {
                            message.value = reader.int32();
                            break;
                        }
                    case 5: {
                            message.value2 = reader.int32();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("state"))
                    throw $util.ProtocolError("missing required 'state'", { instance: message });
                return message;
            };

            /**
             * Decodes a Status message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof sys.protobuf.Status
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {sys.protobuf.Status} Status
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Status.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a Status message.
             * @function verify
             * @memberof sys.protobuf.Status
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Status.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                switch (message.state) {
                default:
                    return "state: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                    break;
                }
                if (message.name != null && message.hasOwnProperty("name"))
                    if (!$util.isString(message.name))
                        return "name: string expected";
                if (message.address != null && message.hasOwnProperty("address"))
                    if (!$util.isInteger(message.address))
                        return "address: integer expected";
                if (message.value != null && message.hasOwnProperty("value"))
                    if (!$util.isInteger(message.value))
                        return "value: integer expected";
                if (message.value2 != null && message.hasOwnProperty("value2"))
                    if (!$util.isInteger(message.value2))
                        return "value2: integer expected";
                return null;
            };

            /**
             * Creates a Status message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof sys.protobuf.Status
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {sys.protobuf.Status} Status
             */
            Status.fromObject = function fromObject(object) {
                if (object instanceof $root.sys.protobuf.Status)
                    return object;
                let message = new $root.sys.protobuf.Status();
                switch (object.state) {
                default:
                    if (typeof object.state === "number") {
                        message.state = object.state;
                        break;
                    }
                    break;
                case "State_None":
                case 0:
                    message.state = 0;
                    break;
                case "State_Checking":
                case 1:
                    message.state = 1;
                    break;
                case "State_NG":
                case 2:
                    message.state = 2;
                    break;
                case "State_OK":
                case 3:
                    message.state = 3;
                    break;
                }
                if (object.name != null)
                    message.name = String(object.name);
                if (object.address != null)
                    message.address = object.address >>> 0;
                if (object.value != null)
                    message.value = object.value | 0;
                if (object.value2 != null)
                    message.value2 = object.value2 | 0;
                return message;
            };

            /**
             * Creates a plain object from a Status message. Also converts values to other types if specified.
             * @function toObject
             * @memberof sys.protobuf.Status
             * @static
             * @param {sys.protobuf.Status} message Status
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Status.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.state = options.enums === String ? "State_None" : 0;
                    object.name = "";
                    object.address = 0;
                    object.value = 0;
                    object.value2 = 0;
                }
                if (message.state != null && message.hasOwnProperty("state"))
                    object.state = options.enums === String ? $root.sys.protobuf.State[message.state] === undefined ? message.state : $root.sys.protobuf.State[message.state] : message.state;
                if (message.name != null && message.hasOwnProperty("name"))
                    object.name = message.name;
                if (message.address != null && message.hasOwnProperty("address"))
                    object.address = message.address;
                if (message.value != null && message.hasOwnProperty("value"))
                    object.value = message.value;
                if (message.value2 != null && message.hasOwnProperty("value2"))
                    object.value2 = message.value2;
                return object;
            };

            /**
             * Converts this Status to JSON.
             * @function toJSON
             * @memberof sys.protobuf.Status
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Status.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for Status
             * @function getTypeUrl
             * @memberof sys.protobuf.Status
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            Status.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/sys.protobuf.Status";
            };

            return Status;
        })();

        protobuf.Command = (function() {

            /**
             * Properties of a Command.
             * @memberof sys.protobuf
             * @interface ICommand
             * @property {number|null} [sequence] Command sequence
             * @property {string|null} [ntp] Command ntp
             * @property {string|null} [checkCable] Command checkCable
             * @property {string|null} [renewDhcp] Command renewDhcp
             * @property {number|null} [setDate] Command setDate
             * @property {string|null} [syncDate] Command syncDate
             * @property {Array.<number>|null} [ping] Command ping
             * @property {number|null} [traceRoute] Command traceRoute
             * @property {string|null} [checkPacket] Command checkPacket
             * @property {string|null} [reboot] Command reboot
             * @property {string|null} [checkPkg] Command checkPkg
             */

            /**
             * Constructs a new Command.
             * @memberof sys.protobuf
             * @classdesc Represents a Command.
             * @implements ICommand
             * @constructor
             * @param {sys.protobuf.ICommand=} [properties] Properties to set
             */
            function Command(properties) {
                this.ping = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Command sequence.
             * @member {number} sequence
             * @memberof sys.protobuf.Command
             * @instance
             */
            Command.prototype.sequence = 0;

            /**
             * Command ntp.
             * @member {string} ntp
             * @memberof sys.protobuf.Command
             * @instance
             */
            Command.prototype.ntp = "";

            /**
             * Command checkCable.
             * @member {string} checkCable
             * @memberof sys.protobuf.Command
             * @instance
             */
            Command.prototype.checkCable = "";

            /**
             * Command renewDhcp.
             * @member {string} renewDhcp
             * @memberof sys.protobuf.Command
             * @instance
             */
            Command.prototype.renewDhcp = "";

            /**
             * Command setDate.
             * @member {number} setDate
             * @memberof sys.protobuf.Command
             * @instance
             */
            Command.prototype.setDate = 0;

            /**
             * Command syncDate.
             * @member {string} syncDate
             * @memberof sys.protobuf.Command
             * @instance
             */
            Command.prototype.syncDate = "";

            /**
             * Command ping.
             * @member {Array.<number>} ping
             * @memberof sys.protobuf.Command
             * @instance
             */
            Command.prototype.ping = $util.emptyArray;

            /**
             * Command traceRoute.
             * @member {number} traceRoute
             * @memberof sys.protobuf.Command
             * @instance
             */
            Command.prototype.traceRoute = 0;

            /**
             * Command checkPacket.
             * @member {string} checkPacket
             * @memberof sys.protobuf.Command
             * @instance
             */
            Command.prototype.checkPacket = "";

            /**
             * Command reboot.
             * @member {string} reboot
             * @memberof sys.protobuf.Command
             * @instance
             */
            Command.prototype.reboot = "";

            /**
             * Command checkPkg.
             * @member {string} checkPkg
             * @memberof sys.protobuf.Command
             * @instance
             */
            Command.prototype.checkPkg = "";

            /**
             * Creates a new Command instance using the specified properties.
             * @function create
             * @memberof sys.protobuf.Command
             * @static
             * @param {sys.protobuf.ICommand=} [properties] Properties to set
             * @returns {sys.protobuf.Command} Command instance
             */
            Command.create = function create(properties) {
                return new Command(properties);
            };

            /**
             * Encodes the specified Command message. Does not implicitly {@link sys.protobuf.Command.verify|verify} messages.
             * @function encode
             * @memberof sys.protobuf.Command
             * @static
             * @param {sys.protobuf.ICommand} message Command message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Command.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.sequence != null && Object.hasOwnProperty.call(message, "sequence"))
                    writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.sequence);
                if (message.ntp != null && Object.hasOwnProperty.call(message, "ntp"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.ntp);
                if (message.checkCable != null && Object.hasOwnProperty.call(message, "checkCable"))
                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.checkCable);
                if (message.renewDhcp != null && Object.hasOwnProperty.call(message, "renewDhcp"))
                    writer.uint32(/* id 4, wireType 2 =*/34).string(message.renewDhcp);
                if (message.setDate != null && Object.hasOwnProperty.call(message, "setDate"))
                    writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.setDate);
                if (message.syncDate != null && Object.hasOwnProperty.call(message, "syncDate"))
                    writer.uint32(/* id 6, wireType 2 =*/50).string(message.syncDate);
                if (message.ping != null && message.ping.length)
                    for (let i = 0; i < message.ping.length; ++i)
                        writer.uint32(/* id 7, wireType 0 =*/56).uint32(message.ping[i]);
                if (message.traceRoute != null && Object.hasOwnProperty.call(message, "traceRoute"))
                    writer.uint32(/* id 8, wireType 0 =*/64).uint32(message.traceRoute);
                if (message.checkPacket != null && Object.hasOwnProperty.call(message, "checkPacket"))
                    writer.uint32(/* id 9, wireType 2 =*/74).string(message.checkPacket);
                if (message.reboot != null && Object.hasOwnProperty.call(message, "reboot"))
                    writer.uint32(/* id 10, wireType 2 =*/82).string(message.reboot);
                if (message.checkPkg != null && Object.hasOwnProperty.call(message, "checkPkg"))
                    writer.uint32(/* id 11, wireType 2 =*/90).string(message.checkPkg);
                return writer;
            };

            /**
             * Encodes the specified Command message, length delimited. Does not implicitly {@link sys.protobuf.Command.verify|verify} messages.
             * @function encodeDelimited
             * @memberof sys.protobuf.Command
             * @static
             * @param {sys.protobuf.ICommand} message Command message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Command.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a Command message from the specified reader or buffer.
             * @function decode
             * @memberof sys.protobuf.Command
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {sys.protobuf.Command} Command
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Command.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.sys.protobuf.Command();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.sequence = reader.uint32();
                            break;
                        }
                    case 2: {
                            message.ntp = reader.string();
                            break;
                        }
                    case 3: {
                            message.checkCable = reader.string();
                            break;
                        }
                    case 4: {
                            message.renewDhcp = reader.string();
                            break;
                        }
                    case 5: {
                            message.setDate = reader.uint32();
                            break;
                        }
                    case 6: {
                            message.syncDate = reader.string();
                            break;
                        }
                    case 7: {
                            if (!(message.ping && message.ping.length))
                                message.ping = [];
                            if ((tag & 7) === 2) {
                                let end2 = reader.uint32() + reader.pos;
                                while (reader.pos < end2)
                                    message.ping.push(reader.uint32());
                            } else
                                message.ping.push(reader.uint32());
                            break;
                        }
                    case 8: {
                            message.traceRoute = reader.uint32();
                            break;
                        }
                    case 9: {
                            message.checkPacket = reader.string();
                            break;
                        }
                    case 10: {
                            message.reboot = reader.string();
                            break;
                        }
                    case 11: {
                            message.checkPkg = reader.string();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a Command message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof sys.protobuf.Command
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {sys.protobuf.Command} Command
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Command.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a Command message.
             * @function verify
             * @memberof sys.protobuf.Command
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Command.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.sequence != null && message.hasOwnProperty("sequence"))
                    if (!$util.isInteger(message.sequence))
                        return "sequence: integer expected";
                if (message.ntp != null && message.hasOwnProperty("ntp"))
                    if (!$util.isString(message.ntp))
                        return "ntp: string expected";
                if (message.checkCable != null && message.hasOwnProperty("checkCable"))
                    if (!$util.isString(message.checkCable))
                        return "checkCable: string expected";
                if (message.renewDhcp != null && message.hasOwnProperty("renewDhcp"))
                    if (!$util.isString(message.renewDhcp))
                        return "renewDhcp: string expected";
                if (message.setDate != null && message.hasOwnProperty("setDate"))
                    if (!$util.isInteger(message.setDate))
                        return "setDate: integer expected";
                if (message.syncDate != null && message.hasOwnProperty("syncDate"))
                    if (!$util.isString(message.syncDate))
                        return "syncDate: string expected";
                if (message.ping != null && message.hasOwnProperty("ping")) {
                    if (!Array.isArray(message.ping))
                        return "ping: array expected";
                    for (let i = 0; i < message.ping.length; ++i)
                        if (!$util.isInteger(message.ping[i]))
                            return "ping: integer[] expected";
                }
                if (message.traceRoute != null && message.hasOwnProperty("traceRoute"))
                    if (!$util.isInteger(message.traceRoute))
                        return "traceRoute: integer expected";
                if (message.checkPacket != null && message.hasOwnProperty("checkPacket"))
                    if (!$util.isString(message.checkPacket))
                        return "checkPacket: string expected";
                if (message.reboot != null && message.hasOwnProperty("reboot"))
                    if (!$util.isString(message.reboot))
                        return "reboot: string expected";
                if (message.checkPkg != null && message.hasOwnProperty("checkPkg"))
                    if (!$util.isString(message.checkPkg))
                        return "checkPkg: string expected";
                return null;
            };

            /**
             * Creates a Command message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof sys.protobuf.Command
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {sys.protobuf.Command} Command
             */
            Command.fromObject = function fromObject(object) {
                if (object instanceof $root.sys.protobuf.Command)
                    return object;
                let message = new $root.sys.protobuf.Command();
                if (object.sequence != null)
                    message.sequence = object.sequence >>> 0;
                if (object.ntp != null)
                    message.ntp = String(object.ntp);
                if (object.checkCable != null)
                    message.checkCable = String(object.checkCable);
                if (object.renewDhcp != null)
                    message.renewDhcp = String(object.renewDhcp);
                if (object.setDate != null)
                    message.setDate = object.setDate >>> 0;
                if (object.syncDate != null)
                    message.syncDate = String(object.syncDate);
                if (object.ping) {
                    if (!Array.isArray(object.ping))
                        throw TypeError(".sys.protobuf.Command.ping: array expected");
                    message.ping = [];
                    for (let i = 0; i < object.ping.length; ++i)
                        message.ping[i] = object.ping[i] >>> 0;
                }
                if (object.traceRoute != null)
                    message.traceRoute = object.traceRoute >>> 0;
                if (object.checkPacket != null)
                    message.checkPacket = String(object.checkPacket);
                if (object.reboot != null)
                    message.reboot = String(object.reboot);
                if (object.checkPkg != null)
                    message.checkPkg = String(object.checkPkg);
                return message;
            };

            /**
             * Creates a plain object from a Command message. Also converts values to other types if specified.
             * @function toObject
             * @memberof sys.protobuf.Command
             * @static
             * @param {sys.protobuf.Command} message Command
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Command.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.ping = [];
                if (options.defaults) {
                    object.sequence = 0;
                    object.ntp = "";
                    object.checkCable = "";
                    object.renewDhcp = "";
                    object.setDate = 0;
                    object.syncDate = "";
                    object.traceRoute = 0;
                    object.checkPacket = "";
                    object.reboot = "";
                    object.checkPkg = "";
                }
                if (message.sequence != null && message.hasOwnProperty("sequence"))
                    object.sequence = message.sequence;
                if (message.ntp != null && message.hasOwnProperty("ntp"))
                    object.ntp = message.ntp;
                if (message.checkCable != null && message.hasOwnProperty("checkCable"))
                    object.checkCable = message.checkCable;
                if (message.renewDhcp != null && message.hasOwnProperty("renewDhcp"))
                    object.renewDhcp = message.renewDhcp;
                if (message.setDate != null && message.hasOwnProperty("setDate"))
                    object.setDate = message.setDate;
                if (message.syncDate != null && message.hasOwnProperty("syncDate"))
                    object.syncDate = message.syncDate;
                if (message.ping && message.ping.length) {
                    object.ping = [];
                    for (let j = 0; j < message.ping.length; ++j)
                        object.ping[j] = message.ping[j];
                }
                if (message.traceRoute != null && message.hasOwnProperty("traceRoute"))
                    object.traceRoute = message.traceRoute;
                if (message.checkPacket != null && message.hasOwnProperty("checkPacket"))
                    object.checkPacket = message.checkPacket;
                if (message.reboot != null && message.hasOwnProperty("reboot"))
                    object.reboot = message.reboot;
                if (message.checkPkg != null && message.hasOwnProperty("checkPkg"))
                    object.checkPkg = message.checkPkg;
                return object;
            };

            /**
             * Converts this Command to JSON.
             * @function toJSON
             * @memberof sys.protobuf.Command
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Command.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for Command
             * @function getTypeUrl
             * @memberof sys.protobuf.Command
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            Command.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/sys.protobuf.Command";
            };

            return Command;
        })();

        protobuf.Reply = (function() {

            /**
             * Properties of a Reply.
             * @memberof sys.protobuf
             * @interface IReply
             * @property {number|null} [sequence] Reply sequence
             * @property {sys.protobuf.IStatus|null} [ntp] Reply ntp
             * @property {sys.protobuf.IStatus|null} [checkCable] Reply checkCable
             * @property {sys.protobuf.IStatus|null} [renewDhcp] Reply renewDhcp
             * @property {sys.protobuf.IStatus|null} [setDate] Reply setDate
             * @property {sys.protobuf.IStatus|null} [syncDate] Reply syncDate
             * @property {Array.<sys.protobuf.IStatus>|null} [ping] Reply ping
             * @property {sys.protobuf.IStatus|null} [traceRoute] Reply traceRoute
             * @property {sys.protobuf.IStatus|null} [checkPacket] Reply checkPacket
             * @property {sys.protobuf.IStatus|null} [reboot] Reply reboot
             * @property {sys.protobuf.IStatus|null} [checkPkg] Reply checkPkg
             */

            /**
             * Constructs a new Reply.
             * @memberof sys.protobuf
             * @classdesc Represents a Reply.
             * @implements IReply
             * @constructor
             * @param {sys.protobuf.IReply=} [properties] Properties to set
             */
            function Reply(properties) {
                this.ping = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Reply sequence.
             * @member {number} sequence
             * @memberof sys.protobuf.Reply
             * @instance
             */
            Reply.prototype.sequence = 0;

            /**
             * Reply ntp.
             * @member {sys.protobuf.IStatus|null|undefined} ntp
             * @memberof sys.protobuf.Reply
             * @instance
             */
            Reply.prototype.ntp = null;

            /**
             * Reply checkCable.
             * @member {sys.protobuf.IStatus|null|undefined} checkCable
             * @memberof sys.protobuf.Reply
             * @instance
             */
            Reply.prototype.checkCable = null;

            /**
             * Reply renewDhcp.
             * @member {sys.protobuf.IStatus|null|undefined} renewDhcp
             * @memberof sys.protobuf.Reply
             * @instance
             */
            Reply.prototype.renewDhcp = null;

            /**
             * Reply setDate.
             * @member {sys.protobuf.IStatus|null|undefined} setDate
             * @memberof sys.protobuf.Reply
             * @instance
             */
            Reply.prototype.setDate = null;

            /**
             * Reply syncDate.
             * @member {sys.protobuf.IStatus|null|undefined} syncDate
             * @memberof sys.protobuf.Reply
             * @instance
             */
            Reply.prototype.syncDate = null;

            /**
             * Reply ping.
             * @member {Array.<sys.protobuf.IStatus>} ping
             * @memberof sys.protobuf.Reply
             * @instance
             */
            Reply.prototype.ping = $util.emptyArray;

            /**
             * Reply traceRoute.
             * @member {sys.protobuf.IStatus|null|undefined} traceRoute
             * @memberof sys.protobuf.Reply
             * @instance
             */
            Reply.prototype.traceRoute = null;

            /**
             * Reply checkPacket.
             * @member {sys.protobuf.IStatus|null|undefined} checkPacket
             * @memberof sys.protobuf.Reply
             * @instance
             */
            Reply.prototype.checkPacket = null;

            /**
             * Reply reboot.
             * @member {sys.protobuf.IStatus|null|undefined} reboot
             * @memberof sys.protobuf.Reply
             * @instance
             */
            Reply.prototype.reboot = null;

            /**
             * Reply checkPkg.
             * @member {sys.protobuf.IStatus|null|undefined} checkPkg
             * @memberof sys.protobuf.Reply
             * @instance
             */
            Reply.prototype.checkPkg = null;

            /**
             * Creates a new Reply instance using the specified properties.
             * @function create
             * @memberof sys.protobuf.Reply
             * @static
             * @param {sys.protobuf.IReply=} [properties] Properties to set
             * @returns {sys.protobuf.Reply} Reply instance
             */
            Reply.create = function create(properties) {
                return new Reply(properties);
            };

            /**
             * Encodes the specified Reply message. Does not implicitly {@link sys.protobuf.Reply.verify|verify} messages.
             * @function encode
             * @memberof sys.protobuf.Reply
             * @static
             * @param {sys.protobuf.IReply} message Reply message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Reply.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.sequence != null && Object.hasOwnProperty.call(message, "sequence"))
                    writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.sequence);
                if (message.ntp != null && Object.hasOwnProperty.call(message, "ntp"))
                    $root.sys.protobuf.Status.encode(message.ntp, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                if (message.checkCable != null && Object.hasOwnProperty.call(message, "checkCable"))
                    $root.sys.protobuf.Status.encode(message.checkCable, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                if (message.renewDhcp != null && Object.hasOwnProperty.call(message, "renewDhcp"))
                    $root.sys.protobuf.Status.encode(message.renewDhcp, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                if (message.setDate != null && Object.hasOwnProperty.call(message, "setDate"))
                    $root.sys.protobuf.Status.encode(message.setDate, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                if (message.syncDate != null && Object.hasOwnProperty.call(message, "syncDate"))
                    $root.sys.protobuf.Status.encode(message.syncDate, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                if (message.ping != null && message.ping.length)
                    for (let i = 0; i < message.ping.length; ++i)
                        $root.sys.protobuf.Status.encode(message.ping[i], writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                if (message.traceRoute != null && Object.hasOwnProperty.call(message, "traceRoute"))
                    $root.sys.protobuf.Status.encode(message.traceRoute, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                if (message.checkPacket != null && Object.hasOwnProperty.call(message, "checkPacket"))
                    $root.sys.protobuf.Status.encode(message.checkPacket, writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();
                if (message.reboot != null && Object.hasOwnProperty.call(message, "reboot"))
                    $root.sys.protobuf.Status.encode(message.reboot, writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();
                if (message.checkPkg != null && Object.hasOwnProperty.call(message, "checkPkg"))
                    $root.sys.protobuf.Status.encode(message.checkPkg, writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified Reply message, length delimited. Does not implicitly {@link sys.protobuf.Reply.verify|verify} messages.
             * @function encodeDelimited
             * @memberof sys.protobuf.Reply
             * @static
             * @param {sys.protobuf.IReply} message Reply message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Reply.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a Reply message from the specified reader or buffer.
             * @function decode
             * @memberof sys.protobuf.Reply
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {sys.protobuf.Reply} Reply
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Reply.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.sys.protobuf.Reply();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.sequence = reader.uint32();
                            break;
                        }
                    case 2: {
                            message.ntp = $root.sys.protobuf.Status.decode(reader, reader.uint32());
                            break;
                        }
                    case 3: {
                            message.checkCable = $root.sys.protobuf.Status.decode(reader, reader.uint32());
                            break;
                        }
                    case 4: {
                            message.renewDhcp = $root.sys.protobuf.Status.decode(reader, reader.uint32());
                            break;
                        }
                    case 5: {
                            message.setDate = $root.sys.protobuf.Status.decode(reader, reader.uint32());
                            break;
                        }
                    case 6: {
                            message.syncDate = $root.sys.protobuf.Status.decode(reader, reader.uint32());
                            break;
                        }
                    case 7: {
                            if (!(message.ping && message.ping.length))
                                message.ping = [];
                            message.ping.push($root.sys.protobuf.Status.decode(reader, reader.uint32()));
                            break;
                        }
                    case 8: {
                            message.traceRoute = $root.sys.protobuf.Status.decode(reader, reader.uint32());
                            break;
                        }
                    case 9: {
                            message.checkPacket = $root.sys.protobuf.Status.decode(reader, reader.uint32());
                            break;
                        }
                    case 10: {
                            message.reboot = $root.sys.protobuf.Status.decode(reader, reader.uint32());
                            break;
                        }
                    case 11: {
                            message.checkPkg = $root.sys.protobuf.Status.decode(reader, reader.uint32());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a Reply message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof sys.protobuf.Reply
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {sys.protobuf.Reply} Reply
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Reply.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a Reply message.
             * @function verify
             * @memberof sys.protobuf.Reply
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Reply.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.sequence != null && message.hasOwnProperty("sequence"))
                    if (!$util.isInteger(message.sequence))
                        return "sequence: integer expected";
                if (message.ntp != null && message.hasOwnProperty("ntp")) {
                    let error = $root.sys.protobuf.Status.verify(message.ntp);
                    if (error)
                        return "ntp." + error;
                }
                if (message.checkCable != null && message.hasOwnProperty("checkCable")) {
                    let error = $root.sys.protobuf.Status.verify(message.checkCable);
                    if (error)
                        return "checkCable." + error;
                }
                if (message.renewDhcp != null && message.hasOwnProperty("renewDhcp")) {
                    let error = $root.sys.protobuf.Status.verify(message.renewDhcp);
                    if (error)
                        return "renewDhcp." + error;
                }
                if (message.setDate != null && message.hasOwnProperty("setDate")) {
                    let error = $root.sys.protobuf.Status.verify(message.setDate);
                    if (error)
                        return "setDate." + error;
                }
                if (message.syncDate != null && message.hasOwnProperty("syncDate")) {
                    let error = $root.sys.protobuf.Status.verify(message.syncDate);
                    if (error)
                        return "syncDate." + error;
                }
                if (message.ping != null && message.hasOwnProperty("ping")) {
                    if (!Array.isArray(message.ping))
                        return "ping: array expected";
                    for (let i = 0; i < message.ping.length; ++i) {
                        let error = $root.sys.protobuf.Status.verify(message.ping[i]);
                        if (error)
                            return "ping." + error;
                    }
                }
                if (message.traceRoute != null && message.hasOwnProperty("traceRoute")) {
                    let error = $root.sys.protobuf.Status.verify(message.traceRoute);
                    if (error)
                        return "traceRoute." + error;
                }
                if (message.checkPacket != null && message.hasOwnProperty("checkPacket")) {
                    let error = $root.sys.protobuf.Status.verify(message.checkPacket);
                    if (error)
                        return "checkPacket." + error;
                }
                if (message.reboot != null && message.hasOwnProperty("reboot")) {
                    let error = $root.sys.protobuf.Status.verify(message.reboot);
                    if (error)
                        return "reboot." + error;
                }
                if (message.checkPkg != null && message.hasOwnProperty("checkPkg")) {
                    let error = $root.sys.protobuf.Status.verify(message.checkPkg);
                    if (error)
                        return "checkPkg." + error;
                }
                return null;
            };

            /**
             * Creates a Reply message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof sys.protobuf.Reply
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {sys.protobuf.Reply} Reply
             */
            Reply.fromObject = function fromObject(object) {
                if (object instanceof $root.sys.protobuf.Reply)
                    return object;
                let message = new $root.sys.protobuf.Reply();
                if (object.sequence != null)
                    message.sequence = object.sequence >>> 0;
                if (object.ntp != null) {
                    if (typeof object.ntp !== "object")
                        throw TypeError(".sys.protobuf.Reply.ntp: object expected");
                    message.ntp = $root.sys.protobuf.Status.fromObject(object.ntp);
                }
                if (object.checkCable != null) {
                    if (typeof object.checkCable !== "object")
                        throw TypeError(".sys.protobuf.Reply.checkCable: object expected");
                    message.checkCable = $root.sys.protobuf.Status.fromObject(object.checkCable);
                }
                if (object.renewDhcp != null) {
                    if (typeof object.renewDhcp !== "object")
                        throw TypeError(".sys.protobuf.Reply.renewDhcp: object expected");
                    message.renewDhcp = $root.sys.protobuf.Status.fromObject(object.renewDhcp);
                }
                if (object.setDate != null) {
                    if (typeof object.setDate !== "object")
                        throw TypeError(".sys.protobuf.Reply.setDate: object expected");
                    message.setDate = $root.sys.protobuf.Status.fromObject(object.setDate);
                }
                if (object.syncDate != null) {
                    if (typeof object.syncDate !== "object")
                        throw TypeError(".sys.protobuf.Reply.syncDate: object expected");
                    message.syncDate = $root.sys.protobuf.Status.fromObject(object.syncDate);
                }
                if (object.ping) {
                    if (!Array.isArray(object.ping))
                        throw TypeError(".sys.protobuf.Reply.ping: array expected");
                    message.ping = [];
                    for (let i = 0; i < object.ping.length; ++i) {
                        if (typeof object.ping[i] !== "object")
                            throw TypeError(".sys.protobuf.Reply.ping: object expected");
                        message.ping[i] = $root.sys.protobuf.Status.fromObject(object.ping[i]);
                    }
                }
                if (object.traceRoute != null) {
                    if (typeof object.traceRoute !== "object")
                        throw TypeError(".sys.protobuf.Reply.traceRoute: object expected");
                    message.traceRoute = $root.sys.protobuf.Status.fromObject(object.traceRoute);
                }
                if (object.checkPacket != null) {
                    if (typeof object.checkPacket !== "object")
                        throw TypeError(".sys.protobuf.Reply.checkPacket: object expected");
                    message.checkPacket = $root.sys.protobuf.Status.fromObject(object.checkPacket);
                }
                if (object.reboot != null) {
                    if (typeof object.reboot !== "object")
                        throw TypeError(".sys.protobuf.Reply.reboot: object expected");
                    message.reboot = $root.sys.protobuf.Status.fromObject(object.reboot);
                }
                if (object.checkPkg != null) {
                    if (typeof object.checkPkg !== "object")
                        throw TypeError(".sys.protobuf.Reply.checkPkg: object expected");
                    message.checkPkg = $root.sys.protobuf.Status.fromObject(object.checkPkg);
                }
                return message;
            };

            /**
             * Creates a plain object from a Reply message. Also converts values to other types if specified.
             * @function toObject
             * @memberof sys.protobuf.Reply
             * @static
             * @param {sys.protobuf.Reply} message Reply
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Reply.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.ping = [];
                if (options.defaults) {
                    object.sequence = 0;
                    object.ntp = null;
                    object.checkCable = null;
                    object.renewDhcp = null;
                    object.setDate = null;
                    object.syncDate = null;
                    object.traceRoute = null;
                    object.checkPacket = null;
                    object.reboot = null;
                    object.checkPkg = null;
                }
                if (message.sequence != null && message.hasOwnProperty("sequence"))
                    object.sequence = message.sequence;
                if (message.ntp != null && message.hasOwnProperty("ntp"))
                    object.ntp = $root.sys.protobuf.Status.toObject(message.ntp, options);
                if (message.checkCable != null && message.hasOwnProperty("checkCable"))
                    object.checkCable = $root.sys.protobuf.Status.toObject(message.checkCable, options);
                if (message.renewDhcp != null && message.hasOwnProperty("renewDhcp"))
                    object.renewDhcp = $root.sys.protobuf.Status.toObject(message.renewDhcp, options);
                if (message.setDate != null && message.hasOwnProperty("setDate"))
                    object.setDate = $root.sys.protobuf.Status.toObject(message.setDate, options);
                if (message.syncDate != null && message.hasOwnProperty("syncDate"))
                    object.syncDate = $root.sys.protobuf.Status.toObject(message.syncDate, options);
                if (message.ping && message.ping.length) {
                    object.ping = [];
                    for (let j = 0; j < message.ping.length; ++j)
                        object.ping[j] = $root.sys.protobuf.Status.toObject(message.ping[j], options);
                }
                if (message.traceRoute != null && message.hasOwnProperty("traceRoute"))
                    object.traceRoute = $root.sys.protobuf.Status.toObject(message.traceRoute, options);
                if (message.checkPacket != null && message.hasOwnProperty("checkPacket"))
                    object.checkPacket = $root.sys.protobuf.Status.toObject(message.checkPacket, options);
                if (message.reboot != null && message.hasOwnProperty("reboot"))
                    object.reboot = $root.sys.protobuf.Status.toObject(message.reboot, options);
                if (message.checkPkg != null && message.hasOwnProperty("checkPkg"))
                    object.checkPkg = $root.sys.protobuf.Status.toObject(message.checkPkg, options);
                return object;
            };

            /**
             * Converts this Reply to JSON.
             * @function toJSON
             * @memberof sys.protobuf.Reply
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Reply.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for Reply
             * @function getTypeUrl
             * @memberof sys.protobuf.Reply
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            Reply.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/sys.protobuf.Reply";
            };

            return Reply;
        })();

        return protobuf;
    })();

    return sys;
})();

export const wm = $root.wm = (() => {

    /**
     * Namespace wm.
     * @exports wm
     * @namespace
     */
    const wm = {};

    wm.protobuf = (function() {

        /**
         * Namespace protobuf.
         * @memberof wm
         * @namespace
         */
        const protobuf = {};

        /**
         * SystemConstant enum.
         * @name wm.protobuf.SystemConstant
         * @enum {number}
         * @property {number} PROTOBUF_MESSAGE_REVISION=12056 PROTOBUF_MESSAGE_REVISION value
         */
        protobuf.SystemConstant = (function() {
            const valuesById = {}, values = Object.create(valuesById);
            values[valuesById[12056] = "PROTOBUF_MESSAGE_REVISION"] = 12056;
            return values;
        })();

        /**
         * ErrorCode enum.
         * @name wm.protobuf.ErrorCode
         * @enum {number}
         * @property {number} ERR_SUCCESS=0 ERR_SUCCESS value
         * @property {number} ERR_REQUEST=1 ERR_REQUEST value
         * @property {number} ERR_NOT_FOUND=2 ERR_NOT_FOUND value
         * @property {number} ERR_ID_SERVER=3 ERR_ID_SERVER value
         * @property {number} ERR_ID_BANNED=4 ERR_ID_BANNED value
         * @property {number} ERR_USER_LOCKED=5 ERR_USER_LOCKED value
         * @property {number} ERR_USER_VERSION=6 ERR_USER_VERSION value
         * @property {number} ERR_NAME_CONFLICTED=7 ERR_NAME_CONFLICTED value
         * @property {number} ERR_FORBIDDEN=9 ERR_FORBIDDEN value
         * @property {number} ERR_USER_SUCCEEDED=11 ERR_USER_SUCCEEDED value
         * @property {number} ERR_BEING_TRANSFERRED=12 ERR_BEING_TRANSFERRED value
         * @property {number} ERR_SCRATCH_LOCKED=13 ERR_SCRATCH_LOCKED value
         * @property {number} ERR_BINGO_REVENGE_LOCKED=14 ERR_BINGO_REVENGE_LOCKED value
         * @property {number} ERR_BINGO_ALREDY_LINKED=15 ERR_BINGO_ALREDY_LINKED value
         * @property {number} ERR_BINGO_FINISHED=16 ERR_BINGO_FINISHED value
         * @property {number} ERR_BINGO_REACHED_MAX_USER=17 ERR_BINGO_REACHED_MAX_USER value
         * @property {number} ERR_CAR_NOT_FOUND=18 ERR_CAR_NOT_FOUND value
         * @property {number} ERR_BINGO_CARD_NOT_FOUND=19 ERR_BINGO_CARD_NOT_FOUND value
         */
        protobuf.ErrorCode = (function() {
            const valuesById = {}, values = Object.create(valuesById);
            values[valuesById[0] = "ERR_SUCCESS"] = 0;
            values[valuesById[1] = "ERR_REQUEST"] = 1;
            values[valuesById[2] = "ERR_NOT_FOUND"] = 2;
            values[valuesById[3] = "ERR_ID_SERVER"] = 3;
            values[valuesById[4] = "ERR_ID_BANNED"] = 4;
            values[valuesById[5] = "ERR_USER_LOCKED"] = 5;
            values[valuesById[6] = "ERR_USER_VERSION"] = 6;
            values[valuesById[7] = "ERR_NAME_CONFLICTED"] = 7;
            values[valuesById[9] = "ERR_FORBIDDEN"] = 9;
            values[valuesById[11] = "ERR_USER_SUCCEEDED"] = 11;
            values[valuesById[12] = "ERR_BEING_TRANSFERRED"] = 12;
            values[valuesById[13] = "ERR_SCRATCH_LOCKED"] = 13;
            values[valuesById[14] = "ERR_BINGO_REVENGE_LOCKED"] = 14;
            values[valuesById[15] = "ERR_BINGO_ALREDY_LINKED"] = 15;
            values[valuesById[16] = "ERR_BINGO_FINISHED"] = 16;
            values[valuesById[17] = "ERR_BINGO_REACHED_MAX_USER"] = 17;
            values[valuesById[18] = "ERR_CAR_NOT_FOUND"] = 18;
            values[valuesById[19] = "ERR_BINGO_CARD_NOT_FOUND"] = 19;
            return values;
        })();

        /**
         * LineType enum.
         * @name wm.protobuf.LineType
         * @enum {number}
         * @property {number} L_UNKNOWN=0 L_UNKNOWN value
         * @property {number} L_MOBILE=1 L_MOBILE value
         * @property {number} L_ISDN=2 L_ISDN value
         * @property {number} L_BFLETS=3 L_BFLETS value
         * @property {number} L_ADSL=4 L_ADSL value
         * @property {number} L_WIRED=5 L_WIRED value
         */
        protobuf.LineType = (function() {
            const valuesById = {}, values = Object.create(valuesById);
            values[valuesById[0] = "L_UNKNOWN"] = 0;
            values[valuesById[1] = "L_MOBILE"] = 1;
            values[valuesById[2] = "L_ISDN"] = 2;
            values[valuesById[3] = "L_BFLETS"] = 3;
            values[valuesById[4] = "L_ADSL"] = 4;
            values[valuesById[5] = "L_WIRED"] = 5;
            return values;
        })();

        /**
         * TerminalType enum.
         * @name wm.protobuf.TerminalType
         * @enum {number}
         * @property {number} T_DRIVE=0 T_DRIVE value
         * @property {number} T_TERMINAL=1 T_TERMINAL value
         */
        protobuf.TerminalType = (function() {
            const valuesById = {}, values = Object.create(valuesById);
            values[valuesById[0] = "T_DRIVE"] = 0;
            values[valuesById[1] = "T_TERMINAL"] = 1;
            return values;
        })();

        /**
         * DeviceType enum.
         * @name wm.protobuf.DeviceType
         * @enum {number}
         * @property {number} DEVICE_CARD=0 DEVICE_CARD value
         * @property {number} DEVICE_PHONE=1 DEVICE_PHONE value
         */
        protobuf.DeviceType = (function() {
            const valuesById = {}, values = Object.create(valuesById);
            values[valuesById[0] = "DEVICE_CARD"] = 0;
            values[valuesById[1] = "DEVICE_PHONE"] = 1;
            return values;
        })();

        /**
         * ItemCategory enum.
         * @name wm.protobuf.ItemCategory
         * @enum {number}
         * @property {number} CAT_CUSTOM_COLOR=1 CAT_CUSTOM_COLOR value
         * @property {number} CAT_WHEEL=2 CAT_WHEEL value
         * @property {number} CAT_AERO=3 CAT_AERO value
         * @property {number} CAT_BONNET=4 CAT_BONNET value
         * @property {number} CAT_WING=5 CAT_WING value
         * @property {number} CAT_MIRROR=6 CAT_MIRROR value
         * @property {number} CAT_NEON=8 CAT_NEON value
         * @property {number} CAT_TRUNK=9 CAT_TRUNK value
         * @property {number} CAT_NUMBER_PLATE=10 CAT_NUMBER_PLATE value
         * @property {number} CAT_GT_WING=12 CAT_GT_WING value
         * @property {number} CAT_AURA_MOTIF=14 CAT_AURA_MOTIF value
         * @property {number} CAT_METER=15 CAT_METER value
         * @property {number} CAT_BGM=16 CAT_BGM value
         * @property {number} CAT_NAME_PLATE=17 CAT_NAME_PLATE value
         * @property {number} CAT_CUSTOM_FRAME=18 CAT_CUSTOM_FRAME value
         * @property {number} CAT_NUMBER=19 CAT_NUMBER value
         * @property {number} CAT_BGM_TRACK=22 CAT_BGM_TRACK value
         * @property {number} CAT_WINDOW_STICKER_FONT=24 CAT_WINDOW_STICKER_FONT value
         * @property {number} CAT_WINDOW_DECORATION=25 CAT_WINDOW_DECORATION value
         * @property {number} CAT_RIVAL_MARKER=26 CAT_RIVAL_MARKER value
         * @property {number} CAT_STAMP=27 CAT_STAMP value
         * @property {number} CAT_TERMINAL_BACKGROUND=28 CAT_TERMINAL_BACKGROUND value
         * @property {number} CAT_CAR_TICKET=201 CAT_CAR_TICKET value
         * @property {number} CAT_CONSUMPTION_ITEM=202 CAT_CONSUMPTION_ITEM value
         * @property {number} CAT_CAR_TICKET_FREE=203 CAT_CAR_TICKET_FREE value
         * @property {number} CAT_CAR_TITLE=400 CAT_CAR_TITLE value
         * @property {number} CAT_AERO_FULLSET=300 CAT_AERO_FULLSET value
         * @property {number} CAT_AERO_LIMITED=301 CAT_AERO_LIMITED value
         */
        protobuf.ItemCategory = (function() {
            const valuesById = {}, values = Object.create(valuesById);
            values[valuesById[1] = "CAT_CUSTOM_COLOR"] = 1;
            values[valuesById[2] = "CAT_WHEEL"] = 2;
            values[valuesById[3] = "CAT_AERO"] = 3;
            values[valuesById[4] = "CAT_BONNET"] = 4;
            values[valuesById[5] = "CAT_WING"] = 5;
            values[valuesById[6] = "CAT_MIRROR"] = 6;
            values[valuesById[8] = "CAT_NEON"] = 8;
            values[valuesById[9] = "CAT_TRUNK"] = 9;
            values[valuesById[10] = "CAT_NUMBER_PLATE"] = 10;
            values[valuesById[12] = "CAT_GT_WING"] = 12;
            values[valuesById[14] = "CAT_AURA_MOTIF"] = 14;
            values[valuesById[15] = "CAT_METER"] = 15;
            values[valuesById[16] = "CAT_BGM"] = 16;
            values[valuesById[17] = "CAT_NAME_PLATE"] = 17;
            values[valuesById[18] = "CAT_CUSTOM_FRAME"] = 18;
            values[valuesById[19] = "CAT_NUMBER"] = 19;
            values[valuesById[22] = "CAT_BGM_TRACK"] = 22;
            values[valuesById[24] = "CAT_WINDOW_STICKER_FONT"] = 24;
            values[valuesById[25] = "CAT_WINDOW_DECORATION"] = 25;
            values[valuesById[26] = "CAT_RIVAL_MARKER"] = 26;
            values[valuesById[27] = "CAT_STAMP"] = 27;
            values[valuesById[28] = "CAT_TERMINAL_BACKGROUND"] = 28;
            values[valuesById[201] = "CAT_CAR_TICKET"] = 201;
            values[valuesById[202] = "CAT_CONSUMPTION_ITEM"] = 202;
            values[valuesById[203] = "CAT_CAR_TICKET_FREE"] = 203;
            values[valuesById[400] = "CAT_CAR_TITLE"] = 400;
            values[valuesById[300] = "CAT_AERO_FULLSET"] = 300;
            values[valuesById[301] = "CAT_AERO_LIMITED"] = 301;
            return values;
        })();

        /**
         * TutorialType enum.
         * @name wm.protobuf.TutorialType
         * @enum {number}
         * @property {number} TUTORIAL_ID_STORY=0 TUTORIAL_ID_STORY value
         * @property {number} TUTORIAL_ID_TIME_ATTACK=1 TUTORIAL_ID_TIME_ATTACK value
         * @property {number} TUTORIAL_ID_GHOST=2 TUTORIAL_ID_GHOST value
         * @property {number} TUTORIAL_ID_GHOST_CHALLENGE=3 TUTORIAL_ID_GHOST_CHALLENGE value
         * @property {number} TUTORIAL_ID_UNUSED_4=4 TUTORIAL_ID_UNUSED_4 value
         * @property {number} TUTORIAL_ID_UNUSED_5=5 TUTORIAL_ID_UNUSED_5 value
         * @property {number} TUTORIAL_ID_GHOST_SEARCH=6 TUTORIAL_ID_GHOST_SEARCH value
         * @property {number} TUTORIAL_ID_GHOST_COMPETITION=7 TUTORIAL_ID_GHOST_COMPETITION value
         * @property {number} TUTORIAL_ID_HP600_CARD=8 TUTORIAL_ID_HP600_CARD value
         * @property {number} TUTORIAL_ID_UNUSED_9=9 TUTORIAL_ID_UNUSED_9 value
         * @property {number} TUTORIAL_ID_COMPETITION_QUALIFIED=10 TUTORIAL_ID_COMPETITION_QUALIFIED value
         * @property {number} TUTORIAL_ID_COMPETITION_TERMINAL=11 TUTORIAL_ID_COMPETITION_TERMINAL value
         * @property {number} TUTORIAL_ID_COMPETITION_NOTICE=12 TUTORIAL_ID_COMPETITION_NOTICE value
         * @property {number} TUTORIAL_ID_COMPETITION_FINISHED=13 TUTORIAL_ID_COMPETITION_FINISHED value
         * @property {number} TUTORIAL_ID_UNUSED_14=14 TUTORIAL_ID_UNUSED_14 value
         * @property {number} TUTORIAL_ID_UNUSED_15=15 TUTORIAL_ID_UNUSED_15 value
         * @property {number} TUTORIAL_ID_UNUSED_16=16 TUTORIAL_ID_UNUSED_16 value
         * @property {number} TUTORIAL_ID_UNUSED_17=17 TUTORIAL_ID_UNUSED_17 value
         * @property {number} TUTORIAL_ID_UNUSED_18=18 TUTORIAL_ID_UNUSED_18 value
         * @property {number} TUTORIAL_ID_UNUSED_19=19 TUTORIAL_ID_UNUSED_19 value
         * @property {number} TUTORIAL_ID_GHOST_STAMP=20 TUTORIAL_ID_GHOST_STAMP value
         * @property {number} TUTORIAL_ID_GHOST_STAMP_DECLINED=21 TUTORIAL_ID_GHOST_STAMP_DECLINED value
         * @property {number} TUTORIAL_ID_GHOST_STAMP_FRIENDS=22 TUTORIAL_ID_GHOST_STAMP_FRIENDS value
         * @property {number} TUTORIAL_ID_TERMINAL_SCRATCH=23 TUTORIAL_ID_TERMINAL_SCRATCH value
         * @property {number} TUTORIAL_ID_TURN_SCRATCH_SHEET=24 TUTORIAL_ID_TURN_SCRATCH_SHEET value
         * @property {number} TUTORIAL_ID_INVITE_FRIEND_CAMPAIGN=25 TUTORIAL_ID_INVITE_FRIEND_CAMPAIGN value
         * @property {number} TUTORIAL_ID_CAR_COUPON_FULL_TUNED_RECEIVABLE=26 TUTORIAL_ID_CAR_COUPON_FULL_TUNED_RECEIVABLE value
         * @property {number} TUTORIAL_ID_VS_CONTINUE_TICKET=27 TUTORIAL_ID_VS_CONTINUE_TICKET value
         * @property {number} TUTORIAL_ID_UNUSED_28=28 TUTORIAL_ID_UNUSED_28 value
         * @property {number} TUTORIAL_ID_UNUSED_29=29 TUTORIAL_ID_UNUSED_29 value
         * @property {number} TUTORIAL_ID_UNUSED_30=30 TUTORIAL_ID_UNUSED_30 value
         * @property {number} TUTORIAL_ID_DRESS_UP=31 TUTORIAL_ID_DRESS_UP value
         * @property {number} TUTORIAL_ID_UNUSED_32=32 TUTORIAL_ID_UNUSED_32 value
         * @property {number} TUTORIAL_ID_STORY_NEW_FEATURE=33 TUTORIAL_ID_STORY_NEW_FEATURE value
         * @property {number} TUTORIAL_ID_GHOST_NEW_FEATURE=34 TUTORIAL_ID_GHOST_NEW_FEATURE value
         * @property {number} TUTORIAL_ID_UNUSED_35=35 TUTORIAL_ID_UNUSED_35 value
         * @property {number} TUTORIAL_ID_GHOST_EXPEDITION_NEW=36 TUTORIAL_ID_GHOST_EXPEDITION_NEW value
         * @property {number} TUTORIAL_ID_GHOST_EXPEDITION_WANTED=37 TUTORIAL_ID_GHOST_EXPEDITION_WANTED value
         * @property {number} TUTORIAL_ID_GHOST_EXPEDITION_WANTED2=38 TUTORIAL_ID_GHOST_EXPEDITION_WANTED2 value
         * @property {number} TUTORIAL_ID_GHOST_EXPEDITION_REWARD=39 TUTORIAL_ID_GHOST_EXPEDITION_REWARD value
         * @property {number} TUTORIAL_ID_MULTI_GHOST_VS_2=40 TUTORIAL_ID_MULTI_GHOST_VS_2 value
         * @property {number} TUTORIAL_ID_MULTI_GHOST_VS_3=41 TUTORIAL_ID_MULTI_GHOST_VS_3 value
         * @property {number} TUTORIAL_ID_GHOST_SELECT_BY_OTHER_PLACE=42 TUTORIAL_ID_GHOST_SELECT_BY_OTHER_PLACE value
         * @property {number} TUTORIAL_ID_GHOST_SELECT_BY_MANUFACTURER=43 TUTORIAL_ID_GHOST_SELECT_BY_MANUFACTURER value
         * @property {number} TUTORIAL_ID_GHOST_SELECT_BY_OTHER_MANUFACTURER=44 TUTORIAL_ID_GHOST_SELECT_BY_OTHER_MANUFACTURER value
         * @property {number} TUTORIAL_ID_GHOST_SELECT_BY_PLAYED=45 TUTORIAL_ID_GHOST_SELECT_BY_PLAYED value
         * @property {number} TUTORIAL_ID_GHOST_HIGHWAY_NEW=46 TUTORIAL_ID_GHOST_HIGHWAY_NEW value
         * @property {number} TUTORIAL_ID_GHOST_HIGHWAY_STATION=47 TUTORIAL_ID_GHOST_HIGHWAY_STATION value
         * @property {number} TUTORIAL_ID_GHOST_HIGHWAY_BOSS=48 TUTORIAL_ID_GHOST_HIGHWAY_BOSS value
         * @property {number} TUTORIAL_ID_GHOST_TROPHY=49 TUTORIAL_ID_GHOST_TROPHY value
         * @property {number} TUTORIAL_ID_GHOST_SELECT=50 TUTORIAL_ID_GHOST_SELECT value
         * @property {number} TUTORIAL_ID_GHOST_SELECT_BY_SAME_PLACE=51 TUTORIAL_ID_GHOST_SELECT_BY_SAME_PLACE value
         * @property {number} TUTORIAL_ID_GHOST_BINGO_NEW=52 TUTORIAL_ID_GHOST_BINGO_NEW value
         * @property {number} TUTORIAL_ID_UNUSED_53=53 TUTORIAL_ID_UNUSED_53 value
         * @property {number} TUTORIAL_ID_GHOST_BINGO_LINK=54 TUTORIAL_ID_GHOST_BINGO_LINK value
         * @property {number} TUTORIAL_ID_GHOST_KOSHIEN_NEW=55 TUTORIAL_ID_GHOST_KOSHIEN_NEW value
         * @property {number} TUTORIAL_ID_GHOST_KOSHIEN_NOTICE=56 TUTORIAL_ID_GHOST_KOSHIEN_NOTICE value
         * @property {number} TUTORIAL_ID_GHOST_KOSHIEN_MVP_UPDATE=57 TUTORIAL_ID_GHOST_KOSHIEN_MVP_UPDATE value
         * @property {number} TUTORIAL_ID_BINGO_LUCKY_CHANCE=58 TUTORIAL_ID_BINGO_LUCKY_CHANCE value
         * @property {number} TUTORIAL_ID_GHOST_KOSHIEN_FINISHED=59 TUTORIAL_ID_GHOST_KOSHIEN_FINISHED value
         * @property {number} TUTORIAL_ID_GHOST_KOSHIEN_AFTEREVENT=60 TUTORIAL_ID_GHOST_KOSHIEN_AFTEREVENT value
         * @property {number} TUTORIAL_ID_GHOST_BINGO_AREA=61 TUTORIAL_ID_GHOST_BINGO_AREA value
         */
        protobuf.TutorialType = (function() {
            const valuesById = {}, values = Object.create(valuesById);
            values[valuesById[0] = "TUTORIAL_ID_STORY"] = 0;
            values[valuesById[1] = "TUTORIAL_ID_TIME_ATTACK"] = 1;
            values[valuesById[2] = "TUTORIAL_ID_GHOST"] = 2;
            values[valuesById[3] = "TUTORIAL_ID_GHOST_CHALLENGE"] = 3;
            values[valuesById[4] = "TUTORIAL_ID_UNUSED_4"] = 4;
            values[valuesById[5] = "TUTORIAL_ID_UNUSED_5"] = 5;
            values[valuesById[6] = "TUTORIAL_ID_GHOST_SEARCH"] = 6;
            values[valuesById[7] = "TUTORIAL_ID_GHOST_COMPETITION"] = 7;
            values[valuesById[8] = "TUTORIAL_ID_HP600_CARD"] = 8;
            values[valuesById[9] = "TUTORIAL_ID_UNUSED_9"] = 9;
            values[valuesById[10] = "TUTORIAL_ID_COMPETITION_QUALIFIED"] = 10;
            values[valuesById[11] = "TUTORIAL_ID_COMPETITION_TERMINAL"] = 11;
            values[valuesById[12] = "TUTORIAL_ID_COMPETITION_NOTICE"] = 12;
            values[valuesById[13] = "TUTORIAL_ID_COMPETITION_FINISHED"] = 13;
            values[valuesById[14] = "TUTORIAL_ID_UNUSED_14"] = 14;
            values[valuesById[15] = "TUTORIAL_ID_UNUSED_15"] = 15;
            values[valuesById[16] = "TUTORIAL_ID_UNUSED_16"] = 16;
            values[valuesById[17] = "TUTORIAL_ID_UNUSED_17"] = 17;
            values[valuesById[18] = "TUTORIAL_ID_UNUSED_18"] = 18;
            values[valuesById[19] = "TUTORIAL_ID_UNUSED_19"] = 19;
            values[valuesById[20] = "TUTORIAL_ID_GHOST_STAMP"] = 20;
            values[valuesById[21] = "TUTORIAL_ID_GHOST_STAMP_DECLINED"] = 21;
            values[valuesById[22] = "TUTORIAL_ID_GHOST_STAMP_FRIENDS"] = 22;
            values[valuesById[23] = "TUTORIAL_ID_TERMINAL_SCRATCH"] = 23;
            values[valuesById[24] = "TUTORIAL_ID_TURN_SCRATCH_SHEET"] = 24;
            values[valuesById[25] = "TUTORIAL_ID_INVITE_FRIEND_CAMPAIGN"] = 25;
            values[valuesById[26] = "TUTORIAL_ID_CAR_COUPON_FULL_TUNED_RECEIVABLE"] = 26;
            values[valuesById[27] = "TUTORIAL_ID_VS_CONTINUE_TICKET"] = 27;
            values[valuesById[28] = "TUTORIAL_ID_UNUSED_28"] = 28;
            values[valuesById[29] = "TUTORIAL_ID_UNUSED_29"] = 29;
            values[valuesById[30] = "TUTORIAL_ID_UNUSED_30"] = 30;
            values[valuesById[31] = "TUTORIAL_ID_DRESS_UP"] = 31;
            values[valuesById[32] = "TUTORIAL_ID_UNUSED_32"] = 32;
            values[valuesById[33] = "TUTORIAL_ID_STORY_NEW_FEATURE"] = 33;
            values[valuesById[34] = "TUTORIAL_ID_GHOST_NEW_FEATURE"] = 34;
            values[valuesById[35] = "TUTORIAL_ID_UNUSED_35"] = 35;
            values[valuesById[36] = "TUTORIAL_ID_GHOST_EXPEDITION_NEW"] = 36;
            values[valuesById[37] = "TUTORIAL_ID_GHOST_EXPEDITION_WANTED"] = 37;
            values[valuesById[38] = "TUTORIAL_ID_GHOST_EXPEDITION_WANTED2"] = 38;
            values[valuesById[39] = "TUTORIAL_ID_GHOST_EXPEDITION_REWARD"] = 39;
            values[valuesById[40] = "TUTORIAL_ID_MULTI_GHOST_VS_2"] = 40;
            values[valuesById[41] = "TUTORIAL_ID_MULTI_GHOST_VS_3"] = 41;
            values[valuesById[42] = "TUTORIAL_ID_GHOST_SELECT_BY_OTHER_PLACE"] = 42;
            values[valuesById[43] = "TUTORIAL_ID_GHOST_SELECT_BY_MANUFACTURER"] = 43;
            values[valuesById[44] = "TUTORIAL_ID_GHOST_SELECT_BY_OTHER_MANUFACTURER"] = 44;
            values[valuesById[45] = "TUTORIAL_ID_GHOST_SELECT_BY_PLAYED"] = 45;
            values[valuesById[46] = "TUTORIAL_ID_GHOST_HIGHWAY_NEW"] = 46;
            values[valuesById[47] = "TUTORIAL_ID_GHOST_HIGHWAY_STATION"] = 47;
            values[valuesById[48] = "TUTORIAL_ID_GHOST_HIGHWAY_BOSS"] = 48;
            values[valuesById[49] = "TUTORIAL_ID_GHOST_TROPHY"] = 49;
            values[valuesById[50] = "TUTORIAL_ID_GHOST_SELECT"] = 50;
            values[valuesById[51] = "TUTORIAL_ID_GHOST_SELECT_BY_SAME_PLACE"] = 51;
            values[valuesById[52] = "TUTORIAL_ID_GHOST_BINGO_NEW"] = 52;
            values[valuesById[53] = "TUTORIAL_ID_UNUSED_53"] = 53;
            values[valuesById[54] = "TUTORIAL_ID_GHOST_BINGO_LINK"] = 54;
            values[valuesById[55] = "TUTORIAL_ID_GHOST_KOSHIEN_NEW"] = 55;
            values[valuesById[56] = "TUTORIAL_ID_GHOST_KOSHIEN_NOTICE"] = 56;
            values[valuesById[57] = "TUTORIAL_ID_GHOST_KOSHIEN_MVP_UPDATE"] = 57;
            values[valuesById[58] = "TUTORIAL_ID_BINGO_LUCKY_CHANCE"] = 58;
            values[valuesById[59] = "TUTORIAL_ID_GHOST_KOSHIEN_FINISHED"] = 59;
            values[valuesById[60] = "TUTORIAL_ID_GHOST_KOSHIEN_AFTEREVENT"] = 60;
            values[valuesById[61] = "TUTORIAL_ID_GHOST_BINGO_AREA"] = 61;
            return values;
        })();

        /**
         * GameMode enum.
         * @name wm.protobuf.GameMode
         * @enum {number}
         * @property {number} MODE_STORY=1 MODE_STORY value
         * @property {number} MODE_TIME_ATTACK=2 MODE_TIME_ATTACK value
         * @property {number} MODE_VS_BATTLE=3 MODE_VS_BATTLE value
         * @property {number} MODE_GHOST_BATTLE=4 MODE_GHOST_BATTLE value
         * @property {number} MODE_EVENT=5 MODE_EVENT value
         */
        protobuf.GameMode = (function() {
            const valuesById = {}, values = Object.create(valuesById);
            values[valuesById[1] = "MODE_STORY"] = 1;
            values[valuesById[2] = "MODE_TIME_ATTACK"] = 2;
            values[valuesById[3] = "MODE_VS_BATTLE"] = 3;
            values[valuesById[4] = "MODE_GHOST_BATTLE"] = 4;
            values[valuesById[5] = "MODE_EVENT"] = 5;
            return values;
        })();

        /**
         * GhostType enum.
         * @name wm.protobuf.GhostType
         * @enum {number}
         * @property {number} GHOST_NORMAL=1 GHOST_NORMAL value
         * @property {number} GHOST_PINCH_RUNNER=2 GHOST_PINCH_RUNNER value
         * @property {number} GHOST_DEFAULT=3 GHOST_DEFAULT value
         * @property {number} GHOST_REGION=4 GHOST_REGION value
         * @property {number} GHOST_REGION_PINCH_RUNNER=5 GHOST_REGION_PINCH_RUNNER value
         */
        protobuf.GhostType = (function() {
            const valuesById = {}, values = Object.create(valuesById);
            values[valuesById[1] = "GHOST_NORMAL"] = 1;
            values[valuesById[2] = "GHOST_PINCH_RUNNER"] = 2;
            values[valuesById[3] = "GHOST_DEFAULT"] = 3;
            values[valuesById[4] = "GHOST_REGION"] = 4;
            values[valuesById[5] = "GHOST_REGION_PINCH_RUNNER"] = 5;
            return values;
        })();

        /**
         * GhostSelectionMethod enum.
         * @name wm.protobuf.GhostSelectionMethod
         * @enum {number}
         * @property {number} GHOST_SEARCH_BY_REGION=1 GHOST_SEARCH_BY_REGION value
         * @property {number} GHOST_SELECT_BY_LEVEL=2 GHOST_SELECT_BY_LEVEL value
         * @property {number} GHOST_SELECT_CROWN_MATCH=3 GHOST_SELECT_CROWN_MATCH value
         * @property {number} GHOST_SELECT_STAMP_MATCH=4 GHOST_SELECT_STAMP_MATCH value
         * @property {number} GHOST_SELECT_FROM_HISTORY=5 GHOST_SELECT_FROM_HISTORY value
         * @property {number} GHOST_SEARCH_BY_SHOP=6 GHOST_SEARCH_BY_SHOP value
         * @property {number} GHOST_SEARCH_BY_NAME=7 GHOST_SEARCH_BY_NAME value
         * @property {number} GHOST_ACCEPT_CHALLENGER=8 GHOST_ACCEPT_CHALLENGER value
         * @property {number} GHOST_APPOINTMENT=9 GHOST_APPOINTMENT value
         * @property {number} GHOST_DEFAULT_OPPONENT=10 GHOST_DEFAULT_OPPONENT value
         * @property {number} GHOST_COMPETITION=11 GHOST_COMPETITION value
         * @property {number} GHOST_SELECT_FROM_BOOKMARKS=12 GHOST_SELECT_FROM_BOOKMARKS value
         * @property {number} GHOST_EXPEDITION=13 GHOST_EXPEDITION value
         * @property {number} GHOST_SELECT_BY_PLACE=14 GHOST_SELECT_BY_PLACE value
         * @property {number} GHOST_SELECT_BY_OTHER_PLACE=15 GHOST_SELECT_BY_OTHER_PLACE value
         * @property {number} GHOST_SELECT_BY_MANUFACTURER=16 GHOST_SELECT_BY_MANUFACTURER value
         * @property {number} GHOST_SELECT_BY_OTHER_MANUFACTURER=17 GHOST_SELECT_BY_OTHER_MANUFACTURER value
         * @property {number} GHOST_SELECT_BY_PLAYED=18 GHOST_SELECT_BY_PLAYED value
         * @property {number} GHOST_UNUSED_19=19 GHOST_UNUSED_19 value
         * @property {number} GHOST_SELECT_BY_REGION_MANUFACTURER=20 GHOST_SELECT_BY_REGION_MANUFACTURER value
         * @property {number} GHOST_UNUSED_21=21 GHOST_UNUSED_21 value
         * @property {number} GHOST_SELECT_BY_REGION_PLAYED=22 GHOST_SELECT_BY_REGION_PLAYED value
         * @property {number} GHOST_SELECT_BY_REGION_STATION=23 GHOST_SELECT_BY_REGION_STATION value
         * @property {number} GHOST_SELECT_BY_REGION_BOSS=24 GHOST_SELECT_BY_REGION_BOSS value
         * @property {number} GHOST_SELECT_BY_REGION_PLACE=25 GHOST_SELECT_BY_REGION_PLACE value
         * @property {number} GHOST_BINGO_CHALLENGE=26 GHOST_BINGO_CHALLENGE value
         * @property {number} GHOST_KOSHIEN=27 GHOST_KOSHIEN value
         */
        protobuf.GhostSelectionMethod = (function() {
            const valuesById = {}, values = Object.create(valuesById);
            values[valuesById[1] = "GHOST_SEARCH_BY_REGION"] = 1;
            values[valuesById[2] = "GHOST_SELECT_BY_LEVEL"] = 2;
            values[valuesById[3] = "GHOST_SELECT_CROWN_MATCH"] = 3;
            values[valuesById[4] = "GHOST_SELECT_STAMP_MATCH"] = 4;
            values[valuesById[5] = "GHOST_SELECT_FROM_HISTORY"] = 5;
            values[valuesById[6] = "GHOST_SEARCH_BY_SHOP"] = 6;
            values[valuesById[7] = "GHOST_SEARCH_BY_NAME"] = 7;
            values[valuesById[8] = "GHOST_ACCEPT_CHALLENGER"] = 8;
            values[valuesById[9] = "GHOST_APPOINTMENT"] = 9;
            values[valuesById[10] = "GHOST_DEFAULT_OPPONENT"] = 10;
            values[valuesById[11] = "GHOST_COMPETITION"] = 11;
            values[valuesById[12] = "GHOST_SELECT_FROM_BOOKMARKS"] = 12;
            values[valuesById[13] = "GHOST_EXPEDITION"] = 13;
            values[valuesById[14] = "GHOST_SELECT_BY_PLACE"] = 14;
            values[valuesById[15] = "GHOST_SELECT_BY_OTHER_PLACE"] = 15;
            values[valuesById[16] = "GHOST_SELECT_BY_MANUFACTURER"] = 16;
            values[valuesById[17] = "GHOST_SELECT_BY_OTHER_MANUFACTURER"] = 17;
            values[valuesById[18] = "GHOST_SELECT_BY_PLAYED"] = 18;
            values[valuesById[19] = "GHOST_UNUSED_19"] = 19;
            values[valuesById[20] = "GHOST_SELECT_BY_REGION_MANUFACTURER"] = 20;
            values[valuesById[21] = "GHOST_UNUSED_21"] = 21;
            values[valuesById[22] = "GHOST_SELECT_BY_REGION_PLAYED"] = 22;
            values[valuesById[23] = "GHOST_SELECT_BY_REGION_STATION"] = 23;
            values[valuesById[24] = "GHOST_SELECT_BY_REGION_BOSS"] = 24;
            values[valuesById[25] = "GHOST_SELECT_BY_REGION_PLACE"] = 25;
            values[valuesById[26] = "GHOST_BINGO_CHALLENGE"] = 26;
            values[valuesById[27] = "GHOST_KOSHIEN"] = 27;
            return values;
        })();

        /**
         * GhostRateType enum.
         * @name wm.protobuf.GhostRateType
         * @enum {number}
         * @property {number} GHOST_RATE_UNKNOWN=1 GHOST_RATE_UNKNOWN value
         * @property {number} GHOST_RATE_INVALID=2 GHOST_RATE_INVALID value
         * @property {number} GHOST_RATE_VALID=3 GHOST_RATE_VALID value
         */
        protobuf.GhostRateType = (function() {
            const valuesById = {}, values = Object.create(valuesById);
            values[valuesById[1] = "GHOST_RATE_UNKNOWN"] = 1;
            values[valuesById[2] = "GHOST_RATE_INVALID"] = 2;
            values[valuesById[3] = "GHOST_RATE_VALID"] = 3;
            return values;
        })();

        /**
         * PathSelectionMethod enum.
         * @name wm.protobuf.PathSelectionMethod
         * @enum {number}
         * @property {number} PATH_NEW=1 PATH_NEW value
         * @property {number} PATH_PLAIN=2 PATH_PLAIN value
         * @property {number} PATH_FRIEND=3 PATH_FRIEND value
         * @property {number} PATH_NORMAL=4 PATH_NORMAL value
         * @property {number} PATH_CHALLENGER=5 PATH_CHALLENGER value
         */
        protobuf.PathSelectionMethod = (function() {
            const valuesById = {}, values = Object.create(valuesById);
            values[valuesById[1] = "PATH_NEW"] = 1;
            values[valuesById[2] = "PATH_PLAIN"] = 2;
            values[valuesById[3] = "PATH_FRIEND"] = 3;
            values[valuesById[4] = "PATH_NORMAL"] = 4;
            values[valuesById[5] = "PATH_CHALLENGER"] = 5;
            return values;
        })();

        /**
         * NoticeEntry enum.
         * @name wm.protobuf.NoticeEntry
         * @enum {number}
         * @property {number} NOTICE_UNUSED_1=1 NOTICE_UNUSED_1 value
         * @property {number} NOTICE_UNUSED_2=2 NOTICE_UNUSED_2 value
         * @property {number} NOTICE_UNUSED_3=3 NOTICE_UNUSED_3 value
         * @property {number} NOTICE_UNUSED_4=4 NOTICE_UNUSED_4 value
         * @property {number} NOTICE_UNUSED_5=5 NOTICE_UNUSED_5 value
         * @property {number} NOTICE_UNUSED_6=6 NOTICE_UNUSED_6 value
         * @property {number} NOTICE_UNUSED_7=7 NOTICE_UNUSED_7 value
         * @property {number} NOTICE_UNUSED_8=8 NOTICE_UNUSED_8 value
         * @property {number} NOTICE_UNUSED_9=9 NOTICE_UNUSED_9 value
         * @property {number} NOTICE_UNUSED_10=10 NOTICE_UNUSED_10 value
         * @property {number} NOTICE_UNUSED_11=11 NOTICE_UNUSED_11 value
         * @property {number} NOTICE_UNUSED_12=12 NOTICE_UNUSED_12 value
         */
        protobuf.NoticeEntry = (function() {
            const valuesById = {}, values = Object.create(valuesById);
            values[valuesById[1] = "NOTICE_UNUSED_1"] = 1;
            values[valuesById[2] = "NOTICE_UNUSED_2"] = 2;
            values[valuesById[3] = "NOTICE_UNUSED_3"] = 3;
            values[valuesById[4] = "NOTICE_UNUSED_4"] = 4;
            values[valuesById[5] = "NOTICE_UNUSED_5"] = 5;
            values[valuesById[6] = "NOTICE_UNUSED_6"] = 6;
            values[valuesById[7] = "NOTICE_UNUSED_7"] = 7;
            values[valuesById[8] = "NOTICE_UNUSED_8"] = 8;
            values[valuesById[9] = "NOTICE_UNUSED_9"] = 9;
            values[valuesById[10] = "NOTICE_UNUSED_10"] = 10;
            values[valuesById[11] = "NOTICE_UNUSED_11"] = 11;
            values[valuesById[12] = "NOTICE_UNUSED_12"] = 12;
            return values;
        })();

        /**
         * FileType enum.
         * @name wm.protobuf.FileType
         * @enum {number}
         * @property {number} FILE_PROMOTION_ANNOUNCEMENT=1 FILE_PROMOTION_ANNOUNCEMENT value
         * @property {number} FILE_FEATURE_ANNOUNCEMENT=4 FILE_FEATURE_ANNOUNCEMENT value
         * @property {number} FILE_SPAPP_ANNOUNCEMENT=6 FILE_SPAPP_ANNOUNCEMENT value
         * @property {number} FILE_TRIAL_ANNOUNCEMENT=7 FILE_TRIAL_ANNOUNCEMENT value
         */
        protobuf.FileType = (function() {
            const valuesById = {}, values = Object.create(valuesById);
            values[valuesById[1] = "FILE_PROMOTION_ANNOUNCEMENT"] = 1;
            values[valuesById[4] = "FILE_FEATURE_ANNOUNCEMENT"] = 4;
            values[valuesById[6] = "FILE_SPAPP_ANNOUNCEMENT"] = 6;
            values[valuesById[7] = "FILE_TRIAL_ANNOUNCEMENT"] = 7;
            return values;
        })();

        /**
         * GhostCompetitionParticipantState enum.
         * @name wm.protobuf.GhostCompetitionParticipantState
         * @enum {number}
         * @property {number} COMPETITION_NOT_PARTICIPATED=1 COMPETITION_NOT_PARTICIPATED value
         * @property {number} COMPETITION_QUALIFIED=2 COMPETITION_QUALIFIED value
         * @property {number} COMPETITION_PARTICIPATED=3 COMPETITION_PARTICIPATED value
         * @property {number} COMPETITION_WON=4 COMPETITION_WON value
         */
        protobuf.GhostCompetitionParticipantState = (function() {
            const valuesById = {}, values = Object.create(valuesById);
            values[valuesById[1] = "COMPETITION_NOT_PARTICIPATED"] = 1;
            values[valuesById[2] = "COMPETITION_QUALIFIED"] = 2;
            values[valuesById[3] = "COMPETITION_PARTICIPATED"] = 3;
            values[valuesById[4] = "COMPETITION_WON"] = 4;
            return values;
        })();

        /**
         * GhostExpeditionParticipantState enum.
         * @name wm.protobuf.GhostExpeditionParticipantState
         * @enum {number}
         * @property {number} EXPEDITION_NOT_PARTICIPATED=1 EXPEDITION_NOT_PARTICIPATED value
         * @property {number} EXPEDITION_PARTICIPATED=2 EXPEDITION_PARTICIPATED value
         * @property {number} EXPEDITION_RESULT_CONFIRMED=3 EXPEDITION_RESULT_CONFIRMED value
         */
        protobuf.GhostExpeditionParticipantState = (function() {
            const valuesById = {}, values = Object.create(valuesById);
            values[valuesById[1] = "EXPEDITION_NOT_PARTICIPATED"] = 1;
            values[valuesById[2] = "EXPEDITION_PARTICIPATED"] = 2;
            values[valuesById[3] = "EXPEDITION_RESULT_CONFIRMED"] = 3;
            return values;
        })();

        /**
         * GhostKoshienParticipantState enum.
         * @name wm.protobuf.GhostKoshienParticipantState
         * @enum {number}
         * @property {number} KOSHIEN_NOT_PARTICIPATED=1 KOSHIEN_NOT_PARTICIPATED value
         * @property {number} KOSHIEN_FIRST_QUALIFIED=2 KOSHIEN_FIRST_QUALIFIED value
         * @property {number} KOSHIEN_SECOND_QUALIFIED=3 KOSHIEN_SECOND_QUALIFIED value
         * @property {number} KOSHIEN_REGION_PARTICIPATED=4 KOSHIEN_REGION_PARTICIPATED value
         * @property {number} KOSHIEN_PARTICIPATED=5 KOSHIEN_PARTICIPATED value
         * @property {number} KOSHIEN_FIRST_QUALIFIED_LOSE=6 KOSHIEN_FIRST_QUALIFIED_LOSE value
         * @property {number} KOSHIEN_SECOND_QUALIFIED_LOSE=7 KOSHIEN_SECOND_QUALIFIED_LOSE value
         * @property {number} KOSHIEN_REGION_PARTICIPATED_LOSE=8 KOSHIEN_REGION_PARTICIPATED_LOSE value
         * @property {number} KOSHIEN_WON=9 KOSHIEN_WON value
         * @property {number} KOSHIEN_UNUSED=10 KOSHIEN_UNUSED value
         */
        protobuf.GhostKoshienParticipantState = (function() {
            const valuesById = {}, values = Object.create(valuesById);
            values[valuesById[1] = "KOSHIEN_NOT_PARTICIPATED"] = 1;
            values[valuesById[2] = "KOSHIEN_FIRST_QUALIFIED"] = 2;
            values[valuesById[3] = "KOSHIEN_SECOND_QUALIFIED"] = 3;
            values[valuesById[4] = "KOSHIEN_REGION_PARTICIPATED"] = 4;
            values[valuesById[5] = "KOSHIEN_PARTICIPATED"] = 5;
            values[valuesById[6] = "KOSHIEN_FIRST_QUALIFIED_LOSE"] = 6;
            values[valuesById[7] = "KOSHIEN_SECOND_QUALIFIED_LOSE"] = 7;
            values[valuesById[8] = "KOSHIEN_REGION_PARTICIPATED_LOSE"] = 8;
            values[valuesById[9] = "KOSHIEN_WON"] = 9;
            values[valuesById[10] = "KOSHIEN_UNUSED"] = 10;
            return values;
        })();

        /**
         * ScreenshotType enum.
         * @name wm.protobuf.ScreenshotType
         * @enum {number}
         * @property {number} SS_GHOST_BATTLE=1 SS_GHOST_BATTLE value
         * @property {number} SS_VERSUS_BATTLE=2 SS_VERSUS_BATTLE value
         * @property {number} SS_TERMINAL=3 SS_TERMINAL value
         * @property {number} SS_ACQUIRING_VERSUS_STAR=4 SS_ACQUIRING_VERSUS_STAR value
         * @property {number} SS_ACQUIRING_AURA_MOTIF=5 SS_ACQUIRING_AURA_MOTIF value
         * @property {number} SS_GHOST_TROPHY=6 SS_GHOST_TROPHY value
         * @property {number} SS_ACQUIRING_CROWN=7 SS_ACQUIRING_CROWN value
         * @property {number} SS_GHOST_COMPETITION_RESULT=8 SS_GHOST_COMPETITION_RESULT value
         * @property {number} SS_TIME_ATTACK_RESULT=9 SS_TIME_ATTACK_RESULT value
         * @property {number} SS_LEVEL_UP=10 SS_LEVEL_UP value
         * @property {number} SS_GHOST_KOSHIEN_RESULT=11 SS_GHOST_KOSHIEN_RESULT value
         */
        protobuf.ScreenshotType = (function() {
            const valuesById = {}, values = Object.create(valuesById);
            values[valuesById[1] = "SS_GHOST_BATTLE"] = 1;
            values[valuesById[2] = "SS_VERSUS_BATTLE"] = 2;
            values[valuesById[3] = "SS_TERMINAL"] = 3;
            values[valuesById[4] = "SS_ACQUIRING_VERSUS_STAR"] = 4;
            values[valuesById[5] = "SS_ACQUIRING_AURA_MOTIF"] = 5;
            values[valuesById[6] = "SS_GHOST_TROPHY"] = 6;
            values[valuesById[7] = "SS_ACQUIRING_CROWN"] = 7;
            values[valuesById[8] = "SS_GHOST_COMPETITION_RESULT"] = 8;
            values[valuesById[9] = "SS_TIME_ATTACK_RESULT"] = 9;
            values[valuesById[10] = "SS_LEVEL_UP"] = 10;
            values[valuesById[11] = "SS_GHOST_KOSHIEN_RESULT"] = 11;
            return values;
        })();

        /**
         * TransferState enum.
         * @name wm.protobuf.TransferState
         * @enum {number}
         * @property {number} NOT_REGISTERED=0 NOT_REGISTERED value
         * @property {number} NEW_REGISTRATION=1 NEW_REGISTRATION value
         * @property {number} TRANSFER_REQUIRED=2 TRANSFER_REQUIRED value
         * @property {number} TRANSFERRING=3 TRANSFERRING value
         * @property {number} TRANSFERRED=4 TRANSFERRED value
         */
        protobuf.TransferState = (function() {
            const valuesById = {}, values = Object.create(valuesById);
            values[valuesById[0] = "NOT_REGISTERED"] = 0;
            values[valuesById[1] = "NEW_REGISTRATION"] = 1;
            values[valuesById[2] = "TRANSFER_REQUIRED"] = 2;
            values[valuesById[3] = "TRANSFERRING"] = 3;
            values[valuesById[4] = "TRANSFERRED"] = 4;
            return values;
        })();

        /**
         * EventModeSerialErrorCode enum.
         * @name wm.protobuf.EventModeSerialErrorCode
         * @enum {number}
         * @property {number} SERIAL_SUCCESS=0 SERIAL_SUCCESS value
         * @property {number} SERIAL_ATTEMPT_TO_CHANGE=1 SERIAL_ATTEMPT_TO_CHANGE value
         * @property {number} SERIAL_NO_INPUT=2 SERIAL_NO_INPUT value
         * @property {number} SERIAL_INVALID=3 SERIAL_INVALID value
         * @property {number} SERIAL_EXPIRED=4 SERIAL_EXPIRED value
         * @property {number} SERIAL_OTHER_PLACE=5 SERIAL_OTHER_PLACE value
         */
        protobuf.EventModeSerialErrorCode = (function() {
            const valuesById = {}, values = Object.create(valuesById);
            values[valuesById[0] = "SERIAL_SUCCESS"] = 0;
            values[valuesById[1] = "SERIAL_ATTEMPT_TO_CHANGE"] = 1;
            values[valuesById[2] = "SERIAL_NO_INPUT"] = 2;
            values[valuesById[3] = "SERIAL_INVALID"] = 3;
            values[valuesById[4] = "SERIAL_EXPIRED"] = 4;
            values[valuesById[5] = "SERIAL_OTHER_PLACE"] = 5;
            return values;
        })();

        /**
         * ClientLogType enum.
         * @name wm.protobuf.ClientLogType
         * @enum {number}
         * @property {number} LOG_LOAD_REPORT=0 LOG_LOAD_REPORT value
         * @property {number} LOG_ERROR=1 LOG_ERROR value
         */
        protobuf.ClientLogType = (function() {
            const valuesById = {}, values = Object.create(valuesById);
            values[valuesById[0] = "LOG_LOAD_REPORT"] = 0;
            values[valuesById[1] = "LOG_ERROR"] = 1;
            return values;
        })();

        /**
         * SmartphoneAppState enum.
         * @name wm.protobuf.SmartphoneAppState
         * @enum {number}
         * @property {number} SPAPP_UNREGISTERED=0 SPAPP_UNREGISTERED value
         * @property {number} SPAPP_KTID=1 SPAPP_KTID value
         * @property {number} SPAPP_BNID=2 SPAPP_BNID value
         */
        protobuf.SmartphoneAppState = (function() {
            const valuesById = {}, values = Object.create(valuesById);
            values[valuesById[0] = "SPAPP_UNREGISTERED"] = 0;
            values[valuesById[1] = "SPAPP_KTID"] = 1;
            values[valuesById[2] = "SPAPP_BNID"] = 2;
            return values;
        })();

        /**
         * MethodType enum.
         * @name wm.protobuf.MethodType
         * @enum {number}
         * @property {number} MT_LOAD_CAR=1 MT_LOAD_CAR value
         * @property {number} MT_LOAD_GHOST_DRIVE_DATA=2 MT_LOAD_GHOST_DRIVE_DATA value
         * @property {number} MT_LOAD_USER=3 MT_LOAD_USER value
         * @property {number} MT_REGISTER_GHOST_TRAIL=4 MT_REGISTER_GHOST_TRAIL value
         * @property {number} MT_REGISTER_SYSTEM_INFO=5 MT_REGISTER_SYSTEM_INFO value
         * @property {number} MT_SAVE_CHARGE=6 MT_SAVE_CHARGE value
         * @property {number} MT_SAVE_GAME_RESULT=7 MT_SAVE_GAME_RESULT value
         * @property {number} MT_SAVE_SCREENSHOT=8 MT_SAVE_SCREENSHOT value
         * @property {number} RS_GHOST_TRAIL=9 RS_GHOST_TRAIL value
         */
        protobuf.MethodType = (function() {
            const valuesById = {}, values = Object.create(valuesById);
            values[valuesById[1] = "MT_LOAD_CAR"] = 1;
            values[valuesById[2] = "MT_LOAD_GHOST_DRIVE_DATA"] = 2;
            values[valuesById[3] = "MT_LOAD_USER"] = 3;
            values[valuesById[4] = "MT_REGISTER_GHOST_TRAIL"] = 4;
            values[valuesById[5] = "MT_REGISTER_SYSTEM_INFO"] = 5;
            values[valuesById[6] = "MT_SAVE_CHARGE"] = 6;
            values[valuesById[7] = "MT_SAVE_GAME_RESULT"] = 7;
            values[valuesById[8] = "MT_SAVE_SCREENSHOT"] = 8;
            values[valuesById[9] = "RS_GHOST_TRAIL"] = 9;
            return values;
        })();

        protobuf.RegisterSystemInfoRequest = (function() {

            /**
             * Properties of a RegisterSystemInfoRequest.
             * @memberof wm.protobuf
             * @interface IRegisterSystemInfoRequest
             * @property {string} pcbSerial RegisterSystemInfoRequest pcbSerial
             * @property {wm.protobuf.TerminalType} terminalType RegisterSystemInfoRequest terminalType
             * @property {number} romVersion RegisterSystemInfoRequest romVersion
             * @property {string} country RegisterSystemInfoRequest country
             * @property {wm.protobuf.LineType} lineType RegisterSystemInfoRequest lineType
             * @property {string} shopName RegisterSystemInfoRequest shopName
             * @property {string} shopNickname RegisterSystemInfoRequest shopNickname
             * @property {number|null} [allnetPlaceId] RegisterSystemInfoRequest allnetPlaceId
             * @property {number|null} [allnetRegion0] RegisterSystemInfoRequest allnetRegion0
             * @property {string|null} [muchaPlaceId] RegisterSystemInfoRequest muchaPlaceId
             * @property {number|null} [muchaPrefectureId] RegisterSystemInfoRequest muchaPrefectureId
             * @property {string} regionName0 RegisterSystemInfoRequest regionName0
             * @property {string} regionName1 RegisterSystemInfoRequest regionName1
             * @property {string} regionName2 RegisterSystemInfoRequest regionName2
             * @property {string} regionName3 RegisterSystemInfoRequest regionName3
             * @property {number} timezoneOffset RegisterSystemInfoRequest timezoneOffset
             * @property {wm.protobuf.ISystemSetting} systemSetting RegisterSystemInfoRequest systemSetting
             * @property {Array.<wm.protobuf.RegisterSystemInfoRequest.IErrorLogEntry>|null} [errorLogs] RegisterSystemInfoRequest errorLogs
             * @property {string|null} [pcbSerialSecond] RegisterSystemInfoRequest pcbSerialSecond
             */

            /**
             * Constructs a new RegisterSystemInfoRequest.
             * @memberof wm.protobuf
             * @classdesc Represents a RegisterSystemInfoRequest.
             * @implements IRegisterSystemInfoRequest
             * @constructor
             * @param {wm.protobuf.IRegisterSystemInfoRequest=} [properties] Properties to set
             */
            function RegisterSystemInfoRequest(properties) {
                this.errorLogs = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * RegisterSystemInfoRequest pcbSerial.
             * @member {string} pcbSerial
             * @memberof wm.protobuf.RegisterSystemInfoRequest
             * @instance
             */
            RegisterSystemInfoRequest.prototype.pcbSerial = "";

            /**
             * RegisterSystemInfoRequest terminalType.
             * @member {wm.protobuf.TerminalType} terminalType
             * @memberof wm.protobuf.RegisterSystemInfoRequest
             * @instance
             */
            RegisterSystemInfoRequest.prototype.terminalType = 0;

            /**
             * RegisterSystemInfoRequest romVersion.
             * @member {number} romVersion
             * @memberof wm.protobuf.RegisterSystemInfoRequest
             * @instance
             */
            RegisterSystemInfoRequest.prototype.romVersion = 0;

            /**
             * RegisterSystemInfoRequest country.
             * @member {string} country
             * @memberof wm.protobuf.RegisterSystemInfoRequest
             * @instance
             */
            RegisterSystemInfoRequest.prototype.country = "";

            /**
             * RegisterSystemInfoRequest lineType.
             * @member {wm.protobuf.LineType} lineType
             * @memberof wm.protobuf.RegisterSystemInfoRequest
             * @instance
             */
            RegisterSystemInfoRequest.prototype.lineType = 0;

            /**
             * RegisterSystemInfoRequest shopName.
             * @member {string} shopName
             * @memberof wm.protobuf.RegisterSystemInfoRequest
             * @instance
             */
            RegisterSystemInfoRequest.prototype.shopName = "";

            /**
             * RegisterSystemInfoRequest shopNickname.
             * @member {string} shopNickname
             * @memberof wm.protobuf.RegisterSystemInfoRequest
             * @instance
             */
            RegisterSystemInfoRequest.prototype.shopNickname = "";

            /**
             * RegisterSystemInfoRequest allnetPlaceId.
             * @member {number} allnetPlaceId
             * @memberof wm.protobuf.RegisterSystemInfoRequest
             * @instance
             */
            RegisterSystemInfoRequest.prototype.allnetPlaceId = 0;

            /**
             * RegisterSystemInfoRequest allnetRegion0.
             * @member {number} allnetRegion0
             * @memberof wm.protobuf.RegisterSystemInfoRequest
             * @instance
             */
            RegisterSystemInfoRequest.prototype.allnetRegion0 = 0;

            /**
             * RegisterSystemInfoRequest muchaPlaceId.
             * @member {string} muchaPlaceId
             * @memberof wm.protobuf.RegisterSystemInfoRequest
             * @instance
             */
            RegisterSystemInfoRequest.prototype.muchaPlaceId = "";

            /**
             * RegisterSystemInfoRequest muchaPrefectureId.
             * @member {number} muchaPrefectureId
             * @memberof wm.protobuf.RegisterSystemInfoRequest
             * @instance
             */
            RegisterSystemInfoRequest.prototype.muchaPrefectureId = 0;

            /**
             * RegisterSystemInfoRequest regionName0.
             * @member {string} regionName0
             * @memberof wm.protobuf.RegisterSystemInfoRequest
             * @instance
             */
            RegisterSystemInfoRequest.prototype.regionName0 = "";

            /**
             * RegisterSystemInfoRequest regionName1.
             * @member {string} regionName1
             * @memberof wm.protobuf.RegisterSystemInfoRequest
             * @instance
             */
            RegisterSystemInfoRequest.prototype.regionName1 = "";

            /**
             * RegisterSystemInfoRequest regionName2.
             * @member {string} regionName2
             * @memberof wm.protobuf.RegisterSystemInfoRequest
             * @instance
             */
            RegisterSystemInfoRequest.prototype.regionName2 = "";

            /**
             * RegisterSystemInfoRequest regionName3.
             * @member {string} regionName3
             * @memberof wm.protobuf.RegisterSystemInfoRequest
             * @instance
             */
            RegisterSystemInfoRequest.prototype.regionName3 = "";

            /**
             * RegisterSystemInfoRequest timezoneOffset.
             * @member {number} timezoneOffset
             * @memberof wm.protobuf.RegisterSystemInfoRequest
             * @instance
             */
            RegisterSystemInfoRequest.prototype.timezoneOffset = 0;

            /**
             * RegisterSystemInfoRequest systemSetting.
             * @member {wm.protobuf.ISystemSetting} systemSetting
             * @memberof wm.protobuf.RegisterSystemInfoRequest
             * @instance
             */
            RegisterSystemInfoRequest.prototype.systemSetting = null;

            /**
             * RegisterSystemInfoRequest errorLogs.
             * @member {Array.<wm.protobuf.RegisterSystemInfoRequest.IErrorLogEntry>} errorLogs
             * @memberof wm.protobuf.RegisterSystemInfoRequest
             * @instance
             */
            RegisterSystemInfoRequest.prototype.errorLogs = $util.emptyArray;

            /**
             * RegisterSystemInfoRequest pcbSerialSecond.
             * @member {string} pcbSerialSecond
             * @memberof wm.protobuf.RegisterSystemInfoRequest
             * @instance
             */
            RegisterSystemInfoRequest.prototype.pcbSerialSecond = "";

            /**
             * Creates a new RegisterSystemInfoRequest instance using the specified properties.
             * @function create
             * @memberof wm.protobuf.RegisterSystemInfoRequest
             * @static
             * @param {wm.protobuf.IRegisterSystemInfoRequest=} [properties] Properties to set
             * @returns {wm.protobuf.RegisterSystemInfoRequest} RegisterSystemInfoRequest instance
             */
            RegisterSystemInfoRequest.create = function create(properties) {
                return new RegisterSystemInfoRequest(properties);
            };

            /**
             * Encodes the specified RegisterSystemInfoRequest message. Does not implicitly {@link wm.protobuf.RegisterSystemInfoRequest.verify|verify} messages.
             * @function encode
             * @memberof wm.protobuf.RegisterSystemInfoRequest
             * @static
             * @param {wm.protobuf.IRegisterSystemInfoRequest} message RegisterSystemInfoRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RegisterSystemInfoRequest.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.pcbSerial);
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.terminalType);
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.romVersion);
                writer.uint32(/* id 4, wireType 2 =*/34).string(message.country);
                writer.uint32(/* id 5, wireType 0 =*/40).int32(message.lineType);
                writer.uint32(/* id 6, wireType 2 =*/50).string(message.shopName);
                writer.uint32(/* id 7, wireType 2 =*/58).string(message.shopNickname);
                if (message.allnetPlaceId != null && Object.hasOwnProperty.call(message, "allnetPlaceId"))
                    writer.uint32(/* id 8, wireType 0 =*/64).uint32(message.allnetPlaceId);
                if (message.allnetRegion0 != null && Object.hasOwnProperty.call(message, "allnetRegion0"))
                    writer.uint32(/* id 9, wireType 0 =*/72).uint32(message.allnetRegion0);
                if (message.muchaPlaceId != null && Object.hasOwnProperty.call(message, "muchaPlaceId"))
                    writer.uint32(/* id 10, wireType 2 =*/82).string(message.muchaPlaceId);
                if (message.muchaPrefectureId != null && Object.hasOwnProperty.call(message, "muchaPrefectureId"))
                    writer.uint32(/* id 11, wireType 0 =*/88).uint32(message.muchaPrefectureId);
                writer.uint32(/* id 12, wireType 2 =*/98).string(message.regionName0);
                writer.uint32(/* id 13, wireType 2 =*/106).string(message.regionName1);
                writer.uint32(/* id 14, wireType 2 =*/114).string(message.regionName2);
                writer.uint32(/* id 15, wireType 2 =*/122).string(message.regionName3);
                writer.uint32(/* id 16, wireType 0 =*/128).sint32(message.timezoneOffset);
                $root.wm.protobuf.SystemSetting.encode(message.systemSetting, writer.uint32(/* id 17, wireType 2 =*/138).fork()).ldelim();
                if (message.errorLogs != null && message.errorLogs.length)
                    for (let i = 0; i < message.errorLogs.length; ++i)
                        $root.wm.protobuf.RegisterSystemInfoRequest.ErrorLogEntry.encode(message.errorLogs[i], writer.uint32(/* id 18, wireType 2 =*/146).fork()).ldelim();
                if (message.pcbSerialSecond != null && Object.hasOwnProperty.call(message, "pcbSerialSecond"))
                    writer.uint32(/* id 19, wireType 2 =*/154).string(message.pcbSerialSecond);
                return writer;
            };

            /**
             * Encodes the specified RegisterSystemInfoRequest message, length delimited. Does not implicitly {@link wm.protobuf.RegisterSystemInfoRequest.verify|verify} messages.
             * @function encodeDelimited
             * @memberof wm.protobuf.RegisterSystemInfoRequest
             * @static
             * @param {wm.protobuf.IRegisterSystemInfoRequest} message RegisterSystemInfoRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RegisterSystemInfoRequest.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a RegisterSystemInfoRequest message from the specified reader or buffer.
             * @function decode
             * @memberof wm.protobuf.RegisterSystemInfoRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {wm.protobuf.RegisterSystemInfoRequest} RegisterSystemInfoRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RegisterSystemInfoRequest.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.wm.protobuf.RegisterSystemInfoRequest();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.pcbSerial = reader.string();
                            break;
                        }
                    case 2: {
                            message.terminalType = reader.int32();
                            break;
                        }
                    case 3: {
                            message.romVersion = reader.uint32();
                            break;
                        }
                    case 4: {
                            message.country = reader.string();
                            break;
                        }
                    case 5: {
                            message.lineType = reader.int32();
                            break;
                        }
                    case 6: {
                            message.shopName = reader.string();
                            break;
                        }
                    case 7: {
                            message.shopNickname = reader.string();
                            break;
                        }
                    case 8: {
                            message.allnetPlaceId = reader.uint32();
                            break;
                        }
                    case 9: {
                            message.allnetRegion0 = reader.uint32();
                            break;
                        }
                    case 10: {
                            message.muchaPlaceId = reader.string();
                            break;
                        }
                    case 11: {
                            message.muchaPrefectureId = reader.uint32();
                            break;
                        }
                    case 12: {
                            message.regionName0 = reader.string();
                            break;
                        }
                    case 13: {
                            message.regionName1 = reader.string();
                            break;
                        }
                    case 14: {
                            message.regionName2 = reader.string();
                            break;
                        }
                    case 15: {
                            message.regionName3 = reader.string();
                            break;
                        }
                    case 16: {
                            message.timezoneOffset = reader.sint32();
                            break;
                        }
                    case 17: {
                            message.systemSetting = $root.wm.protobuf.SystemSetting.decode(reader, reader.uint32());
                            break;
                        }
                    case 18: {
                            if (!(message.errorLogs && message.errorLogs.length))
                                message.errorLogs = [];
                            message.errorLogs.push($root.wm.protobuf.RegisterSystemInfoRequest.ErrorLogEntry.decode(reader, reader.uint32()));
                            break;
                        }
                    case 19: {
                            message.pcbSerialSecond = reader.string();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("pcbSerial"))
                    throw $util.ProtocolError("missing required 'pcbSerial'", { instance: message });
                if (!message.hasOwnProperty("terminalType"))
                    throw $util.ProtocolError("missing required 'terminalType'", { instance: message });
                if (!message.hasOwnProperty("romVersion"))
                    throw $util.ProtocolError("missing required 'romVersion'", { instance: message });
                if (!message.hasOwnProperty("country"))
                    throw $util.ProtocolError("missing required 'country'", { instance: message });
                if (!message.hasOwnProperty("lineType"))
                    throw $util.ProtocolError("missing required 'lineType'", { instance: message });
                if (!message.hasOwnProperty("shopName"))
                    throw $util.ProtocolError("missing required 'shopName'", { instance: message });
                if (!message.hasOwnProperty("shopNickname"))
                    throw $util.ProtocolError("missing required 'shopNickname'", { instance: message });
                if (!message.hasOwnProperty("regionName0"))
                    throw $util.ProtocolError("missing required 'regionName0'", { instance: message });
                if (!message.hasOwnProperty("regionName1"))
                    throw $util.ProtocolError("missing required 'regionName1'", { instance: message });
                if (!message.hasOwnProperty("regionName2"))
                    throw $util.ProtocolError("missing required 'regionName2'", { instance: message });
                if (!message.hasOwnProperty("regionName3"))
                    throw $util.ProtocolError("missing required 'regionName3'", { instance: message });
                if (!message.hasOwnProperty("timezoneOffset"))
                    throw $util.ProtocolError("missing required 'timezoneOffset'", { instance: message });
                if (!message.hasOwnProperty("systemSetting"))
                    throw $util.ProtocolError("missing required 'systemSetting'", { instance: message });
                return message;
            };

            /**
             * Decodes a RegisterSystemInfoRequest message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof wm.protobuf.RegisterSystemInfoRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {wm.protobuf.RegisterSystemInfoRequest} RegisterSystemInfoRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RegisterSystemInfoRequest.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a RegisterSystemInfoRequest message.
             * @function verify
             * @memberof wm.protobuf.RegisterSystemInfoRequest
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            RegisterSystemInfoRequest.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (!$util.isString(message.pcbSerial))
                    return "pcbSerial: string expected";
                switch (message.terminalType) {
                default:
                    return "terminalType: enum value expected";
                case 0:
                case 1:
                    break;
                }
                if (!$util.isInteger(message.romVersion))
                    return "romVersion: integer expected";
                if (!$util.isString(message.country))
                    return "country: string expected";
                switch (message.lineType) {
                default:
                    return "lineType: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                    break;
                }
                if (!$util.isString(message.shopName))
                    return "shopName: string expected";
                if (!$util.isString(message.shopNickname))
                    return "shopNickname: string expected";
                if (message.allnetPlaceId != null && message.hasOwnProperty("allnetPlaceId"))
                    if (!$util.isInteger(message.allnetPlaceId))
                        return "allnetPlaceId: integer expected";
                if (message.allnetRegion0 != null && message.hasOwnProperty("allnetRegion0"))
                    if (!$util.isInteger(message.allnetRegion0))
                        return "allnetRegion0: integer expected";
                if (message.muchaPlaceId != null && message.hasOwnProperty("muchaPlaceId"))
                    if (!$util.isString(message.muchaPlaceId))
                        return "muchaPlaceId: string expected";
                if (message.muchaPrefectureId != null && message.hasOwnProperty("muchaPrefectureId"))
                    if (!$util.isInteger(message.muchaPrefectureId))
                        return "muchaPrefectureId: integer expected";
                if (!$util.isString(message.regionName0))
                    return "regionName0: string expected";
                if (!$util.isString(message.regionName1))
                    return "regionName1: string expected";
                if (!$util.isString(message.regionName2))
                    return "regionName2: string expected";
                if (!$util.isString(message.regionName3))
                    return "regionName3: string expected";
                if (!$util.isInteger(message.timezoneOffset))
                    return "timezoneOffset: integer expected";
                {
                    let error = $root.wm.protobuf.SystemSetting.verify(message.systemSetting);
                    if (error)
                        return "systemSetting." + error;
                }
                if (message.errorLogs != null && message.hasOwnProperty("errorLogs")) {
                    if (!Array.isArray(message.errorLogs))
                        return "errorLogs: array expected";
                    for (let i = 0; i < message.errorLogs.length; ++i) {
                        let error = $root.wm.protobuf.RegisterSystemInfoRequest.ErrorLogEntry.verify(message.errorLogs[i]);
                        if (error)
                            return "errorLogs." + error;
                    }
                }
                if (message.pcbSerialSecond != null && message.hasOwnProperty("pcbSerialSecond"))
                    if (!$util.isString(message.pcbSerialSecond))
                        return "pcbSerialSecond: string expected";
                return null;
            };

            /**
             * Creates a RegisterSystemInfoRequest message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof wm.protobuf.RegisterSystemInfoRequest
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {wm.protobuf.RegisterSystemInfoRequest} RegisterSystemInfoRequest
             */
            RegisterSystemInfoRequest.fromObject = function fromObject(object) {
                if (object instanceof $root.wm.protobuf.RegisterSystemInfoRequest)
                    return object;
                let message = new $root.wm.protobuf.RegisterSystemInfoRequest();
                if (object.pcbSerial != null)
                    message.pcbSerial = String(object.pcbSerial);
                switch (object.terminalType) {
                default:
                    if (typeof object.terminalType === "number") {
                        message.terminalType = object.terminalType;
                        break;
                    }
                    break;
                case "T_DRIVE":
                case 0:
                    message.terminalType = 0;
                    break;
                case "T_TERMINAL":
                case 1:
                    message.terminalType = 1;
                    break;
                }
                if (object.romVersion != null)
                    message.romVersion = object.romVersion >>> 0;
                if (object.country != null)
                    message.country = String(object.country);
                switch (object.lineType) {
                default:
                    if (typeof object.lineType === "number") {
                        message.lineType = object.lineType;
                        break;
                    }
                    break;
                case "L_UNKNOWN":
                case 0:
                    message.lineType = 0;
                    break;
                case "L_MOBILE":
                case 1:
                    message.lineType = 1;
                    break;
                case "L_ISDN":
                case 2:
                    message.lineType = 2;
                    break;
                case "L_BFLETS":
                case 3:
                    message.lineType = 3;
                    break;
                case "L_ADSL":
                case 4:
                    message.lineType = 4;
                    break;
                case "L_WIRED":
                case 5:
                    message.lineType = 5;
                    break;
                }
                if (object.shopName != null)
                    message.shopName = String(object.shopName);
                if (object.shopNickname != null)
                    message.shopNickname = String(object.shopNickname);
                if (object.allnetPlaceId != null)
                    message.allnetPlaceId = object.allnetPlaceId >>> 0;
                if (object.allnetRegion0 != null)
                    message.allnetRegion0 = object.allnetRegion0 >>> 0;
                if (object.muchaPlaceId != null)
                    message.muchaPlaceId = String(object.muchaPlaceId);
                if (object.muchaPrefectureId != null)
                    message.muchaPrefectureId = object.muchaPrefectureId >>> 0;
                if (object.regionName0 != null)
                    message.regionName0 = String(object.regionName0);
                if (object.regionName1 != null)
                    message.regionName1 = String(object.regionName1);
                if (object.regionName2 != null)
                    message.regionName2 = String(object.regionName2);
                if (object.regionName3 != null)
                    message.regionName3 = String(object.regionName3);
                if (object.timezoneOffset != null)
                    message.timezoneOffset = object.timezoneOffset | 0;
                if (object.systemSetting != null) {
                    if (typeof object.systemSetting !== "object")
                        throw TypeError(".wm.protobuf.RegisterSystemInfoRequest.systemSetting: object expected");
                    message.systemSetting = $root.wm.protobuf.SystemSetting.fromObject(object.systemSetting);
                }
                if (object.errorLogs) {
                    if (!Array.isArray(object.errorLogs))
                        throw TypeError(".wm.protobuf.RegisterSystemInfoRequest.errorLogs: array expected");
                    message.errorLogs = [];
                    for (let i = 0; i < object.errorLogs.length; ++i) {
                        if (typeof object.errorLogs[i] !== "object")
                            throw TypeError(".wm.protobuf.RegisterSystemInfoRequest.errorLogs: object expected");
                        message.errorLogs[i] = $root.wm.protobuf.RegisterSystemInfoRequest.ErrorLogEntry.fromObject(object.errorLogs[i]);
                    }
                }
                if (object.pcbSerialSecond != null)
                    message.pcbSerialSecond = String(object.pcbSerialSecond);
                return message;
            };

            /**
             * Creates a plain object from a RegisterSystemInfoRequest message. Also converts values to other types if specified.
             * @function toObject
             * @memberof wm.protobuf.RegisterSystemInfoRequest
             * @static
             * @param {wm.protobuf.RegisterSystemInfoRequest} message RegisterSystemInfoRequest
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            RegisterSystemInfoRequest.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.errorLogs = [];
                if (options.defaults) {
                    object.pcbSerial = "";
                    object.terminalType = options.enums === String ? "T_DRIVE" : 0;
                    object.romVersion = 0;
                    object.country = "";
                    object.lineType = options.enums === String ? "L_UNKNOWN" : 0;
                    object.shopName = "";
                    object.shopNickname = "";
                    object.allnetPlaceId = 0;
                    object.allnetRegion0 = 0;
                    object.muchaPlaceId = "";
                    object.muchaPrefectureId = 0;
                    object.regionName0 = "";
                    object.regionName1 = "";
                    object.regionName2 = "";
                    object.regionName3 = "";
                    object.timezoneOffset = 0;
                    object.systemSetting = null;
                    object.pcbSerialSecond = "";
                }
                if (message.pcbSerial != null && message.hasOwnProperty("pcbSerial"))
                    object.pcbSerial = message.pcbSerial;
                if (message.terminalType != null && message.hasOwnProperty("terminalType"))
                    object.terminalType = options.enums === String ? $root.wm.protobuf.TerminalType[message.terminalType] === undefined ? message.terminalType : $root.wm.protobuf.TerminalType[message.terminalType] : message.terminalType;
                if (message.romVersion != null && message.hasOwnProperty("romVersion"))
                    object.romVersion = message.romVersion;
                if (message.country != null && message.hasOwnProperty("country"))
                    object.country = message.country;
                if (message.lineType != null && message.hasOwnProperty("lineType"))
                    object.lineType = options.enums === String ? $root.wm.protobuf.LineType[message.lineType] === undefined ? message.lineType : $root.wm.protobuf.LineType[message.lineType] : message.lineType;
                if (message.shopName != null && message.hasOwnProperty("shopName"))
                    object.shopName = message.shopName;
                if (message.shopNickname != null && message.hasOwnProperty("shopNickname"))
                    object.shopNickname = message.shopNickname;
                if (message.allnetPlaceId != null && message.hasOwnProperty("allnetPlaceId"))
                    object.allnetPlaceId = message.allnetPlaceId;
                if (message.allnetRegion0 != null && message.hasOwnProperty("allnetRegion0"))
                    object.allnetRegion0 = message.allnetRegion0;
                if (message.muchaPlaceId != null && message.hasOwnProperty("muchaPlaceId"))
                    object.muchaPlaceId = message.muchaPlaceId;
                if (message.muchaPrefectureId != null && message.hasOwnProperty("muchaPrefectureId"))
                    object.muchaPrefectureId = message.muchaPrefectureId;
                if (message.regionName0 != null && message.hasOwnProperty("regionName0"))
                    object.regionName0 = message.regionName0;
                if (message.regionName1 != null && message.hasOwnProperty("regionName1"))
                    object.regionName1 = message.regionName1;
                if (message.regionName2 != null && message.hasOwnProperty("regionName2"))
                    object.regionName2 = message.regionName2;
                if (message.regionName3 != null && message.hasOwnProperty("regionName3"))
                    object.regionName3 = message.regionName3;
                if (message.timezoneOffset != null && message.hasOwnProperty("timezoneOffset"))
                    object.timezoneOffset = message.timezoneOffset;
                if (message.systemSetting != null && message.hasOwnProperty("systemSetting"))
                    object.systemSetting = $root.wm.protobuf.SystemSetting.toObject(message.systemSetting, options);
                if (message.errorLogs && message.errorLogs.length) {
                    object.errorLogs = [];
                    for (let j = 0; j < message.errorLogs.length; ++j)
                        object.errorLogs[j] = $root.wm.protobuf.RegisterSystemInfoRequest.ErrorLogEntry.toObject(message.errorLogs[j], options);
                }
                if (message.pcbSerialSecond != null && message.hasOwnProperty("pcbSerialSecond"))
                    object.pcbSerialSecond = message.pcbSerialSecond;
                return object;
            };

            /**
             * Converts this RegisterSystemInfoRequest to JSON.
             * @function toJSON
             * @memberof wm.protobuf.RegisterSystemInfoRequest
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            RegisterSystemInfoRequest.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for RegisterSystemInfoRequest
             * @function getTypeUrl
             * @memberof wm.protobuf.RegisterSystemInfoRequest
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            RegisterSystemInfoRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/wm.protobuf.RegisterSystemInfoRequest";
            };

            RegisterSystemInfoRequest.ErrorLogEntry = (function() {

                /**
                 * Properties of an ErrorLogEntry.
                 * @memberof wm.protobuf.RegisterSystemInfoRequest
                 * @interface IErrorLogEntry
                 * @property {number} datetime ErrorLogEntry datetime
                 * @property {string} message ErrorLogEntry message
                 */

                /**
                 * Constructs a new ErrorLogEntry.
                 * @memberof wm.protobuf.RegisterSystemInfoRequest
                 * @classdesc Represents an ErrorLogEntry.
                 * @implements IErrorLogEntry
                 * @constructor
                 * @param {wm.protobuf.RegisterSystemInfoRequest.IErrorLogEntry=} [properties] Properties to set
                 */
                function ErrorLogEntry(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * ErrorLogEntry datetime.
                 * @member {number} datetime
                 * @memberof wm.protobuf.RegisterSystemInfoRequest.ErrorLogEntry
                 * @instance
                 */
                ErrorLogEntry.prototype.datetime = 0;

                /**
                 * ErrorLogEntry message.
                 * @member {string} message
                 * @memberof wm.protobuf.RegisterSystemInfoRequest.ErrorLogEntry
                 * @instance
                 */
                ErrorLogEntry.prototype.message = "";

                /**
                 * Creates a new ErrorLogEntry instance using the specified properties.
                 * @function create
                 * @memberof wm.protobuf.RegisterSystemInfoRequest.ErrorLogEntry
                 * @static
                 * @param {wm.protobuf.RegisterSystemInfoRequest.IErrorLogEntry=} [properties] Properties to set
                 * @returns {wm.protobuf.RegisterSystemInfoRequest.ErrorLogEntry} ErrorLogEntry instance
                 */
                ErrorLogEntry.create = function create(properties) {
                    return new ErrorLogEntry(properties);
                };

                /**
                 * Encodes the specified ErrorLogEntry message. Does not implicitly {@link wm.protobuf.RegisterSystemInfoRequest.ErrorLogEntry.verify|verify} messages.
                 * @function encode
                 * @memberof wm.protobuf.RegisterSystemInfoRequest.ErrorLogEntry
                 * @static
                 * @param {wm.protobuf.RegisterSystemInfoRequest.IErrorLogEntry} message ErrorLogEntry message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ErrorLogEntry.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.datetime);
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.message);
                    return writer;
                };

                /**
                 * Encodes the specified ErrorLogEntry message, length delimited. Does not implicitly {@link wm.protobuf.RegisterSystemInfoRequest.ErrorLogEntry.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof wm.protobuf.RegisterSystemInfoRequest.ErrorLogEntry
                 * @static
                 * @param {wm.protobuf.RegisterSystemInfoRequest.IErrorLogEntry} message ErrorLogEntry message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ErrorLogEntry.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes an ErrorLogEntry message from the specified reader or buffer.
                 * @function decode
                 * @memberof wm.protobuf.RegisterSystemInfoRequest.ErrorLogEntry
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {wm.protobuf.RegisterSystemInfoRequest.ErrorLogEntry} ErrorLogEntry
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ErrorLogEntry.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.wm.protobuf.RegisterSystemInfoRequest.ErrorLogEntry();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.datetime = reader.uint32();
                                break;
                            }
                        case 2: {
                                message.message = reader.string();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    if (!message.hasOwnProperty("datetime"))
                        throw $util.ProtocolError("missing required 'datetime'", { instance: message });
                    if (!message.hasOwnProperty("message"))
                        throw $util.ProtocolError("missing required 'message'", { instance: message });
                    return message;
                };

                /**
                 * Decodes an ErrorLogEntry message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof wm.protobuf.RegisterSystemInfoRequest.ErrorLogEntry
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {wm.protobuf.RegisterSystemInfoRequest.ErrorLogEntry} ErrorLogEntry
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ErrorLogEntry.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies an ErrorLogEntry message.
                 * @function verify
                 * @memberof wm.protobuf.RegisterSystemInfoRequest.ErrorLogEntry
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ErrorLogEntry.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (!$util.isInteger(message.datetime))
                        return "datetime: integer expected";
                    if (!$util.isString(message.message))
                        return "message: string expected";
                    return null;
                };

                /**
                 * Creates an ErrorLogEntry message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof wm.protobuf.RegisterSystemInfoRequest.ErrorLogEntry
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {wm.protobuf.RegisterSystemInfoRequest.ErrorLogEntry} ErrorLogEntry
                 */
                ErrorLogEntry.fromObject = function fromObject(object) {
                    if (object instanceof $root.wm.protobuf.RegisterSystemInfoRequest.ErrorLogEntry)
                        return object;
                    let message = new $root.wm.protobuf.RegisterSystemInfoRequest.ErrorLogEntry();
                    if (object.datetime != null)
                        message.datetime = object.datetime >>> 0;
                    if (object.message != null)
                        message.message = String(object.message);
                    return message;
                };

                /**
                 * Creates a plain object from an ErrorLogEntry message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof wm.protobuf.RegisterSystemInfoRequest.ErrorLogEntry
                 * @static
                 * @param {wm.protobuf.RegisterSystemInfoRequest.ErrorLogEntry} message ErrorLogEntry
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ErrorLogEntry.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        object.datetime = 0;
                        object.message = "";
                    }
                    if (message.datetime != null && message.hasOwnProperty("datetime"))
                        object.datetime = message.datetime;
                    if (message.message != null && message.hasOwnProperty("message"))
                        object.message = message.message;
                    return object;
                };

                /**
                 * Converts this ErrorLogEntry to JSON.
                 * @function toJSON
                 * @memberof wm.protobuf.RegisterSystemInfoRequest.ErrorLogEntry
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ErrorLogEntry.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                /**
                 * Gets the default type url for ErrorLogEntry
                 * @function getTypeUrl
                 * @memberof wm.protobuf.RegisterSystemInfoRequest.ErrorLogEntry
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                ErrorLogEntry.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/wm.protobuf.RegisterSystemInfoRequest.ErrorLogEntry";
                };

                return ErrorLogEntry;
            })();

            return RegisterSystemInfoRequest;
        })();

        protobuf.RegisterSystemInfoResponse = (function() {

            /**
             * Properties of a RegisterSystemInfoResponse.
             * @memberof wm.protobuf
             * @interface IRegisterSystemInfoResponse
             * @property {wm.protobuf.ErrorCode} error RegisterSystemInfoResponse error
             * @property {number} regionId RegisterSystemInfoResponse regionId
             * @property {string} placeId RegisterSystemInfoResponse placeId
             * @property {Array.<wm.protobuf.ClientLogType>|null} [allowedClientLogTypes] RegisterSystemInfoResponse allowedClientLogTypes
             * @property {wm.protobuf.IGameFeatureVersion} featureVersion RegisterSystemInfoResponse featureVersion
             * @property {number|null} [latestCompetitionId] RegisterSystemInfoResponse latestCompetitionId
             * @property {wm.protobuf.IGhostCompetitionSchedule|null} [competitionSchedule] RegisterSystemInfoResponse competitionSchedule
             * @property {string|null} [scratchNotes] RegisterSystemInfoResponse scratchNotes
             * @property {wm.protobuf.IInviteFriendCampaignSchedule|null} [inviteFriendCampaignSchedule] RegisterSystemInfoResponse inviteFriendCampaignSchedule
             * @property {number} ghostSelectionMinRedoWait RegisterSystemInfoResponse ghostSelectionMinRedoWait
             * @property {number} ghostSelectionMaxRedoWait RegisterSystemInfoResponse ghostSelectionMaxRedoWait
             * @property {wm.protobuf.IGhostExpeditionSchedule|null} [expeditionSchedule] RegisterSystemInfoResponse expeditionSchedule
             * @property {boolean|null} [expeditionEventWasHeld] RegisterSystemInfoResponse expeditionEventWasHeld
             * @property {Array.<number>|null} [bingoNumbers] RegisterSystemInfoResponse bingoNumbers
             * @property {Array.<wm.protobuf.IBingoPrize>|null} [bingoPrize] RegisterSystemInfoResponse bingoPrize
             * @property {Array.<wm.protobuf.IGhostKoshienWonShop>|null} [koshienWonShopName] RegisterSystemInfoResponse koshienWonShopName
             * @property {wm.protobuf.RegisterSystemInfoResponse.IGhostKoshienInfo|null} [koshienInfo] RegisterSystemInfoResponse koshienInfo
             * @property {boolean|null} [koshienEventWasHeld] RegisterSystemInfoResponse koshienEventWasHeld
             * @property {wm.protobuf.ICarItem|null} [specialPresentItem] RegisterSystemInfoResponse specialPresentItem
             * @property {number|null} [previousKoshienId] RegisterSystemInfoResponse previousKoshienId
             * @property {wm.protobuf.IGhostKoshienPrize|null} [previousKoshienPrize] RegisterSystemInfoResponse previousKoshienPrize
             */

            /**
             * Constructs a new RegisterSystemInfoResponse.
             * @memberof wm.protobuf
             * @classdesc Represents a RegisterSystemInfoResponse.
             * @implements IRegisterSystemInfoResponse
             * @constructor
             * @param {wm.protobuf.IRegisterSystemInfoResponse=} [properties] Properties to set
             */
            function RegisterSystemInfoResponse(properties) {
                this.allowedClientLogTypes = [];
                this.bingoNumbers = [];
                this.bingoPrize = [];
                this.koshienWonShopName = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * RegisterSystemInfoResponse error.
             * @member {wm.protobuf.ErrorCode} error
             * @memberof wm.protobuf.RegisterSystemInfoResponse
             * @instance
             */
            RegisterSystemInfoResponse.prototype.error = 0;

            /**
             * RegisterSystemInfoResponse regionId.
             * @member {number} regionId
             * @memberof wm.protobuf.RegisterSystemInfoResponse
             * @instance
             */
            RegisterSystemInfoResponse.prototype.regionId = 0;

            /**
             * RegisterSystemInfoResponse placeId.
             * @member {string} placeId
             * @memberof wm.protobuf.RegisterSystemInfoResponse
             * @instance
             */
            RegisterSystemInfoResponse.prototype.placeId = "";

            /**
             * RegisterSystemInfoResponse allowedClientLogTypes.
             * @member {Array.<wm.protobuf.ClientLogType>} allowedClientLogTypes
             * @memberof wm.protobuf.RegisterSystemInfoResponse
             * @instance
             */
            RegisterSystemInfoResponse.prototype.allowedClientLogTypes = $util.emptyArray;

            /**
             * RegisterSystemInfoResponse featureVersion.
             * @member {wm.protobuf.IGameFeatureVersion} featureVersion
             * @memberof wm.protobuf.RegisterSystemInfoResponse
             * @instance
             */
            RegisterSystemInfoResponse.prototype.featureVersion = null;

            /**
             * RegisterSystemInfoResponse latestCompetitionId.
             * @member {number} latestCompetitionId
             * @memberof wm.protobuf.RegisterSystemInfoResponse
             * @instance
             */
            RegisterSystemInfoResponse.prototype.latestCompetitionId = 0;

            /**
             * RegisterSystemInfoResponse competitionSchedule.
             * @member {wm.protobuf.IGhostCompetitionSchedule|null|undefined} competitionSchedule
             * @memberof wm.protobuf.RegisterSystemInfoResponse
             * @instance
             */
            RegisterSystemInfoResponse.prototype.competitionSchedule = null;

            /**
             * RegisterSystemInfoResponse scratchNotes.
             * @member {string} scratchNotes
             * @memberof wm.protobuf.RegisterSystemInfoResponse
             * @instance
             */
            RegisterSystemInfoResponse.prototype.scratchNotes = "";

            /**
             * RegisterSystemInfoResponse inviteFriendCampaignSchedule.
             * @member {wm.protobuf.IInviteFriendCampaignSchedule|null|undefined} inviteFriendCampaignSchedule
             * @memberof wm.protobuf.RegisterSystemInfoResponse
             * @instance
             */
            RegisterSystemInfoResponse.prototype.inviteFriendCampaignSchedule = null;

            /**
             * RegisterSystemInfoResponse ghostSelectionMinRedoWait.
             * @member {number} ghostSelectionMinRedoWait
             * @memberof wm.protobuf.RegisterSystemInfoResponse
             * @instance
             */
            RegisterSystemInfoResponse.prototype.ghostSelectionMinRedoWait = 0;

            /**
             * RegisterSystemInfoResponse ghostSelectionMaxRedoWait.
             * @member {number} ghostSelectionMaxRedoWait
             * @memberof wm.protobuf.RegisterSystemInfoResponse
             * @instance
             */
            RegisterSystemInfoResponse.prototype.ghostSelectionMaxRedoWait = 0;

            /**
             * RegisterSystemInfoResponse expeditionSchedule.
             * @member {wm.protobuf.IGhostExpeditionSchedule|null|undefined} expeditionSchedule
             * @memberof wm.protobuf.RegisterSystemInfoResponse
             * @instance
             */
            RegisterSystemInfoResponse.prototype.expeditionSchedule = null;

            /**
             * RegisterSystemInfoResponse expeditionEventWasHeld.
             * @member {boolean} expeditionEventWasHeld
             * @memberof wm.protobuf.RegisterSystemInfoResponse
             * @instance
             */
            RegisterSystemInfoResponse.prototype.expeditionEventWasHeld = false;

            /**
             * RegisterSystemInfoResponse bingoNumbers.
             * @member {Array.<number>} bingoNumbers
             * @memberof wm.protobuf.RegisterSystemInfoResponse
             * @instance
             */
            RegisterSystemInfoResponse.prototype.bingoNumbers = $util.emptyArray;

            /**
             * RegisterSystemInfoResponse bingoPrize.
             * @member {Array.<wm.protobuf.IBingoPrize>} bingoPrize
             * @memberof wm.protobuf.RegisterSystemInfoResponse
             * @instance
             */
            RegisterSystemInfoResponse.prototype.bingoPrize = $util.emptyArray;

            /**
             * RegisterSystemInfoResponse koshienWonShopName.
             * @member {Array.<wm.protobuf.IGhostKoshienWonShop>} koshienWonShopName
             * @memberof wm.protobuf.RegisterSystemInfoResponse
             * @instance
             */
            RegisterSystemInfoResponse.prototype.koshienWonShopName = $util.emptyArray;

            /**
             * RegisterSystemInfoResponse koshienInfo.
             * @member {wm.protobuf.RegisterSystemInfoResponse.IGhostKoshienInfo|null|undefined} koshienInfo
             * @memberof wm.protobuf.RegisterSystemInfoResponse
             * @instance
             */
            RegisterSystemInfoResponse.prototype.koshienInfo = null;

            /**
             * RegisterSystemInfoResponse koshienEventWasHeld.
             * @member {boolean} koshienEventWasHeld
             * @memberof wm.protobuf.RegisterSystemInfoResponse
             * @instance
             */
            RegisterSystemInfoResponse.prototype.koshienEventWasHeld = false;

            /**
             * RegisterSystemInfoResponse specialPresentItem.
             * @member {wm.protobuf.ICarItem|null|undefined} specialPresentItem
             * @memberof wm.protobuf.RegisterSystemInfoResponse
             * @instance
             */
            RegisterSystemInfoResponse.prototype.specialPresentItem = null;

            /**
             * RegisterSystemInfoResponse previousKoshienId.
             * @member {number} previousKoshienId
             * @memberof wm.protobuf.RegisterSystemInfoResponse
             * @instance
             */
            RegisterSystemInfoResponse.prototype.previousKoshienId = 0;

            /**
             * RegisterSystemInfoResponse previousKoshienPrize.
             * @member {wm.protobuf.IGhostKoshienPrize|null|undefined} previousKoshienPrize
             * @memberof wm.protobuf.RegisterSystemInfoResponse
             * @instance
             */
            RegisterSystemInfoResponse.prototype.previousKoshienPrize = null;

            /**
             * Creates a new RegisterSystemInfoResponse instance using the specified properties.
             * @function create
             * @memberof wm.protobuf.RegisterSystemInfoResponse
             * @static
             * @param {wm.protobuf.IRegisterSystemInfoResponse=} [properties] Properties to set
             * @returns {wm.protobuf.RegisterSystemInfoResponse} RegisterSystemInfoResponse instance
             */
            RegisterSystemInfoResponse.create = function create(properties) {
                return new RegisterSystemInfoResponse(properties);
            };

            /**
             * Encodes the specified RegisterSystemInfoResponse message. Does not implicitly {@link wm.protobuf.RegisterSystemInfoResponse.verify|verify} messages.
             * @function encode
             * @memberof wm.protobuf.RegisterSystemInfoResponse
             * @static
             * @param {wm.protobuf.IRegisterSystemInfoResponse} message RegisterSystemInfoResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RegisterSystemInfoResponse.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.regionId);
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.placeId);
                if (message.allowedClientLogTypes != null && message.allowedClientLogTypes.length)
                    for (let i = 0; i < message.allowedClientLogTypes.length; ++i)
                        writer.uint32(/* id 4, wireType 0 =*/32).int32(message.allowedClientLogTypes[i]);
                $root.wm.protobuf.GameFeatureVersion.encode(message.featureVersion, writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();
                if (message.latestCompetitionId != null && Object.hasOwnProperty.call(message, "latestCompetitionId"))
                    writer.uint32(/* id 11, wireType 0 =*/88).uint32(message.latestCompetitionId);
                if (message.competitionSchedule != null && Object.hasOwnProperty.call(message, "competitionSchedule"))
                    $root.wm.protobuf.GhostCompetitionSchedule.encode(message.competitionSchedule, writer.uint32(/* id 12, wireType 2 =*/98).fork()).ldelim();
                if (message.scratchNotes != null && Object.hasOwnProperty.call(message, "scratchNotes"))
                    writer.uint32(/* id 19, wireType 2 =*/154).string(message.scratchNotes);
                if (message.inviteFriendCampaignSchedule != null && Object.hasOwnProperty.call(message, "inviteFriendCampaignSchedule"))
                    $root.wm.protobuf.InviteFriendCampaignSchedule.encode(message.inviteFriendCampaignSchedule, writer.uint32(/* id 27, wireType 2 =*/218).fork()).ldelim();
                writer.uint32(/* id 28, wireType 0 =*/224).uint32(message.ghostSelectionMinRedoWait);
                writer.uint32(/* id 29, wireType 0 =*/232).uint32(message.ghostSelectionMaxRedoWait);
                if (message.expeditionSchedule != null && Object.hasOwnProperty.call(message, "expeditionSchedule"))
                    $root.wm.protobuf.GhostExpeditionSchedule.encode(message.expeditionSchedule, writer.uint32(/* id 30, wireType 2 =*/242).fork()).ldelim();
                if (message.expeditionEventWasHeld != null && Object.hasOwnProperty.call(message, "expeditionEventWasHeld"))
                    writer.uint32(/* id 31, wireType 0 =*/248).bool(message.expeditionEventWasHeld);
                if (message.bingoNumbers != null && message.bingoNumbers.length)
                    for (let i = 0; i < message.bingoNumbers.length; ++i)
                        writer.uint32(/* id 32, wireType 0 =*/256).uint32(message.bingoNumbers[i]);
                if (message.bingoPrize != null && message.bingoPrize.length)
                    for (let i = 0; i < message.bingoPrize.length; ++i)
                        $root.wm.protobuf.BingoPrize.encode(message.bingoPrize[i], writer.uint32(/* id 33, wireType 2 =*/266).fork()).ldelim();
                if (message.koshienWonShopName != null && message.koshienWonShopName.length)
                    for (let i = 0; i < message.koshienWonShopName.length; ++i)
                        $root.wm.protobuf.GhostKoshienWonShop.encode(message.koshienWonShopName[i], writer.uint32(/* id 35, wireType 2 =*/282).fork()).ldelim();
                if (message.koshienInfo != null && Object.hasOwnProperty.call(message, "koshienInfo"))
                    $root.wm.protobuf.RegisterSystemInfoResponse.GhostKoshienInfo.encode(message.koshienInfo, writer.uint32(/* id 37, wireType 2 =*/298).fork()).ldelim();
                if (message.koshienEventWasHeld != null && Object.hasOwnProperty.call(message, "koshienEventWasHeld"))
                    writer.uint32(/* id 38, wireType 0 =*/304).bool(message.koshienEventWasHeld);
                if (message.specialPresentItem != null && Object.hasOwnProperty.call(message, "specialPresentItem"))
                    $root.wm.protobuf.CarItem.encode(message.specialPresentItem, writer.uint32(/* id 39, wireType 2 =*/314).fork()).ldelim();
                if (message.previousKoshienId != null && Object.hasOwnProperty.call(message, "previousKoshienId"))
                    writer.uint32(/* id 40, wireType 0 =*/320).uint32(message.previousKoshienId);
                if (message.previousKoshienPrize != null && Object.hasOwnProperty.call(message, "previousKoshienPrize"))
                    $root.wm.protobuf.GhostKoshienPrize.encode(message.previousKoshienPrize, writer.uint32(/* id 41, wireType 2 =*/330).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified RegisterSystemInfoResponse message, length delimited. Does not implicitly {@link wm.protobuf.RegisterSystemInfoResponse.verify|verify} messages.
             * @function encodeDelimited
             * @memberof wm.protobuf.RegisterSystemInfoResponse
             * @static
             * @param {wm.protobuf.IRegisterSystemInfoResponse} message RegisterSystemInfoResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RegisterSystemInfoResponse.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a RegisterSystemInfoResponse message from the specified reader or buffer.
             * @function decode
             * @memberof wm.protobuf.RegisterSystemInfoResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {wm.protobuf.RegisterSystemInfoResponse} RegisterSystemInfoResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RegisterSystemInfoResponse.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.wm.protobuf.RegisterSystemInfoResponse();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.error = reader.int32();
                            break;
                        }
                    case 2: {
                            message.regionId = reader.uint32();
                            break;
                        }
                    case 3: {
                            message.placeId = reader.string();
                            break;
                        }
                    case 4: {
                            if (!(message.allowedClientLogTypes && message.allowedClientLogTypes.length))
                                message.allowedClientLogTypes = [];
                            if ((tag & 7) === 2) {
                                let end2 = reader.uint32() + reader.pos;
                                while (reader.pos < end2)
                                    message.allowedClientLogTypes.push(reader.int32());
                            } else
                                message.allowedClientLogTypes.push(reader.int32());
                            break;
                        }
                    case 10: {
                            message.featureVersion = $root.wm.protobuf.GameFeatureVersion.decode(reader, reader.uint32());
                            break;
                        }
                    case 11: {
                            message.latestCompetitionId = reader.uint32();
                            break;
                        }
                    case 12: {
                            message.competitionSchedule = $root.wm.protobuf.GhostCompetitionSchedule.decode(reader, reader.uint32());
                            break;
                        }
                    case 19: {
                            message.scratchNotes = reader.string();
                            break;
                        }
                    case 27: {
                            message.inviteFriendCampaignSchedule = $root.wm.protobuf.InviteFriendCampaignSchedule.decode(reader, reader.uint32());
                            break;
                        }
                    case 28: {
                            message.ghostSelectionMinRedoWait = reader.uint32();
                            break;
                        }
                    case 29: {
                            message.ghostSelectionMaxRedoWait = reader.uint32();
                            break;
                        }
                    case 30: {
                            message.expeditionSchedule = $root.wm.protobuf.GhostExpeditionSchedule.decode(reader, reader.uint32());
                            break;
                        }
                    case 31: {
                            message.expeditionEventWasHeld = reader.bool();
                            break;
                        }
                    case 32: {
                            if (!(message.bingoNumbers && message.bingoNumbers.length))
                                message.bingoNumbers = [];
                            if ((tag & 7) === 2) {
                                let end2 = reader.uint32() + reader.pos;
                                while (reader.pos < end2)
                                    message.bingoNumbers.push(reader.uint32());
                            } else
                                message.bingoNumbers.push(reader.uint32());
                            break;
                        }
                    case 33: {
                            if (!(message.bingoPrize && message.bingoPrize.length))
                                message.bingoPrize = [];
                            message.bingoPrize.push($root.wm.protobuf.BingoPrize.decode(reader, reader.uint32()));
                            break;
                        }
                    case 35: {
                            if (!(message.koshienWonShopName && message.koshienWonShopName.length))
                                message.koshienWonShopName = [];
                            message.koshienWonShopName.push($root.wm.protobuf.GhostKoshienWonShop.decode(reader, reader.uint32()));
                            break;
                        }
                    case 37: {
                            message.koshienInfo = $root.wm.protobuf.RegisterSystemInfoResponse.GhostKoshienInfo.decode(reader, reader.uint32());
                            break;
                        }
                    case 38: {
                            message.koshienEventWasHeld = reader.bool();
                            break;
                        }
                    case 39: {
                            message.specialPresentItem = $root.wm.protobuf.CarItem.decode(reader, reader.uint32());
                            break;
                        }
                    case 40: {
                            message.previousKoshienId = reader.uint32();
                            break;
                        }
                    case 41: {
                            message.previousKoshienPrize = $root.wm.protobuf.GhostKoshienPrize.decode(reader, reader.uint32());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("error"))
                    throw $util.ProtocolError("missing required 'error'", { instance: message });
                if (!message.hasOwnProperty("regionId"))
                    throw $util.ProtocolError("missing required 'regionId'", { instance: message });
                if (!message.hasOwnProperty("placeId"))
                    throw $util.ProtocolError("missing required 'placeId'", { instance: message });
                if (!message.hasOwnProperty("featureVersion"))
                    throw $util.ProtocolError("missing required 'featureVersion'", { instance: message });
                if (!message.hasOwnProperty("ghostSelectionMinRedoWait"))
                    throw $util.ProtocolError("missing required 'ghostSelectionMinRedoWait'", { instance: message });
                if (!message.hasOwnProperty("ghostSelectionMaxRedoWait"))
                    throw $util.ProtocolError("missing required 'ghostSelectionMaxRedoWait'", { instance: message });
                return message;
            };

            /**
             * Decodes a RegisterSystemInfoResponse message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof wm.protobuf.RegisterSystemInfoResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {wm.protobuf.RegisterSystemInfoResponse} RegisterSystemInfoResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RegisterSystemInfoResponse.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a RegisterSystemInfoResponse message.
             * @function verify
             * @memberof wm.protobuf.RegisterSystemInfoResponse
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            RegisterSystemInfoResponse.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                switch (message.error) {
                default:
                    return "error: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 7:
                case 9:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 16:
                case 17:
                case 18:
                case 19:
                    break;
                }
                if (!$util.isInteger(message.regionId))
                    return "regionId: integer expected";
                if (!$util.isString(message.placeId))
                    return "placeId: string expected";
                if (message.allowedClientLogTypes != null && message.hasOwnProperty("allowedClientLogTypes")) {
                    if (!Array.isArray(message.allowedClientLogTypes))
                        return "allowedClientLogTypes: array expected";
                    for (let i = 0; i < message.allowedClientLogTypes.length; ++i)
                        switch (message.allowedClientLogTypes[i]) {
                        default:
                            return "allowedClientLogTypes: enum value[] expected";
                        case 0:
                        case 1:
                            break;
                        }
                }
                {
                    let error = $root.wm.protobuf.GameFeatureVersion.verify(message.featureVersion);
                    if (error)
                        return "featureVersion." + error;
                }
                if (message.latestCompetitionId != null && message.hasOwnProperty("latestCompetitionId"))
                    if (!$util.isInteger(message.latestCompetitionId))
                        return "latestCompetitionId: integer expected";
                if (message.competitionSchedule != null && message.hasOwnProperty("competitionSchedule")) {
                    let error = $root.wm.protobuf.GhostCompetitionSchedule.verify(message.competitionSchedule);
                    if (error)
                        return "competitionSchedule." + error;
                }
                if (message.scratchNotes != null && message.hasOwnProperty("scratchNotes"))
                    if (!$util.isString(message.scratchNotes))
                        return "scratchNotes: string expected";
                if (message.inviteFriendCampaignSchedule != null && message.hasOwnProperty("inviteFriendCampaignSchedule")) {
                    let error = $root.wm.protobuf.InviteFriendCampaignSchedule.verify(message.inviteFriendCampaignSchedule);
                    if (error)
                        return "inviteFriendCampaignSchedule." + error;
                }
                if (!$util.isInteger(message.ghostSelectionMinRedoWait))
                    return "ghostSelectionMinRedoWait: integer expected";
                if (!$util.isInteger(message.ghostSelectionMaxRedoWait))
                    return "ghostSelectionMaxRedoWait: integer expected";
                if (message.expeditionSchedule != null && message.hasOwnProperty("expeditionSchedule")) {
                    let error = $root.wm.protobuf.GhostExpeditionSchedule.verify(message.expeditionSchedule);
                    if (error)
                        return "expeditionSchedule." + error;
                }
                if (message.expeditionEventWasHeld != null && message.hasOwnProperty("expeditionEventWasHeld"))
                    if (typeof message.expeditionEventWasHeld !== "boolean")
                        return "expeditionEventWasHeld: boolean expected";
                if (message.bingoNumbers != null && message.hasOwnProperty("bingoNumbers")) {
                    if (!Array.isArray(message.bingoNumbers))
                        return "bingoNumbers: array expected";
                    for (let i = 0; i < message.bingoNumbers.length; ++i)
                        if (!$util.isInteger(message.bingoNumbers[i]))
                            return "bingoNumbers: integer[] expected";
                }
                if (message.bingoPrize != null && message.hasOwnProperty("bingoPrize")) {
                    if (!Array.isArray(message.bingoPrize))
                        return "bingoPrize: array expected";
                    for (let i = 0; i < message.bingoPrize.length; ++i) {
                        let error = $root.wm.protobuf.BingoPrize.verify(message.bingoPrize[i]);
                        if (error)
                            return "bingoPrize." + error;
                    }
                }
                if (message.koshienWonShopName != null && message.hasOwnProperty("koshienWonShopName")) {
                    if (!Array.isArray(message.koshienWonShopName))
                        return "koshienWonShopName: array expected";
                    for (let i = 0; i < message.koshienWonShopName.length; ++i) {
                        let error = $root.wm.protobuf.GhostKoshienWonShop.verify(message.koshienWonShopName[i]);
                        if (error)
                            return "koshienWonShopName." + error;
                    }
                }
                if (message.koshienInfo != null && message.hasOwnProperty("koshienInfo")) {
                    let error = $root.wm.protobuf.RegisterSystemInfoResponse.GhostKoshienInfo.verify(message.koshienInfo);
                    if (error)
                        return "koshienInfo." + error;
                }
                if (message.koshienEventWasHeld != null && message.hasOwnProperty("koshienEventWasHeld"))
                    if (typeof message.koshienEventWasHeld !== "boolean")
                        return "koshienEventWasHeld: boolean expected";
                if (message.specialPresentItem != null && message.hasOwnProperty("specialPresentItem")) {
                    let error = $root.wm.protobuf.CarItem.verify(message.specialPresentItem);
                    if (error)
                        return "specialPresentItem." + error;
                }
                if (message.previousKoshienId != null && message.hasOwnProperty("previousKoshienId"))
                    if (!$util.isInteger(message.previousKoshienId))
                        return "previousKoshienId: integer expected";
                if (message.previousKoshienPrize != null && message.hasOwnProperty("previousKoshienPrize")) {
                    let error = $root.wm.protobuf.GhostKoshienPrize.verify(message.previousKoshienPrize);
                    if (error)
                        return "previousKoshienPrize." + error;
                }
                return null;
            };

            /**
             * Creates a RegisterSystemInfoResponse message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof wm.protobuf.RegisterSystemInfoResponse
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {wm.protobuf.RegisterSystemInfoResponse} RegisterSystemInfoResponse
             */
            RegisterSystemInfoResponse.fromObject = function fromObject(object) {
                if (object instanceof $root.wm.protobuf.RegisterSystemInfoResponse)
                    return object;
                let message = new $root.wm.protobuf.RegisterSystemInfoResponse();
                switch (object.error) {
                default:
                    if (typeof object.error === "number") {
                        message.error = object.error;
                        break;
                    }
                    break;
                case "ERR_SUCCESS":
                case 0:
                    message.error = 0;
                    break;
                case "ERR_REQUEST":
                case 1:
                    message.error = 1;
                    break;
                case "ERR_NOT_FOUND":
                case 2:
                    message.error = 2;
                    break;
                case "ERR_ID_SERVER":
                case 3:
                    message.error = 3;
                    break;
                case "ERR_ID_BANNED":
                case 4:
                    message.error = 4;
                    break;
                case "ERR_USER_LOCKED":
                case 5:
                    message.error = 5;
                    break;
                case "ERR_USER_VERSION":
                case 6:
                    message.error = 6;
                    break;
                case "ERR_NAME_CONFLICTED":
                case 7:
                    message.error = 7;
                    break;
                case "ERR_FORBIDDEN":
                case 9:
                    message.error = 9;
                    break;
                case "ERR_USER_SUCCEEDED":
                case 11:
                    message.error = 11;
                    break;
                case "ERR_BEING_TRANSFERRED":
                case 12:
                    message.error = 12;
                    break;
                case "ERR_SCRATCH_LOCKED":
                case 13:
                    message.error = 13;
                    break;
                case "ERR_BINGO_REVENGE_LOCKED":
                case 14:
                    message.error = 14;
                    break;
                case "ERR_BINGO_ALREDY_LINKED":
                case 15:
                    message.error = 15;
                    break;
                case "ERR_BINGO_FINISHED":
                case 16:
                    message.error = 16;
                    break;
                case "ERR_BINGO_REACHED_MAX_USER":
                case 17:
                    message.error = 17;
                    break;
                case "ERR_CAR_NOT_FOUND":
                case 18:
                    message.error = 18;
                    break;
                case "ERR_BINGO_CARD_NOT_FOUND":
                case 19:
                    message.error = 19;
                    break;
                }
                if (object.regionId != null)
                    message.regionId = object.regionId >>> 0;
                if (object.placeId != null)
                    message.placeId = String(object.placeId);
                if (object.allowedClientLogTypes) {
                    if (!Array.isArray(object.allowedClientLogTypes))
                        throw TypeError(".wm.protobuf.RegisterSystemInfoResponse.allowedClientLogTypes: array expected");
                    message.allowedClientLogTypes = [];
                    for (let i = 0; i < object.allowedClientLogTypes.length; ++i)
                        switch (object.allowedClientLogTypes[i]) {
                        default:
                            if (typeof object.allowedClientLogTypes[i] === "number") {
                                message.allowedClientLogTypes[i] = object.allowedClientLogTypes[i];
                                break;
                            }
                        case "LOG_LOAD_REPORT":
                        case 0:
                            message.allowedClientLogTypes[i] = 0;
                            break;
                        case "LOG_ERROR":
                        case 1:
                            message.allowedClientLogTypes[i] = 1;
                            break;
                        }
                }
                if (object.featureVersion != null) {
                    if (typeof object.featureVersion !== "object")
                        throw TypeError(".wm.protobuf.RegisterSystemInfoResponse.featureVersion: object expected");
                    message.featureVersion = $root.wm.protobuf.GameFeatureVersion.fromObject(object.featureVersion);
                }
                if (object.latestCompetitionId != null)
                    message.latestCompetitionId = object.latestCompetitionId >>> 0;
                if (object.competitionSchedule != null) {
                    if (typeof object.competitionSchedule !== "object")
                        throw TypeError(".wm.protobuf.RegisterSystemInfoResponse.competitionSchedule: object expected");
                    message.competitionSchedule = $root.wm.protobuf.GhostCompetitionSchedule.fromObject(object.competitionSchedule);
                }
                if (object.scratchNotes != null)
                    message.scratchNotes = String(object.scratchNotes);
                if (object.inviteFriendCampaignSchedule != null) {
                    if (typeof object.inviteFriendCampaignSchedule !== "object")
                        throw TypeError(".wm.protobuf.RegisterSystemInfoResponse.inviteFriendCampaignSchedule: object expected");
                    message.inviteFriendCampaignSchedule = $root.wm.protobuf.InviteFriendCampaignSchedule.fromObject(object.inviteFriendCampaignSchedule);
                }
                if (object.ghostSelectionMinRedoWait != null)
                    message.ghostSelectionMinRedoWait = object.ghostSelectionMinRedoWait >>> 0;
                if (object.ghostSelectionMaxRedoWait != null)
                    message.ghostSelectionMaxRedoWait = object.ghostSelectionMaxRedoWait >>> 0;
                if (object.expeditionSchedule != null) {
                    if (typeof object.expeditionSchedule !== "object")
                        throw TypeError(".wm.protobuf.RegisterSystemInfoResponse.expeditionSchedule: object expected");
                    message.expeditionSchedule = $root.wm.protobuf.GhostExpeditionSchedule.fromObject(object.expeditionSchedule);
                }
                if (object.expeditionEventWasHeld != null)
                    message.expeditionEventWasHeld = Boolean(object.expeditionEventWasHeld);
                if (object.bingoNumbers) {
                    if (!Array.isArray(object.bingoNumbers))
                        throw TypeError(".wm.protobuf.RegisterSystemInfoResponse.bingoNumbers: array expected");
                    message.bingoNumbers = [];
                    for (let i = 0; i < object.bingoNumbers.length; ++i)
                        message.bingoNumbers[i] = object.bingoNumbers[i] >>> 0;
                }
                if (object.bingoPrize) {
                    if (!Array.isArray(object.bingoPrize))
                        throw TypeError(".wm.protobuf.RegisterSystemInfoResponse.bingoPrize: array expected");
                    message.bingoPrize = [];
                    for (let i = 0; i < object.bingoPrize.length; ++i) {
                        if (typeof object.bingoPrize[i] !== "object")
                            throw TypeError(".wm.protobuf.RegisterSystemInfoResponse.bingoPrize: object expected");
                        message.bingoPrize[i] = $root.wm.protobuf.BingoPrize.fromObject(object.bingoPrize[i]);
                    }
                }
                if (object.koshienWonShopName) {
                    if (!Array.isArray(object.koshienWonShopName))
                        throw TypeError(".wm.protobuf.RegisterSystemInfoResponse.koshienWonShopName: array expected");
                    message.koshienWonShopName = [];
                    for (let i = 0; i < object.koshienWonShopName.length; ++i) {
                        if (typeof object.koshienWonShopName[i] !== "object")
                            throw TypeError(".wm.protobuf.RegisterSystemInfoResponse.koshienWonShopName: object expected");
                        message.koshienWonShopName[i] = $root.wm.protobuf.GhostKoshienWonShop.fromObject(object.koshienWonShopName[i]);
                    }
                }
                if (object.koshienInfo != null) {
                    if (typeof object.koshienInfo !== "object")
                        throw TypeError(".wm.protobuf.RegisterSystemInfoResponse.koshienInfo: object expected");
                    message.koshienInfo = $root.wm.protobuf.RegisterSystemInfoResponse.GhostKoshienInfo.fromObject(object.koshienInfo);
                }
                if (object.koshienEventWasHeld != null)
                    message.koshienEventWasHeld = Boolean(object.koshienEventWasHeld);
                if (object.specialPresentItem != null) {
                    if (typeof object.specialPresentItem !== "object")
                        throw TypeError(".wm.protobuf.RegisterSystemInfoResponse.specialPresentItem: object expected");
                    message.specialPresentItem = $root.wm.protobuf.CarItem.fromObject(object.specialPresentItem);
                }
                if (object.previousKoshienId != null)
                    message.previousKoshienId = object.previousKoshienId >>> 0;
                if (object.previousKoshienPrize != null) {
                    if (typeof object.previousKoshienPrize !== "object")
                        throw TypeError(".wm.protobuf.RegisterSystemInfoResponse.previousKoshienPrize: object expected");
                    message.previousKoshienPrize = $root.wm.protobuf.GhostKoshienPrize.fromObject(object.previousKoshienPrize);
                }
                return message;
            };

            /**
             * Creates a plain object from a RegisterSystemInfoResponse message. Also converts values to other types if specified.
             * @function toObject
             * @memberof wm.protobuf.RegisterSystemInfoResponse
             * @static
             * @param {wm.protobuf.RegisterSystemInfoResponse} message RegisterSystemInfoResponse
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            RegisterSystemInfoResponse.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults) {
                    object.allowedClientLogTypes = [];
                    object.bingoNumbers = [];
                    object.bingoPrize = [];
                    object.koshienWonShopName = [];
                }
                if (options.defaults) {
                    object.error = options.enums === String ? "ERR_SUCCESS" : 0;
                    object.regionId = 0;
                    object.placeId = "";
                    object.featureVersion = null;
                    object.latestCompetitionId = 0;
                    object.competitionSchedule = null;
                    object.scratchNotes = "";
                    object.inviteFriendCampaignSchedule = null;
                    object.ghostSelectionMinRedoWait = 0;
                    object.ghostSelectionMaxRedoWait = 0;
                    object.expeditionSchedule = null;
                    object.expeditionEventWasHeld = false;
                    object.koshienInfo = null;
                    object.koshienEventWasHeld = false;
                    object.specialPresentItem = null;
                    object.previousKoshienId = 0;
                    object.previousKoshienPrize = null;
                }
                if (message.error != null && message.hasOwnProperty("error"))
                    object.error = options.enums === String ? $root.wm.protobuf.ErrorCode[message.error] === undefined ? message.error : $root.wm.protobuf.ErrorCode[message.error] : message.error;
                if (message.regionId != null && message.hasOwnProperty("regionId"))
                    object.regionId = message.regionId;
                if (message.placeId != null && message.hasOwnProperty("placeId"))
                    object.placeId = message.placeId;
                if (message.allowedClientLogTypes && message.allowedClientLogTypes.length) {
                    object.allowedClientLogTypes = [];
                    for (let j = 0; j < message.allowedClientLogTypes.length; ++j)
                        object.allowedClientLogTypes[j] = options.enums === String ? $root.wm.protobuf.ClientLogType[message.allowedClientLogTypes[j]] === undefined ? message.allowedClientLogTypes[j] : $root.wm.protobuf.ClientLogType[message.allowedClientLogTypes[j]] : message.allowedClientLogTypes[j];
                }
                if (message.featureVersion != null && message.hasOwnProperty("featureVersion"))
                    object.featureVersion = $root.wm.protobuf.GameFeatureVersion.toObject(message.featureVersion, options);
                if (message.latestCompetitionId != null && message.hasOwnProperty("latestCompetitionId"))
                    object.latestCompetitionId = message.latestCompetitionId;
                if (message.competitionSchedule != null && message.hasOwnProperty("competitionSchedule"))
                    object.competitionSchedule = $root.wm.protobuf.GhostCompetitionSchedule.toObject(message.competitionSchedule, options);
                if (message.scratchNotes != null && message.hasOwnProperty("scratchNotes"))
                    object.scratchNotes = message.scratchNotes;
                if (message.inviteFriendCampaignSchedule != null && message.hasOwnProperty("inviteFriendCampaignSchedule"))
                    object.inviteFriendCampaignSchedule = $root.wm.protobuf.InviteFriendCampaignSchedule.toObject(message.inviteFriendCampaignSchedule, options);
                if (message.ghostSelectionMinRedoWait != null && message.hasOwnProperty("ghostSelectionMinRedoWait"))
                    object.ghostSelectionMinRedoWait = message.ghostSelectionMinRedoWait;
                if (message.ghostSelectionMaxRedoWait != null && message.hasOwnProperty("ghostSelectionMaxRedoWait"))
                    object.ghostSelectionMaxRedoWait = message.ghostSelectionMaxRedoWait;
                if (message.expeditionSchedule != null && message.hasOwnProperty("expeditionSchedule"))
                    object.expeditionSchedule = $root.wm.protobuf.GhostExpeditionSchedule.toObject(message.expeditionSchedule, options);
                if (message.expeditionEventWasHeld != null && message.hasOwnProperty("expeditionEventWasHeld"))
                    object.expeditionEventWasHeld = message.expeditionEventWasHeld;
                if (message.bingoNumbers && message.bingoNumbers.length) {
                    object.bingoNumbers = [];
                    for (let j = 0; j < message.bingoNumbers.length; ++j)
                        object.bingoNumbers[j] = message.bingoNumbers[j];
                }
                if (message.bingoPrize && message.bingoPrize.length) {
                    object.bingoPrize = [];
                    for (let j = 0; j < message.bingoPrize.length; ++j)
                        object.bingoPrize[j] = $root.wm.protobuf.BingoPrize.toObject(message.bingoPrize[j], options);
                }
                if (message.koshienWonShopName && message.koshienWonShopName.length) {
                    object.koshienWonShopName = [];
                    for (let j = 0; j < message.koshienWonShopName.length; ++j)
                        object.koshienWonShopName[j] = $root.wm.protobuf.GhostKoshienWonShop.toObject(message.koshienWonShopName[j], options);
                }
                if (message.koshienInfo != null && message.hasOwnProperty("koshienInfo"))
                    object.koshienInfo = $root.wm.protobuf.RegisterSystemInfoResponse.GhostKoshienInfo.toObject(message.koshienInfo, options);
                if (message.koshienEventWasHeld != null && message.hasOwnProperty("koshienEventWasHeld"))
                    object.koshienEventWasHeld = message.koshienEventWasHeld;
                if (message.specialPresentItem != null && message.hasOwnProperty("specialPresentItem"))
                    object.specialPresentItem = $root.wm.protobuf.CarItem.toObject(message.specialPresentItem, options);
                if (message.previousKoshienId != null && message.hasOwnProperty("previousKoshienId"))
                    object.previousKoshienId = message.previousKoshienId;
                if (message.previousKoshienPrize != null && message.hasOwnProperty("previousKoshienPrize"))
                    object.previousKoshienPrize = $root.wm.protobuf.GhostKoshienPrize.toObject(message.previousKoshienPrize, options);
                return object;
            };

            /**
             * Converts this RegisterSystemInfoResponse to JSON.
             * @function toJSON
             * @memberof wm.protobuf.RegisterSystemInfoResponse
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            RegisterSystemInfoResponse.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for RegisterSystemInfoResponse
             * @function getTypeUrl
             * @memberof wm.protobuf.RegisterSystemInfoResponse
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            RegisterSystemInfoResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/wm.protobuf.RegisterSystemInfoResponse";
            };

            RegisterSystemInfoResponse.GhostKoshienInfo = (function() {

                /**
                 * Properties of a GhostKoshienInfo.
                 * @memberof wm.protobuf.RegisterSystemInfoResponse
                 * @interface IGhostKoshienInfo
                 * @property {wm.protobuf.IGhostKoshienSchedule} koshienSchedule GhostKoshienInfo koshienSchedule
                 * @property {wm.protobuf.IGhostKoshienPrize} koshienPrize GhostKoshienInfo koshienPrize
                 * @property {boolean} reception GhostKoshienInfo reception
                 * @property {boolean|null} [isKoshienShop] GhostKoshienInfo isKoshienShop
                 * @property {boolean} qualified GhostKoshienInfo qualified
                 */

                /**
                 * Constructs a new GhostKoshienInfo.
                 * @memberof wm.protobuf.RegisterSystemInfoResponse
                 * @classdesc Represents a GhostKoshienInfo.
                 * @implements IGhostKoshienInfo
                 * @constructor
                 * @param {wm.protobuf.RegisterSystemInfoResponse.IGhostKoshienInfo=} [properties] Properties to set
                 */
                function GhostKoshienInfo(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * GhostKoshienInfo koshienSchedule.
                 * @member {wm.protobuf.IGhostKoshienSchedule} koshienSchedule
                 * @memberof wm.protobuf.RegisterSystemInfoResponse.GhostKoshienInfo
                 * @instance
                 */
                GhostKoshienInfo.prototype.koshienSchedule = null;

                /**
                 * GhostKoshienInfo koshienPrize.
                 * @member {wm.protobuf.IGhostKoshienPrize} koshienPrize
                 * @memberof wm.protobuf.RegisterSystemInfoResponse.GhostKoshienInfo
                 * @instance
                 */
                GhostKoshienInfo.prototype.koshienPrize = null;

                /**
                 * GhostKoshienInfo reception.
                 * @member {boolean} reception
                 * @memberof wm.protobuf.RegisterSystemInfoResponse.GhostKoshienInfo
                 * @instance
                 */
                GhostKoshienInfo.prototype.reception = false;

                /**
                 * GhostKoshienInfo isKoshienShop.
                 * @member {boolean} isKoshienShop
                 * @memberof wm.protobuf.RegisterSystemInfoResponse.GhostKoshienInfo
                 * @instance
                 */
                GhostKoshienInfo.prototype.isKoshienShop = false;

                /**
                 * GhostKoshienInfo qualified.
                 * @member {boolean} qualified
                 * @memberof wm.protobuf.RegisterSystemInfoResponse.GhostKoshienInfo
                 * @instance
                 */
                GhostKoshienInfo.prototype.qualified = false;

                /**
                 * Creates a new GhostKoshienInfo instance using the specified properties.
                 * @function create
                 * @memberof wm.protobuf.RegisterSystemInfoResponse.GhostKoshienInfo
                 * @static
                 * @param {wm.protobuf.RegisterSystemInfoResponse.IGhostKoshienInfo=} [properties] Properties to set
                 * @returns {wm.protobuf.RegisterSystemInfoResponse.GhostKoshienInfo} GhostKoshienInfo instance
                 */
                GhostKoshienInfo.create = function create(properties) {
                    return new GhostKoshienInfo(properties);
                };

                /**
                 * Encodes the specified GhostKoshienInfo message. Does not implicitly {@link wm.protobuf.RegisterSystemInfoResponse.GhostKoshienInfo.verify|verify} messages.
                 * @function encode
                 * @memberof wm.protobuf.RegisterSystemInfoResponse.GhostKoshienInfo
                 * @static
                 * @param {wm.protobuf.RegisterSystemInfoResponse.IGhostKoshienInfo} message GhostKoshienInfo message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                GhostKoshienInfo.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    $root.wm.protobuf.GhostKoshienSchedule.encode(message.koshienSchedule, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    $root.wm.protobuf.GhostKoshienPrize.encode(message.koshienPrize, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    writer.uint32(/* id 3, wireType 0 =*/24).bool(message.reception);
                    if (message.isKoshienShop != null && Object.hasOwnProperty.call(message, "isKoshienShop"))
                        writer.uint32(/* id 4, wireType 0 =*/32).bool(message.isKoshienShop);
                    writer.uint32(/* id 5, wireType 0 =*/40).bool(message.qualified);
                    return writer;
                };

                /**
                 * Encodes the specified GhostKoshienInfo message, length delimited. Does not implicitly {@link wm.protobuf.RegisterSystemInfoResponse.GhostKoshienInfo.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof wm.protobuf.RegisterSystemInfoResponse.GhostKoshienInfo
                 * @static
                 * @param {wm.protobuf.RegisterSystemInfoResponse.IGhostKoshienInfo} message GhostKoshienInfo message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                GhostKoshienInfo.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a GhostKoshienInfo message from the specified reader or buffer.
                 * @function decode
                 * @memberof wm.protobuf.RegisterSystemInfoResponse.GhostKoshienInfo
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {wm.protobuf.RegisterSystemInfoResponse.GhostKoshienInfo} GhostKoshienInfo
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                GhostKoshienInfo.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.wm.protobuf.RegisterSystemInfoResponse.GhostKoshienInfo();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.koshienSchedule = $root.wm.protobuf.GhostKoshienSchedule.decode(reader, reader.uint32());
                                break;
                            }
                        case 2: {
                                message.koshienPrize = $root.wm.protobuf.GhostKoshienPrize.decode(reader, reader.uint32());
                                break;
                            }
                        case 3: {
                                message.reception = reader.bool();
                                break;
                            }
                        case 4: {
                                message.isKoshienShop = reader.bool();
                                break;
                            }
                        case 5: {
                                message.qualified = reader.bool();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    if (!message.hasOwnProperty("koshienSchedule"))
                        throw $util.ProtocolError("missing required 'koshienSchedule'", { instance: message });
                    if (!message.hasOwnProperty("koshienPrize"))
                        throw $util.ProtocolError("missing required 'koshienPrize'", { instance: message });
                    if (!message.hasOwnProperty("reception"))
                        throw $util.ProtocolError("missing required 'reception'", { instance: message });
                    if (!message.hasOwnProperty("qualified"))
                        throw $util.ProtocolError("missing required 'qualified'", { instance: message });
                    return message;
                };

                /**
                 * Decodes a GhostKoshienInfo message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof wm.protobuf.RegisterSystemInfoResponse.GhostKoshienInfo
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {wm.protobuf.RegisterSystemInfoResponse.GhostKoshienInfo} GhostKoshienInfo
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                GhostKoshienInfo.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a GhostKoshienInfo message.
                 * @function verify
                 * @memberof wm.protobuf.RegisterSystemInfoResponse.GhostKoshienInfo
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                GhostKoshienInfo.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    {
                        let error = $root.wm.protobuf.GhostKoshienSchedule.verify(message.koshienSchedule);
                        if (error)
                            return "koshienSchedule." + error;
                    }
                    {
                        let error = $root.wm.protobuf.GhostKoshienPrize.verify(message.koshienPrize);
                        if (error)
                            return "koshienPrize." + error;
                    }
                    if (typeof message.reception !== "boolean")
                        return "reception: boolean expected";
                    if (message.isKoshienShop != null && message.hasOwnProperty("isKoshienShop"))
                        if (typeof message.isKoshienShop !== "boolean")
                            return "isKoshienShop: boolean expected";
                    if (typeof message.qualified !== "boolean")
                        return "qualified: boolean expected";
                    return null;
                };

                /**
                 * Creates a GhostKoshienInfo message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof wm.protobuf.RegisterSystemInfoResponse.GhostKoshienInfo
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {wm.protobuf.RegisterSystemInfoResponse.GhostKoshienInfo} GhostKoshienInfo
                 */
                GhostKoshienInfo.fromObject = function fromObject(object) {
                    if (object instanceof $root.wm.protobuf.RegisterSystemInfoResponse.GhostKoshienInfo)
                        return object;
                    let message = new $root.wm.protobuf.RegisterSystemInfoResponse.GhostKoshienInfo();
                    if (object.koshienSchedule != null) {
                        if (typeof object.koshienSchedule !== "object")
                            throw TypeError(".wm.protobuf.RegisterSystemInfoResponse.GhostKoshienInfo.koshienSchedule: object expected");
                        message.koshienSchedule = $root.wm.protobuf.GhostKoshienSchedule.fromObject(object.koshienSchedule);
                    }
                    if (object.koshienPrize != null) {
                        if (typeof object.koshienPrize !== "object")
                            throw TypeError(".wm.protobuf.RegisterSystemInfoResponse.GhostKoshienInfo.koshienPrize: object expected");
                        message.koshienPrize = $root.wm.protobuf.GhostKoshienPrize.fromObject(object.koshienPrize);
                    }
                    if (object.reception != null)
                        message.reception = Boolean(object.reception);
                    if (object.isKoshienShop != null)
                        message.isKoshienShop = Boolean(object.isKoshienShop);
                    if (object.qualified != null)
                        message.qualified = Boolean(object.qualified);
                    return message;
                };

                /**
                 * Creates a plain object from a GhostKoshienInfo message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof wm.protobuf.RegisterSystemInfoResponse.GhostKoshienInfo
                 * @static
                 * @param {wm.protobuf.RegisterSystemInfoResponse.GhostKoshienInfo} message GhostKoshienInfo
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                GhostKoshienInfo.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        object.koshienSchedule = null;
                        object.koshienPrize = null;
                        object.reception = false;
                        object.isKoshienShop = false;
                        object.qualified = false;
                    }
                    if (message.koshienSchedule != null && message.hasOwnProperty("koshienSchedule"))
                        object.koshienSchedule = $root.wm.protobuf.GhostKoshienSchedule.toObject(message.koshienSchedule, options);
                    if (message.koshienPrize != null && message.hasOwnProperty("koshienPrize"))
                        object.koshienPrize = $root.wm.protobuf.GhostKoshienPrize.toObject(message.koshienPrize, options);
                    if (message.reception != null && message.hasOwnProperty("reception"))
                        object.reception = message.reception;
                    if (message.isKoshienShop != null && message.hasOwnProperty("isKoshienShop"))
                        object.isKoshienShop = message.isKoshienShop;
                    if (message.qualified != null && message.hasOwnProperty("qualified"))
                        object.qualified = message.qualified;
                    return object;
                };

                /**
                 * Converts this GhostKoshienInfo to JSON.
                 * @function toJSON
                 * @memberof wm.protobuf.RegisterSystemInfoResponse.GhostKoshienInfo
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                GhostKoshienInfo.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                /**
                 * Gets the default type url for GhostKoshienInfo
                 * @function getTypeUrl
                 * @memberof wm.protobuf.RegisterSystemInfoResponse.GhostKoshienInfo
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                GhostKoshienInfo.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/wm.protobuf.RegisterSystemInfoResponse.GhostKoshienInfo";
                };

                return GhostKoshienInfo;
            })();

            return RegisterSystemInfoResponse;
        })();

        protobuf.RegisterSystemStatsRequest = (function() {

            /**
             * Properties of a RegisterSystemStatsRequest.
             * @memberof wm.protobuf
             * @interface IRegisterSystemStatsRequest
             * @property {string} pcbSerial RegisterSystemStatsRequest pcbSerial
             * @property {wm.protobuf.RegisterSystemStatsRequest.IDriveStats|null} [driveStats] RegisterSystemStatsRequest driveStats
             * @property {wm.protobuf.RegisterSystemStatsRequest.ITerminalStats|null} [terminalStats] RegisterSystemStatsRequest terminalStats
             */

            /**
             * Constructs a new RegisterSystemStatsRequest.
             * @memberof wm.protobuf
             * @classdesc Represents a RegisterSystemStatsRequest.
             * @implements IRegisterSystemStatsRequest
             * @constructor
             * @param {wm.protobuf.IRegisterSystemStatsRequest=} [properties] Properties to set
             */
            function RegisterSystemStatsRequest(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * RegisterSystemStatsRequest pcbSerial.
             * @member {string} pcbSerial
             * @memberof wm.protobuf.RegisterSystemStatsRequest
             * @instance
             */
            RegisterSystemStatsRequest.prototype.pcbSerial = "";

            /**
             * RegisterSystemStatsRequest driveStats.
             * @member {wm.protobuf.RegisterSystemStatsRequest.IDriveStats|null|undefined} driveStats
             * @memberof wm.protobuf.RegisterSystemStatsRequest
             * @instance
             */
            RegisterSystemStatsRequest.prototype.driveStats = null;

            /**
             * RegisterSystemStatsRequest terminalStats.
             * @member {wm.protobuf.RegisterSystemStatsRequest.ITerminalStats|null|undefined} terminalStats
             * @memberof wm.protobuf.RegisterSystemStatsRequest
             * @instance
             */
            RegisterSystemStatsRequest.prototype.terminalStats = null;

            /**
             * Creates a new RegisterSystemStatsRequest instance using the specified properties.
             * @function create
             * @memberof wm.protobuf.RegisterSystemStatsRequest
             * @static
             * @param {wm.protobuf.IRegisterSystemStatsRequest=} [properties] Properties to set
             * @returns {wm.protobuf.RegisterSystemStatsRequest} RegisterSystemStatsRequest instance
             */
            RegisterSystemStatsRequest.create = function create(properties) {
                return new RegisterSystemStatsRequest(properties);
            };

            /**
             * Encodes the specified RegisterSystemStatsRequest message. Does not implicitly {@link wm.protobuf.RegisterSystemStatsRequest.verify|verify} messages.
             * @function encode
             * @memberof wm.protobuf.RegisterSystemStatsRequest
             * @static
             * @param {wm.protobuf.IRegisterSystemStatsRequest} message RegisterSystemStatsRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RegisterSystemStatsRequest.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.pcbSerial);
                if (message.driveStats != null && Object.hasOwnProperty.call(message, "driveStats"))
                    $root.wm.protobuf.RegisterSystemStatsRequest.DriveStats.encode(message.driveStats, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                if (message.terminalStats != null && Object.hasOwnProperty.call(message, "terminalStats"))
                    $root.wm.protobuf.RegisterSystemStatsRequest.TerminalStats.encode(message.terminalStats, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified RegisterSystemStatsRequest message, length delimited. Does not implicitly {@link wm.protobuf.RegisterSystemStatsRequest.verify|verify} messages.
             * @function encodeDelimited
             * @memberof wm.protobuf.RegisterSystemStatsRequest
             * @static
             * @param {wm.protobuf.IRegisterSystemStatsRequest} message RegisterSystemStatsRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RegisterSystemStatsRequest.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a RegisterSystemStatsRequest message from the specified reader or buffer.
             * @function decode
             * @memberof wm.protobuf.RegisterSystemStatsRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {wm.protobuf.RegisterSystemStatsRequest} RegisterSystemStatsRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RegisterSystemStatsRequest.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.wm.protobuf.RegisterSystemStatsRequest();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.pcbSerial = reader.string();
                            break;
                        }
                    case 2: {
                            message.driveStats = $root.wm.protobuf.RegisterSystemStatsRequest.DriveStats.decode(reader, reader.uint32());
                            break;
                        }
                    case 3: {
                            message.terminalStats = $root.wm.protobuf.RegisterSystemStatsRequest.TerminalStats.decode(reader, reader.uint32());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("pcbSerial"))
                    throw $util.ProtocolError("missing required 'pcbSerial'", { instance: message });
                return message;
            };

            /**
             * Decodes a RegisterSystemStatsRequest message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof wm.protobuf.RegisterSystemStatsRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {wm.protobuf.RegisterSystemStatsRequest} RegisterSystemStatsRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RegisterSystemStatsRequest.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a RegisterSystemStatsRequest message.
             * @function verify
             * @memberof wm.protobuf.RegisterSystemStatsRequest
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            RegisterSystemStatsRequest.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (!$util.isString(message.pcbSerial))
                    return "pcbSerial: string expected";
                if (message.driveStats != null && message.hasOwnProperty("driveStats")) {
                    let error = $root.wm.protobuf.RegisterSystemStatsRequest.DriveStats.verify(message.driveStats);
                    if (error)
                        return "driveStats." + error;
                }
                if (message.terminalStats != null && message.hasOwnProperty("terminalStats")) {
                    let error = $root.wm.protobuf.RegisterSystemStatsRequest.TerminalStats.verify(message.terminalStats);
                    if (error)
                        return "terminalStats." + error;
                }
                return null;
            };

            /**
             * Creates a RegisterSystemStatsRequest message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof wm.protobuf.RegisterSystemStatsRequest
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {wm.protobuf.RegisterSystemStatsRequest} RegisterSystemStatsRequest
             */
            RegisterSystemStatsRequest.fromObject = function fromObject(object) {
                if (object instanceof $root.wm.protobuf.RegisterSystemStatsRequest)
                    return object;
                let message = new $root.wm.protobuf.RegisterSystemStatsRequest();
                if (object.pcbSerial != null)
                    message.pcbSerial = String(object.pcbSerial);
                if (object.driveStats != null) {
                    if (typeof object.driveStats !== "object")
                        throw TypeError(".wm.protobuf.RegisterSystemStatsRequest.driveStats: object expected");
                    message.driveStats = $root.wm.protobuf.RegisterSystemStatsRequest.DriveStats.fromObject(object.driveStats);
                }
                if (object.terminalStats != null) {
                    if (typeof object.terminalStats !== "object")
                        throw TypeError(".wm.protobuf.RegisterSystemStatsRequest.terminalStats: object expected");
                    message.terminalStats = $root.wm.protobuf.RegisterSystemStatsRequest.TerminalStats.fromObject(object.terminalStats);
                }
                return message;
            };

            /**
             * Creates a plain object from a RegisterSystemStatsRequest message. Also converts values to other types if specified.
             * @function toObject
             * @memberof wm.protobuf.RegisterSystemStatsRequest
             * @static
             * @param {wm.protobuf.RegisterSystemStatsRequest} message RegisterSystemStatsRequest
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            RegisterSystemStatsRequest.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.pcbSerial = "";
                    object.driveStats = null;
                    object.terminalStats = null;
                }
                if (message.pcbSerial != null && message.hasOwnProperty("pcbSerial"))
                    object.pcbSerial = message.pcbSerial;
                if (message.driveStats != null && message.hasOwnProperty("driveStats"))
                    object.driveStats = $root.wm.protobuf.RegisterSystemStatsRequest.DriveStats.toObject(message.driveStats, options);
                if (message.terminalStats != null && message.hasOwnProperty("terminalStats"))
                    object.terminalStats = $root.wm.protobuf.RegisterSystemStatsRequest.TerminalStats.toObject(message.terminalStats, options);
                return object;
            };

            /**
             * Converts this RegisterSystemStatsRequest to JSON.
             * @function toJSON
             * @memberof wm.protobuf.RegisterSystemStatsRequest
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            RegisterSystemStatsRequest.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for RegisterSystemStatsRequest
             * @function getTypeUrl
             * @memberof wm.protobuf.RegisterSystemStatsRequest
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            RegisterSystemStatsRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/wm.protobuf.RegisterSystemStatsRequest";
            };

            RegisterSystemStatsRequest.DriveStats = (function() {

                /**
                 * Properties of a DriveStats.
                 * @memberof wm.protobuf.RegisterSystemStatsRequest
                 * @interface IDriveStats
                 * @property {Array.<number>|null} [operation] DriveStats operation
                 * @property {Array.<number>|null} [story] DriveStats story
                 * @property {Array.<number>|null} [versus] DriveStats versus
                 * @property {Array.<number>|null} [ghost] DriveStats ghost
                 * @property {Array.<number>|null} [timeAttack] DriveStats timeAttack
                 * @property {Array.<number>|null} [event] DriveStats event
                 */

                /**
                 * Constructs a new DriveStats.
                 * @memberof wm.protobuf.RegisterSystemStatsRequest
                 * @classdesc Represents a DriveStats.
                 * @implements IDriveStats
                 * @constructor
                 * @param {wm.protobuf.RegisterSystemStatsRequest.IDriveStats=} [properties] Properties to set
                 */
                function DriveStats(properties) {
                    this.operation = [];
                    this.story = [];
                    this.versus = [];
                    this.ghost = [];
                    this.timeAttack = [];
                    this.event = [];
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * DriveStats operation.
                 * @member {Array.<number>} operation
                 * @memberof wm.protobuf.RegisterSystemStatsRequest.DriveStats
                 * @instance
                 */
                DriveStats.prototype.operation = $util.emptyArray;

                /**
                 * DriveStats story.
                 * @member {Array.<number>} story
                 * @memberof wm.protobuf.RegisterSystemStatsRequest.DriveStats
                 * @instance
                 */
                DriveStats.prototype.story = $util.emptyArray;

                /**
                 * DriveStats versus.
                 * @member {Array.<number>} versus
                 * @memberof wm.protobuf.RegisterSystemStatsRequest.DriveStats
                 * @instance
                 */
                DriveStats.prototype.versus = $util.emptyArray;

                /**
                 * DriveStats ghost.
                 * @member {Array.<number>} ghost
                 * @memberof wm.protobuf.RegisterSystemStatsRequest.DriveStats
                 * @instance
                 */
                DriveStats.prototype.ghost = $util.emptyArray;

                /**
                 * DriveStats timeAttack.
                 * @member {Array.<number>} timeAttack
                 * @memberof wm.protobuf.RegisterSystemStatsRequest.DriveStats
                 * @instance
                 */
                DriveStats.prototype.timeAttack = $util.emptyArray;

                /**
                 * DriveStats event.
                 * @member {Array.<number>} event
                 * @memberof wm.protobuf.RegisterSystemStatsRequest.DriveStats
                 * @instance
                 */
                DriveStats.prototype.event = $util.emptyArray;

                /**
                 * Creates a new DriveStats instance using the specified properties.
                 * @function create
                 * @memberof wm.protobuf.RegisterSystemStatsRequest.DriveStats
                 * @static
                 * @param {wm.protobuf.RegisterSystemStatsRequest.IDriveStats=} [properties] Properties to set
                 * @returns {wm.protobuf.RegisterSystemStatsRequest.DriveStats} DriveStats instance
                 */
                DriveStats.create = function create(properties) {
                    return new DriveStats(properties);
                };

                /**
                 * Encodes the specified DriveStats message. Does not implicitly {@link wm.protobuf.RegisterSystemStatsRequest.DriveStats.verify|verify} messages.
                 * @function encode
                 * @memberof wm.protobuf.RegisterSystemStatsRequest.DriveStats
                 * @static
                 * @param {wm.protobuf.RegisterSystemStatsRequest.IDriveStats} message DriveStats message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                DriveStats.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.operation != null && message.operation.length)
                        for (let i = 0; i < message.operation.length; ++i)
                            writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.operation[i]);
                    if (message.story != null && message.story.length)
                        for (let i = 0; i < message.story.length; ++i)
                            writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.story[i]);
                    if (message.versus != null && message.versus.length)
                        for (let i = 0; i < message.versus.length; ++i)
                            writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.versus[i]);
                    if (message.ghost != null && message.ghost.length)
                        for (let i = 0; i < message.ghost.length; ++i)
                            writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.ghost[i]);
                    if (message.timeAttack != null && message.timeAttack.length)
                        for (let i = 0; i < message.timeAttack.length; ++i)
                            writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.timeAttack[i]);
                    if (message.event != null && message.event.length)
                        for (let i = 0; i < message.event.length; ++i)
                            writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.event[i]);
                    return writer;
                };

                /**
                 * Encodes the specified DriveStats message, length delimited. Does not implicitly {@link wm.protobuf.RegisterSystemStatsRequest.DriveStats.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof wm.protobuf.RegisterSystemStatsRequest.DriveStats
                 * @static
                 * @param {wm.protobuf.RegisterSystemStatsRequest.IDriveStats} message DriveStats message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                DriveStats.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a DriveStats message from the specified reader or buffer.
                 * @function decode
                 * @memberof wm.protobuf.RegisterSystemStatsRequest.DriveStats
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {wm.protobuf.RegisterSystemStatsRequest.DriveStats} DriveStats
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                DriveStats.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.wm.protobuf.RegisterSystemStatsRequest.DriveStats();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                if (!(message.operation && message.operation.length))
                                    message.operation = [];
                                if ((tag & 7) === 2) {
                                    let end2 = reader.uint32() + reader.pos;
                                    while (reader.pos < end2)
                                        message.operation.push(reader.uint32());
                                } else
                                    message.operation.push(reader.uint32());
                                break;
                            }
                        case 2: {
                                if (!(message.story && message.story.length))
                                    message.story = [];
                                if ((tag & 7) === 2) {
                                    let end2 = reader.uint32() + reader.pos;
                                    while (reader.pos < end2)
                                        message.story.push(reader.uint32());
                                } else
                                    message.story.push(reader.uint32());
                                break;
                            }
                        case 3: {
                                if (!(message.versus && message.versus.length))
                                    message.versus = [];
                                if ((tag & 7) === 2) {
                                    let end2 = reader.uint32() + reader.pos;
                                    while (reader.pos < end2)
                                        message.versus.push(reader.uint32());
                                } else
                                    message.versus.push(reader.uint32());
                                break;
                            }
                        case 4: {
                                if (!(message.ghost && message.ghost.length))
                                    message.ghost = [];
                                if ((tag & 7) === 2) {
                                    let end2 = reader.uint32() + reader.pos;
                                    while (reader.pos < end2)
                                        message.ghost.push(reader.uint32());
                                } else
                                    message.ghost.push(reader.uint32());
                                break;
                            }
                        case 5: {
                                if (!(message.timeAttack && message.timeAttack.length))
                                    message.timeAttack = [];
                                if ((tag & 7) === 2) {
                                    let end2 = reader.uint32() + reader.pos;
                                    while (reader.pos < end2)
                                        message.timeAttack.push(reader.uint32());
                                } else
                                    message.timeAttack.push(reader.uint32());
                                break;
                            }
                        case 6: {
                                if (!(message.event && message.event.length))
                                    message.event = [];
                                if ((tag & 7) === 2) {
                                    let end2 = reader.uint32() + reader.pos;
                                    while (reader.pos < end2)
                                        message.event.push(reader.uint32());
                                } else
                                    message.event.push(reader.uint32());
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a DriveStats message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof wm.protobuf.RegisterSystemStatsRequest.DriveStats
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {wm.protobuf.RegisterSystemStatsRequest.DriveStats} DriveStats
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                DriveStats.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a DriveStats message.
                 * @function verify
                 * @memberof wm.protobuf.RegisterSystemStatsRequest.DriveStats
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                DriveStats.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.operation != null && message.hasOwnProperty("operation")) {
                        if (!Array.isArray(message.operation))
                            return "operation: array expected";
                        for (let i = 0; i < message.operation.length; ++i)
                            if (!$util.isInteger(message.operation[i]))
                                return "operation: integer[] expected";
                    }
                    if (message.story != null && message.hasOwnProperty("story")) {
                        if (!Array.isArray(message.story))
                            return "story: array expected";
                        for (let i = 0; i < message.story.length; ++i)
                            if (!$util.isInteger(message.story[i]))
                                return "story: integer[] expected";
                    }
                    if (message.versus != null && message.hasOwnProperty("versus")) {
                        if (!Array.isArray(message.versus))
                            return "versus: array expected";
                        for (let i = 0; i < message.versus.length; ++i)
                            if (!$util.isInteger(message.versus[i]))
                                return "versus: integer[] expected";
                    }
                    if (message.ghost != null && message.hasOwnProperty("ghost")) {
                        if (!Array.isArray(message.ghost))
                            return "ghost: array expected";
                        for (let i = 0; i < message.ghost.length; ++i)
                            if (!$util.isInteger(message.ghost[i]))
                                return "ghost: integer[] expected";
                    }
                    if (message.timeAttack != null && message.hasOwnProperty("timeAttack")) {
                        if (!Array.isArray(message.timeAttack))
                            return "timeAttack: array expected";
                        for (let i = 0; i < message.timeAttack.length; ++i)
                            if (!$util.isInteger(message.timeAttack[i]))
                                return "timeAttack: integer[] expected";
                    }
                    if (message.event != null && message.hasOwnProperty("event")) {
                        if (!Array.isArray(message.event))
                            return "event: array expected";
                        for (let i = 0; i < message.event.length; ++i)
                            if (!$util.isInteger(message.event[i]))
                                return "event: integer[] expected";
                    }
                    return null;
                };

                /**
                 * Creates a DriveStats message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof wm.protobuf.RegisterSystemStatsRequest.DriveStats
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {wm.protobuf.RegisterSystemStatsRequest.DriveStats} DriveStats
                 */
                DriveStats.fromObject = function fromObject(object) {
                    if (object instanceof $root.wm.protobuf.RegisterSystemStatsRequest.DriveStats)
                        return object;
                    let message = new $root.wm.protobuf.RegisterSystemStatsRequest.DriveStats();
                    if (object.operation) {
                        if (!Array.isArray(object.operation))
                            throw TypeError(".wm.protobuf.RegisterSystemStatsRequest.DriveStats.operation: array expected");
                        message.operation = [];
                        for (let i = 0; i < object.operation.length; ++i)
                            message.operation[i] = object.operation[i] >>> 0;
                    }
                    if (object.story) {
                        if (!Array.isArray(object.story))
                            throw TypeError(".wm.protobuf.RegisterSystemStatsRequest.DriveStats.story: array expected");
                        message.story = [];
                        for (let i = 0; i < object.story.length; ++i)
                            message.story[i] = object.story[i] >>> 0;
                    }
                    if (object.versus) {
                        if (!Array.isArray(object.versus))
                            throw TypeError(".wm.protobuf.RegisterSystemStatsRequest.DriveStats.versus: array expected");
                        message.versus = [];
                        for (let i = 0; i < object.versus.length; ++i)
                            message.versus[i] = object.versus[i] >>> 0;
                    }
                    if (object.ghost) {
                        if (!Array.isArray(object.ghost))
                            throw TypeError(".wm.protobuf.RegisterSystemStatsRequest.DriveStats.ghost: array expected");
                        message.ghost = [];
                        for (let i = 0; i < object.ghost.length; ++i)
                            message.ghost[i] = object.ghost[i] >>> 0;
                    }
                    if (object.timeAttack) {
                        if (!Array.isArray(object.timeAttack))
                            throw TypeError(".wm.protobuf.RegisterSystemStatsRequest.DriveStats.timeAttack: array expected");
                        message.timeAttack = [];
                        for (let i = 0; i < object.timeAttack.length; ++i)
                            message.timeAttack[i] = object.timeAttack[i] >>> 0;
                    }
                    if (object.event) {
                        if (!Array.isArray(object.event))
                            throw TypeError(".wm.protobuf.RegisterSystemStatsRequest.DriveStats.event: array expected");
                        message.event = [];
                        for (let i = 0; i < object.event.length; ++i)
                            message.event[i] = object.event[i] >>> 0;
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a DriveStats message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof wm.protobuf.RegisterSystemStatsRequest.DriveStats
                 * @static
                 * @param {wm.protobuf.RegisterSystemStatsRequest.DriveStats} message DriveStats
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                DriveStats.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.arrays || options.defaults) {
                        object.operation = [];
                        object.story = [];
                        object.versus = [];
                        object.ghost = [];
                        object.timeAttack = [];
                        object.event = [];
                    }
                    if (message.operation && message.operation.length) {
                        object.operation = [];
                        for (let j = 0; j < message.operation.length; ++j)
                            object.operation[j] = message.operation[j];
                    }
                    if (message.story && message.story.length) {
                        object.story = [];
                        for (let j = 0; j < message.story.length; ++j)
                            object.story[j] = message.story[j];
                    }
                    if (message.versus && message.versus.length) {
                        object.versus = [];
                        for (let j = 0; j < message.versus.length; ++j)
                            object.versus[j] = message.versus[j];
                    }
                    if (message.ghost && message.ghost.length) {
                        object.ghost = [];
                        for (let j = 0; j < message.ghost.length; ++j)
                            object.ghost[j] = message.ghost[j];
                    }
                    if (message.timeAttack && message.timeAttack.length) {
                        object.timeAttack = [];
                        for (let j = 0; j < message.timeAttack.length; ++j)
                            object.timeAttack[j] = message.timeAttack[j];
                    }
                    if (message.event && message.event.length) {
                        object.event = [];
                        for (let j = 0; j < message.event.length; ++j)
                            object.event[j] = message.event[j];
                    }
                    return object;
                };

                /**
                 * Converts this DriveStats to JSON.
                 * @function toJSON
                 * @memberof wm.protobuf.RegisterSystemStatsRequest.DriveStats
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                DriveStats.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                /**
                 * Gets the default type url for DriveStats
                 * @function getTypeUrl
                 * @memberof wm.protobuf.RegisterSystemStatsRequest.DriveStats
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                DriveStats.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/wm.protobuf.RegisterSystemStatsRequest.DriveStats";
                };

                return DriveStats;
            })();

            RegisterSystemStatsRequest.TerminalStats = (function() {

                /**
                 * Properties of a TerminalStats.
                 * @memberof wm.protobuf.RegisterSystemStatsRequest
                 * @interface ITerminalStats
                 * @property {Array.<number>|null} [operation] TerminalStats operation
                 */

                /**
                 * Constructs a new TerminalStats.
                 * @memberof wm.protobuf.RegisterSystemStatsRequest
                 * @classdesc Represents a TerminalStats.
                 * @implements ITerminalStats
                 * @constructor
                 * @param {wm.protobuf.RegisterSystemStatsRequest.ITerminalStats=} [properties] Properties to set
                 */
                function TerminalStats(properties) {
                    this.operation = [];
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * TerminalStats operation.
                 * @member {Array.<number>} operation
                 * @memberof wm.protobuf.RegisterSystemStatsRequest.TerminalStats
                 * @instance
                 */
                TerminalStats.prototype.operation = $util.emptyArray;

                /**
                 * Creates a new TerminalStats instance using the specified properties.
                 * @function create
                 * @memberof wm.protobuf.RegisterSystemStatsRequest.TerminalStats
                 * @static
                 * @param {wm.protobuf.RegisterSystemStatsRequest.ITerminalStats=} [properties] Properties to set
                 * @returns {wm.protobuf.RegisterSystemStatsRequest.TerminalStats} TerminalStats instance
                 */
                TerminalStats.create = function create(properties) {
                    return new TerminalStats(properties);
                };

                /**
                 * Encodes the specified TerminalStats message. Does not implicitly {@link wm.protobuf.RegisterSystemStatsRequest.TerminalStats.verify|verify} messages.
                 * @function encode
                 * @memberof wm.protobuf.RegisterSystemStatsRequest.TerminalStats
                 * @static
                 * @param {wm.protobuf.RegisterSystemStatsRequest.ITerminalStats} message TerminalStats message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                TerminalStats.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.operation != null && message.operation.length)
                        for (let i = 0; i < message.operation.length; ++i)
                            writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.operation[i]);
                    return writer;
                };

                /**
                 * Encodes the specified TerminalStats message, length delimited. Does not implicitly {@link wm.protobuf.RegisterSystemStatsRequest.TerminalStats.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof wm.protobuf.RegisterSystemStatsRequest.TerminalStats
                 * @static
                 * @param {wm.protobuf.RegisterSystemStatsRequest.ITerminalStats} message TerminalStats message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                TerminalStats.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a TerminalStats message from the specified reader or buffer.
                 * @function decode
                 * @memberof wm.protobuf.RegisterSystemStatsRequest.TerminalStats
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {wm.protobuf.RegisterSystemStatsRequest.TerminalStats} TerminalStats
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                TerminalStats.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.wm.protobuf.RegisterSystemStatsRequest.TerminalStats();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                if (!(message.operation && message.operation.length))
                                    message.operation = [];
                                if ((tag & 7) === 2) {
                                    let end2 = reader.uint32() + reader.pos;
                                    while (reader.pos < end2)
                                        message.operation.push(reader.uint32());
                                } else
                                    message.operation.push(reader.uint32());
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a TerminalStats message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof wm.protobuf.RegisterSystemStatsRequest.TerminalStats
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {wm.protobuf.RegisterSystemStatsRequest.TerminalStats} TerminalStats
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                TerminalStats.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a TerminalStats message.
                 * @function verify
                 * @memberof wm.protobuf.RegisterSystemStatsRequest.TerminalStats
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                TerminalStats.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.operation != null && message.hasOwnProperty("operation")) {
                        if (!Array.isArray(message.operation))
                            return "operation: array expected";
                        for (let i = 0; i < message.operation.length; ++i)
                            if (!$util.isInteger(message.operation[i]))
                                return "operation: integer[] expected";
                    }
                    return null;
                };

                /**
                 * Creates a TerminalStats message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof wm.protobuf.RegisterSystemStatsRequest.TerminalStats
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {wm.protobuf.RegisterSystemStatsRequest.TerminalStats} TerminalStats
                 */
                TerminalStats.fromObject = function fromObject(object) {
                    if (object instanceof $root.wm.protobuf.RegisterSystemStatsRequest.TerminalStats)
                        return object;
                    let message = new $root.wm.protobuf.RegisterSystemStatsRequest.TerminalStats();
                    if (object.operation) {
                        if (!Array.isArray(object.operation))
                            throw TypeError(".wm.protobuf.RegisterSystemStatsRequest.TerminalStats.operation: array expected");
                        message.operation = [];
                        for (let i = 0; i < object.operation.length; ++i)
                            message.operation[i] = object.operation[i] >>> 0;
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a TerminalStats message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof wm.protobuf.RegisterSystemStatsRequest.TerminalStats
                 * @static
                 * @param {wm.protobuf.RegisterSystemStatsRequest.TerminalStats} message TerminalStats
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                TerminalStats.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.arrays || options.defaults)
                        object.operation = [];
                    if (message.operation && message.operation.length) {
                        object.operation = [];
                        for (let j = 0; j < message.operation.length; ++j)
                            object.operation[j] = message.operation[j];
                    }
                    return object;
                };

                /**
                 * Converts this TerminalStats to JSON.
                 * @function toJSON
                 * @memberof wm.protobuf.RegisterSystemStatsRequest.TerminalStats
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                TerminalStats.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                /**
                 * Gets the default type url for TerminalStats
                 * @function getTypeUrl
                 * @memberof wm.protobuf.RegisterSystemStatsRequest.TerminalStats
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                TerminalStats.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/wm.protobuf.RegisterSystemStatsRequest.TerminalStats";
                };

                return TerminalStats;
            })();

            return RegisterSystemStatsRequest;
        })();

        protobuf.RegisterSystemStatsResponse = (function() {

            /**
             * Properties of a RegisterSystemStatsResponse.
             * @memberof wm.protobuf
             * @interface IRegisterSystemStatsResponse
             * @property {wm.protobuf.ErrorCode} error RegisterSystemStatsResponse error
             */

            /**
             * Constructs a new RegisterSystemStatsResponse.
             * @memberof wm.protobuf
             * @classdesc Represents a RegisterSystemStatsResponse.
             * @implements IRegisterSystemStatsResponse
             * @constructor
             * @param {wm.protobuf.IRegisterSystemStatsResponse=} [properties] Properties to set
             */
            function RegisterSystemStatsResponse(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * RegisterSystemStatsResponse error.
             * @member {wm.protobuf.ErrorCode} error
             * @memberof wm.protobuf.RegisterSystemStatsResponse
             * @instance
             */
            RegisterSystemStatsResponse.prototype.error = 0;

            /**
             * Creates a new RegisterSystemStatsResponse instance using the specified properties.
             * @function create
             * @memberof wm.protobuf.RegisterSystemStatsResponse
             * @static
             * @param {wm.protobuf.IRegisterSystemStatsResponse=} [properties] Properties to set
             * @returns {wm.protobuf.RegisterSystemStatsResponse} RegisterSystemStatsResponse instance
             */
            RegisterSystemStatsResponse.create = function create(properties) {
                return new RegisterSystemStatsResponse(properties);
            };

            /**
             * Encodes the specified RegisterSystemStatsResponse message. Does not implicitly {@link wm.protobuf.RegisterSystemStatsResponse.verify|verify} messages.
             * @function encode
             * @memberof wm.protobuf.RegisterSystemStatsResponse
             * @static
             * @param {wm.protobuf.IRegisterSystemStatsResponse} message RegisterSystemStatsResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RegisterSystemStatsResponse.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
                return writer;
            };

            /**
             * Encodes the specified RegisterSystemStatsResponse message, length delimited. Does not implicitly {@link wm.protobuf.RegisterSystemStatsResponse.verify|verify} messages.
             * @function encodeDelimited
             * @memberof wm.protobuf.RegisterSystemStatsResponse
             * @static
             * @param {wm.protobuf.IRegisterSystemStatsResponse} message RegisterSystemStatsResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RegisterSystemStatsResponse.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a RegisterSystemStatsResponse message from the specified reader or buffer.
             * @function decode
             * @memberof wm.protobuf.RegisterSystemStatsResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {wm.protobuf.RegisterSystemStatsResponse} RegisterSystemStatsResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RegisterSystemStatsResponse.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.wm.protobuf.RegisterSystemStatsResponse();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.error = reader.int32();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("error"))
                    throw $util.ProtocolError("missing required 'error'", { instance: message });
                return message;
            };

            /**
             * Decodes a RegisterSystemStatsResponse message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof wm.protobuf.RegisterSystemStatsResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {wm.protobuf.RegisterSystemStatsResponse} RegisterSystemStatsResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RegisterSystemStatsResponse.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a RegisterSystemStatsResponse message.
             * @function verify
             * @memberof wm.protobuf.RegisterSystemStatsResponse
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            RegisterSystemStatsResponse.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                switch (message.error) {
                default:
                    return "error: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 7:
                case 9:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 16:
                case 17:
                case 18:
                case 19:
                    break;
                }
                return null;
            };

            /**
             * Creates a RegisterSystemStatsResponse message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof wm.protobuf.RegisterSystemStatsResponse
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {wm.protobuf.RegisterSystemStatsResponse} RegisterSystemStatsResponse
             */
            RegisterSystemStatsResponse.fromObject = function fromObject(object) {
                if (object instanceof $root.wm.protobuf.RegisterSystemStatsResponse)
                    return object;
                let message = new $root.wm.protobuf.RegisterSystemStatsResponse();
                switch (object.error) {
                default:
                    if (typeof object.error === "number") {
                        message.error = object.error;
                        break;
                    }
                    break;
                case "ERR_SUCCESS":
                case 0:
                    message.error = 0;
                    break;
                case "ERR_REQUEST":
                case 1:
                    message.error = 1;
                    break;
                case "ERR_NOT_FOUND":
                case 2:
                    message.error = 2;
                    break;
                case "ERR_ID_SERVER":
                case 3:
                    message.error = 3;
                    break;
                case "ERR_ID_BANNED":
                case 4:
                    message.error = 4;
                    break;
                case "ERR_USER_LOCKED":
                case 5:
                    message.error = 5;
                    break;
                case "ERR_USER_VERSION":
                case 6:
                    message.error = 6;
                    break;
                case "ERR_NAME_CONFLICTED":
                case 7:
                    message.error = 7;
                    break;
                case "ERR_FORBIDDEN":
                case 9:
                    message.error = 9;
                    break;
                case "ERR_USER_SUCCEEDED":
                case 11:
                    message.error = 11;
                    break;
                case "ERR_BEING_TRANSFERRED":
                case 12:
                    message.error = 12;
                    break;
                case "ERR_SCRATCH_LOCKED":
                case 13:
                    message.error = 13;
                    break;
                case "ERR_BINGO_REVENGE_LOCKED":
                case 14:
                    message.error = 14;
                    break;
                case "ERR_BINGO_ALREDY_LINKED":
                case 15:
                    message.error = 15;
                    break;
                case "ERR_BINGO_FINISHED":
                case 16:
                    message.error = 16;
                    break;
                case "ERR_BINGO_REACHED_MAX_USER":
                case 17:
                    message.error = 17;
                    break;
                case "ERR_CAR_NOT_FOUND":
                case 18:
                    message.error = 18;
                    break;
                case "ERR_BINGO_CARD_NOT_FOUND":
                case 19:
                    message.error = 19;
                    break;
                }
                return message;
            };

            /**
             * Creates a plain object from a RegisterSystemStatsResponse message. Also converts values to other types if specified.
             * @function toObject
             * @memberof wm.protobuf.RegisterSystemStatsResponse
             * @static
             * @param {wm.protobuf.RegisterSystemStatsResponse} message RegisterSystemStatsResponse
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            RegisterSystemStatsResponse.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults)
                    object.error = options.enums === String ? "ERR_SUCCESS" : 0;
                if (message.error != null && message.hasOwnProperty("error"))
                    object.error = options.enums === String ? $root.wm.protobuf.ErrorCode[message.error] === undefined ? message.error : $root.wm.protobuf.ErrorCode[message.error] : message.error;
                return object;
            };

            /**
             * Converts this RegisterSystemStatsResponse to JSON.
             * @function toJSON
             * @memberof wm.protobuf.RegisterSystemStatsResponse
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            RegisterSystemStatsResponse.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for RegisterSystemStatsResponse
             * @function getTypeUrl
             * @memberof wm.protobuf.RegisterSystemStatsResponse
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            RegisterSystemStatsResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/wm.protobuf.RegisterSystemStatsResponse";
            };

            return RegisterSystemStatsResponse;
        })();

        protobuf.RegisterGhostTrailRequest = (function() {

            /**
             * Properties of a RegisterGhostTrailRequest.
             * @memberof wm.protobuf
             * @interface IRegisterGhostTrailRequest
             * @property {number|Long} ghostSessionId RegisterGhostTrailRequest ghostSessionId
             * @property {wm.protobuf.IGhostCar} ghost RegisterGhostTrailRequest ghost
             * @property {Uint8Array} trail RegisterGhostTrailRequest trail
             * @property {number|null} [time] RegisterGhostTrailRequest time
             * @property {wm.protobuf.IBinaryData|null} [driveData] RegisterGhostTrailRequest driveData
             * @property {wm.protobuf.IBinaryData|null} [trendBinaryByArea] RegisterGhostTrailRequest trendBinaryByArea
             * @property {wm.protobuf.IBinaryData|null} [trendBinaryByCar] RegisterGhostTrailRequest trendBinaryByCar
             * @property {wm.protobuf.IBinaryData|null} [trendBinaryByUser] RegisterGhostTrailRequest trendBinaryByUser
             */

            /**
             * Constructs a new RegisterGhostTrailRequest.
             * @memberof wm.protobuf
             * @classdesc Represents a RegisterGhostTrailRequest.
             * @implements IRegisterGhostTrailRequest
             * @constructor
             * @param {wm.protobuf.IRegisterGhostTrailRequest=} [properties] Properties to set
             */
            function RegisterGhostTrailRequest(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * RegisterGhostTrailRequest ghostSessionId.
             * @member {number|Long} ghostSessionId
             * @memberof wm.protobuf.RegisterGhostTrailRequest
             * @instance
             */
            RegisterGhostTrailRequest.prototype.ghostSessionId = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

            /**
             * RegisterGhostTrailRequest ghost.
             * @member {wm.protobuf.IGhostCar} ghost
             * @memberof wm.protobuf.RegisterGhostTrailRequest
             * @instance
             */
            RegisterGhostTrailRequest.prototype.ghost = null;

            /**
             * RegisterGhostTrailRequest trail.
             * @member {Uint8Array} trail
             * @memberof wm.protobuf.RegisterGhostTrailRequest
             * @instance
             */
            RegisterGhostTrailRequest.prototype.trail = $util.newBuffer([]);

            /**
             * RegisterGhostTrailRequest time.
             * @member {number} time
             * @memberof wm.protobuf.RegisterGhostTrailRequest
             * @instance
             */
            RegisterGhostTrailRequest.prototype.time = 0;

            /**
             * RegisterGhostTrailRequest driveData.
             * @member {wm.protobuf.IBinaryData|null|undefined} driveData
             * @memberof wm.protobuf.RegisterGhostTrailRequest
             * @instance
             */
            RegisterGhostTrailRequest.prototype.driveData = null;

            /**
             * RegisterGhostTrailRequest trendBinaryByArea.
             * @member {wm.protobuf.IBinaryData|null|undefined} trendBinaryByArea
             * @memberof wm.protobuf.RegisterGhostTrailRequest
             * @instance
             */
            RegisterGhostTrailRequest.prototype.trendBinaryByArea = null;

            /**
             * RegisterGhostTrailRequest trendBinaryByCar.
             * @member {wm.protobuf.IBinaryData|null|undefined} trendBinaryByCar
             * @memberof wm.protobuf.RegisterGhostTrailRequest
             * @instance
             */
            RegisterGhostTrailRequest.prototype.trendBinaryByCar = null;

            /**
             * RegisterGhostTrailRequest trendBinaryByUser.
             * @member {wm.protobuf.IBinaryData|null|undefined} trendBinaryByUser
             * @memberof wm.protobuf.RegisterGhostTrailRequest
             * @instance
             */
            RegisterGhostTrailRequest.prototype.trendBinaryByUser = null;

            /**
             * Creates a new RegisterGhostTrailRequest instance using the specified properties.
             * @function create
             * @memberof wm.protobuf.RegisterGhostTrailRequest
             * @static
             * @param {wm.protobuf.IRegisterGhostTrailRequest=} [properties] Properties to set
             * @returns {wm.protobuf.RegisterGhostTrailRequest} RegisterGhostTrailRequest instance
             */
            RegisterGhostTrailRequest.create = function create(properties) {
                return new RegisterGhostTrailRequest(properties);
            };

            /**
             * Encodes the specified RegisterGhostTrailRequest message. Does not implicitly {@link wm.protobuf.RegisterGhostTrailRequest.verify|verify} messages.
             * @function encode
             * @memberof wm.protobuf.RegisterGhostTrailRequest
             * @static
             * @param {wm.protobuf.IRegisterGhostTrailRequest} message RegisterGhostTrailRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RegisterGhostTrailRequest.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.ghostSessionId);
                $root.wm.protobuf.GhostCar.encode(message.ghost, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                writer.uint32(/* id 3, wireType 2 =*/26).bytes(message.trail);
                if (message.time != null && Object.hasOwnProperty.call(message, "time"))
                    writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.time);
                if (message.driveData != null && Object.hasOwnProperty.call(message, "driveData"))
                    $root.wm.protobuf.BinaryData.encode(message.driveData, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                if (message.trendBinaryByArea != null && Object.hasOwnProperty.call(message, "trendBinaryByArea"))
                    $root.wm.protobuf.BinaryData.encode(message.trendBinaryByArea, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                if (message.trendBinaryByCar != null && Object.hasOwnProperty.call(message, "trendBinaryByCar"))
                    $root.wm.protobuf.BinaryData.encode(message.trendBinaryByCar, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                if (message.trendBinaryByUser != null && Object.hasOwnProperty.call(message, "trendBinaryByUser"))
                    $root.wm.protobuf.BinaryData.encode(message.trendBinaryByUser, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified RegisterGhostTrailRequest message, length delimited. Does not implicitly {@link wm.protobuf.RegisterGhostTrailRequest.verify|verify} messages.
             * @function encodeDelimited
             * @memberof wm.protobuf.RegisterGhostTrailRequest
             * @static
             * @param {wm.protobuf.IRegisterGhostTrailRequest} message RegisterGhostTrailRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RegisterGhostTrailRequest.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a RegisterGhostTrailRequest message from the specified reader or buffer.
             * @function decode
             * @memberof wm.protobuf.RegisterGhostTrailRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {wm.protobuf.RegisterGhostTrailRequest} RegisterGhostTrailRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RegisterGhostTrailRequest.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.wm.protobuf.RegisterGhostTrailRequest();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.ghostSessionId = reader.uint64();
                            break;
                        }
                    case 2: {
                            message.ghost = $root.wm.protobuf.GhostCar.decode(reader, reader.uint32());
                            break;
                        }
                    case 3: {
                            message.trail = reader.bytes();
                            break;
                        }
                    case 4: {
                            message.time = reader.uint32();
                            break;
                        }
                    case 5: {
                            message.driveData = $root.wm.protobuf.BinaryData.decode(reader, reader.uint32());
                            break;
                        }
                    case 6: {
                            message.trendBinaryByArea = $root.wm.protobuf.BinaryData.decode(reader, reader.uint32());
                            break;
                        }
                    case 7: {
                            message.trendBinaryByCar = $root.wm.protobuf.BinaryData.decode(reader, reader.uint32());
                            break;
                        }
                    case 8: {
                            message.trendBinaryByUser = $root.wm.protobuf.BinaryData.decode(reader, reader.uint32());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("ghostSessionId"))
                    throw $util.ProtocolError("missing required 'ghostSessionId'", { instance: message });
                if (!message.hasOwnProperty("ghost"))
                    throw $util.ProtocolError("missing required 'ghost'", { instance: message });
                if (!message.hasOwnProperty("trail"))
                    throw $util.ProtocolError("missing required 'trail'", { instance: message });
                return message;
            };

            /**
             * Decodes a RegisterGhostTrailRequest message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof wm.protobuf.RegisterGhostTrailRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {wm.protobuf.RegisterGhostTrailRequest} RegisterGhostTrailRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RegisterGhostTrailRequest.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a RegisterGhostTrailRequest message.
             * @function verify
             * @memberof wm.protobuf.RegisterGhostTrailRequest
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            RegisterGhostTrailRequest.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (!$util.isInteger(message.ghostSessionId) && !(message.ghostSessionId && $util.isInteger(message.ghostSessionId.low) && $util.isInteger(message.ghostSessionId.high)))
                    return "ghostSessionId: integer|Long expected";
                {
                    let error = $root.wm.protobuf.GhostCar.verify(message.ghost);
                    if (error)
                        return "ghost." + error;
                }
                if (!(message.trail && typeof message.trail.length === "number" || $util.isString(message.trail)))
                    return "trail: buffer expected";
                if (message.time != null && message.hasOwnProperty("time"))
                    if (!$util.isInteger(message.time))
                        return "time: integer expected";
                if (message.driveData != null && message.hasOwnProperty("driveData")) {
                    let error = $root.wm.protobuf.BinaryData.verify(message.driveData);
                    if (error)
                        return "driveData." + error;
                }
                if (message.trendBinaryByArea != null && message.hasOwnProperty("trendBinaryByArea")) {
                    let error = $root.wm.protobuf.BinaryData.verify(message.trendBinaryByArea);
                    if (error)
                        return "trendBinaryByArea." + error;
                }
                if (message.trendBinaryByCar != null && message.hasOwnProperty("trendBinaryByCar")) {
                    let error = $root.wm.protobuf.BinaryData.verify(message.trendBinaryByCar);
                    if (error)
                        return "trendBinaryByCar." + error;
                }
                if (message.trendBinaryByUser != null && message.hasOwnProperty("trendBinaryByUser")) {
                    let error = $root.wm.protobuf.BinaryData.verify(message.trendBinaryByUser);
                    if (error)
                        return "trendBinaryByUser." + error;
                }
                return null;
            };

            /**
             * Creates a RegisterGhostTrailRequest message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof wm.protobuf.RegisterGhostTrailRequest
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {wm.protobuf.RegisterGhostTrailRequest} RegisterGhostTrailRequest
             */
            RegisterGhostTrailRequest.fromObject = function fromObject(object) {
                if (object instanceof $root.wm.protobuf.RegisterGhostTrailRequest)
                    return object;
                let message = new $root.wm.protobuf.RegisterGhostTrailRequest();
                if (object.ghostSessionId != null)
                    if ($util.Long)
                        (message.ghostSessionId = $util.Long.fromValue(object.ghostSessionId)).unsigned = true;
                    else if (typeof object.ghostSessionId === "string")
                        message.ghostSessionId = parseInt(object.ghostSessionId, 10);
                    else if (typeof object.ghostSessionId === "number")
                        message.ghostSessionId = object.ghostSessionId;
                    else if (typeof object.ghostSessionId === "object")
                        message.ghostSessionId = new $util.LongBits(object.ghostSessionId.low >>> 0, object.ghostSessionId.high >>> 0).toNumber(true);
                if (object.ghost != null) {
                    if (typeof object.ghost !== "object")
                        throw TypeError(".wm.protobuf.RegisterGhostTrailRequest.ghost: object expected");
                    message.ghost = $root.wm.protobuf.GhostCar.fromObject(object.ghost);
                }
                if (object.trail != null)
                    if (typeof object.trail === "string")
                        $util.base64.decode(object.trail, message.trail = $util.newBuffer($util.base64.length(object.trail)), 0);
                    else if (object.trail.length >= 0)
                        message.trail = object.trail;
                if (object.time != null)
                    message.time = object.time >>> 0;
                if (object.driveData != null) {
                    if (typeof object.driveData !== "object")
                        throw TypeError(".wm.protobuf.RegisterGhostTrailRequest.driveData: object expected");
                    message.driveData = $root.wm.protobuf.BinaryData.fromObject(object.driveData);
                }
                if (object.trendBinaryByArea != null) {
                    if (typeof object.trendBinaryByArea !== "object")
                        throw TypeError(".wm.protobuf.RegisterGhostTrailRequest.trendBinaryByArea: object expected");
                    message.trendBinaryByArea = $root.wm.protobuf.BinaryData.fromObject(object.trendBinaryByArea);
                }
                if (object.trendBinaryByCar != null) {
                    if (typeof object.trendBinaryByCar !== "object")
                        throw TypeError(".wm.protobuf.RegisterGhostTrailRequest.trendBinaryByCar: object expected");
                    message.trendBinaryByCar = $root.wm.protobuf.BinaryData.fromObject(object.trendBinaryByCar);
                }
                if (object.trendBinaryByUser != null) {
                    if (typeof object.trendBinaryByUser !== "object")
                        throw TypeError(".wm.protobuf.RegisterGhostTrailRequest.trendBinaryByUser: object expected");
                    message.trendBinaryByUser = $root.wm.protobuf.BinaryData.fromObject(object.trendBinaryByUser);
                }
                return message;
            };

            /**
             * Creates a plain object from a RegisterGhostTrailRequest message. Also converts values to other types if specified.
             * @function toObject
             * @memberof wm.protobuf.RegisterGhostTrailRequest
             * @static
             * @param {wm.protobuf.RegisterGhostTrailRequest} message RegisterGhostTrailRequest
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            RegisterGhostTrailRequest.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, true);
                        object.ghostSessionId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.ghostSessionId = options.longs === String ? "0" : 0;
                    object.ghost = null;
                    if (options.bytes === String)
                        object.trail = "";
                    else {
                        object.trail = [];
                        if (options.bytes !== Array)
                            object.trail = $util.newBuffer(object.trail);
                    }
                    object.time = 0;
                    object.driveData = null;
                    object.trendBinaryByArea = null;
                    object.trendBinaryByCar = null;
                    object.trendBinaryByUser = null;
                }
                if (message.ghostSessionId != null && message.hasOwnProperty("ghostSessionId"))
                    if (typeof message.ghostSessionId === "number")
                        object.ghostSessionId = options.longs === String ? String(message.ghostSessionId) : message.ghostSessionId;
                    else
                        object.ghostSessionId = options.longs === String ? $util.Long.prototype.toString.call(message.ghostSessionId) : options.longs === Number ? new $util.LongBits(message.ghostSessionId.low >>> 0, message.ghostSessionId.high >>> 0).toNumber(true) : message.ghostSessionId;
                if (message.ghost != null && message.hasOwnProperty("ghost"))
                    object.ghost = $root.wm.protobuf.GhostCar.toObject(message.ghost, options);
                if (message.trail != null && message.hasOwnProperty("trail"))
                    object.trail = options.bytes === String ? $util.base64.encode(message.trail, 0, message.trail.length) : options.bytes === Array ? Array.prototype.slice.call(message.trail) : message.trail;
                if (message.time != null && message.hasOwnProperty("time"))
                    object.time = message.time;
                if (message.driveData != null && message.hasOwnProperty("driveData"))
                    object.driveData = $root.wm.protobuf.BinaryData.toObject(message.driveData, options);
                if (message.trendBinaryByArea != null && message.hasOwnProperty("trendBinaryByArea"))
                    object.trendBinaryByArea = $root.wm.protobuf.BinaryData.toObject(message.trendBinaryByArea, options);
                if (message.trendBinaryByCar != null && message.hasOwnProperty("trendBinaryByCar"))
                    object.trendBinaryByCar = $root.wm.protobuf.BinaryData.toObject(message.trendBinaryByCar, options);
                if (message.trendBinaryByUser != null && message.hasOwnProperty("trendBinaryByUser"))
                    object.trendBinaryByUser = $root.wm.protobuf.BinaryData.toObject(message.trendBinaryByUser, options);
                return object;
            };

            /**
             * Converts this RegisterGhostTrailRequest to JSON.
             * @function toJSON
             * @memberof wm.protobuf.RegisterGhostTrailRequest
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            RegisterGhostTrailRequest.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for RegisterGhostTrailRequest
             * @function getTypeUrl
             * @memberof wm.protobuf.RegisterGhostTrailRequest
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            RegisterGhostTrailRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/wm.protobuf.RegisterGhostTrailRequest";
            };

            return RegisterGhostTrailRequest;
        })();

        protobuf.RegisterGhostTrailResponse = (function() {

            /**
             * Properties of a RegisterGhostTrailResponse.
             * @memberof wm.protobuf
             * @interface IRegisterGhostTrailResponse
             * @property {wm.protobuf.ErrorCode} error RegisterGhostTrailResponse error
             */

            /**
             * Constructs a new RegisterGhostTrailResponse.
             * @memberof wm.protobuf
             * @classdesc Represents a RegisterGhostTrailResponse.
             * @implements IRegisterGhostTrailResponse
             * @constructor
             * @param {wm.protobuf.IRegisterGhostTrailResponse=} [properties] Properties to set
             */
            function RegisterGhostTrailResponse(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * RegisterGhostTrailResponse error.
             * @member {wm.protobuf.ErrorCode} error
             * @memberof wm.protobuf.RegisterGhostTrailResponse
             * @instance
             */
            RegisterGhostTrailResponse.prototype.error = 0;

            /**
             * Creates a new RegisterGhostTrailResponse instance using the specified properties.
             * @function create
             * @memberof wm.protobuf.RegisterGhostTrailResponse
             * @static
             * @param {wm.protobuf.IRegisterGhostTrailResponse=} [properties] Properties to set
             * @returns {wm.protobuf.RegisterGhostTrailResponse} RegisterGhostTrailResponse instance
             */
            RegisterGhostTrailResponse.create = function create(properties) {
                return new RegisterGhostTrailResponse(properties);
            };

            /**
             * Encodes the specified RegisterGhostTrailResponse message. Does not implicitly {@link wm.protobuf.RegisterGhostTrailResponse.verify|verify} messages.
             * @function encode
             * @memberof wm.protobuf.RegisterGhostTrailResponse
             * @static
             * @param {wm.protobuf.IRegisterGhostTrailResponse} message RegisterGhostTrailResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RegisterGhostTrailResponse.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
                return writer;
            };

            /**
             * Encodes the specified RegisterGhostTrailResponse message, length delimited. Does not implicitly {@link wm.protobuf.RegisterGhostTrailResponse.verify|verify} messages.
             * @function encodeDelimited
             * @memberof wm.protobuf.RegisterGhostTrailResponse
             * @static
             * @param {wm.protobuf.IRegisterGhostTrailResponse} message RegisterGhostTrailResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RegisterGhostTrailResponse.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a RegisterGhostTrailResponse message from the specified reader or buffer.
             * @function decode
             * @memberof wm.protobuf.RegisterGhostTrailResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {wm.protobuf.RegisterGhostTrailResponse} RegisterGhostTrailResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RegisterGhostTrailResponse.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.wm.protobuf.RegisterGhostTrailResponse();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.error = reader.int32();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("error"))
                    throw $util.ProtocolError("missing required 'error'", { instance: message });
                return message;
            };

            /**
             * Decodes a RegisterGhostTrailResponse message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof wm.protobuf.RegisterGhostTrailResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {wm.protobuf.RegisterGhostTrailResponse} RegisterGhostTrailResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RegisterGhostTrailResponse.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a RegisterGhostTrailResponse message.
             * @function verify
             * @memberof wm.protobuf.RegisterGhostTrailResponse
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            RegisterGhostTrailResponse.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                switch (message.error) {
                default:
                    return "error: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 7:
                case 9:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 16:
                case 17:
                case 18:
                case 19:
                    break;
                }
                return null;
            };

            /**
             * Creates a RegisterGhostTrailResponse message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof wm.protobuf.RegisterGhostTrailResponse
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {wm.protobuf.RegisterGhostTrailResponse} RegisterGhostTrailResponse
             */
            RegisterGhostTrailResponse.fromObject = function fromObject(object) {
                if (object instanceof $root.wm.protobuf.RegisterGhostTrailResponse)
                    return object;
                let message = new $root.wm.protobuf.RegisterGhostTrailResponse();
                switch (object.error) {
                default:
                    if (typeof object.error === "number") {
                        message.error = object.error;
                        break;
                    }
                    break;
                case "ERR_SUCCESS":
                case 0:
                    message.error = 0;
                    break;
                case "ERR_REQUEST":
                case 1:
                    message.error = 1;
                    break;
                case "ERR_NOT_FOUND":
                case 2:
                    message.error = 2;
                    break;
                case "ERR_ID_SERVER":
                case 3:
                    message.error = 3;
                    break;
                case "ERR_ID_BANNED":
                case 4:
                    message.error = 4;
                    break;
                case "ERR_USER_LOCKED":
                case 5:
                    message.error = 5;
                    break;
                case "ERR_USER_VERSION":
                case 6:
                    message.error = 6;
                    break;
                case "ERR_NAME_CONFLICTED":
                case 7:
                    message.error = 7;
                    break;
                case "ERR_FORBIDDEN":
                case 9:
                    message.error = 9;
                    break;
                case "ERR_USER_SUCCEEDED":
                case 11:
                    message.error = 11;
                    break;
                case "ERR_BEING_TRANSFERRED":
                case 12:
                    message.error = 12;
                    break;
                case "ERR_SCRATCH_LOCKED":
                case 13:
                    message.error = 13;
                    break;
                case "ERR_BINGO_REVENGE_LOCKED":
                case 14:
                    message.error = 14;
                    break;
                case "ERR_BINGO_ALREDY_LINKED":
                case 15:
                    message.error = 15;
                    break;
                case "ERR_BINGO_FINISHED":
                case 16:
                    message.error = 16;
                    break;
                case "ERR_BINGO_REACHED_MAX_USER":
                case 17:
                    message.error = 17;
                    break;
                case "ERR_CAR_NOT_FOUND":
                case 18:
                    message.error = 18;
                    break;
                case "ERR_BINGO_CARD_NOT_FOUND":
                case 19:
                    message.error = 19;
                    break;
                }
                return message;
            };

            /**
             * Creates a plain object from a RegisterGhostTrailResponse message. Also converts values to other types if specified.
             * @function toObject
             * @memberof wm.protobuf.RegisterGhostTrailResponse
             * @static
             * @param {wm.protobuf.RegisterGhostTrailResponse} message RegisterGhostTrailResponse
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            RegisterGhostTrailResponse.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults)
                    object.error = options.enums === String ? "ERR_SUCCESS" : 0;
                if (message.error != null && message.hasOwnProperty("error"))
                    object.error = options.enums === String ? $root.wm.protobuf.ErrorCode[message.error] === undefined ? message.error : $root.wm.protobuf.ErrorCode[message.error] : message.error;
                return object;
            };

            /**
             * Converts this RegisterGhostTrailResponse to JSON.
             * @function toJSON
             * @memberof wm.protobuf.RegisterGhostTrailResponse
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            RegisterGhostTrailResponse.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for RegisterGhostTrailResponse
             * @function getTypeUrl
             * @memberof wm.protobuf.RegisterGhostTrailResponse
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            RegisterGhostTrailResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/wm.protobuf.RegisterGhostTrailResponse";
            };

            return RegisterGhostTrailResponse;
        })();

        protobuf.LoadUserRequest = (function() {

            /**
             * Properties of a LoadUserRequest.
             * @memberof wm.protobuf
             * @interface ILoadUserRequest
             * @property {string|null} [cardChipId] LoadUserRequest cardChipId
             * @property {string|null} [accessCode] LoadUserRequest accessCode
             * @property {number|null} [cardTypeCode] LoadUserRequest cardTypeCode
             * @property {number|null} [cardRegionCode] LoadUserRequest cardRegionCode
             * @property {wm.protobuf.DeviceType|null} [device] LoadUserRequest device
             * @property {number|null} [userId] LoadUserRequest userId
             * @property {number} romVersion LoadUserRequest romVersion
             * @property {number} maxCars LoadUserRequest maxCars
             * @property {boolean|null} [createUser] LoadUserRequest createUser
             */

            /**
             * Constructs a new LoadUserRequest.
             * @memberof wm.protobuf
             * @classdesc Represents a LoadUserRequest.
             * @implements ILoadUserRequest
             * @constructor
             * @param {wm.protobuf.ILoadUserRequest=} [properties] Properties to set
             */
            function LoadUserRequest(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * LoadUserRequest cardChipId.
             * @member {string} cardChipId
             * @memberof wm.protobuf.LoadUserRequest
             * @instance
             */
            LoadUserRequest.prototype.cardChipId = "";

            /**
             * LoadUserRequest accessCode.
             * @member {string} accessCode
             * @memberof wm.protobuf.LoadUserRequest
             * @instance
             */
            LoadUserRequest.prototype.accessCode = "";

            /**
             * LoadUserRequest cardTypeCode.
             * @member {number} cardTypeCode
             * @memberof wm.protobuf.LoadUserRequest
             * @instance
             */
            LoadUserRequest.prototype.cardTypeCode = 0;

            /**
             * LoadUserRequest cardRegionCode.
             * @member {number} cardRegionCode
             * @memberof wm.protobuf.LoadUserRequest
             * @instance
             */
            LoadUserRequest.prototype.cardRegionCode = 0;

            /**
             * LoadUserRequest device.
             * @member {wm.protobuf.DeviceType} device
             * @memberof wm.protobuf.LoadUserRequest
             * @instance
             */
            LoadUserRequest.prototype.device = 0;

            /**
             * LoadUserRequest userId.
             * @member {number} userId
             * @memberof wm.protobuf.LoadUserRequest
             * @instance
             */
            LoadUserRequest.prototype.userId = 0;

            /**
             * LoadUserRequest romVersion.
             * @member {number} romVersion
             * @memberof wm.protobuf.LoadUserRequest
             * @instance
             */
            LoadUserRequest.prototype.romVersion = 0;

            /**
             * LoadUserRequest maxCars.
             * @member {number} maxCars
             * @memberof wm.protobuf.LoadUserRequest
             * @instance
             */
            LoadUserRequest.prototype.maxCars = 0;

            /**
             * LoadUserRequest createUser.
             * @member {boolean} createUser
             * @memberof wm.protobuf.LoadUserRequest
             * @instance
             */
            LoadUserRequest.prototype.createUser = false;

            /**
             * Creates a new LoadUserRequest instance using the specified properties.
             * @function create
             * @memberof wm.protobuf.LoadUserRequest
             * @static
             * @param {wm.protobuf.ILoadUserRequest=} [properties] Properties to set
             * @returns {wm.protobuf.LoadUserRequest} LoadUserRequest instance
             */
            LoadUserRequest.create = function create(properties) {
                return new LoadUserRequest(properties);
            };

            /**
             * Encodes the specified LoadUserRequest message. Does not implicitly {@link wm.protobuf.LoadUserRequest.verify|verify} messages.
             * @function encode
             * @memberof wm.protobuf.LoadUserRequest
             * @static
             * @param {wm.protobuf.ILoadUserRequest} message LoadUserRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LoadUserRequest.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.cardChipId != null && Object.hasOwnProperty.call(message, "cardChipId"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.cardChipId);
                if (message.accessCode != null && Object.hasOwnProperty.call(message, "accessCode"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.accessCode);
                if (message.cardTypeCode != null && Object.hasOwnProperty.call(message, "cardTypeCode"))
                    writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.cardTypeCode);
                if (message.cardRegionCode != null && Object.hasOwnProperty.call(message, "cardRegionCode"))
                    writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.cardRegionCode);
                if (message.device != null && Object.hasOwnProperty.call(message, "device"))
                    writer.uint32(/* id 5, wireType 0 =*/40).int32(message.device);
                if (message.userId != null && Object.hasOwnProperty.call(message, "userId"))
                    writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.userId);
                writer.uint32(/* id 7, wireType 0 =*/56).uint32(message.romVersion);
                writer.uint32(/* id 8, wireType 0 =*/64).uint32(message.maxCars);
                if (message.createUser != null && Object.hasOwnProperty.call(message, "createUser"))
                    writer.uint32(/* id 9, wireType 0 =*/72).bool(message.createUser);
                return writer;
            };

            /**
             * Encodes the specified LoadUserRequest message, length delimited. Does not implicitly {@link wm.protobuf.LoadUserRequest.verify|verify} messages.
             * @function encodeDelimited
             * @memberof wm.protobuf.LoadUserRequest
             * @static
             * @param {wm.protobuf.ILoadUserRequest} message LoadUserRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LoadUserRequest.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a LoadUserRequest message from the specified reader or buffer.
             * @function decode
             * @memberof wm.protobuf.LoadUserRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {wm.protobuf.LoadUserRequest} LoadUserRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LoadUserRequest.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.wm.protobuf.LoadUserRequest();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.cardChipId = reader.string();
                            break;
                        }
                    case 2: {
                            message.accessCode = reader.string();
                            break;
                        }
                    case 3: {
                            message.cardTypeCode = reader.uint32();
                            break;
                        }
                    case 4: {
                            message.cardRegionCode = reader.uint32();
                            break;
                        }
                    case 5: {
                            message.device = reader.int32();
                            break;
                        }
                    case 6: {
                            message.userId = reader.uint32();
                            break;
                        }
                    case 7: {
                            message.romVersion = reader.uint32();
                            break;
                        }
                    case 8: {
                            message.maxCars = reader.uint32();
                            break;
                        }
                    case 9: {
                            message.createUser = reader.bool();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("romVersion"))
                    throw $util.ProtocolError("missing required 'romVersion'", { instance: message });
                if (!message.hasOwnProperty("maxCars"))
                    throw $util.ProtocolError("missing required 'maxCars'", { instance: message });
                return message;
            };

            /**
             * Decodes a LoadUserRequest message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof wm.protobuf.LoadUserRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {wm.protobuf.LoadUserRequest} LoadUserRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LoadUserRequest.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a LoadUserRequest message.
             * @function verify
             * @memberof wm.protobuf.LoadUserRequest
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            LoadUserRequest.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.cardChipId != null && message.hasOwnProperty("cardChipId"))
                    if (!$util.isString(message.cardChipId))
                        return "cardChipId: string expected";
                if (message.accessCode != null && message.hasOwnProperty("accessCode"))
                    if (!$util.isString(message.accessCode))
                        return "accessCode: string expected";
                if (message.cardTypeCode != null && message.hasOwnProperty("cardTypeCode"))
                    if (!$util.isInteger(message.cardTypeCode))
                        return "cardTypeCode: integer expected";
                if (message.cardRegionCode != null && message.hasOwnProperty("cardRegionCode"))
                    if (!$util.isInteger(message.cardRegionCode))
                        return "cardRegionCode: integer expected";
                if (message.device != null && message.hasOwnProperty("device"))
                    switch (message.device) {
                    default:
                        return "device: enum value expected";
                    case 0:
                    case 1:
                        break;
                    }
                if (message.userId != null && message.hasOwnProperty("userId"))
                    if (!$util.isInteger(message.userId))
                        return "userId: integer expected";
                if (!$util.isInteger(message.romVersion))
                    return "romVersion: integer expected";
                if (!$util.isInteger(message.maxCars))
                    return "maxCars: integer expected";
                if (message.createUser != null && message.hasOwnProperty("createUser"))
                    if (typeof message.createUser !== "boolean")
                        return "createUser: boolean expected";
                return null;
            };

            /**
             * Creates a LoadUserRequest message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof wm.protobuf.LoadUserRequest
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {wm.protobuf.LoadUserRequest} LoadUserRequest
             */
            LoadUserRequest.fromObject = function fromObject(object) {
                if (object instanceof $root.wm.protobuf.LoadUserRequest)
                    return object;
                let message = new $root.wm.protobuf.LoadUserRequest();
                if (object.cardChipId != null)
                    message.cardChipId = String(object.cardChipId);
                if (object.accessCode != null)
                    message.accessCode = String(object.accessCode);
                if (object.cardTypeCode != null)
                    message.cardTypeCode = object.cardTypeCode >>> 0;
                if (object.cardRegionCode != null)
                    message.cardRegionCode = object.cardRegionCode >>> 0;
                switch (object.device) {
                default:
                    if (typeof object.device === "number") {
                        message.device = object.device;
                        break;
                    }
                    break;
                case "DEVICE_CARD":
                case 0:
                    message.device = 0;
                    break;
                case "DEVICE_PHONE":
                case 1:
                    message.device = 1;
                    break;
                }
                if (object.userId != null)
                    message.userId = object.userId >>> 0;
                if (object.romVersion != null)
                    message.romVersion = object.romVersion >>> 0;
                if (object.maxCars != null)
                    message.maxCars = object.maxCars >>> 0;
                if (object.createUser != null)
                    message.createUser = Boolean(object.createUser);
                return message;
            };

            /**
             * Creates a plain object from a LoadUserRequest message. Also converts values to other types if specified.
             * @function toObject
             * @memberof wm.protobuf.LoadUserRequest
             * @static
             * @param {wm.protobuf.LoadUserRequest} message LoadUserRequest
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            LoadUserRequest.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.cardChipId = "";
                    object.accessCode = "";
                    object.cardTypeCode = 0;
                    object.cardRegionCode = 0;
                    object.device = options.enums === String ? "DEVICE_CARD" : 0;
                    object.userId = 0;
                    object.romVersion = 0;
                    object.maxCars = 0;
                    object.createUser = false;
                }
                if (message.cardChipId != null && message.hasOwnProperty("cardChipId"))
                    object.cardChipId = message.cardChipId;
                if (message.accessCode != null && message.hasOwnProperty("accessCode"))
                    object.accessCode = message.accessCode;
                if (message.cardTypeCode != null && message.hasOwnProperty("cardTypeCode"))
                    object.cardTypeCode = message.cardTypeCode;
                if (message.cardRegionCode != null && message.hasOwnProperty("cardRegionCode"))
                    object.cardRegionCode = message.cardRegionCode;
                if (message.device != null && message.hasOwnProperty("device"))
                    object.device = options.enums === String ? $root.wm.protobuf.DeviceType[message.device] === undefined ? message.device : $root.wm.protobuf.DeviceType[message.device] : message.device;
                if (message.userId != null && message.hasOwnProperty("userId"))
                    object.userId = message.userId;
                if (message.romVersion != null && message.hasOwnProperty("romVersion"))
                    object.romVersion = message.romVersion;
                if (message.maxCars != null && message.hasOwnProperty("maxCars"))
                    object.maxCars = message.maxCars;
                if (message.createUser != null && message.hasOwnProperty("createUser"))
                    object.createUser = message.createUser;
                return object;
            };

            /**
             * Converts this LoadUserRequest to JSON.
             * @function toJSON
             * @memberof wm.protobuf.LoadUserRequest
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            LoadUserRequest.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for LoadUserRequest
             * @function getTypeUrl
             * @memberof wm.protobuf.LoadUserRequest
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            LoadUserRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/wm.protobuf.LoadUserRequest";
            };

            return LoadUserRequest;
        })();

        protobuf.LoadUserResponse = (function() {

            /**
             * Properties of a LoadUserResponse.
             * @memberof wm.protobuf
             * @interface ILoadUserResponse
             * @property {wm.protobuf.ErrorCode} error LoadUserResponse error
             * @property {number|null} [unlockAt] LoadUserResponse unlockAt
             * @property {string|null} [accessCode] LoadUserResponse accessCode
             * @property {number|null} [banapassportAmId] LoadUserResponse banapassportAmId
             * @property {number|null} [mbid] LoadUserResponse mbid
             * @property {number|null} [userId] LoadUserResponse userId
             * @property {number} numOfOwnedCars LoadUserResponse numOfOwnedCars
             * @property {Array.<wm.protobuf.ICar>|null} [cars] LoadUserResponse cars
             * @property {Array.<wm.protobuf.LoadUserResponse.ICarState>|null} [carStates] LoadUserResponse carStates
             * @property {Array.<wm.protobuf.IUserItem>|null} [unusedCarTickets] LoadUserResponse unusedCarTickets
             * @property {boolean} fullTunedCarTicket LoadUserResponse fullTunedCarTicket
             * @property {Array.<boolean>|null} [tutorials] LoadUserResponse tutorials
             * @property {wm.protobuf.GhostCompetitionParticipantState|null} [competitionUserState] LoadUserResponse competitionUserState
             * @property {string|null} [windowStickerString] LoadUserResponse windowStickerString
             * @property {number|null} [windowStickerFont] LoadUserResponse windowStickerFont
             * @property {wm.protobuf.SmartphoneAppState} spappState LoadUserResponse spappState
             * @property {wm.protobuf.TransferState} transferState LoadUserResponse transferState
             * @property {number|null} [totalVsStarCount] LoadUserResponse totalVsStarCount
             * @property {number|null} [totalVsMedalPoint] LoadUserResponse totalVsMedalPoint
             * @property {wm.protobuf.ICopiedCar|null} [copiedCar] LoadUserResponse copiedCar
             * @property {boolean|null} [wasCreatedToday] LoadUserResponse wasCreatedToday
             * @property {boolean|null} [participatedInInviteFriendCampaign] LoadUserResponse participatedInInviteFriendCampaign
             * @property {number|null} [specialGiftCount] LoadUserResponse specialGiftCount
             * @property {number|null} [giftCompleteCount] LoadUserResponse giftCompleteCount
             * @property {number|null} [defaultSpecialGiftCount] LoadUserResponse defaultSpecialGiftCount
             * @property {boolean|null} [ghostExpeditionLocked] LoadUserResponse ghostExpeditionLocked
             * @property {boolean} ghostVs_2Locked LoadUserResponse ghostVs_2Locked
             * @property {boolean} ghostVs_3Locked LoadUserResponse ghostVs_3Locked
             * @property {boolean} ghostHighwayLocked LoadUserResponse ghostHighwayLocked
             * @property {number} bingoMismatchNumberAcquiredCount LoadUserResponse bingoMismatchNumberAcquiredCount
             * @property {Array.<wm.protobuf.IBingoPrize>|null} [previousAcquiredBingoPrize] LoadUserResponse previousAcquiredBingoPrize
             * @property {wm.protobuf.GhostKoshienParticipantState|null} [koshienUserState] LoadUserResponse koshienUserState
             * @property {wm.protobuf.GhostKoshienParticipantState|null} [koshienLastPlayedState] LoadUserResponse koshienLastPlayedState
             * @property {string|null} [koshienRegistPlaceId] LoadUserResponse koshienRegistPlaceId
             * @property {number} receivedNumOfItems LoadUserResponse receivedNumOfItems
             * @property {number} bingoPlayedCount LoadUserResponse bingoPlayedCount
             */

            /**
             * Constructs a new LoadUserResponse.
             * @memberof wm.protobuf
             * @classdesc Represents a LoadUserResponse.
             * @implements ILoadUserResponse
             * @constructor
             * @param {wm.protobuf.ILoadUserResponse=} [properties] Properties to set
             */
            function LoadUserResponse(properties) {
                this.cars = [];
                this.carStates = [];
                this.unusedCarTickets = [];
                this.tutorials = [];
                this.previousAcquiredBingoPrize = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * LoadUserResponse error.
             * @member {wm.protobuf.ErrorCode} error
             * @memberof wm.protobuf.LoadUserResponse
             * @instance
             */
            LoadUserResponse.prototype.error = 0;

            /**
             * LoadUserResponse unlockAt.
             * @member {number} unlockAt
             * @memberof wm.protobuf.LoadUserResponse
             * @instance
             */
            LoadUserResponse.prototype.unlockAt = 0;

            /**
             * LoadUserResponse accessCode.
             * @member {string} accessCode
             * @memberof wm.protobuf.LoadUserResponse
             * @instance
             */
            LoadUserResponse.prototype.accessCode = "";

            /**
             * LoadUserResponse banapassportAmId.
             * @member {number} banapassportAmId
             * @memberof wm.protobuf.LoadUserResponse
             * @instance
             */
            LoadUserResponse.prototype.banapassportAmId = 0;

            /**
             * LoadUserResponse mbid.
             * @member {number} mbid
             * @memberof wm.protobuf.LoadUserResponse
             * @instance
             */
            LoadUserResponse.prototype.mbid = 0;

            /**
             * LoadUserResponse userId.
             * @member {number} userId
             * @memberof wm.protobuf.LoadUserResponse
             * @instance
             */
            LoadUserResponse.prototype.userId = 0;

            /**
             * LoadUserResponse numOfOwnedCars.
             * @member {number} numOfOwnedCars
             * @memberof wm.protobuf.LoadUserResponse
             * @instance
             */
            LoadUserResponse.prototype.numOfOwnedCars = 0;

            /**
             * LoadUserResponse cars.
             * @member {Array.<wm.protobuf.ICar>} cars
             * @memberof wm.protobuf.LoadUserResponse
             * @instance
             */
            LoadUserResponse.prototype.cars = $util.emptyArray;

            /**
             * LoadUserResponse carStates.
             * @member {Array.<wm.protobuf.LoadUserResponse.ICarState>} carStates
             * @memberof wm.protobuf.LoadUserResponse
             * @instance
             */
            LoadUserResponse.prototype.carStates = $util.emptyArray;

            /**
             * LoadUserResponse unusedCarTickets.
             * @member {Array.<wm.protobuf.IUserItem>} unusedCarTickets
             * @memberof wm.protobuf.LoadUserResponse
             * @instance
             */
            LoadUserResponse.prototype.unusedCarTickets = $util.emptyArray;

            /**
             * LoadUserResponse fullTunedCarTicket.
             * @member {boolean} fullTunedCarTicket
             * @memberof wm.protobuf.LoadUserResponse
             * @instance
             */
            LoadUserResponse.prototype.fullTunedCarTicket = false;

            /**
             * LoadUserResponse tutorials.
             * @member {Array.<boolean>} tutorials
             * @memberof wm.protobuf.LoadUserResponse
             * @instance
             */
            LoadUserResponse.prototype.tutorials = $util.emptyArray;

            /**
             * LoadUserResponse competitionUserState.
             * @member {wm.protobuf.GhostCompetitionParticipantState} competitionUserState
             * @memberof wm.protobuf.LoadUserResponse
             * @instance
             */
            LoadUserResponse.prototype.competitionUserState = 1;

            /**
             * LoadUserResponse windowStickerString.
             * @member {string} windowStickerString
             * @memberof wm.protobuf.LoadUserResponse
             * @instance
             */
            LoadUserResponse.prototype.windowStickerString = "";

            /**
             * LoadUserResponse windowStickerFont.
             * @member {number} windowStickerFont
             * @memberof wm.protobuf.LoadUserResponse
             * @instance
             */
            LoadUserResponse.prototype.windowStickerFont = 0;

            /**
             * LoadUserResponse spappState.
             * @member {wm.protobuf.SmartphoneAppState} spappState
             * @memberof wm.protobuf.LoadUserResponse
             * @instance
             */
            LoadUserResponse.prototype.spappState = 0;

            /**
             * LoadUserResponse transferState.
             * @member {wm.protobuf.TransferState} transferState
             * @memberof wm.protobuf.LoadUserResponse
             * @instance
             */
            LoadUserResponse.prototype.transferState = 0;

            /**
             * LoadUserResponse totalVsStarCount.
             * @member {number} totalVsStarCount
             * @memberof wm.protobuf.LoadUserResponse
             * @instance
             */
            LoadUserResponse.prototype.totalVsStarCount = 0;

            /**
             * LoadUserResponse totalVsMedalPoint.
             * @member {number} totalVsMedalPoint
             * @memberof wm.protobuf.LoadUserResponse
             * @instance
             */
            LoadUserResponse.prototype.totalVsMedalPoint = 0;

            /**
             * LoadUserResponse copiedCar.
             * @member {wm.protobuf.ICopiedCar|null|undefined} copiedCar
             * @memberof wm.protobuf.LoadUserResponse
             * @instance
             */
            LoadUserResponse.prototype.copiedCar = null;

            /**
             * LoadUserResponse wasCreatedToday.
             * @member {boolean} wasCreatedToday
             * @memberof wm.protobuf.LoadUserResponse
             * @instance
             */
            LoadUserResponse.prototype.wasCreatedToday = false;

            /**
             * LoadUserResponse participatedInInviteFriendCampaign.
             * @member {boolean} participatedInInviteFriendCampaign
             * @memberof wm.protobuf.LoadUserResponse
             * @instance
             */
            LoadUserResponse.prototype.participatedInInviteFriendCampaign = false;

            /**
             * LoadUserResponse specialGiftCount.
             * @member {number} specialGiftCount
             * @memberof wm.protobuf.LoadUserResponse
             * @instance
             */
            LoadUserResponse.prototype.specialGiftCount = 0;

            /**
             * LoadUserResponse giftCompleteCount.
             * @member {number} giftCompleteCount
             * @memberof wm.protobuf.LoadUserResponse
             * @instance
             */
            LoadUserResponse.prototype.giftCompleteCount = 0;

            /**
             * LoadUserResponse defaultSpecialGiftCount.
             * @member {number} defaultSpecialGiftCount
             * @memberof wm.protobuf.LoadUserResponse
             * @instance
             */
            LoadUserResponse.prototype.defaultSpecialGiftCount = 0;

            /**
             * LoadUserResponse ghostExpeditionLocked.
             * @member {boolean} ghostExpeditionLocked
             * @memberof wm.protobuf.LoadUserResponse
             * @instance
             */
            LoadUserResponse.prototype.ghostExpeditionLocked = false;

            /**
             * LoadUserResponse ghostVs_2Locked.
             * @member {boolean} ghostVs_2Locked
             * @memberof wm.protobuf.LoadUserResponse
             * @instance
             */
            LoadUserResponse.prototype.ghostVs_2Locked = false;

            /**
             * LoadUserResponse ghostVs_3Locked.
             * @member {boolean} ghostVs_3Locked
             * @memberof wm.protobuf.LoadUserResponse
             * @instance
             */
            LoadUserResponse.prototype.ghostVs_3Locked = false;

            /**
             * LoadUserResponse ghostHighwayLocked.
             * @member {boolean} ghostHighwayLocked
             * @memberof wm.protobuf.LoadUserResponse
             * @instance
             */
            LoadUserResponse.prototype.ghostHighwayLocked = false;

            /**
             * LoadUserResponse bingoMismatchNumberAcquiredCount.
             * @member {number} bingoMismatchNumberAcquiredCount
             * @memberof wm.protobuf.LoadUserResponse
             * @instance
             */
            LoadUserResponse.prototype.bingoMismatchNumberAcquiredCount = 0;

            /**
             * LoadUserResponse previousAcquiredBingoPrize.
             * @member {Array.<wm.protobuf.IBingoPrize>} previousAcquiredBingoPrize
             * @memberof wm.protobuf.LoadUserResponse
             * @instance
             */
            LoadUserResponse.prototype.previousAcquiredBingoPrize = $util.emptyArray;

            /**
             * LoadUserResponse koshienUserState.
             * @member {wm.protobuf.GhostKoshienParticipantState} koshienUserState
             * @memberof wm.protobuf.LoadUserResponse
             * @instance
             */
            LoadUserResponse.prototype.koshienUserState = 1;

            /**
             * LoadUserResponse koshienLastPlayedState.
             * @member {wm.protobuf.GhostKoshienParticipantState} koshienLastPlayedState
             * @memberof wm.protobuf.LoadUserResponse
             * @instance
             */
            LoadUserResponse.prototype.koshienLastPlayedState = 1;

            /**
             * LoadUserResponse koshienRegistPlaceId.
             * @member {string} koshienRegistPlaceId
             * @memberof wm.protobuf.LoadUserResponse
             * @instance
             */
            LoadUserResponse.prototype.koshienRegistPlaceId = "";

            /**
             * LoadUserResponse receivedNumOfItems.
             * @member {number} receivedNumOfItems
             * @memberof wm.protobuf.LoadUserResponse
             * @instance
             */
            LoadUserResponse.prototype.receivedNumOfItems = 0;

            /**
             * LoadUserResponse bingoPlayedCount.
             * @member {number} bingoPlayedCount
             * @memberof wm.protobuf.LoadUserResponse
             * @instance
             */
            LoadUserResponse.prototype.bingoPlayedCount = 0;

            /**
             * Creates a new LoadUserResponse instance using the specified properties.
             * @function create
             * @memberof wm.protobuf.LoadUserResponse
             * @static
             * @param {wm.protobuf.ILoadUserResponse=} [properties] Properties to set
             * @returns {wm.protobuf.LoadUserResponse} LoadUserResponse instance
             */
            LoadUserResponse.create = function create(properties) {
                return new LoadUserResponse(properties);
            };

            /**
             * Encodes the specified LoadUserResponse message. Does not implicitly {@link wm.protobuf.LoadUserResponse.verify|verify} messages.
             * @function encode
             * @memberof wm.protobuf.LoadUserResponse
             * @static
             * @param {wm.protobuf.ILoadUserResponse} message LoadUserResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LoadUserResponse.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
                if (message.unlockAt != null && Object.hasOwnProperty.call(message, "unlockAt"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.unlockAt);
                if (message.accessCode != null && Object.hasOwnProperty.call(message, "accessCode"))
                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.accessCode);
                if (message.banapassportAmId != null && Object.hasOwnProperty.call(message, "banapassportAmId"))
                    writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.banapassportAmId);
                if (message.mbid != null && Object.hasOwnProperty.call(message, "mbid"))
                    writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.mbid);
                if (message.userId != null && Object.hasOwnProperty.call(message, "userId"))
                    writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.userId);
                writer.uint32(/* id 10, wireType 0 =*/80).uint32(message.numOfOwnedCars);
                if (message.cars != null && message.cars.length)
                    for (let i = 0; i < message.cars.length; ++i)
                        $root.wm.protobuf.Car.encode(message.cars[i], writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();
                if (message.carStates != null && message.carStates.length)
                    for (let i = 0; i < message.carStates.length; ++i)
                        $root.wm.protobuf.LoadUserResponse.CarState.encode(message.carStates[i], writer.uint32(/* id 12, wireType 2 =*/98).fork()).ldelim();
                if (message.unusedCarTickets != null && message.unusedCarTickets.length)
                    for (let i = 0; i < message.unusedCarTickets.length; ++i)
                        $root.wm.protobuf.UserItem.encode(message.unusedCarTickets[i], writer.uint32(/* id 13, wireType 2 =*/106).fork()).ldelim();
                writer.uint32(/* id 14, wireType 0 =*/112).bool(message.fullTunedCarTicket);
                if (message.tutorials != null && message.tutorials.length)
                    for (let i = 0; i < message.tutorials.length; ++i)
                        writer.uint32(/* id 15, wireType 0 =*/120).bool(message.tutorials[i]);
                if (message.competitionUserState != null && Object.hasOwnProperty.call(message, "competitionUserState"))
                    writer.uint32(/* id 17, wireType 0 =*/136).int32(message.competitionUserState);
                if (message.windowStickerString != null && Object.hasOwnProperty.call(message, "windowStickerString"))
                    writer.uint32(/* id 19, wireType 2 =*/154).string(message.windowStickerString);
                if (message.windowStickerFont != null && Object.hasOwnProperty.call(message, "windowStickerFont"))
                    writer.uint32(/* id 20, wireType 0 =*/160).uint32(message.windowStickerFont);
                writer.uint32(/* id 21, wireType 0 =*/168).int32(message.spappState);
                writer.uint32(/* id 22, wireType 0 =*/176).int32(message.transferState);
                if (message.totalVsStarCount != null && Object.hasOwnProperty.call(message, "totalVsStarCount"))
                    writer.uint32(/* id 25, wireType 0 =*/200).uint32(message.totalVsStarCount);
                if (message.totalVsMedalPoint != null && Object.hasOwnProperty.call(message, "totalVsMedalPoint"))
                    writer.uint32(/* id 26, wireType 0 =*/208).uint32(message.totalVsMedalPoint);
                if (message.copiedCar != null && Object.hasOwnProperty.call(message, "copiedCar"))
                    $root.wm.protobuf.CopiedCar.encode(message.copiedCar, writer.uint32(/* id 27, wireType 2 =*/218).fork()).ldelim();
                if (message.wasCreatedToday != null && Object.hasOwnProperty.call(message, "wasCreatedToday"))
                    writer.uint32(/* id 28, wireType 0 =*/224).bool(message.wasCreatedToday);
                if (message.participatedInInviteFriendCampaign != null && Object.hasOwnProperty.call(message, "participatedInInviteFriendCampaign"))
                    writer.uint32(/* id 29, wireType 0 =*/232).bool(message.participatedInInviteFriendCampaign);
                if (message.specialGiftCount != null && Object.hasOwnProperty.call(message, "specialGiftCount"))
                    writer.uint32(/* id 30, wireType 0 =*/240).uint32(message.specialGiftCount);
                if (message.giftCompleteCount != null && Object.hasOwnProperty.call(message, "giftCompleteCount"))
                    writer.uint32(/* id 31, wireType 0 =*/248).uint32(message.giftCompleteCount);
                if (message.defaultSpecialGiftCount != null && Object.hasOwnProperty.call(message, "defaultSpecialGiftCount"))
                    writer.uint32(/* id 32, wireType 0 =*/256).uint32(message.defaultSpecialGiftCount);
                if (message.ghostExpeditionLocked != null && Object.hasOwnProperty.call(message, "ghostExpeditionLocked"))
                    writer.uint32(/* id 33, wireType 0 =*/264).bool(message.ghostExpeditionLocked);
                writer.uint32(/* id 34, wireType 0 =*/272).bool(message.ghostVs_2Locked);
                writer.uint32(/* id 35, wireType 0 =*/280).bool(message.ghostVs_3Locked);
                writer.uint32(/* id 36, wireType 0 =*/288).bool(message.ghostHighwayLocked);
                writer.uint32(/* id 38, wireType 0 =*/304).uint32(message.bingoMismatchNumberAcquiredCount);
                if (message.previousAcquiredBingoPrize != null && message.previousAcquiredBingoPrize.length)
                    for (let i = 0; i < message.previousAcquiredBingoPrize.length; ++i)
                        $root.wm.protobuf.BingoPrize.encode(message.previousAcquiredBingoPrize[i], writer.uint32(/* id 39, wireType 2 =*/314).fork()).ldelim();
                if (message.koshienUserState != null && Object.hasOwnProperty.call(message, "koshienUserState"))
                    writer.uint32(/* id 41, wireType 0 =*/328).int32(message.koshienUserState);
                writer.uint32(/* id 42, wireType 0 =*/336).uint32(message.receivedNumOfItems);
                if (message.koshienRegistPlaceId != null && Object.hasOwnProperty.call(message, "koshienRegistPlaceId"))
                    writer.uint32(/* id 43, wireType 2 =*/346).string(message.koshienRegistPlaceId);
                writer.uint32(/* id 44, wireType 0 =*/352).uint32(message.bingoPlayedCount);
                if (message.koshienLastPlayedState != null && Object.hasOwnProperty.call(message, "koshienLastPlayedState"))
                    writer.uint32(/* id 45, wireType 0 =*/360).int32(message.koshienLastPlayedState);
                return writer;
            };

            /**
             * Encodes the specified LoadUserResponse message, length delimited. Does not implicitly {@link wm.protobuf.LoadUserResponse.verify|verify} messages.
             * @function encodeDelimited
             * @memberof wm.protobuf.LoadUserResponse
             * @static
             * @param {wm.protobuf.ILoadUserResponse} message LoadUserResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LoadUserResponse.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a LoadUserResponse message from the specified reader or buffer.
             * @function decode
             * @memberof wm.protobuf.LoadUserResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {wm.protobuf.LoadUserResponse} LoadUserResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LoadUserResponse.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.wm.protobuf.LoadUserResponse();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.error = reader.int32();
                            break;
                        }
                    case 2: {
                            message.unlockAt = reader.uint32();
                            break;
                        }
                    case 3: {
                            message.accessCode = reader.string();
                            break;
                        }
                    case 4: {
                            message.banapassportAmId = reader.uint32();
                            break;
                        }
                    case 5: {
                            message.mbid = reader.uint32();
                            break;
                        }
                    case 6: {
                            message.userId = reader.uint32();
                            break;
                        }
                    case 10: {
                            message.numOfOwnedCars = reader.uint32();
                            break;
                        }
                    case 11: {
                            if (!(message.cars && message.cars.length))
                                message.cars = [];
                            message.cars.push($root.wm.protobuf.Car.decode(reader, reader.uint32()));
                            break;
                        }
                    case 12: {
                            if (!(message.carStates && message.carStates.length))
                                message.carStates = [];
                            message.carStates.push($root.wm.protobuf.LoadUserResponse.CarState.decode(reader, reader.uint32()));
                            break;
                        }
                    case 13: {
                            if (!(message.unusedCarTickets && message.unusedCarTickets.length))
                                message.unusedCarTickets = [];
                            message.unusedCarTickets.push($root.wm.protobuf.UserItem.decode(reader, reader.uint32()));
                            break;
                        }
                    case 14: {
                            message.fullTunedCarTicket = reader.bool();
                            break;
                        }
                    case 15: {
                            if (!(message.tutorials && message.tutorials.length))
                                message.tutorials = [];
                            if ((tag & 7) === 2) {
                                let end2 = reader.uint32() + reader.pos;
                                while (reader.pos < end2)
                                    message.tutorials.push(reader.bool());
                            } else
                                message.tutorials.push(reader.bool());
                            break;
                        }
                    case 17: {
                            message.competitionUserState = reader.int32();
                            break;
                        }
                    case 19: {
                            message.windowStickerString = reader.string();
                            break;
                        }
                    case 20: {
                            message.windowStickerFont = reader.uint32();
                            break;
                        }
                    case 21: {
                            message.spappState = reader.int32();
                            break;
                        }
                    case 22: {
                            message.transferState = reader.int32();
                            break;
                        }
                    case 25: {
                            message.totalVsStarCount = reader.uint32();
                            break;
                        }
                    case 26: {
                            message.totalVsMedalPoint = reader.uint32();
                            break;
                        }
                    case 27: {
                            message.copiedCar = $root.wm.protobuf.CopiedCar.decode(reader, reader.uint32());
                            break;
                        }
                    case 28: {
                            message.wasCreatedToday = reader.bool();
                            break;
                        }
                    case 29: {
                            message.participatedInInviteFriendCampaign = reader.bool();
                            break;
                        }
                    case 30: {
                            message.specialGiftCount = reader.uint32();
                            break;
                        }
                    case 31: {
                            message.giftCompleteCount = reader.uint32();
                            break;
                        }
                    case 32: {
                            message.defaultSpecialGiftCount = reader.uint32();
                            break;
                        }
                    case 33: {
                            message.ghostExpeditionLocked = reader.bool();
                            break;
                        }
                    case 34: {
                            message.ghostVs_2Locked = reader.bool();
                            break;
                        }
                    case 35: {
                            message.ghostVs_3Locked = reader.bool();
                            break;
                        }
                    case 36: {
                            message.ghostHighwayLocked = reader.bool();
                            break;
                        }
                    case 38: {
                            message.bingoMismatchNumberAcquiredCount = reader.uint32();
                            break;
                        }
                    case 39: {
                            if (!(message.previousAcquiredBingoPrize && message.previousAcquiredBingoPrize.length))
                                message.previousAcquiredBingoPrize = [];
                            message.previousAcquiredBingoPrize.push($root.wm.protobuf.BingoPrize.decode(reader, reader.uint32()));
                            break;
                        }
                    case 41: {
                            message.koshienUserState = reader.int32();
                            break;
                        }
                    case 45: {
                            message.koshienLastPlayedState = reader.int32();
                            break;
                        }
                    case 43: {
                            message.koshienRegistPlaceId = reader.string();
                            break;
                        }
                    case 42: {
                            message.receivedNumOfItems = reader.uint32();
                            break;
                        }
                    case 44: {
                            message.bingoPlayedCount = reader.uint32();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("error"))
                    throw $util.ProtocolError("missing required 'error'", { instance: message });
                if (!message.hasOwnProperty("numOfOwnedCars"))
                    throw $util.ProtocolError("missing required 'numOfOwnedCars'", { instance: message });
                if (!message.hasOwnProperty("fullTunedCarTicket"))
                    throw $util.ProtocolError("missing required 'fullTunedCarTicket'", { instance: message });
                if (!message.hasOwnProperty("spappState"))
                    throw $util.ProtocolError("missing required 'spappState'", { instance: message });
                if (!message.hasOwnProperty("transferState"))
                    throw $util.ProtocolError("missing required 'transferState'", { instance: message });
                if (!message.hasOwnProperty("ghostVs_2Locked"))
                    throw $util.ProtocolError("missing required 'ghostVs_2Locked'", { instance: message });
                if (!message.hasOwnProperty("ghostVs_3Locked"))
                    throw $util.ProtocolError("missing required 'ghostVs_3Locked'", { instance: message });
                if (!message.hasOwnProperty("ghostHighwayLocked"))
                    throw $util.ProtocolError("missing required 'ghostHighwayLocked'", { instance: message });
                if (!message.hasOwnProperty("bingoMismatchNumberAcquiredCount"))
                    throw $util.ProtocolError("missing required 'bingoMismatchNumberAcquiredCount'", { instance: message });
                if (!message.hasOwnProperty("receivedNumOfItems"))
                    throw $util.ProtocolError("missing required 'receivedNumOfItems'", { instance: message });
                if (!message.hasOwnProperty("bingoPlayedCount"))
                    throw $util.ProtocolError("missing required 'bingoPlayedCount'", { instance: message });
                return message;
            };

            /**
             * Decodes a LoadUserResponse message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof wm.protobuf.LoadUserResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {wm.protobuf.LoadUserResponse} LoadUserResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LoadUserResponse.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a LoadUserResponse message.
             * @function verify
             * @memberof wm.protobuf.LoadUserResponse
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            LoadUserResponse.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                switch (message.error) {
                default:
                    return "error: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 7:
                case 9:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 16:
                case 17:
                case 18:
                case 19:
                    break;
                }
                if (message.unlockAt != null && message.hasOwnProperty("unlockAt"))
                    if (!$util.isInteger(message.unlockAt))
                        return "unlockAt: integer expected";
                if (message.accessCode != null && message.hasOwnProperty("accessCode"))
                    if (!$util.isString(message.accessCode))
                        return "accessCode: string expected";
                if (message.banapassportAmId != null && message.hasOwnProperty("banapassportAmId"))
                    if (!$util.isInteger(message.banapassportAmId))
                        return "banapassportAmId: integer expected";
                if (message.mbid != null && message.hasOwnProperty("mbid"))
                    if (!$util.isInteger(message.mbid))
                        return "mbid: integer expected";
                if (message.userId != null && message.hasOwnProperty("userId"))
                    if (!$util.isInteger(message.userId))
                        return "userId: integer expected";
                if (!$util.isInteger(message.numOfOwnedCars))
                    return "numOfOwnedCars: integer expected";
                if (message.cars != null && message.hasOwnProperty("cars")) {
                    if (!Array.isArray(message.cars))
                        return "cars: array expected";
                    for (let i = 0; i < message.cars.length; ++i) {
                        let error = $root.wm.protobuf.Car.verify(message.cars[i]);
                        if (error)
                            return "cars." + error;
                    }
                }
                if (message.carStates != null && message.hasOwnProperty("carStates")) {
                    if (!Array.isArray(message.carStates))
                        return "carStates: array expected";
                    for (let i = 0; i < message.carStates.length; ++i) {
                        let error = $root.wm.protobuf.LoadUserResponse.CarState.verify(message.carStates[i]);
                        if (error)
                            return "carStates." + error;
                    }
                }
                if (message.unusedCarTickets != null && message.hasOwnProperty("unusedCarTickets")) {
                    if (!Array.isArray(message.unusedCarTickets))
                        return "unusedCarTickets: array expected";
                    for (let i = 0; i < message.unusedCarTickets.length; ++i) {
                        let error = $root.wm.protobuf.UserItem.verify(message.unusedCarTickets[i]);
                        if (error)
                            return "unusedCarTickets." + error;
                    }
                }
                if (typeof message.fullTunedCarTicket !== "boolean")
                    return "fullTunedCarTicket: boolean expected";
                if (message.tutorials != null && message.hasOwnProperty("tutorials")) {
                    if (!Array.isArray(message.tutorials))
                        return "tutorials: array expected";
                    for (let i = 0; i < message.tutorials.length; ++i)
                        if (typeof message.tutorials[i] !== "boolean")
                            return "tutorials: boolean[] expected";
                }
                if (message.competitionUserState != null && message.hasOwnProperty("competitionUserState"))
                    switch (message.competitionUserState) {
                    default:
                        return "competitionUserState: enum value expected";
                    case 1:
                    case 2:
                    case 3:
                    case 4:
                        break;
                    }
                if (message.windowStickerString != null && message.hasOwnProperty("windowStickerString"))
                    if (!$util.isString(message.windowStickerString))
                        return "windowStickerString: string expected";
                if (message.windowStickerFont != null && message.hasOwnProperty("windowStickerFont"))
                    if (!$util.isInteger(message.windowStickerFont))
                        return "windowStickerFont: integer expected";
                switch (message.spappState) {
                default:
                    return "spappState: enum value expected";
                case 0:
                case 1:
                case 2:
                    break;
                }
                switch (message.transferState) {
                default:
                    return "transferState: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                    break;
                }
                if (message.totalVsStarCount != null && message.hasOwnProperty("totalVsStarCount"))
                    if (!$util.isInteger(message.totalVsStarCount))
                        return "totalVsStarCount: integer expected";
                if (message.totalVsMedalPoint != null && message.hasOwnProperty("totalVsMedalPoint"))
                    if (!$util.isInteger(message.totalVsMedalPoint))
                        return "totalVsMedalPoint: integer expected";
                if (message.copiedCar != null && message.hasOwnProperty("copiedCar")) {
                    let error = $root.wm.protobuf.CopiedCar.verify(message.copiedCar);
                    if (error)
                        return "copiedCar." + error;
                }
                if (message.wasCreatedToday != null && message.hasOwnProperty("wasCreatedToday"))
                    if (typeof message.wasCreatedToday !== "boolean")
                        return "wasCreatedToday: boolean expected";
                if (message.participatedInInviteFriendCampaign != null && message.hasOwnProperty("participatedInInviteFriendCampaign"))
                    if (typeof message.participatedInInviteFriendCampaign !== "boolean")
                        return "participatedInInviteFriendCampaign: boolean expected";
                if (message.specialGiftCount != null && message.hasOwnProperty("specialGiftCount"))
                    if (!$util.isInteger(message.specialGiftCount))
                        return "specialGiftCount: integer expected";
                if (message.giftCompleteCount != null && message.hasOwnProperty("giftCompleteCount"))
                    if (!$util.isInteger(message.giftCompleteCount))
                        return "giftCompleteCount: integer expected";
                if (message.defaultSpecialGiftCount != null && message.hasOwnProperty("defaultSpecialGiftCount"))
                    if (!$util.isInteger(message.defaultSpecialGiftCount))
                        return "defaultSpecialGiftCount: integer expected";
                if (message.ghostExpeditionLocked != null && message.hasOwnProperty("ghostExpeditionLocked"))
                    if (typeof message.ghostExpeditionLocked !== "boolean")
                        return "ghostExpeditionLocked: boolean expected";
                if (typeof message.ghostVs_2Locked !== "boolean")
                    return "ghostVs_2Locked: boolean expected";
                if (typeof message.ghostVs_3Locked !== "boolean")
                    return "ghostVs_3Locked: boolean expected";
                if (typeof message.ghostHighwayLocked !== "boolean")
                    return "ghostHighwayLocked: boolean expected";
                if (!$util.isInteger(message.bingoMismatchNumberAcquiredCount))
                    return "bingoMismatchNumberAcquiredCount: integer expected";
                if (message.previousAcquiredBingoPrize != null && message.hasOwnProperty("previousAcquiredBingoPrize")) {
                    if (!Array.isArray(message.previousAcquiredBingoPrize))
                        return "previousAcquiredBingoPrize: array expected";
                    for (let i = 0; i < message.previousAcquiredBingoPrize.length; ++i) {
                        let error = $root.wm.protobuf.BingoPrize.verify(message.previousAcquiredBingoPrize[i]);
                        if (error)
                            return "previousAcquiredBingoPrize." + error;
                    }
                }
                if (message.koshienUserState != null && message.hasOwnProperty("koshienUserState"))
                    switch (message.koshienUserState) {
                    default:
                        return "koshienUserState: enum value expected";
                    case 1:
                    case 2:
                    case 3:
                    case 4:
                    case 5:
                    case 6:
                    case 7:
                    case 8:
                    case 9:
                    case 10:
                        break;
                    }
                if (message.koshienLastPlayedState != null && message.hasOwnProperty("koshienLastPlayedState"))
                    switch (message.koshienLastPlayedState) {
                    default:
                        return "koshienLastPlayedState: enum value expected";
                    case 1:
                    case 2:
                    case 3:
                    case 4:
                    case 5:
                    case 6:
                    case 7:
                    case 8:
                    case 9:
                    case 10:
                        break;
                    }
                if (message.koshienRegistPlaceId != null && message.hasOwnProperty("koshienRegistPlaceId"))
                    if (!$util.isString(message.koshienRegistPlaceId))
                        return "koshienRegistPlaceId: string expected";
                if (!$util.isInteger(message.receivedNumOfItems))
                    return "receivedNumOfItems: integer expected";
                if (!$util.isInteger(message.bingoPlayedCount))
                    return "bingoPlayedCount: integer expected";
                return null;
            };

            /**
             * Creates a LoadUserResponse message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof wm.protobuf.LoadUserResponse
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {wm.protobuf.LoadUserResponse} LoadUserResponse
             */
            LoadUserResponse.fromObject = function fromObject(object) {
                if (object instanceof $root.wm.protobuf.LoadUserResponse)
                    return object;
                let message = new $root.wm.protobuf.LoadUserResponse();
                switch (object.error) {
                default:
                    if (typeof object.error === "number") {
                        message.error = object.error;
                        break;
                    }
                    break;
                case "ERR_SUCCESS":
                case 0:
                    message.error = 0;
                    break;
                case "ERR_REQUEST":
                case 1:
                    message.error = 1;
                    break;
                case "ERR_NOT_FOUND":
                case 2:
                    message.error = 2;
                    break;
                case "ERR_ID_SERVER":
                case 3:
                    message.error = 3;
                    break;
                case "ERR_ID_BANNED":
                case 4:
                    message.error = 4;
                    break;
                case "ERR_USER_LOCKED":
                case 5:
                    message.error = 5;
                    break;
                case "ERR_USER_VERSION":
                case 6:
                    message.error = 6;
                    break;
                case "ERR_NAME_CONFLICTED":
                case 7:
                    message.error = 7;
                    break;
                case "ERR_FORBIDDEN":
                case 9:
                    message.error = 9;
                    break;
                case "ERR_USER_SUCCEEDED":
                case 11:
                    message.error = 11;
                    break;
                case "ERR_BEING_TRANSFERRED":
                case 12:
                    message.error = 12;
                    break;
                case "ERR_SCRATCH_LOCKED":
                case 13:
                    message.error = 13;
                    break;
                case "ERR_BINGO_REVENGE_LOCKED":
                case 14:
                    message.error = 14;
                    break;
                case "ERR_BINGO_ALREDY_LINKED":
                case 15:
                    message.error = 15;
                    break;
                case "ERR_BINGO_FINISHED":
                case 16:
                    message.error = 16;
                    break;
                case "ERR_BINGO_REACHED_MAX_USER":
                case 17:
                    message.error = 17;
                    break;
                case "ERR_CAR_NOT_FOUND":
                case 18:
                    message.error = 18;
                    break;
                case "ERR_BINGO_CARD_NOT_FOUND":
                case 19:
                    message.error = 19;
                    break;
                }
                if (object.unlockAt != null)
                    message.unlockAt = object.unlockAt >>> 0;
                if (object.accessCode != null)
                    message.accessCode = String(object.accessCode);
                if (object.banapassportAmId != null)
                    message.banapassportAmId = object.banapassportAmId >>> 0;
                if (object.mbid != null)
                    message.mbid = object.mbid >>> 0;
                if (object.userId != null)
                    message.userId = object.userId >>> 0;
                if (object.numOfOwnedCars != null)
                    message.numOfOwnedCars = object.numOfOwnedCars >>> 0;
                if (object.cars) {
                    if (!Array.isArray(object.cars))
                        throw TypeError(".wm.protobuf.LoadUserResponse.cars: array expected");
                    message.cars = [];
                    for (let i = 0; i < object.cars.length; ++i) {
                        if (typeof object.cars[i] !== "object")
                            throw TypeError(".wm.protobuf.LoadUserResponse.cars: object expected");
                        message.cars[i] = $root.wm.protobuf.Car.fromObject(object.cars[i]);
                    }
                }
                if (object.carStates) {
                    if (!Array.isArray(object.carStates))
                        throw TypeError(".wm.protobuf.LoadUserResponse.carStates: array expected");
                    message.carStates = [];
                    for (let i = 0; i < object.carStates.length; ++i) {
                        if (typeof object.carStates[i] !== "object")
                            throw TypeError(".wm.protobuf.LoadUserResponse.carStates: object expected");
                        message.carStates[i] = $root.wm.protobuf.LoadUserResponse.CarState.fromObject(object.carStates[i]);
                    }
                }
                if (object.unusedCarTickets) {
                    if (!Array.isArray(object.unusedCarTickets))
                        throw TypeError(".wm.protobuf.LoadUserResponse.unusedCarTickets: array expected");
                    message.unusedCarTickets = [];
                    for (let i = 0; i < object.unusedCarTickets.length; ++i) {
                        if (typeof object.unusedCarTickets[i] !== "object")
                            throw TypeError(".wm.protobuf.LoadUserResponse.unusedCarTickets: object expected");
                        message.unusedCarTickets[i] = $root.wm.protobuf.UserItem.fromObject(object.unusedCarTickets[i]);
                    }
                }
                if (object.fullTunedCarTicket != null)
                    message.fullTunedCarTicket = Boolean(object.fullTunedCarTicket);
                if (object.tutorials) {
                    if (!Array.isArray(object.tutorials))
                        throw TypeError(".wm.protobuf.LoadUserResponse.tutorials: array expected");
                    message.tutorials = [];
                    for (let i = 0; i < object.tutorials.length; ++i)
                        message.tutorials[i] = Boolean(object.tutorials[i]);
                }
                switch (object.competitionUserState) {
                default:
                    if (typeof object.competitionUserState === "number") {
                        message.competitionUserState = object.competitionUserState;
                        break;
                    }
                    break;
                case "COMPETITION_NOT_PARTICIPATED":
                case 1:
                    message.competitionUserState = 1;
                    break;
                case "COMPETITION_QUALIFIED":
                case 2:
                    message.competitionUserState = 2;
                    break;
                case "COMPETITION_PARTICIPATED":
                case 3:
                    message.competitionUserState = 3;
                    break;
                case "COMPETITION_WON":
                case 4:
                    message.competitionUserState = 4;
                    break;
                }
                if (object.windowStickerString != null)
                    message.windowStickerString = String(object.windowStickerString);
                if (object.windowStickerFont != null)
                    message.windowStickerFont = object.windowStickerFont >>> 0;
                switch (object.spappState) {
                default:
                    if (typeof object.spappState === "number") {
                        message.spappState = object.spappState;
                        break;
                    }
                    break;
                case "SPAPP_UNREGISTERED":
                case 0:
                    message.spappState = 0;
                    break;
                case "SPAPP_KTID":
                case 1:
                    message.spappState = 1;
                    break;
                case "SPAPP_BNID":
                case 2:
                    message.spappState = 2;
                    break;
                }
                switch (object.transferState) {
                default:
                    if (typeof object.transferState === "number") {
                        message.transferState = object.transferState;
                        break;
                    }
                    break;
                case "NOT_REGISTERED":
                case 0:
                    message.transferState = 0;
                    break;
                case "NEW_REGISTRATION":
                case 1:
                    message.transferState = 1;
                    break;
                case "TRANSFER_REQUIRED":
                case 2:
                    message.transferState = 2;
                    break;
                case "TRANSFERRING":
                case 3:
                    message.transferState = 3;
                    break;
                case "TRANSFERRED":
                case 4:
                    message.transferState = 4;
                    break;
                }
                if (object.totalVsStarCount != null)
                    message.totalVsStarCount = object.totalVsStarCount >>> 0;
                if (object.totalVsMedalPoint != null)
                    message.totalVsMedalPoint = object.totalVsMedalPoint >>> 0;
                if (object.copiedCar != null) {
                    if (typeof object.copiedCar !== "object")
                        throw TypeError(".wm.protobuf.LoadUserResponse.copiedCar: object expected");
                    message.copiedCar = $root.wm.protobuf.CopiedCar.fromObject(object.copiedCar);
                }
                if (object.wasCreatedToday != null)
                    message.wasCreatedToday = Boolean(object.wasCreatedToday);
                if (object.participatedInInviteFriendCampaign != null)
                    message.participatedInInviteFriendCampaign = Boolean(object.participatedInInviteFriendCampaign);
                if (object.specialGiftCount != null)
                    message.specialGiftCount = object.specialGiftCount >>> 0;
                if (object.giftCompleteCount != null)
                    message.giftCompleteCount = object.giftCompleteCount >>> 0;
                if (object.defaultSpecialGiftCount != null)
                    message.defaultSpecialGiftCount = object.defaultSpecialGiftCount >>> 0;
                if (object.ghostExpeditionLocked != null)
                    message.ghostExpeditionLocked = Boolean(object.ghostExpeditionLocked);
                if (object.ghostVs_2Locked != null)
                    message.ghostVs_2Locked = Boolean(object.ghostVs_2Locked);
                if (object.ghostVs_3Locked != null)
                    message.ghostVs_3Locked = Boolean(object.ghostVs_3Locked);
                if (object.ghostHighwayLocked != null)
                    message.ghostHighwayLocked = Boolean(object.ghostHighwayLocked);
                if (object.bingoMismatchNumberAcquiredCount != null)
                    message.bingoMismatchNumberAcquiredCount = object.bingoMismatchNumberAcquiredCount >>> 0;
                if (object.previousAcquiredBingoPrize) {
                    if (!Array.isArray(object.previousAcquiredBingoPrize))
                        throw TypeError(".wm.protobuf.LoadUserResponse.previousAcquiredBingoPrize: array expected");
                    message.previousAcquiredBingoPrize = [];
                    for (let i = 0; i < object.previousAcquiredBingoPrize.length; ++i) {
                        if (typeof object.previousAcquiredBingoPrize[i] !== "object")
                            throw TypeError(".wm.protobuf.LoadUserResponse.previousAcquiredBingoPrize: object expected");
                        message.previousAcquiredBingoPrize[i] = $root.wm.protobuf.BingoPrize.fromObject(object.previousAcquiredBingoPrize[i]);
                    }
                }
                switch (object.koshienUserState) {
                default:
                    if (typeof object.koshienUserState === "number") {
                        message.koshienUserState = object.koshienUserState;
                        break;
                    }
                    break;
                case "KOSHIEN_NOT_PARTICIPATED":
                case 1:
                    message.koshienUserState = 1;
                    break;
                case "KOSHIEN_FIRST_QUALIFIED":
                case 2:
                    message.koshienUserState = 2;
                    break;
                case "KOSHIEN_SECOND_QUALIFIED":
                case 3:
                    message.koshienUserState = 3;
                    break;
                case "KOSHIEN_REGION_PARTICIPATED":
                case 4:
                    message.koshienUserState = 4;
                    break;
                case "KOSHIEN_PARTICIPATED":
                case 5:
                    message.koshienUserState = 5;
                    break;
                case "KOSHIEN_FIRST_QUALIFIED_LOSE":
                case 6:
                    message.koshienUserState = 6;
                    break;
                case "KOSHIEN_SECOND_QUALIFIED_LOSE":
                case 7:
                    message.koshienUserState = 7;
                    break;
                case "KOSHIEN_REGION_PARTICIPATED_LOSE":
                case 8:
                    message.koshienUserState = 8;
                    break;
                case "KOSHIEN_WON":
                case 9:
                    message.koshienUserState = 9;
                    break;
                case "KOSHIEN_UNUSED":
                case 10:
                    message.koshienUserState = 10;
                    break;
                }
                switch (object.koshienLastPlayedState) {
                default:
                    if (typeof object.koshienLastPlayedState === "number") {
                        message.koshienLastPlayedState = object.koshienLastPlayedState;
                        break;
                    }
                    break;
                case "KOSHIEN_NOT_PARTICIPATED":
                case 1:
                    message.koshienLastPlayedState = 1;
                    break;
                case "KOSHIEN_FIRST_QUALIFIED":
                case 2:
                    message.koshienLastPlayedState = 2;
                    break;
                case "KOSHIEN_SECOND_QUALIFIED":
                case 3:
                    message.koshienLastPlayedState = 3;
                    break;
                case "KOSHIEN_REGION_PARTICIPATED":
                case 4:
                    message.koshienLastPlayedState = 4;
                    break;
                case "KOSHIEN_PARTICIPATED":
                case 5:
                    message.koshienLastPlayedState = 5;
                    break;
                case "KOSHIEN_FIRST_QUALIFIED_LOSE":
                case 6:
                    message.koshienLastPlayedState = 6;
                    break;
                case "KOSHIEN_SECOND_QUALIFIED_LOSE":
                case 7:
                    message.koshienLastPlayedState = 7;
                    break;
                case "KOSHIEN_REGION_PARTICIPATED_LOSE":
                case 8:
                    message.koshienLastPlayedState = 8;
                    break;
                case "KOSHIEN_WON":
                case 9:
                    message.koshienLastPlayedState = 9;
                    break;
                case "KOSHIEN_UNUSED":
                case 10:
                    message.koshienLastPlayedState = 10;
                    break;
                }
                if (object.koshienRegistPlaceId != null)
                    message.koshienRegistPlaceId = String(object.koshienRegistPlaceId);
                if (object.receivedNumOfItems != null)
                    message.receivedNumOfItems = object.receivedNumOfItems >>> 0;
                if (object.bingoPlayedCount != null)
                    message.bingoPlayedCount = object.bingoPlayedCount >>> 0;
                return message;
            };

            /**
             * Creates a plain object from a LoadUserResponse message. Also converts values to other types if specified.
             * @function toObject
             * @memberof wm.protobuf.LoadUserResponse
             * @static
             * @param {wm.protobuf.LoadUserResponse} message LoadUserResponse
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            LoadUserResponse.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults) {
                    object.cars = [];
                    object.carStates = [];
                    object.unusedCarTickets = [];
                    object.tutorials = [];
                    object.previousAcquiredBingoPrize = [];
                }
                if (options.defaults) {
                    object.error = options.enums === String ? "ERR_SUCCESS" : 0;
                    object.unlockAt = 0;
                    object.accessCode = "";
                    object.banapassportAmId = 0;
                    object.mbid = 0;
                    object.userId = 0;
                    object.numOfOwnedCars = 0;
                    object.fullTunedCarTicket = false;
                    object.competitionUserState = options.enums === String ? "COMPETITION_NOT_PARTICIPATED" : 1;
                    object.windowStickerString = "";
                    object.windowStickerFont = 0;
                    object.spappState = options.enums === String ? "SPAPP_UNREGISTERED" : 0;
                    object.transferState = options.enums === String ? "NOT_REGISTERED" : 0;
                    object.totalVsStarCount = 0;
                    object.totalVsMedalPoint = 0;
                    object.copiedCar = null;
                    object.wasCreatedToday = false;
                    object.participatedInInviteFriendCampaign = false;
                    object.specialGiftCount = 0;
                    object.giftCompleteCount = 0;
                    object.defaultSpecialGiftCount = 0;
                    object.ghostExpeditionLocked = false;
                    object.ghostVs_2Locked = false;
                    object.ghostVs_3Locked = false;
                    object.ghostHighwayLocked = false;
                    object.bingoMismatchNumberAcquiredCount = 0;
                    object.koshienUserState = options.enums === String ? "KOSHIEN_NOT_PARTICIPATED" : 1;
                    object.receivedNumOfItems = 0;
                    object.koshienRegistPlaceId = "";
                    object.bingoPlayedCount = 0;
                    object.koshienLastPlayedState = options.enums === String ? "KOSHIEN_NOT_PARTICIPATED" : 1;
                }
                if (message.error != null && message.hasOwnProperty("error"))
                    object.error = options.enums === String ? $root.wm.protobuf.ErrorCode[message.error] === undefined ? message.error : $root.wm.protobuf.ErrorCode[message.error] : message.error;
                if (message.unlockAt != null && message.hasOwnProperty("unlockAt"))
                    object.unlockAt = message.unlockAt;
                if (message.accessCode != null && message.hasOwnProperty("accessCode"))
                    object.accessCode = message.accessCode;
                if (message.banapassportAmId != null && message.hasOwnProperty("banapassportAmId"))
                    object.banapassportAmId = message.banapassportAmId;
                if (message.mbid != null && message.hasOwnProperty("mbid"))
                    object.mbid = message.mbid;
                if (message.userId != null && message.hasOwnProperty("userId"))
                    object.userId = message.userId;
                if (message.numOfOwnedCars != null && message.hasOwnProperty("numOfOwnedCars"))
                    object.numOfOwnedCars = message.numOfOwnedCars;
                if (message.cars && message.cars.length) {
                    object.cars = [];
                    for (let j = 0; j < message.cars.length; ++j)
                        object.cars[j] = $root.wm.protobuf.Car.toObject(message.cars[j], options);
                }
                if (message.carStates && message.carStates.length) {
                    object.carStates = [];
                    for (let j = 0; j < message.carStates.length; ++j)
                        object.carStates[j] = $root.wm.protobuf.LoadUserResponse.CarState.toObject(message.carStates[j], options);
                }
                if (message.unusedCarTickets && message.unusedCarTickets.length) {
                    object.unusedCarTickets = [];
                    for (let j = 0; j < message.unusedCarTickets.length; ++j)
                        object.unusedCarTickets[j] = $root.wm.protobuf.UserItem.toObject(message.unusedCarTickets[j], options);
                }
                if (message.fullTunedCarTicket != null && message.hasOwnProperty("fullTunedCarTicket"))
                    object.fullTunedCarTicket = message.fullTunedCarTicket;
                if (message.tutorials && message.tutorials.length) {
                    object.tutorials = [];
                    for (let j = 0; j < message.tutorials.length; ++j)
                        object.tutorials[j] = message.tutorials[j];
                }
                if (message.competitionUserState != null && message.hasOwnProperty("competitionUserState"))
                    object.competitionUserState = options.enums === String ? $root.wm.protobuf.GhostCompetitionParticipantState[message.competitionUserState] === undefined ? message.competitionUserState : $root.wm.protobuf.GhostCompetitionParticipantState[message.competitionUserState] : message.competitionUserState;
                if (message.windowStickerString != null && message.hasOwnProperty("windowStickerString"))
                    object.windowStickerString = message.windowStickerString;
                if (message.windowStickerFont != null && message.hasOwnProperty("windowStickerFont"))
                    object.windowStickerFont = message.windowStickerFont;
                if (message.spappState != null && message.hasOwnProperty("spappState"))
                    object.spappState = options.enums === String ? $root.wm.protobuf.SmartphoneAppState[message.spappState] === undefined ? message.spappState : $root.wm.protobuf.SmartphoneAppState[message.spappState] : message.spappState;
                if (message.transferState != null && message.hasOwnProperty("transferState"))
                    object.transferState = options.enums === String ? $root.wm.protobuf.TransferState[message.transferState] === undefined ? message.transferState : $root.wm.protobuf.TransferState[message.transferState] : message.transferState;
                if (message.totalVsStarCount != null && message.hasOwnProperty("totalVsStarCount"))
                    object.totalVsStarCount = message.totalVsStarCount;
                if (message.totalVsMedalPoint != null && message.hasOwnProperty("totalVsMedalPoint"))
                    object.totalVsMedalPoint = message.totalVsMedalPoint;
                if (message.copiedCar != null && message.hasOwnProperty("copiedCar"))
                    object.copiedCar = $root.wm.protobuf.CopiedCar.toObject(message.copiedCar, options);
                if (message.wasCreatedToday != null && message.hasOwnProperty("wasCreatedToday"))
                    object.wasCreatedToday = message.wasCreatedToday;
                if (message.participatedInInviteFriendCampaign != null && message.hasOwnProperty("participatedInInviteFriendCampaign"))
                    object.participatedInInviteFriendCampaign = message.participatedInInviteFriendCampaign;
                if (message.specialGiftCount != null && message.hasOwnProperty("specialGiftCount"))
                    object.specialGiftCount = message.specialGiftCount;
                if (message.giftCompleteCount != null && message.hasOwnProperty("giftCompleteCount"))
                    object.giftCompleteCount = message.giftCompleteCount;
                if (message.defaultSpecialGiftCount != null && message.hasOwnProperty("defaultSpecialGiftCount"))
                    object.defaultSpecialGiftCount = message.defaultSpecialGiftCount;
                if (message.ghostExpeditionLocked != null && message.hasOwnProperty("ghostExpeditionLocked"))
                    object.ghostExpeditionLocked = message.ghostExpeditionLocked;
                if (message.ghostVs_2Locked != null && message.hasOwnProperty("ghostVs_2Locked"))
                    object.ghostVs_2Locked = message.ghostVs_2Locked;
                if (message.ghostVs_3Locked != null && message.hasOwnProperty("ghostVs_3Locked"))
                    object.ghostVs_3Locked = message.ghostVs_3Locked;
                if (message.ghostHighwayLocked != null && message.hasOwnProperty("ghostHighwayLocked"))
                    object.ghostHighwayLocked = message.ghostHighwayLocked;
                if (message.bingoMismatchNumberAcquiredCount != null && message.hasOwnProperty("bingoMismatchNumberAcquiredCount"))
                    object.bingoMismatchNumberAcquiredCount = message.bingoMismatchNumberAcquiredCount;
                if (message.previousAcquiredBingoPrize && message.previousAcquiredBingoPrize.length) {
                    object.previousAcquiredBingoPrize = [];
                    for (let j = 0; j < message.previousAcquiredBingoPrize.length; ++j)
                        object.previousAcquiredBingoPrize[j] = $root.wm.protobuf.BingoPrize.toObject(message.previousAcquiredBingoPrize[j], options);
                }
                if (message.koshienUserState != null && message.hasOwnProperty("koshienUserState"))
                    object.koshienUserState = options.enums === String ? $root.wm.protobuf.GhostKoshienParticipantState[message.koshienUserState] === undefined ? message.koshienUserState : $root.wm.protobuf.GhostKoshienParticipantState[message.koshienUserState] : message.koshienUserState;
                if (message.receivedNumOfItems != null && message.hasOwnProperty("receivedNumOfItems"))
                    object.receivedNumOfItems = message.receivedNumOfItems;
                if (message.koshienRegistPlaceId != null && message.hasOwnProperty("koshienRegistPlaceId"))
                    object.koshienRegistPlaceId = message.koshienRegistPlaceId;
                if (message.bingoPlayedCount != null && message.hasOwnProperty("bingoPlayedCount"))
                    object.bingoPlayedCount = message.bingoPlayedCount;
                if (message.koshienLastPlayedState != null && message.hasOwnProperty("koshienLastPlayedState"))
                    object.koshienLastPlayedState = options.enums === String ? $root.wm.protobuf.GhostKoshienParticipantState[message.koshienLastPlayedState] === undefined ? message.koshienLastPlayedState : $root.wm.protobuf.GhostKoshienParticipantState[message.koshienLastPlayedState] : message.koshienLastPlayedState;
                return object;
            };

            /**
             * Converts this LoadUserResponse to JSON.
             * @function toJSON
             * @memberof wm.protobuf.LoadUserResponse
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            LoadUserResponse.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for LoadUserResponse
             * @function getTypeUrl
             * @memberof wm.protobuf.LoadUserResponse
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            LoadUserResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/wm.protobuf.LoadUserResponse";
            };

            LoadUserResponse.CarState = (function() {

                /**
                 * Properties of a CarState.
                 * @memberof wm.protobuf.LoadUserResponse
                 * @interface ICarState
                 * @property {boolean} hasOpponentGhost CarState hasOpponentGhost
                 * @property {wm.protobuf.GhostCompetitionParticipantState|null} [competitionState] CarState competitionState
                 * @property {boolean} toBeDeleted CarState toBeDeleted
                 * @property {boolean} eventJoined CarState eventJoined
                 * @property {boolean} transferred CarState transferred
                 * @property {number|null} [driveLastPlayedAt] CarState driveLastPlayedAt
                 * @property {wm.protobuf.GhostKoshienParticipantState|null} [koshienState] CarState koshienState
                 * @property {boolean|null} [koshienQualified] CarState koshienQualified
                 */

                /**
                 * Constructs a new CarState.
                 * @memberof wm.protobuf.LoadUserResponse
                 * @classdesc Represents a CarState.
                 * @implements ICarState
                 * @constructor
                 * @param {wm.protobuf.LoadUserResponse.ICarState=} [properties] Properties to set
                 */
                function CarState(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * CarState hasOpponentGhost.
                 * @member {boolean} hasOpponentGhost
                 * @memberof wm.protobuf.LoadUserResponse.CarState
                 * @instance
                 */
                CarState.prototype.hasOpponentGhost = false;

                /**
                 * CarState competitionState.
                 * @member {wm.protobuf.GhostCompetitionParticipantState} competitionState
                 * @memberof wm.protobuf.LoadUserResponse.CarState
                 * @instance
                 */
                CarState.prototype.competitionState = 1;

                /**
                 * CarState toBeDeleted.
                 * @member {boolean} toBeDeleted
                 * @memberof wm.protobuf.LoadUserResponse.CarState
                 * @instance
                 */
                CarState.prototype.toBeDeleted = false;

                /**
                 * CarState eventJoined.
                 * @member {boolean} eventJoined
                 * @memberof wm.protobuf.LoadUserResponse.CarState
                 * @instance
                 */
                CarState.prototype.eventJoined = false;

                /**
                 * CarState transferred.
                 * @member {boolean} transferred
                 * @memberof wm.protobuf.LoadUserResponse.CarState
                 * @instance
                 */
                CarState.prototype.transferred = false;

                /**
                 * CarState driveLastPlayedAt.
                 * @member {number} driveLastPlayedAt
                 * @memberof wm.protobuf.LoadUserResponse.CarState
                 * @instance
                 */
                CarState.prototype.driveLastPlayedAt = 0;

                /**
                 * CarState koshienState.
                 * @member {wm.protobuf.GhostKoshienParticipantState} koshienState
                 * @memberof wm.protobuf.LoadUserResponse.CarState
                 * @instance
                 */
                CarState.prototype.koshienState = 1;

                /**
                 * CarState koshienQualified.
                 * @member {boolean} koshienQualified
                 * @memberof wm.protobuf.LoadUserResponse.CarState
                 * @instance
                 */
                CarState.prototype.koshienQualified = false;

                /**
                 * Creates a new CarState instance using the specified properties.
                 * @function create
                 * @memberof wm.protobuf.LoadUserResponse.CarState
                 * @static
                 * @param {wm.protobuf.LoadUserResponse.ICarState=} [properties] Properties to set
                 * @returns {wm.protobuf.LoadUserResponse.CarState} CarState instance
                 */
                CarState.create = function create(properties) {
                    return new CarState(properties);
                };

                /**
                 * Encodes the specified CarState message. Does not implicitly {@link wm.protobuf.LoadUserResponse.CarState.verify|verify} messages.
                 * @function encode
                 * @memberof wm.protobuf.LoadUserResponse.CarState
                 * @static
                 * @param {wm.protobuf.LoadUserResponse.ICarState} message CarState message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                CarState.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    writer.uint32(/* id 1, wireType 0 =*/8).bool(message.hasOpponentGhost);
                    if (message.competitionState != null && Object.hasOwnProperty.call(message, "competitionState"))
                        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.competitionState);
                    writer.uint32(/* id 4, wireType 0 =*/32).bool(message.toBeDeleted);
                    writer.uint32(/* id 5, wireType 0 =*/40).bool(message.eventJoined);
                    writer.uint32(/* id 6, wireType 0 =*/48).bool(message.transferred);
                    if (message.driveLastPlayedAt != null && Object.hasOwnProperty.call(message, "driveLastPlayedAt"))
                        writer.uint32(/* id 7, wireType 0 =*/56).uint32(message.driveLastPlayedAt);
                    if (message.koshienState != null && Object.hasOwnProperty.call(message, "koshienState"))
                        writer.uint32(/* id 8, wireType 0 =*/64).int32(message.koshienState);
                    if (message.koshienQualified != null && Object.hasOwnProperty.call(message, "koshienQualified"))
                        writer.uint32(/* id 9, wireType 0 =*/72).bool(message.koshienQualified);
                    return writer;
                };

                /**
                 * Encodes the specified CarState message, length delimited. Does not implicitly {@link wm.protobuf.LoadUserResponse.CarState.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof wm.protobuf.LoadUserResponse.CarState
                 * @static
                 * @param {wm.protobuf.LoadUserResponse.ICarState} message CarState message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                CarState.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a CarState message from the specified reader or buffer.
                 * @function decode
                 * @memberof wm.protobuf.LoadUserResponse.CarState
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {wm.protobuf.LoadUserResponse.CarState} CarState
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                CarState.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.wm.protobuf.LoadUserResponse.CarState();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.hasOpponentGhost = reader.bool();
                                break;
                            }
                        case 2: {
                                message.competitionState = reader.int32();
                                break;
                            }
                        case 4: {
                                message.toBeDeleted = reader.bool();
                                break;
                            }
                        case 5: {
                                message.eventJoined = reader.bool();
                                break;
                            }
                        case 6: {
                                message.transferred = reader.bool();
                                break;
                            }
                        case 7: {
                                message.driveLastPlayedAt = reader.uint32();
                                break;
                            }
                        case 8: {
                                message.koshienState = reader.int32();
                                break;
                            }
                        case 9: {
                                message.koshienQualified = reader.bool();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    if (!message.hasOwnProperty("hasOpponentGhost"))
                        throw $util.ProtocolError("missing required 'hasOpponentGhost'", { instance: message });
                    if (!message.hasOwnProperty("toBeDeleted"))
                        throw $util.ProtocolError("missing required 'toBeDeleted'", { instance: message });
                    if (!message.hasOwnProperty("eventJoined"))
                        throw $util.ProtocolError("missing required 'eventJoined'", { instance: message });
                    if (!message.hasOwnProperty("transferred"))
                        throw $util.ProtocolError("missing required 'transferred'", { instance: message });
                    return message;
                };

                /**
                 * Decodes a CarState message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof wm.protobuf.LoadUserResponse.CarState
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {wm.protobuf.LoadUserResponse.CarState} CarState
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                CarState.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a CarState message.
                 * @function verify
                 * @memberof wm.protobuf.LoadUserResponse.CarState
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                CarState.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (typeof message.hasOpponentGhost !== "boolean")
                        return "hasOpponentGhost: boolean expected";
                    if (message.competitionState != null && message.hasOwnProperty("competitionState"))
                        switch (message.competitionState) {
                        default:
                            return "competitionState: enum value expected";
                        case 1:
                        case 2:
                        case 3:
                        case 4:
                            break;
                        }
                    if (typeof message.toBeDeleted !== "boolean")
                        return "toBeDeleted: boolean expected";
                    if (typeof message.eventJoined !== "boolean")
                        return "eventJoined: boolean expected";
                    if (typeof message.transferred !== "boolean")
                        return "transferred: boolean expected";
                    if (message.driveLastPlayedAt != null && message.hasOwnProperty("driveLastPlayedAt"))
                        if (!$util.isInteger(message.driveLastPlayedAt))
                            return "driveLastPlayedAt: integer expected";
                    if (message.koshienState != null && message.hasOwnProperty("koshienState"))
                        switch (message.koshienState) {
                        default:
                            return "koshienState: enum value expected";
                        case 1:
                        case 2:
                        case 3:
                        case 4:
                        case 5:
                        case 6:
                        case 7:
                        case 8:
                        case 9:
                        case 10:
                            break;
                        }
                    if (message.koshienQualified != null && message.hasOwnProperty("koshienQualified"))
                        if (typeof message.koshienQualified !== "boolean")
                            return "koshienQualified: boolean expected";
                    return null;
                };

                /**
                 * Creates a CarState message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof wm.protobuf.LoadUserResponse.CarState
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {wm.protobuf.LoadUserResponse.CarState} CarState
                 */
                CarState.fromObject = function fromObject(object) {
                    if (object instanceof $root.wm.protobuf.LoadUserResponse.CarState)
                        return object;
                    let message = new $root.wm.protobuf.LoadUserResponse.CarState();
                    if (object.hasOpponentGhost != null)
                        message.hasOpponentGhost = Boolean(object.hasOpponentGhost);
                    switch (object.competitionState) {
                    default:
                        if (typeof object.competitionState === "number") {
                            message.competitionState = object.competitionState;
                            break;
                        }
                        break;
                    case "COMPETITION_NOT_PARTICIPATED":
                    case 1:
                        message.competitionState = 1;
                        break;
                    case "COMPETITION_QUALIFIED":
                    case 2:
                        message.competitionState = 2;
                        break;
                    case "COMPETITION_PARTICIPATED":
                    case 3:
                        message.competitionState = 3;
                        break;
                    case "COMPETITION_WON":
                    case 4:
                        message.competitionState = 4;
                        break;
                    }
                    if (object.toBeDeleted != null)
                        message.toBeDeleted = Boolean(object.toBeDeleted);
                    if (object.eventJoined != null)
                        message.eventJoined = Boolean(object.eventJoined);
                    if (object.transferred != null)
                        message.transferred = Boolean(object.transferred);
                    if (object.driveLastPlayedAt != null)
                        message.driveLastPlayedAt = object.driveLastPlayedAt >>> 0;
                    switch (object.koshienState) {
                    default:
                        if (typeof object.koshienState === "number") {
                            message.koshienState = object.koshienState;
                            break;
                        }
                        break;
                    case "KOSHIEN_NOT_PARTICIPATED":
                    case 1:
                        message.koshienState = 1;
                        break;
                    case "KOSHIEN_FIRST_QUALIFIED":
                    case 2:
                        message.koshienState = 2;
                        break;
                    case "KOSHIEN_SECOND_QUALIFIED":
                    case 3:
                        message.koshienState = 3;
                        break;
                    case "KOSHIEN_REGION_PARTICIPATED":
                    case 4:
                        message.koshienState = 4;
                        break;
                    case "KOSHIEN_PARTICIPATED":
                    case 5:
                        message.koshienState = 5;
                        break;
                    case "KOSHIEN_FIRST_QUALIFIED_LOSE":
                    case 6:
                        message.koshienState = 6;
                        break;
                    case "KOSHIEN_SECOND_QUALIFIED_LOSE":
                    case 7:
                        message.koshienState = 7;
                        break;
                    case "KOSHIEN_REGION_PARTICIPATED_LOSE":
                    case 8:
                        message.koshienState = 8;
                        break;
                    case "KOSHIEN_WON":
                    case 9:
                        message.koshienState = 9;
                        break;
                    case "KOSHIEN_UNUSED":
                    case 10:
                        message.koshienState = 10;
                        break;
                    }
                    if (object.koshienQualified != null)
                        message.koshienQualified = Boolean(object.koshienQualified);
                    return message;
                };

                /**
                 * Creates a plain object from a CarState message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof wm.protobuf.LoadUserResponse.CarState
                 * @static
                 * @param {wm.protobuf.LoadUserResponse.CarState} message CarState
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                CarState.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        object.hasOpponentGhost = false;
                        object.competitionState = options.enums === String ? "COMPETITION_NOT_PARTICIPATED" : 1;
                        object.toBeDeleted = false;
                        object.eventJoined = false;
                        object.transferred = false;
                        object.driveLastPlayedAt = 0;
                        object.koshienState = options.enums === String ? "KOSHIEN_NOT_PARTICIPATED" : 1;
                        object.koshienQualified = false;
                    }
                    if (message.hasOpponentGhost != null && message.hasOwnProperty("hasOpponentGhost"))
                        object.hasOpponentGhost = message.hasOpponentGhost;
                    if (message.competitionState != null && message.hasOwnProperty("competitionState"))
                        object.competitionState = options.enums === String ? $root.wm.protobuf.GhostCompetitionParticipantState[message.competitionState] === undefined ? message.competitionState : $root.wm.protobuf.GhostCompetitionParticipantState[message.competitionState] : message.competitionState;
                    if (message.toBeDeleted != null && message.hasOwnProperty("toBeDeleted"))
                        object.toBeDeleted = message.toBeDeleted;
                    if (message.eventJoined != null && message.hasOwnProperty("eventJoined"))
                        object.eventJoined = message.eventJoined;
                    if (message.transferred != null && message.hasOwnProperty("transferred"))
                        object.transferred = message.transferred;
                    if (message.driveLastPlayedAt != null && message.hasOwnProperty("driveLastPlayedAt"))
                        object.driveLastPlayedAt = message.driveLastPlayedAt;
                    if (message.koshienState != null && message.hasOwnProperty("koshienState"))
                        object.koshienState = options.enums === String ? $root.wm.protobuf.GhostKoshienParticipantState[message.koshienState] === undefined ? message.koshienState : $root.wm.protobuf.GhostKoshienParticipantState[message.koshienState] : message.koshienState;
                    if (message.koshienQualified != null && message.hasOwnProperty("koshienQualified"))
                        object.koshienQualified = message.koshienQualified;
                    return object;
                };

                /**
                 * Converts this CarState to JSON.
                 * @function toJSON
                 * @memberof wm.protobuf.LoadUserResponse.CarState
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                CarState.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                /**
                 * Gets the default type url for CarState
                 * @function getTypeUrl
                 * @memberof wm.protobuf.LoadUserResponse.CarState
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                CarState.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/wm.protobuf.LoadUserResponse.CarState";
                };

                return CarState;
            })();

            return LoadUserResponse;
        })();

        protobuf.UpdateUserSessionRequest = (function() {

            /**
             * Properties of an UpdateUserSessionRequest.
             * @memberof wm.protobuf
             * @interface IUpdateUserSessionRequest
             * @property {number|null} [userId] UpdateUserSessionRequest userId
             * @property {string|null} [cardChipId] UpdateUserSessionRequest cardChipId
             * @property {string|null} [accessCode] UpdateUserSessionRequest accessCode
             * @property {number|null} [cardTypeCode] UpdateUserSessionRequest cardTypeCode
             * @property {number|null} [cardRegionCode] UpdateUserSessionRequest cardRegionCode
             * @property {wm.protobuf.DeviceType|null} [device] UpdateUserSessionRequest device
             * @property {number} unlockAt UpdateUserSessionRequest unlockAt
             * @property {boolean|null} [acceptVs] UpdateUserSessionRequest acceptVs
             */

            /**
             * Constructs a new UpdateUserSessionRequest.
             * @memberof wm.protobuf
             * @classdesc Represents an UpdateUserSessionRequest.
             * @implements IUpdateUserSessionRequest
             * @constructor
             * @param {wm.protobuf.IUpdateUserSessionRequest=} [properties] Properties to set
             */
            function UpdateUserSessionRequest(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * UpdateUserSessionRequest userId.
             * @member {number} userId
             * @memberof wm.protobuf.UpdateUserSessionRequest
             * @instance
             */
            UpdateUserSessionRequest.prototype.userId = 0;

            /**
             * UpdateUserSessionRequest cardChipId.
             * @member {string} cardChipId
             * @memberof wm.protobuf.UpdateUserSessionRequest
             * @instance
             */
            UpdateUserSessionRequest.prototype.cardChipId = "";

            /**
             * UpdateUserSessionRequest accessCode.
             * @member {string} accessCode
             * @memberof wm.protobuf.UpdateUserSessionRequest
             * @instance
             */
            UpdateUserSessionRequest.prototype.accessCode = "";

            /**
             * UpdateUserSessionRequest cardTypeCode.
             * @member {number} cardTypeCode
             * @memberof wm.protobuf.UpdateUserSessionRequest
             * @instance
             */
            UpdateUserSessionRequest.prototype.cardTypeCode = 0;

            /**
             * UpdateUserSessionRequest cardRegionCode.
             * @member {number} cardRegionCode
             * @memberof wm.protobuf.UpdateUserSessionRequest
             * @instance
             */
            UpdateUserSessionRequest.prototype.cardRegionCode = 0;

            /**
             * UpdateUserSessionRequest device.
             * @member {wm.protobuf.DeviceType} device
             * @memberof wm.protobuf.UpdateUserSessionRequest
             * @instance
             */
            UpdateUserSessionRequest.prototype.device = 0;

            /**
             * UpdateUserSessionRequest unlockAt.
             * @member {number} unlockAt
             * @memberof wm.protobuf.UpdateUserSessionRequest
             * @instance
             */
            UpdateUserSessionRequest.prototype.unlockAt = 0;

            /**
             * UpdateUserSessionRequest acceptVs.
             * @member {boolean} acceptVs
             * @memberof wm.protobuf.UpdateUserSessionRequest
             * @instance
             */
            UpdateUserSessionRequest.prototype.acceptVs = false;

            /**
             * Creates a new UpdateUserSessionRequest instance using the specified properties.
             * @function create
             * @memberof wm.protobuf.UpdateUserSessionRequest
             * @static
             * @param {wm.protobuf.IUpdateUserSessionRequest=} [properties] Properties to set
             * @returns {wm.protobuf.UpdateUserSessionRequest} UpdateUserSessionRequest instance
             */
            UpdateUserSessionRequest.create = function create(properties) {
                return new UpdateUserSessionRequest(properties);
            };

            /**
             * Encodes the specified UpdateUserSessionRequest message. Does not implicitly {@link wm.protobuf.UpdateUserSessionRequest.verify|verify} messages.
             * @function encode
             * @memberof wm.protobuf.UpdateUserSessionRequest
             * @static
             * @param {wm.protobuf.IUpdateUserSessionRequest} message UpdateUserSessionRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            UpdateUserSessionRequest.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.userId != null && Object.hasOwnProperty.call(message, "userId"))
                    writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.userId);
                if (message.cardChipId != null && Object.hasOwnProperty.call(message, "cardChipId"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.cardChipId);
                if (message.accessCode != null && Object.hasOwnProperty.call(message, "accessCode"))
                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.accessCode);
                if (message.cardTypeCode != null && Object.hasOwnProperty.call(message, "cardTypeCode"))
                    writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.cardTypeCode);
                if (message.cardRegionCode != null && Object.hasOwnProperty.call(message, "cardRegionCode"))
                    writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.cardRegionCode);
                if (message.device != null && Object.hasOwnProperty.call(message, "device"))
                    writer.uint32(/* id 6, wireType 0 =*/48).int32(message.device);
                writer.uint32(/* id 7, wireType 0 =*/56).uint32(message.unlockAt);
                if (message.acceptVs != null && Object.hasOwnProperty.call(message, "acceptVs"))
                    writer.uint32(/* id 8, wireType 0 =*/64).bool(message.acceptVs);
                return writer;
            };

            /**
             * Encodes the specified UpdateUserSessionRequest message, length delimited. Does not implicitly {@link wm.protobuf.UpdateUserSessionRequest.verify|verify} messages.
             * @function encodeDelimited
             * @memberof wm.protobuf.UpdateUserSessionRequest
             * @static
             * @param {wm.protobuf.IUpdateUserSessionRequest} message UpdateUserSessionRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            UpdateUserSessionRequest.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an UpdateUserSessionRequest message from the specified reader or buffer.
             * @function decode
             * @memberof wm.protobuf.UpdateUserSessionRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {wm.protobuf.UpdateUserSessionRequest} UpdateUserSessionRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            UpdateUserSessionRequest.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.wm.protobuf.UpdateUserSessionRequest();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.userId = reader.uint32();
                            break;
                        }
                    case 2: {
                            message.cardChipId = reader.string();
                            break;
                        }
                    case 3: {
                            message.accessCode = reader.string();
                            break;
                        }
                    case 4: {
                            message.cardTypeCode = reader.uint32();
                            break;
                        }
                    case 5: {
                            message.cardRegionCode = reader.uint32();
                            break;
                        }
                    case 6: {
                            message.device = reader.int32();
                            break;
                        }
                    case 7: {
                            message.unlockAt = reader.uint32();
                            break;
                        }
                    case 8: {
                            message.acceptVs = reader.bool();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("unlockAt"))
                    throw $util.ProtocolError("missing required 'unlockAt'", { instance: message });
                return message;
            };

            /**
             * Decodes an UpdateUserSessionRequest message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof wm.protobuf.UpdateUserSessionRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {wm.protobuf.UpdateUserSessionRequest} UpdateUserSessionRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            UpdateUserSessionRequest.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an UpdateUserSessionRequest message.
             * @function verify
             * @memberof wm.protobuf.UpdateUserSessionRequest
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            UpdateUserSessionRequest.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.userId != null && message.hasOwnProperty("userId"))
                    if (!$util.isInteger(message.userId))
                        return "userId: integer expected";
                if (message.cardChipId != null && message.hasOwnProperty("cardChipId"))
                    if (!$util.isString(message.cardChipId))
                        return "cardChipId: string expected";
                if (message.accessCode != null && message.hasOwnProperty("accessCode"))
                    if (!$util.isString(message.accessCode))
                        return "accessCode: string expected";
                if (message.cardTypeCode != null && message.hasOwnProperty("cardTypeCode"))
                    if (!$util.isInteger(message.cardTypeCode))
                        return "cardTypeCode: integer expected";
                if (message.cardRegionCode != null && message.hasOwnProperty("cardRegionCode"))
                    if (!$util.isInteger(message.cardRegionCode))
                        return "cardRegionCode: integer expected";
                if (message.device != null && message.hasOwnProperty("device"))
                    switch (message.device) {
                    default:
                        return "device: enum value expected";
                    case 0:
                    case 1:
                        break;
                    }
                if (!$util.isInteger(message.unlockAt))
                    return "unlockAt: integer expected";
                if (message.acceptVs != null && message.hasOwnProperty("acceptVs"))
                    if (typeof message.acceptVs !== "boolean")
                        return "acceptVs: boolean expected";
                return null;
            };

            /**
             * Creates an UpdateUserSessionRequest message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof wm.protobuf.UpdateUserSessionRequest
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {wm.protobuf.UpdateUserSessionRequest} UpdateUserSessionRequest
             */
            UpdateUserSessionRequest.fromObject = function fromObject(object) {
                if (object instanceof $root.wm.protobuf.UpdateUserSessionRequest)
                    return object;
                let message = new $root.wm.protobuf.UpdateUserSessionRequest();
                if (object.userId != null)
                    message.userId = object.userId >>> 0;
                if (object.cardChipId != null)
                    message.cardChipId = String(object.cardChipId);
                if (object.accessCode != null)
                    message.accessCode = String(object.accessCode);
                if (object.cardTypeCode != null)
                    message.cardTypeCode = object.cardTypeCode >>> 0;
                if (object.cardRegionCode != null)
                    message.cardRegionCode = object.cardRegionCode >>> 0;
                switch (object.device) {
                default:
                    if (typeof object.device === "number") {
                        message.device = object.device;
                        break;
                    }
                    break;
                case "DEVICE_CARD":
                case 0:
                    message.device = 0;
                    break;
                case "DEVICE_PHONE":
                case 1:
                    message.device = 1;
                    break;
                }
                if (object.unlockAt != null)
                    message.unlockAt = object.unlockAt >>> 0;
                if (object.acceptVs != null)
                    message.acceptVs = Boolean(object.acceptVs);
                return message;
            };

            /**
             * Creates a plain object from an UpdateUserSessionRequest message. Also converts values to other types if specified.
             * @function toObject
             * @memberof wm.protobuf.UpdateUserSessionRequest
             * @static
             * @param {wm.protobuf.UpdateUserSessionRequest} message UpdateUserSessionRequest
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            UpdateUserSessionRequest.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.userId = 0;
                    object.cardChipId = "";
                    object.accessCode = "";
                    object.cardTypeCode = 0;
                    object.cardRegionCode = 0;
                    object.device = options.enums === String ? "DEVICE_CARD" : 0;
                    object.unlockAt = 0;
                    object.acceptVs = false;
                }
                if (message.userId != null && message.hasOwnProperty("userId"))
                    object.userId = message.userId;
                if (message.cardChipId != null && message.hasOwnProperty("cardChipId"))
                    object.cardChipId = message.cardChipId;
                if (message.accessCode != null && message.hasOwnProperty("accessCode"))
                    object.accessCode = message.accessCode;
                if (message.cardTypeCode != null && message.hasOwnProperty("cardTypeCode"))
                    object.cardTypeCode = message.cardTypeCode;
                if (message.cardRegionCode != null && message.hasOwnProperty("cardRegionCode"))
                    object.cardRegionCode = message.cardRegionCode;
                if (message.device != null && message.hasOwnProperty("device"))
                    object.device = options.enums === String ? $root.wm.protobuf.DeviceType[message.device] === undefined ? message.device : $root.wm.protobuf.DeviceType[message.device] : message.device;
                if (message.unlockAt != null && message.hasOwnProperty("unlockAt"))
                    object.unlockAt = message.unlockAt;
                if (message.acceptVs != null && message.hasOwnProperty("acceptVs"))
                    object.acceptVs = message.acceptVs;
                return object;
            };

            /**
             * Converts this UpdateUserSessionRequest to JSON.
             * @function toJSON
             * @memberof wm.protobuf.UpdateUserSessionRequest
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            UpdateUserSessionRequest.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for UpdateUserSessionRequest
             * @function getTypeUrl
             * @memberof wm.protobuf.UpdateUserSessionRequest
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            UpdateUserSessionRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/wm.protobuf.UpdateUserSessionRequest";
            };

            return UpdateUserSessionRequest;
        })();

        protobuf.UpdateUserSessionResponse = (function() {

            /**
             * Properties of an UpdateUserSessionResponse.
             * @memberof wm.protobuf
             * @interface IUpdateUserSessionResponse
             * @property {wm.protobuf.ErrorCode} error UpdateUserSessionResponse error
             */

            /**
             * Constructs a new UpdateUserSessionResponse.
             * @memberof wm.protobuf
             * @classdesc Represents an UpdateUserSessionResponse.
             * @implements IUpdateUserSessionResponse
             * @constructor
             * @param {wm.protobuf.IUpdateUserSessionResponse=} [properties] Properties to set
             */
            function UpdateUserSessionResponse(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * UpdateUserSessionResponse error.
             * @member {wm.protobuf.ErrorCode} error
             * @memberof wm.protobuf.UpdateUserSessionResponse
             * @instance
             */
            UpdateUserSessionResponse.prototype.error = 0;

            /**
             * Creates a new UpdateUserSessionResponse instance using the specified properties.
             * @function create
             * @memberof wm.protobuf.UpdateUserSessionResponse
             * @static
             * @param {wm.protobuf.IUpdateUserSessionResponse=} [properties] Properties to set
             * @returns {wm.protobuf.UpdateUserSessionResponse} UpdateUserSessionResponse instance
             */
            UpdateUserSessionResponse.create = function create(properties) {
                return new UpdateUserSessionResponse(properties);
            };

            /**
             * Encodes the specified UpdateUserSessionResponse message. Does not implicitly {@link wm.protobuf.UpdateUserSessionResponse.verify|verify} messages.
             * @function encode
             * @memberof wm.protobuf.UpdateUserSessionResponse
             * @static
             * @param {wm.protobuf.IUpdateUserSessionResponse} message UpdateUserSessionResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            UpdateUserSessionResponse.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
                return writer;
            };

            /**
             * Encodes the specified UpdateUserSessionResponse message, length delimited. Does not implicitly {@link wm.protobuf.UpdateUserSessionResponse.verify|verify} messages.
             * @function encodeDelimited
             * @memberof wm.protobuf.UpdateUserSessionResponse
             * @static
             * @param {wm.protobuf.IUpdateUserSessionResponse} message UpdateUserSessionResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            UpdateUserSessionResponse.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an UpdateUserSessionResponse message from the specified reader or buffer.
             * @function decode
             * @memberof wm.protobuf.UpdateUserSessionResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {wm.protobuf.UpdateUserSessionResponse} UpdateUserSessionResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            UpdateUserSessionResponse.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.wm.protobuf.UpdateUserSessionResponse();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.error = reader.int32();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("error"))
                    throw $util.ProtocolError("missing required 'error'", { instance: message });
                return message;
            };

            /**
             * Decodes an UpdateUserSessionResponse message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof wm.protobuf.UpdateUserSessionResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {wm.protobuf.UpdateUserSessionResponse} UpdateUserSessionResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            UpdateUserSessionResponse.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an UpdateUserSessionResponse message.
             * @function verify
             * @memberof wm.protobuf.UpdateUserSessionResponse
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            UpdateUserSessionResponse.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                switch (message.error) {
                default:
                    return "error: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 7:
                case 9:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 16:
                case 17:
                case 18:
                case 19:
                    break;
                }
                return null;
            };

            /**
             * Creates an UpdateUserSessionResponse message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof wm.protobuf.UpdateUserSessionResponse
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {wm.protobuf.UpdateUserSessionResponse} UpdateUserSessionResponse
             */
            UpdateUserSessionResponse.fromObject = function fromObject(object) {
                if (object instanceof $root.wm.protobuf.UpdateUserSessionResponse)
                    return object;
                let message = new $root.wm.protobuf.UpdateUserSessionResponse();
                switch (object.error) {
                default:
                    if (typeof object.error === "number") {
                        message.error = object.error;
                        break;
                    }
                    break;
                case "ERR_SUCCESS":
                case 0:
                    message.error = 0;
                    break;
                case "ERR_REQUEST":
                case 1:
                    message.error = 1;
                    break;
                case "ERR_NOT_FOUND":
                case 2:
                    message.error = 2;
                    break;
                case "ERR_ID_SERVER":
                case 3:
                    message.error = 3;
                    break;
                case "ERR_ID_BANNED":
                case 4:
                    message.error = 4;
                    break;
                case "ERR_USER_LOCKED":
                case 5:
                    message.error = 5;
                    break;
                case "ERR_USER_VERSION":
                case 6:
                    message.error = 6;
                    break;
                case "ERR_NAME_CONFLICTED":
                case 7:
                    message.error = 7;
                    break;
                case "ERR_FORBIDDEN":
                case 9:
                    message.error = 9;
                    break;
                case "ERR_USER_SUCCEEDED":
                case 11:
                    message.error = 11;
                    break;
                case "ERR_BEING_TRANSFERRED":
                case 12:
                    message.error = 12;
                    break;
                case "ERR_SCRATCH_LOCKED":
                case 13:
                    message.error = 13;
                    break;
                case "ERR_BINGO_REVENGE_LOCKED":
                case 14:
                    message.error = 14;
                    break;
                case "ERR_BINGO_ALREDY_LINKED":
                case 15:
                    message.error = 15;
                    break;
                case "ERR_BINGO_FINISHED":
                case 16:
                    message.error = 16;
                    break;
                case "ERR_BINGO_REACHED_MAX_USER":
                case 17:
                    message.error = 17;
                    break;
                case "ERR_CAR_NOT_FOUND":
                case 18:
                    message.error = 18;
                    break;
                case "ERR_BINGO_CARD_NOT_FOUND":
                case 19:
                    message.error = 19;
                    break;
                }
                return message;
            };

            /**
             * Creates a plain object from an UpdateUserSessionResponse message. Also converts values to other types if specified.
             * @function toObject
             * @memberof wm.protobuf.UpdateUserSessionResponse
             * @static
             * @param {wm.protobuf.UpdateUserSessionResponse} message UpdateUserSessionResponse
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            UpdateUserSessionResponse.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults)
                    object.error = options.enums === String ? "ERR_SUCCESS" : 0;
                if (message.error != null && message.hasOwnProperty("error"))
                    object.error = options.enums === String ? $root.wm.protobuf.ErrorCode[message.error] === undefined ? message.error : $root.wm.protobuf.ErrorCode[message.error] : message.error;
                return object;
            };

            /**
             * Converts this UpdateUserSessionResponse to JSON.
             * @function toJSON
             * @memberof wm.protobuf.UpdateUserSessionResponse
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            UpdateUserSessionResponse.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for UpdateUserSessionResponse
             * @function getTypeUrl
             * @memberof wm.protobuf.UpdateUserSessionResponse
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            UpdateUserSessionResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/wm.protobuf.UpdateUserSessionResponse";
            };

            return UpdateUserSessionResponse;
        })();

        protobuf.LoadDriveInformationRequest = (function() {

            /**
             * Properties of a LoadDriveInformationRequest.
             * @memberof wm.protobuf
             * @interface ILoadDriveInformationRequest
             * @property {number|null} [userId] LoadDriveInformationRequest userId
             */

            /**
             * Constructs a new LoadDriveInformationRequest.
             * @memberof wm.protobuf
             * @classdesc Represents a LoadDriveInformationRequest.
             * @implements ILoadDriveInformationRequest
             * @constructor
             * @param {wm.protobuf.ILoadDriveInformationRequest=} [properties] Properties to set
             */
            function LoadDriveInformationRequest(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * LoadDriveInformationRequest userId.
             * @member {number} userId
             * @memberof wm.protobuf.LoadDriveInformationRequest
             * @instance
             */
            LoadDriveInformationRequest.prototype.userId = 0;

            /**
             * Creates a new LoadDriveInformationRequest instance using the specified properties.
             * @function create
             * @memberof wm.protobuf.LoadDriveInformationRequest
             * @static
             * @param {wm.protobuf.ILoadDriveInformationRequest=} [properties] Properties to set
             * @returns {wm.protobuf.LoadDriveInformationRequest} LoadDriveInformationRequest instance
             */
            LoadDriveInformationRequest.create = function create(properties) {
                return new LoadDriveInformationRequest(properties);
            };

            /**
             * Encodes the specified LoadDriveInformationRequest message. Does not implicitly {@link wm.protobuf.LoadDriveInformationRequest.verify|verify} messages.
             * @function encode
             * @memberof wm.protobuf.LoadDriveInformationRequest
             * @static
             * @param {wm.protobuf.ILoadDriveInformationRequest} message LoadDriveInformationRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LoadDriveInformationRequest.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.userId != null && Object.hasOwnProperty.call(message, "userId"))
                    writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.userId);
                return writer;
            };

            /**
             * Encodes the specified LoadDriveInformationRequest message, length delimited. Does not implicitly {@link wm.protobuf.LoadDriveInformationRequest.verify|verify} messages.
             * @function encodeDelimited
             * @memberof wm.protobuf.LoadDriveInformationRequest
             * @static
             * @param {wm.protobuf.ILoadDriveInformationRequest} message LoadDriveInformationRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LoadDriveInformationRequest.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a LoadDriveInformationRequest message from the specified reader or buffer.
             * @function decode
             * @memberof wm.protobuf.LoadDriveInformationRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {wm.protobuf.LoadDriveInformationRequest} LoadDriveInformationRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LoadDriveInformationRequest.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.wm.protobuf.LoadDriveInformationRequest();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.userId = reader.uint32();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a LoadDriveInformationRequest message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof wm.protobuf.LoadDriveInformationRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {wm.protobuf.LoadDriveInformationRequest} LoadDriveInformationRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LoadDriveInformationRequest.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a LoadDriveInformationRequest message.
             * @function verify
             * @memberof wm.protobuf.LoadDriveInformationRequest
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            LoadDriveInformationRequest.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.userId != null && message.hasOwnProperty("userId"))
                    if (!$util.isInteger(message.userId))
                        return "userId: integer expected";
                return null;
            };

            /**
             * Creates a LoadDriveInformationRequest message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof wm.protobuf.LoadDriveInformationRequest
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {wm.protobuf.LoadDriveInformationRequest} LoadDriveInformationRequest
             */
            LoadDriveInformationRequest.fromObject = function fromObject(object) {
                if (object instanceof $root.wm.protobuf.LoadDriveInformationRequest)
                    return object;
                let message = new $root.wm.protobuf.LoadDriveInformationRequest();
                if (object.userId != null)
                    message.userId = object.userId >>> 0;
                return message;
            };

            /**
             * Creates a plain object from a LoadDriveInformationRequest message. Also converts values to other types if specified.
             * @function toObject
             * @memberof wm.protobuf.LoadDriveInformationRequest
             * @static
             * @param {wm.protobuf.LoadDriveInformationRequest} message LoadDriveInformationRequest
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            LoadDriveInformationRequest.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults)
                    object.userId = 0;
                if (message.userId != null && message.hasOwnProperty("userId"))
                    object.userId = message.userId;
                return object;
            };

            /**
             * Converts this LoadDriveInformationRequest to JSON.
             * @function toJSON
             * @memberof wm.protobuf.LoadDriveInformationRequest
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            LoadDriveInformationRequest.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for LoadDriveInformationRequest
             * @function getTypeUrl
             * @memberof wm.protobuf.LoadDriveInformationRequest
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            LoadDriveInformationRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/wm.protobuf.LoadDriveInformationRequest";
            };

            return LoadDriveInformationRequest;
        })();

        protobuf.LoadDriveInformationResponse = (function() {

            /**
             * Properties of a LoadDriveInformationResponse.
             * @memberof wm.protobuf
             * @interface ILoadDriveInformationResponse
             * @property {wm.protobuf.ErrorCode} error LoadDriveInformationResponse error
             * @property {Array.<wm.protobuf.NoticeEntry>|null} [noticeWindow] LoadDriveInformationResponse noticeWindow
             * @property {Array.<string>|null} [noticeWindowMessage] LoadDriveInformationResponse noticeWindowMessage
             * @property {wm.protobuf.ITransferNotice|null} [transferNotice] LoadDriveInformationResponse transferNotice
             * @property {Array.<number>|null} [restrictedModels] LoadDriveInformationResponse restrictedModels
             * @property {boolean|null} [announceFeature] LoadDriveInformationResponse announceFeature
             * @property {boolean|null} [announceMobile] LoadDriveInformationResponse announceMobile
             * @property {Array.<wm.protobuf.IUserItem>|null} [availableTickets] LoadDriveInformationResponse availableTickets
             */

            /**
             * Constructs a new LoadDriveInformationResponse.
             * @memberof wm.protobuf
             * @classdesc Represents a LoadDriveInformationResponse.
             * @implements ILoadDriveInformationResponse
             * @constructor
             * @param {wm.protobuf.ILoadDriveInformationResponse=} [properties] Properties to set
             */
            function LoadDriveInformationResponse(properties) {
                this.noticeWindow = [];
                this.noticeWindowMessage = [];
                this.restrictedModels = [];
                this.availableTickets = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * LoadDriveInformationResponse error.
             * @member {wm.protobuf.ErrorCode} error
             * @memberof wm.protobuf.LoadDriveInformationResponse
             * @instance
             */
            LoadDriveInformationResponse.prototype.error = 0;

            /**
             * LoadDriveInformationResponse noticeWindow.
             * @member {Array.<wm.protobuf.NoticeEntry>} noticeWindow
             * @memberof wm.protobuf.LoadDriveInformationResponse
             * @instance
             */
            LoadDriveInformationResponse.prototype.noticeWindow = $util.emptyArray;

            /**
             * LoadDriveInformationResponse noticeWindowMessage.
             * @member {Array.<string>} noticeWindowMessage
             * @memberof wm.protobuf.LoadDriveInformationResponse
             * @instance
             */
            LoadDriveInformationResponse.prototype.noticeWindowMessage = $util.emptyArray;

            /**
             * LoadDriveInformationResponse transferNotice.
             * @member {wm.protobuf.ITransferNotice|null|undefined} transferNotice
             * @memberof wm.protobuf.LoadDriveInformationResponse
             * @instance
             */
            LoadDriveInformationResponse.prototype.transferNotice = null;

            /**
             * LoadDriveInformationResponse restrictedModels.
             * @member {Array.<number>} restrictedModels
             * @memberof wm.protobuf.LoadDriveInformationResponse
             * @instance
             */
            LoadDriveInformationResponse.prototype.restrictedModels = $util.emptyArray;

            /**
             * LoadDriveInformationResponse announceFeature.
             * @member {boolean} announceFeature
             * @memberof wm.protobuf.LoadDriveInformationResponse
             * @instance
             */
            LoadDriveInformationResponse.prototype.announceFeature = false;

            /**
             * LoadDriveInformationResponse announceMobile.
             * @member {boolean} announceMobile
             * @memberof wm.protobuf.LoadDriveInformationResponse
             * @instance
             */
            LoadDriveInformationResponse.prototype.announceMobile = false;

            /**
             * LoadDriveInformationResponse availableTickets.
             * @member {Array.<wm.protobuf.IUserItem>} availableTickets
             * @memberof wm.protobuf.LoadDriveInformationResponse
             * @instance
             */
            LoadDriveInformationResponse.prototype.availableTickets = $util.emptyArray;

            /**
             * Creates a new LoadDriveInformationResponse instance using the specified properties.
             * @function create
             * @memberof wm.protobuf.LoadDriveInformationResponse
             * @static
             * @param {wm.protobuf.ILoadDriveInformationResponse=} [properties] Properties to set
             * @returns {wm.protobuf.LoadDriveInformationResponse} LoadDriveInformationResponse instance
             */
            LoadDriveInformationResponse.create = function create(properties) {
                return new LoadDriveInformationResponse(properties);
            };

            /**
             * Encodes the specified LoadDriveInformationResponse message. Does not implicitly {@link wm.protobuf.LoadDriveInformationResponse.verify|verify} messages.
             * @function encode
             * @memberof wm.protobuf.LoadDriveInformationResponse
             * @static
             * @param {wm.protobuf.ILoadDriveInformationResponse} message LoadDriveInformationResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LoadDriveInformationResponse.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
                if (message.noticeWindow != null && message.noticeWindow.length)
                    for (let i = 0; i < message.noticeWindow.length; ++i)
                        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.noticeWindow[i]);
                if (message.noticeWindowMessage != null && message.noticeWindowMessage.length)
                    for (let i = 0; i < message.noticeWindowMessage.length; ++i)
                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.noticeWindowMessage[i]);
                if (message.transferNotice != null && Object.hasOwnProperty.call(message, "transferNotice"))
                    $root.wm.protobuf.TransferNotice.encode(message.transferNotice, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                if (message.restrictedModels != null && message.restrictedModels.length)
                    for (let i = 0; i < message.restrictedModels.length; ++i)
                        writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.restrictedModels[i]);
                if (message.announceFeature != null && Object.hasOwnProperty.call(message, "announceFeature"))
                    writer.uint32(/* id 7, wireType 0 =*/56).bool(message.announceFeature);
                if (message.announceMobile != null && Object.hasOwnProperty.call(message, "announceMobile"))
                    writer.uint32(/* id 8, wireType 0 =*/64).bool(message.announceMobile);
                if (message.availableTickets != null && message.availableTickets.length)
                    for (let i = 0; i < message.availableTickets.length; ++i)
                        $root.wm.protobuf.UserItem.encode(message.availableTickets[i], writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified LoadDriveInformationResponse message, length delimited. Does not implicitly {@link wm.protobuf.LoadDriveInformationResponse.verify|verify} messages.
             * @function encodeDelimited
             * @memberof wm.protobuf.LoadDriveInformationResponse
             * @static
             * @param {wm.protobuf.ILoadDriveInformationResponse} message LoadDriveInformationResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LoadDriveInformationResponse.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a LoadDriveInformationResponse message from the specified reader or buffer.
             * @function decode
             * @memberof wm.protobuf.LoadDriveInformationResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {wm.protobuf.LoadDriveInformationResponse} LoadDriveInformationResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LoadDriveInformationResponse.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.wm.protobuf.LoadDriveInformationResponse();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.error = reader.int32();
                            break;
                        }
                    case 2: {
                            if (!(message.noticeWindow && message.noticeWindow.length))
                                message.noticeWindow = [];
                            if ((tag & 7) === 2) {
                                let end2 = reader.uint32() + reader.pos;
                                while (reader.pos < end2)
                                    message.noticeWindow.push(reader.int32());
                            } else
                                message.noticeWindow.push(reader.int32());
                            break;
                        }
                    case 3: {
                            if (!(message.noticeWindowMessage && message.noticeWindowMessage.length))
                                message.noticeWindowMessage = [];
                            message.noticeWindowMessage.push(reader.string());
                            break;
                        }
                    case 4: {
                            message.transferNotice = $root.wm.protobuf.TransferNotice.decode(reader, reader.uint32());
                            break;
                        }
                    case 6: {
                            if (!(message.restrictedModels && message.restrictedModels.length))
                                message.restrictedModels = [];
                            if ((tag & 7) === 2) {
                                let end2 = reader.uint32() + reader.pos;
                                while (reader.pos < end2)
                                    message.restrictedModels.push(reader.uint32());
                            } else
                                message.restrictedModels.push(reader.uint32());
                            break;
                        }
                    case 7: {
                            message.announceFeature = reader.bool();
                            break;
                        }
                    case 8: {
                            message.announceMobile = reader.bool();
                            break;
                        }
                    case 9: {
                            if (!(message.availableTickets && message.availableTickets.length))
                                message.availableTickets = [];
                            message.availableTickets.push($root.wm.protobuf.UserItem.decode(reader, reader.uint32()));
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("error"))
                    throw $util.ProtocolError("missing required 'error'", { instance: message });
                return message;
            };

            /**
             * Decodes a LoadDriveInformationResponse message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof wm.protobuf.LoadDriveInformationResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {wm.protobuf.LoadDriveInformationResponse} LoadDriveInformationResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LoadDriveInformationResponse.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a LoadDriveInformationResponse message.
             * @function verify
             * @memberof wm.protobuf.LoadDriveInformationResponse
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            LoadDriveInformationResponse.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                switch (message.error) {
                default:
                    return "error: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 7:
                case 9:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 16:
                case 17:
                case 18:
                case 19:
                    break;
                }
                if (message.noticeWindow != null && message.hasOwnProperty("noticeWindow")) {
                    if (!Array.isArray(message.noticeWindow))
                        return "noticeWindow: array expected";
                    for (let i = 0; i < message.noticeWindow.length; ++i)
                        switch (message.noticeWindow[i]) {
                        default:
                            return "noticeWindow: enum value[] expected";
                        case 1:
                        case 2:
                        case 3:
                        case 4:
                        case 5:
                        case 6:
                        case 7:
                        case 8:
                        case 9:
                        case 10:
                        case 11:
                        case 12:
                            break;
                        }
                }
                if (message.noticeWindowMessage != null && message.hasOwnProperty("noticeWindowMessage")) {
                    if (!Array.isArray(message.noticeWindowMessage))
                        return "noticeWindowMessage: array expected";
                    for (let i = 0; i < message.noticeWindowMessage.length; ++i)
                        if (!$util.isString(message.noticeWindowMessage[i]))
                            return "noticeWindowMessage: string[] expected";
                }
                if (message.transferNotice != null && message.hasOwnProperty("transferNotice")) {
                    let error = $root.wm.protobuf.TransferNotice.verify(message.transferNotice);
                    if (error)
                        return "transferNotice." + error;
                }
                if (message.restrictedModels != null && message.hasOwnProperty("restrictedModels")) {
                    if (!Array.isArray(message.restrictedModels))
                        return "restrictedModels: array expected";
                    for (let i = 0; i < message.restrictedModels.length; ++i)
                        if (!$util.isInteger(message.restrictedModels[i]))
                            return "restrictedModels: integer[] expected";
                }
                if (message.announceFeature != null && message.hasOwnProperty("announceFeature"))
                    if (typeof message.announceFeature !== "boolean")
                        return "announceFeature: boolean expected";
                if (message.announceMobile != null && message.hasOwnProperty("announceMobile"))
                    if (typeof message.announceMobile !== "boolean")
                        return "announceMobile: boolean expected";
                if (message.availableTickets != null && message.hasOwnProperty("availableTickets")) {
                    if (!Array.isArray(message.availableTickets))
                        return "availableTickets: array expected";
                    for (let i = 0; i < message.availableTickets.length; ++i) {
                        let error = $root.wm.protobuf.UserItem.verify(message.availableTickets[i]);
                        if (error)
                            return "availableTickets." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a LoadDriveInformationResponse message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof wm.protobuf.LoadDriveInformationResponse
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {wm.protobuf.LoadDriveInformationResponse} LoadDriveInformationResponse
             */
            LoadDriveInformationResponse.fromObject = function fromObject(object) {
                if (object instanceof $root.wm.protobuf.LoadDriveInformationResponse)
                    return object;
                let message = new $root.wm.protobuf.LoadDriveInformationResponse();
                switch (object.error) {
                default:
                    if (typeof object.error === "number") {
                        message.error = object.error;
                        break;
                    }
                    break;
                case "ERR_SUCCESS":
                case 0:
                    message.error = 0;
                    break;
                case "ERR_REQUEST":
                case 1:
                    message.error = 1;
                    break;
                case "ERR_NOT_FOUND":
                case 2:
                    message.error = 2;
                    break;
                case "ERR_ID_SERVER":
                case 3:
                    message.error = 3;
                    break;
                case "ERR_ID_BANNED":
                case 4:
                    message.error = 4;
                    break;
                case "ERR_USER_LOCKED":
                case 5:
                    message.error = 5;
                    break;
                case "ERR_USER_VERSION":
                case 6:
                    message.error = 6;
                    break;
                case "ERR_NAME_CONFLICTED":
                case 7:
                    message.error = 7;
                    break;
                case "ERR_FORBIDDEN":
                case 9:
                    message.error = 9;
                    break;
                case "ERR_USER_SUCCEEDED":
                case 11:
                    message.error = 11;
                    break;
                case "ERR_BEING_TRANSFERRED":
                case 12:
                    message.error = 12;
                    break;
                case "ERR_SCRATCH_LOCKED":
                case 13:
                    message.error = 13;
                    break;
                case "ERR_BINGO_REVENGE_LOCKED":
                case 14:
                    message.error = 14;
                    break;
                case "ERR_BINGO_ALREDY_LINKED":
                case 15:
                    message.error = 15;
                    break;
                case "ERR_BINGO_FINISHED":
                case 16:
                    message.error = 16;
                    break;
                case "ERR_BINGO_REACHED_MAX_USER":
                case 17:
                    message.error = 17;
                    break;
                case "ERR_CAR_NOT_FOUND":
                case 18:
                    message.error = 18;
                    break;
                case "ERR_BINGO_CARD_NOT_FOUND":
                case 19:
                    message.error = 19;
                    break;
                }
                if (object.noticeWindow) {
                    if (!Array.isArray(object.noticeWindow))
                        throw TypeError(".wm.protobuf.LoadDriveInformationResponse.noticeWindow: array expected");
                    message.noticeWindow = [];
                    for (let i = 0; i < object.noticeWindow.length; ++i)
                        switch (object.noticeWindow[i]) {
                        default:
                            if (typeof object.noticeWindow[i] === "number") {
                                message.noticeWindow[i] = object.noticeWindow[i];
                                break;
                            }
                        case "NOTICE_UNUSED_1":
                        case 1:
                            message.noticeWindow[i] = 1;
                            break;
                        case "NOTICE_UNUSED_2":
                        case 2:
                            message.noticeWindow[i] = 2;
                            break;
                        case "NOTICE_UNUSED_3":
                        case 3:
                            message.noticeWindow[i] = 3;
                            break;
                        case "NOTICE_UNUSED_4":
                        case 4:
                            message.noticeWindow[i] = 4;
                            break;
                        case "NOTICE_UNUSED_5":
                        case 5:
                            message.noticeWindow[i] = 5;
                            break;
                        case "NOTICE_UNUSED_6":
                        case 6:
                            message.noticeWindow[i] = 6;
                            break;
                        case "NOTICE_UNUSED_7":
                        case 7:
                            message.noticeWindow[i] = 7;
                            break;
                        case "NOTICE_UNUSED_8":
                        case 8:
                            message.noticeWindow[i] = 8;
                            break;
                        case "NOTICE_UNUSED_9":
                        case 9:
                            message.noticeWindow[i] = 9;
                            break;
                        case "NOTICE_UNUSED_10":
                        case 10:
                            message.noticeWindow[i] = 10;
                            break;
                        case "NOTICE_UNUSED_11":
                        case 11:
                            message.noticeWindow[i] = 11;
                            break;
                        case "NOTICE_UNUSED_12":
                        case 12:
                            message.noticeWindow[i] = 12;
                            break;
                        }
                }
                if (object.noticeWindowMessage) {
                    if (!Array.isArray(object.noticeWindowMessage))
                        throw TypeError(".wm.protobuf.LoadDriveInformationResponse.noticeWindowMessage: array expected");
                    message.noticeWindowMessage = [];
                    for (let i = 0; i < object.noticeWindowMessage.length; ++i)
                        message.noticeWindowMessage[i] = String(object.noticeWindowMessage[i]);
                }
                if (object.transferNotice != null) {
                    if (typeof object.transferNotice !== "object")
                        throw TypeError(".wm.protobuf.LoadDriveInformationResponse.transferNotice: object expected");
                    message.transferNotice = $root.wm.protobuf.TransferNotice.fromObject(object.transferNotice);
                }
                if (object.restrictedModels) {
                    if (!Array.isArray(object.restrictedModels))
                        throw TypeError(".wm.protobuf.LoadDriveInformationResponse.restrictedModels: array expected");
                    message.restrictedModels = [];
                    for (let i = 0; i < object.restrictedModels.length; ++i)
                        message.restrictedModels[i] = object.restrictedModels[i] >>> 0;
                }
                if (object.announceFeature != null)
                    message.announceFeature = Boolean(object.announceFeature);
                if (object.announceMobile != null)
                    message.announceMobile = Boolean(object.announceMobile);
                if (object.availableTickets) {
                    if (!Array.isArray(object.availableTickets))
                        throw TypeError(".wm.protobuf.LoadDriveInformationResponse.availableTickets: array expected");
                    message.availableTickets = [];
                    for (let i = 0; i < object.availableTickets.length; ++i) {
                        if (typeof object.availableTickets[i] !== "object")
                            throw TypeError(".wm.protobuf.LoadDriveInformationResponse.availableTickets: object expected");
                        message.availableTickets[i] = $root.wm.protobuf.UserItem.fromObject(object.availableTickets[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from a LoadDriveInformationResponse message. Also converts values to other types if specified.
             * @function toObject
             * @memberof wm.protobuf.LoadDriveInformationResponse
             * @static
             * @param {wm.protobuf.LoadDriveInformationResponse} message LoadDriveInformationResponse
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            LoadDriveInformationResponse.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults) {
                    object.noticeWindow = [];
                    object.noticeWindowMessage = [];
                    object.restrictedModels = [];
                    object.availableTickets = [];
                }
                if (options.defaults) {
                    object.error = options.enums === String ? "ERR_SUCCESS" : 0;
                    object.transferNotice = null;
                    object.announceFeature = false;
                    object.announceMobile = false;
                }
                if (message.error != null && message.hasOwnProperty("error"))
                    object.error = options.enums === String ? $root.wm.protobuf.ErrorCode[message.error] === undefined ? message.error : $root.wm.protobuf.ErrorCode[message.error] : message.error;
                if (message.noticeWindow && message.noticeWindow.length) {
                    object.noticeWindow = [];
                    for (let j = 0; j < message.noticeWindow.length; ++j)
                        object.noticeWindow[j] = options.enums === String ? $root.wm.protobuf.NoticeEntry[message.noticeWindow[j]] === undefined ? message.noticeWindow[j] : $root.wm.protobuf.NoticeEntry[message.noticeWindow[j]] : message.noticeWindow[j];
                }
                if (message.noticeWindowMessage && message.noticeWindowMessage.length) {
                    object.noticeWindowMessage = [];
                    for (let j = 0; j < message.noticeWindowMessage.length; ++j)
                        object.noticeWindowMessage[j] = message.noticeWindowMessage[j];
                }
                if (message.transferNotice != null && message.hasOwnProperty("transferNotice"))
                    object.transferNotice = $root.wm.protobuf.TransferNotice.toObject(message.transferNotice, options);
                if (message.restrictedModels && message.restrictedModels.length) {
                    object.restrictedModels = [];
                    for (let j = 0; j < message.restrictedModels.length; ++j)
                        object.restrictedModels[j] = message.restrictedModels[j];
                }
                if (message.announceFeature != null && message.hasOwnProperty("announceFeature"))
                    object.announceFeature = message.announceFeature;
                if (message.announceMobile != null && message.hasOwnProperty("announceMobile"))
                    object.announceMobile = message.announceMobile;
                if (message.availableTickets && message.availableTickets.length) {
                    object.availableTickets = [];
                    for (let j = 0; j < message.availableTickets.length; ++j)
                        object.availableTickets[j] = $root.wm.protobuf.UserItem.toObject(message.availableTickets[j], options);
                }
                return object;
            };

            /**
             * Converts this LoadDriveInformationResponse to JSON.
             * @function toJSON
             * @memberof wm.protobuf.LoadDriveInformationResponse
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            LoadDriveInformationResponse.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for LoadDriveInformationResponse
             * @function getTypeUrl
             * @memberof wm.protobuf.LoadDriveInformationResponse
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            LoadDriveInformationResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/wm.protobuf.LoadDriveInformationResponse";
            };

            return LoadDriveInformationResponse;
        })();

        protobuf.LoadCarRequest = (function() {

            /**
             * Properties of a LoadCarRequest.
             * @memberof wm.protobuf
             * @interface ILoadCarRequest
             * @property {number} carId LoadCarRequest carId
             * @property {boolean|null} [eventMode] LoadCarRequest eventMode
             * @property {string|null} [eventModeSerial] LoadCarRequest eventModeSerial
             * @property {boolean|null} [rentalMode] LoadCarRequest rentalMode
             */

            /**
             * Constructs a new LoadCarRequest.
             * @memberof wm.protobuf
             * @classdesc Represents a LoadCarRequest.
             * @implements ILoadCarRequest
             * @constructor
             * @param {wm.protobuf.ILoadCarRequest=} [properties] Properties to set
             */
            function LoadCarRequest(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * LoadCarRequest carId.
             * @member {number} carId
             * @memberof wm.protobuf.LoadCarRequest
             * @instance
             */
            LoadCarRequest.prototype.carId = 0;

            /**
             * LoadCarRequest eventMode.
             * @member {boolean} eventMode
             * @memberof wm.protobuf.LoadCarRequest
             * @instance
             */
            LoadCarRequest.prototype.eventMode = false;

            /**
             * LoadCarRequest eventModeSerial.
             * @member {string} eventModeSerial
             * @memberof wm.protobuf.LoadCarRequest
             * @instance
             */
            LoadCarRequest.prototype.eventModeSerial = "";

            /**
             * LoadCarRequest rentalMode.
             * @member {boolean} rentalMode
             * @memberof wm.protobuf.LoadCarRequest
             * @instance
             */
            LoadCarRequest.prototype.rentalMode = false;

            /**
             * Creates a new LoadCarRequest instance using the specified properties.
             * @function create
             * @memberof wm.protobuf.LoadCarRequest
             * @static
             * @param {wm.protobuf.ILoadCarRequest=} [properties] Properties to set
             * @returns {wm.protobuf.LoadCarRequest} LoadCarRequest instance
             */
            LoadCarRequest.create = function create(properties) {
                return new LoadCarRequest(properties);
            };

            /**
             * Encodes the specified LoadCarRequest message. Does not implicitly {@link wm.protobuf.LoadCarRequest.verify|verify} messages.
             * @function encode
             * @memberof wm.protobuf.LoadCarRequest
             * @static
             * @param {wm.protobuf.ILoadCarRequest} message LoadCarRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LoadCarRequest.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.carId);
                if (message.eventMode != null && Object.hasOwnProperty.call(message, "eventMode"))
                    writer.uint32(/* id 2, wireType 0 =*/16).bool(message.eventMode);
                if (message.eventModeSerial != null && Object.hasOwnProperty.call(message, "eventModeSerial"))
                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.eventModeSerial);
                if (message.rentalMode != null && Object.hasOwnProperty.call(message, "rentalMode"))
                    writer.uint32(/* id 4, wireType 0 =*/32).bool(message.rentalMode);
                return writer;
            };

            /**
             * Encodes the specified LoadCarRequest message, length delimited. Does not implicitly {@link wm.protobuf.LoadCarRequest.verify|verify} messages.
             * @function encodeDelimited
             * @memberof wm.protobuf.LoadCarRequest
             * @static
             * @param {wm.protobuf.ILoadCarRequest} message LoadCarRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LoadCarRequest.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a LoadCarRequest message from the specified reader or buffer.
             * @function decode
             * @memberof wm.protobuf.LoadCarRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {wm.protobuf.LoadCarRequest} LoadCarRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LoadCarRequest.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.wm.protobuf.LoadCarRequest();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.carId = reader.uint32();
                            break;
                        }
                    case 2: {
                            message.eventMode = reader.bool();
                            break;
                        }
                    case 3: {
                            message.eventModeSerial = reader.string();
                            break;
                        }
                    case 4: {
                            message.rentalMode = reader.bool();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("carId"))
                    throw $util.ProtocolError("missing required 'carId'", { instance: message });
                return message;
            };

            /**
             * Decodes a LoadCarRequest message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof wm.protobuf.LoadCarRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {wm.protobuf.LoadCarRequest} LoadCarRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LoadCarRequest.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a LoadCarRequest message.
             * @function verify
             * @memberof wm.protobuf.LoadCarRequest
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            LoadCarRequest.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (!$util.isInteger(message.carId))
                    return "carId: integer expected";
                if (message.eventMode != null && message.hasOwnProperty("eventMode"))
                    if (typeof message.eventMode !== "boolean")
                        return "eventMode: boolean expected";
                if (message.eventModeSerial != null && message.hasOwnProperty("eventModeSerial"))
                    if (!$util.isString(message.eventModeSerial))
                        return "eventModeSerial: string expected";
                if (message.rentalMode != null && message.hasOwnProperty("rentalMode"))
                    if (typeof message.rentalMode !== "boolean")
                        return "rentalMode: boolean expected";
                return null;
            };

            /**
             * Creates a LoadCarRequest message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof wm.protobuf.LoadCarRequest
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {wm.protobuf.LoadCarRequest} LoadCarRequest
             */
            LoadCarRequest.fromObject = function fromObject(object) {
                if (object instanceof $root.wm.protobuf.LoadCarRequest)
                    return object;
                let message = new $root.wm.protobuf.LoadCarRequest();
                if (object.carId != null)
                    message.carId = object.carId >>> 0;
                if (object.eventMode != null)
                    message.eventMode = Boolean(object.eventMode);
                if (object.eventModeSerial != null)
                    message.eventModeSerial = String(object.eventModeSerial);
                if (object.rentalMode != null)
                    message.rentalMode = Boolean(object.rentalMode);
                return message;
            };

            /**
             * Creates a plain object from a LoadCarRequest message. Also converts values to other types if specified.
             * @function toObject
             * @memberof wm.protobuf.LoadCarRequest
             * @static
             * @param {wm.protobuf.LoadCarRequest} message LoadCarRequest
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            LoadCarRequest.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.carId = 0;
                    object.eventMode = false;
                    object.eventModeSerial = "";
                    object.rentalMode = false;
                }
                if (message.carId != null && message.hasOwnProperty("carId"))
                    object.carId = message.carId;
                if (message.eventMode != null && message.hasOwnProperty("eventMode"))
                    object.eventMode = message.eventMode;
                if (message.eventModeSerial != null && message.hasOwnProperty("eventModeSerial"))
                    object.eventModeSerial = message.eventModeSerial;
                if (message.rentalMode != null && message.hasOwnProperty("rentalMode"))
                    object.rentalMode = message.rentalMode;
                return object;
            };

            /**
             * Converts this LoadCarRequest to JSON.
             * @function toJSON
             * @memberof wm.protobuf.LoadCarRequest
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            LoadCarRequest.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for LoadCarRequest
             * @function getTypeUrl
             * @memberof wm.protobuf.LoadCarRequest
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            LoadCarRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/wm.protobuf.LoadCarRequest";
            };

            return LoadCarRequest;
        })();

        protobuf.LoadCarResponse = (function() {

            /**
             * Properties of a LoadCarResponse.
             * @memberof wm.protobuf
             * @interface ILoadCarResponse
             * @property {wm.protobuf.ErrorCode} error LoadCarResponse error
             * @property {wm.protobuf.ICar} car LoadCarResponse car
             * @property {number} tuningPoint LoadCarResponse tuningPoint
             * @property {number} odometer LoadCarResponse odometer
             * @property {number} playCount LoadCarResponse playCount
             * @property {boolean} earnedCustomColor LoadCarResponse earnedCustomColor
             * @property {wm.protobuf.ICarSetting} setting LoadCarResponse setting
             * @property {number} vsPlayCount LoadCarResponse vsPlayCount
             * @property {number} vsBurstCount LoadCarResponse vsBurstCount
             * @property {number} vsStarCount LoadCarResponse vsStarCount
             * @property {number} vsStarCountMax LoadCarResponse vsStarCountMax
             * @property {number} vsCoolOrWild LoadCarResponse vsCoolOrWild
             * @property {number} vsSmoothOrRough LoadCarResponse vsSmoothOrRough
             * @property {number} vsTripleStarMedals LoadCarResponse vsTripleStarMedals
             * @property {number} vsDoubleStarMedals LoadCarResponse vsDoubleStarMedals
             * @property {number} vsSingleStarMedals LoadCarResponse vsSingleStarMedals
             * @property {number} vsPlainMedals LoadCarResponse vsPlainMedals
             * @property {number} rgPlayCount LoadCarResponse rgPlayCount
             * @property {number} rgWinCount LoadCarResponse rgWinCount
             * @property {number} rgTrophy LoadCarResponse rgTrophy
             * @property {number} rgPreviousVersionPlayCount LoadCarResponse rgPreviousVersionPlayCount
             * @property {number} rgScore LoadCarResponse rgScore
             * @property {number} rgScoreVs_2 LoadCarResponse rgScoreVs_2
             * @property {number|null} [rgExpeditionScore] LoadCarResponse rgExpeditionScore
             * @property {Array.<number>|null} [rgRegionMapScore] LoadCarResponse rgRegionMapScore
             * @property {Array.<number>|null} [rgRegions] LoadCarResponse rgRegions
             * @property {number} rgStamp LoadCarResponse rgStamp
             * @property {boolean} rgAcquireAllCrowns LoadCarResponse rgAcquireAllCrowns
             * @property {number} rgHighwayClearCount LoadCarResponse rgHighwayClearCount
             * @property {number} rgHighwayPoint LoadCarResponse rgHighwayPoint
             * @property {number} rgHighwayStationClearBits LoadCarResponse rgHighwayStationClearBits
             * @property {number} rgHighwayPreviousDice LoadCarResponse rgHighwayPreviousDice
             * @property {number} dressupLevel LoadCarResponse dressupLevel
             * @property {number} dressupPoint LoadCarResponse dressupPoint
             * @property {number} stPlayCount LoadCarResponse stPlayCount
             * @property {number} stClearBits LoadCarResponse stClearBits
             * @property {number} stClearDivCount LoadCarResponse stClearDivCount
             * @property {number} stClearCount LoadCarResponse stClearCount
             * @property {number|Long} stLoseBits LoadCarResponse stLoseBits
             * @property {number} stConsecutiveWins LoadCarResponse stConsecutiveWins
             * @property {number} stConsecutiveWinsMax LoadCarResponse stConsecutiveWinsMax
             * @property {boolean} stCompleted_100Episodes LoadCarResponse stCompleted_100Episodes
             * @property {wm.protobuf.IChallengerCar|null} [challenger] LoadCarResponse challenger
             * @property {number|null} [challengerReturnCount] LoadCarResponse challengerReturnCount
             * @property {number|null} [numOfStampTargetCars] LoadCarResponse numOfStampTargetCars
             * @property {wm.protobuf.IGhostCar|null} [opponentGhost] LoadCarResponse opponentGhost
             * @property {number|Long|null} [opponentTrailId] LoadCarResponse opponentTrailId
             * @property {number|null} [opponentCompetitionId] LoadCarResponse opponentCompetitionId
             * @property {wm.protobuf.IGhostCompetitionParameter|null} [competitionParameter] LoadCarResponse competitionParameter
             * @property {Array.<string>|null} [specialTitles] LoadCarResponse specialTitles
             * @property {Array.<string>|null} [earnedTitles] LoadCarResponse earnedTitles
             * @property {Array.<wm.protobuf.ICarItem>|null} [ownedItems] LoadCarResponse ownedItems
             * @property {boolean} auraMotifAutoChange LoadCarResponse auraMotifAutoChange
             * @property {number} screenshotCount LoadCarResponse screenshotCount
             * @property {boolean|null} [announceEventModePrize] LoadCarResponse announceEventModePrize
             * @property {number|null} [driveLastPlayedAt] LoadCarResponse driveLastPlayedAt
             * @property {wm.protobuf.LoadCarResponse.IStoryInsurance|null} [insurance] LoadCarResponse insurance
             * @property {wm.protobuf.GhostExpeditionParticipantState|null} [ghostExpeditionState] LoadCarResponse ghostExpeditionState
             * @property {Array.<wm.protobuf.ICarItem>|null} [koshienPrize] LoadCarResponse koshienPrize
             */

            /**
             * Constructs a new LoadCarResponse.
             * @memberof wm.protobuf
             * @classdesc Represents a LoadCarResponse.
             * @implements ILoadCarResponse
             * @constructor
             * @param {wm.protobuf.ILoadCarResponse=} [properties] Properties to set
             */
            function LoadCarResponse(properties) {
                this.rgRegionMapScore = [];
                this.rgRegions = [];
                this.specialTitles = [];
                this.earnedTitles = [];
                this.ownedItems = [];
                this.koshienPrize = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * LoadCarResponse error.
             * @member {wm.protobuf.ErrorCode} error
             * @memberof wm.protobuf.LoadCarResponse
             * @instance
             */
            LoadCarResponse.prototype.error = 0;

            /**
             * LoadCarResponse car.
             * @member {wm.protobuf.ICar} car
             * @memberof wm.protobuf.LoadCarResponse
             * @instance
             */
            LoadCarResponse.prototype.car = null;

            /**
             * LoadCarResponse tuningPoint.
             * @member {number} tuningPoint
             * @memberof wm.protobuf.LoadCarResponse
             * @instance
             */
            LoadCarResponse.prototype.tuningPoint = 0;

            /**
             * LoadCarResponse odometer.
             * @member {number} odometer
             * @memberof wm.protobuf.LoadCarResponse
             * @instance
             */
            LoadCarResponse.prototype.odometer = 0;

            /**
             * LoadCarResponse playCount.
             * @member {number} playCount
             * @memberof wm.protobuf.LoadCarResponse
             * @instance
             */
            LoadCarResponse.prototype.playCount = 0;

            /**
             * LoadCarResponse earnedCustomColor.
             * @member {boolean} earnedCustomColor
             * @memberof wm.protobuf.LoadCarResponse
             * @instance
             */
            LoadCarResponse.prototype.earnedCustomColor = false;

            /**
             * LoadCarResponse setting.
             * @member {wm.protobuf.ICarSetting} setting
             * @memberof wm.protobuf.LoadCarResponse
             * @instance
             */
            LoadCarResponse.prototype.setting = null;

            /**
             * LoadCarResponse vsPlayCount.
             * @member {number} vsPlayCount
             * @memberof wm.protobuf.LoadCarResponse
             * @instance
             */
            LoadCarResponse.prototype.vsPlayCount = 0;

            /**
             * LoadCarResponse vsBurstCount.
             * @member {number} vsBurstCount
             * @memberof wm.protobuf.LoadCarResponse
             * @instance
             */
            LoadCarResponse.prototype.vsBurstCount = 0;

            /**
             * LoadCarResponse vsStarCount.
             * @member {number} vsStarCount
             * @memberof wm.protobuf.LoadCarResponse
             * @instance
             */
            LoadCarResponse.prototype.vsStarCount = 0;

            /**
             * LoadCarResponse vsStarCountMax.
             * @member {number} vsStarCountMax
             * @memberof wm.protobuf.LoadCarResponse
             * @instance
             */
            LoadCarResponse.prototype.vsStarCountMax = 0;

            /**
             * LoadCarResponse vsCoolOrWild.
             * @member {number} vsCoolOrWild
             * @memberof wm.protobuf.LoadCarResponse
             * @instance
             */
            LoadCarResponse.prototype.vsCoolOrWild = 0;

            /**
             * LoadCarResponse vsSmoothOrRough.
             * @member {number} vsSmoothOrRough
             * @memberof wm.protobuf.LoadCarResponse
             * @instance
             */
            LoadCarResponse.prototype.vsSmoothOrRough = 0;

            /**
             * LoadCarResponse vsTripleStarMedals.
             * @member {number} vsTripleStarMedals
             * @memberof wm.protobuf.LoadCarResponse
             * @instance
             */
            LoadCarResponse.prototype.vsTripleStarMedals = 0;

            /**
             * LoadCarResponse vsDoubleStarMedals.
             * @member {number} vsDoubleStarMedals
             * @memberof wm.protobuf.LoadCarResponse
             * @instance
             */
            LoadCarResponse.prototype.vsDoubleStarMedals = 0;

            /**
             * LoadCarResponse vsSingleStarMedals.
             * @member {number} vsSingleStarMedals
             * @memberof wm.protobuf.LoadCarResponse
             * @instance
             */
            LoadCarResponse.prototype.vsSingleStarMedals = 0;

            /**
             * LoadCarResponse vsPlainMedals.
             * @member {number} vsPlainMedals
             * @memberof wm.protobuf.LoadCarResponse
             * @instance
             */
            LoadCarResponse.prototype.vsPlainMedals = 0;

            /**
             * LoadCarResponse rgPlayCount.
             * @member {number} rgPlayCount
             * @memberof wm.protobuf.LoadCarResponse
             * @instance
             */
            LoadCarResponse.prototype.rgPlayCount = 0;

            /**
             * LoadCarResponse rgWinCount.
             * @member {number} rgWinCount
             * @memberof wm.protobuf.LoadCarResponse
             * @instance
             */
            LoadCarResponse.prototype.rgWinCount = 0;

            /**
             * LoadCarResponse rgTrophy.
             * @member {number} rgTrophy
             * @memberof wm.protobuf.LoadCarResponse
             * @instance
             */
            LoadCarResponse.prototype.rgTrophy = 0;

            /**
             * LoadCarResponse rgPreviousVersionPlayCount.
             * @member {number} rgPreviousVersionPlayCount
             * @memberof wm.protobuf.LoadCarResponse
             * @instance
             */
            LoadCarResponse.prototype.rgPreviousVersionPlayCount = 0;

            /**
             * LoadCarResponse rgScore.
             * @member {number} rgScore
             * @memberof wm.protobuf.LoadCarResponse
             * @instance
             */
            LoadCarResponse.prototype.rgScore = 0;

            /**
             * LoadCarResponse rgScoreVs_2.
             * @member {number} rgScoreVs_2
             * @memberof wm.protobuf.LoadCarResponse
             * @instance
             */
            LoadCarResponse.prototype.rgScoreVs_2 = 0;

            /**
             * LoadCarResponse rgExpeditionScore.
             * @member {number} rgExpeditionScore
             * @memberof wm.protobuf.LoadCarResponse
             * @instance
             */
            LoadCarResponse.prototype.rgExpeditionScore = 0;

            /**
             * LoadCarResponse rgRegionMapScore.
             * @member {Array.<number>} rgRegionMapScore
             * @memberof wm.protobuf.LoadCarResponse
             * @instance
             */
            LoadCarResponse.prototype.rgRegionMapScore = $util.emptyArray;

            /**
             * LoadCarResponse rgRegions.
             * @member {Array.<number>} rgRegions
             * @memberof wm.protobuf.LoadCarResponse
             * @instance
             */
            LoadCarResponse.prototype.rgRegions = $util.emptyArray;

            /**
             * LoadCarResponse rgStamp.
             * @member {number} rgStamp
             * @memberof wm.protobuf.LoadCarResponse
             * @instance
             */
            LoadCarResponse.prototype.rgStamp = 0;

            /**
             * LoadCarResponse rgAcquireAllCrowns.
             * @member {boolean} rgAcquireAllCrowns
             * @memberof wm.protobuf.LoadCarResponse
             * @instance
             */
            LoadCarResponse.prototype.rgAcquireAllCrowns = false;

            /**
             * LoadCarResponse rgHighwayClearCount.
             * @member {number} rgHighwayClearCount
             * @memberof wm.protobuf.LoadCarResponse
             * @instance
             */
            LoadCarResponse.prototype.rgHighwayClearCount = 0;

            /**
             * LoadCarResponse rgHighwayPoint.
             * @member {number} rgHighwayPoint
             * @memberof wm.protobuf.LoadCarResponse
             * @instance
             */
            LoadCarResponse.prototype.rgHighwayPoint = 0;

            /**
             * LoadCarResponse rgHighwayStationClearBits.
             * @member {number} rgHighwayStationClearBits
             * @memberof wm.protobuf.LoadCarResponse
             * @instance
             */
            LoadCarResponse.prototype.rgHighwayStationClearBits = 0;

            /**
             * LoadCarResponse rgHighwayPreviousDice.
             * @member {number} rgHighwayPreviousDice
             * @memberof wm.protobuf.LoadCarResponse
             * @instance
             */
            LoadCarResponse.prototype.rgHighwayPreviousDice = 0;

            /**
             * LoadCarResponse dressupLevel.
             * @member {number} dressupLevel
             * @memberof wm.protobuf.LoadCarResponse
             * @instance
             */
            LoadCarResponse.prototype.dressupLevel = 0;

            /**
             * LoadCarResponse dressupPoint.
             * @member {number} dressupPoint
             * @memberof wm.protobuf.LoadCarResponse
             * @instance
             */
            LoadCarResponse.prototype.dressupPoint = 0;

            /**
             * LoadCarResponse stPlayCount.
             * @member {number} stPlayCount
             * @memberof wm.protobuf.LoadCarResponse
             * @instance
             */
            LoadCarResponse.prototype.stPlayCount = 0;

            /**
             * LoadCarResponse stClearBits.
             * @member {number} stClearBits
             * @memberof wm.protobuf.LoadCarResponse
             * @instance
             */
            LoadCarResponse.prototype.stClearBits = 0;

            /**
             * LoadCarResponse stClearDivCount.
             * @member {number} stClearDivCount
             * @memberof wm.protobuf.LoadCarResponse
             * @instance
             */
            LoadCarResponse.prototype.stClearDivCount = 0;

            /**
             * LoadCarResponse stClearCount.
             * @member {number} stClearCount
             * @memberof wm.protobuf.LoadCarResponse
             * @instance
             */
            LoadCarResponse.prototype.stClearCount = 0;

            /**
             * LoadCarResponse stLoseBits.
             * @member {number|Long} stLoseBits
             * @memberof wm.protobuf.LoadCarResponse
             * @instance
             */
            LoadCarResponse.prototype.stLoseBits = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

            /**
             * LoadCarResponse stConsecutiveWins.
             * @member {number} stConsecutiveWins
             * @memberof wm.protobuf.LoadCarResponse
             * @instance
             */
            LoadCarResponse.prototype.stConsecutiveWins = 0;

            /**
             * LoadCarResponse stConsecutiveWinsMax.
             * @member {number} stConsecutiveWinsMax
             * @memberof wm.protobuf.LoadCarResponse
             * @instance
             */
            LoadCarResponse.prototype.stConsecutiveWinsMax = 0;

            /**
             * LoadCarResponse stCompleted_100Episodes.
             * @member {boolean} stCompleted_100Episodes
             * @memberof wm.protobuf.LoadCarResponse
             * @instance
             */
            LoadCarResponse.prototype.stCompleted_100Episodes = false;

            /**
             * LoadCarResponse challenger.
             * @member {wm.protobuf.IChallengerCar|null|undefined} challenger
             * @memberof wm.protobuf.LoadCarResponse
             * @instance
             */
            LoadCarResponse.prototype.challenger = null;

            /**
             * LoadCarResponse challengerReturnCount.
             * @member {number} challengerReturnCount
             * @memberof wm.protobuf.LoadCarResponse
             * @instance
             */
            LoadCarResponse.prototype.challengerReturnCount = 0;

            /**
             * LoadCarResponse numOfStampTargetCars.
             * @member {number} numOfStampTargetCars
             * @memberof wm.protobuf.LoadCarResponse
             * @instance
             */
            LoadCarResponse.prototype.numOfStampTargetCars = 0;

            /**
             * LoadCarResponse opponentGhost.
             * @member {wm.protobuf.IGhostCar|null|undefined} opponentGhost
             * @memberof wm.protobuf.LoadCarResponse
             * @instance
             */
            LoadCarResponse.prototype.opponentGhost = null;

            /**
             * LoadCarResponse opponentTrailId.
             * @member {number|Long} opponentTrailId
             * @memberof wm.protobuf.LoadCarResponse
             * @instance
             */
            LoadCarResponse.prototype.opponentTrailId = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

            /**
             * LoadCarResponse opponentCompetitionId.
             * @member {number} opponentCompetitionId
             * @memberof wm.protobuf.LoadCarResponse
             * @instance
             */
            LoadCarResponse.prototype.opponentCompetitionId = 0;

            /**
             * LoadCarResponse competitionParameter.
             * @member {wm.protobuf.IGhostCompetitionParameter|null|undefined} competitionParameter
             * @memberof wm.protobuf.LoadCarResponse
             * @instance
             */
            LoadCarResponse.prototype.competitionParameter = null;

            /**
             * LoadCarResponse specialTitles.
             * @member {Array.<string>} specialTitles
             * @memberof wm.protobuf.LoadCarResponse
             * @instance
             */
            LoadCarResponse.prototype.specialTitles = $util.emptyArray;

            /**
             * LoadCarResponse earnedTitles.
             * @member {Array.<string>} earnedTitles
             * @memberof wm.protobuf.LoadCarResponse
             * @instance
             */
            LoadCarResponse.prototype.earnedTitles = $util.emptyArray;

            /**
             * LoadCarResponse ownedItems.
             * @member {Array.<wm.protobuf.ICarItem>} ownedItems
             * @memberof wm.protobuf.LoadCarResponse
             * @instance
             */
            LoadCarResponse.prototype.ownedItems = $util.emptyArray;

            /**
             * LoadCarResponse auraMotifAutoChange.
             * @member {boolean} auraMotifAutoChange
             * @memberof wm.protobuf.LoadCarResponse
             * @instance
             */
            LoadCarResponse.prototype.auraMotifAutoChange = false;

            /**
             * LoadCarResponse screenshotCount.
             * @member {number} screenshotCount
             * @memberof wm.protobuf.LoadCarResponse
             * @instance
             */
            LoadCarResponse.prototype.screenshotCount = 0;

            /**
             * LoadCarResponse announceEventModePrize.
             * @member {boolean} announceEventModePrize
             * @memberof wm.protobuf.LoadCarResponse
             * @instance
             */
            LoadCarResponse.prototype.announceEventModePrize = false;

            /**
             * LoadCarResponse driveLastPlayedAt.
             * @member {number} driveLastPlayedAt
             * @memberof wm.protobuf.LoadCarResponse
             * @instance
             */
            LoadCarResponse.prototype.driveLastPlayedAt = 0;

            /**
             * LoadCarResponse insurance.
             * @member {wm.protobuf.LoadCarResponse.IStoryInsurance|null|undefined} insurance
             * @memberof wm.protobuf.LoadCarResponse
             * @instance
             */
            LoadCarResponse.prototype.insurance = null;

            /**
             * LoadCarResponse ghostExpeditionState.
             * @member {wm.protobuf.GhostExpeditionParticipantState} ghostExpeditionState
             * @memberof wm.protobuf.LoadCarResponse
             * @instance
             */
            LoadCarResponse.prototype.ghostExpeditionState = 1;

            /**
             * LoadCarResponse koshienPrize.
             * @member {Array.<wm.protobuf.ICarItem>} koshienPrize
             * @memberof wm.protobuf.LoadCarResponse
             * @instance
             */
            LoadCarResponse.prototype.koshienPrize = $util.emptyArray;

            /**
             * Creates a new LoadCarResponse instance using the specified properties.
             * @function create
             * @memberof wm.protobuf.LoadCarResponse
             * @static
             * @param {wm.protobuf.ILoadCarResponse=} [properties] Properties to set
             * @returns {wm.protobuf.LoadCarResponse} LoadCarResponse instance
             */
            LoadCarResponse.create = function create(properties) {
                return new LoadCarResponse(properties);
            };

            /**
             * Encodes the specified LoadCarResponse message. Does not implicitly {@link wm.protobuf.LoadCarResponse.verify|verify} messages.
             * @function encode
             * @memberof wm.protobuf.LoadCarResponse
             * @static
             * @param {wm.protobuf.ILoadCarResponse} message LoadCarResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LoadCarResponse.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
                $root.wm.protobuf.Car.encode(message.car, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.tuningPoint);
                writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.odometer);
                writer.uint32(/* id 7, wireType 0 =*/56).uint32(message.playCount);
                writer.uint32(/* id 8, wireType 0 =*/64).bool(message.earnedCustomColor);
                $root.wm.protobuf.CarSetting.encode(message.setting, writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();
                writer.uint32(/* id 12, wireType 0 =*/96).uint32(message.vsPlayCount);
                writer.uint32(/* id 13, wireType 0 =*/104).uint32(message.vsBurstCount);
                writer.uint32(/* id 14, wireType 0 =*/112).uint32(message.vsStarCount);
                writer.uint32(/* id 15, wireType 0 =*/120).uint32(message.vsStarCountMax);
                writer.uint32(/* id 16, wireType 0 =*/128).sint32(message.vsCoolOrWild);
                writer.uint32(/* id 17, wireType 0 =*/136).sint32(message.vsSmoothOrRough);
                writer.uint32(/* id 18, wireType 0 =*/144).uint32(message.vsTripleStarMedals);
                writer.uint32(/* id 19, wireType 0 =*/152).uint32(message.vsDoubleStarMedals);
                writer.uint32(/* id 20, wireType 0 =*/160).uint32(message.vsSingleStarMedals);
                writer.uint32(/* id 21, wireType 0 =*/168).uint32(message.vsPlainMedals);
                writer.uint32(/* id 22, wireType 0 =*/176).uint32(message.rgPlayCount);
                writer.uint32(/* id 23, wireType 0 =*/184).uint32(message.rgWinCount);
                writer.uint32(/* id 24, wireType 0 =*/192).uint32(message.rgTrophy);
                writer.uint32(/* id 25, wireType 0 =*/200).uint32(message.rgScore);
                if (message.rgRegionMapScore != null && message.rgRegionMapScore.length)
                    for (let i = 0; i < message.rgRegionMapScore.length; ++i)
                        writer.uint32(/* id 26, wireType 0 =*/208).uint32(message.rgRegionMapScore[i]);
                writer.uint32(/* id 27, wireType 0 =*/216).uint32(message.rgStamp);
                writer.uint32(/* id 28, wireType 0 =*/224).uint32(message.dressupLevel);
                writer.uint32(/* id 29, wireType 0 =*/232).uint32(message.dressupPoint);
                if (message.rgRegions != null && message.rgRegions.length)
                    for (let i = 0; i < message.rgRegions.length; ++i)
                        writer.uint32(/* id 30, wireType 0 =*/240).uint32(message.rgRegions[i]);
                writer.uint32(/* id 34, wireType 0 =*/272).uint32(message.stPlayCount);
                writer.uint32(/* id 35, wireType 0 =*/280).uint32(message.stClearBits);
                writer.uint32(/* id 36, wireType 0 =*/288).uint32(message.stClearDivCount);
                writer.uint32(/* id 37, wireType 0 =*/296).uint32(message.stClearCount);
                writer.uint32(/* id 38, wireType 0 =*/304).uint64(message.stLoseBits);
                writer.uint32(/* id 40, wireType 0 =*/320).uint32(message.stConsecutiveWins);
                writer.uint32(/* id 41, wireType 0 =*/328).uint32(message.stConsecutiveWinsMax);
                if (message.challenger != null && Object.hasOwnProperty.call(message, "challenger"))
                    $root.wm.protobuf.ChallengerCar.encode(message.challenger, writer.uint32(/* id 42, wireType 2 =*/338).fork()).ldelim();
                if (message.challengerReturnCount != null && Object.hasOwnProperty.call(message, "challengerReturnCount"))
                    writer.uint32(/* id 43, wireType 0 =*/344).uint32(message.challengerReturnCount);
                if (message.opponentGhost != null && Object.hasOwnProperty.call(message, "opponentGhost"))
                    $root.wm.protobuf.GhostCar.encode(message.opponentGhost, writer.uint32(/* id 44, wireType 2 =*/354).fork()).ldelim();
                if (message.opponentTrailId != null && Object.hasOwnProperty.call(message, "opponentTrailId"))
                    writer.uint32(/* id 45, wireType 0 =*/360).uint64(message.opponentTrailId);
                if (message.opponentCompetitionId != null && Object.hasOwnProperty.call(message, "opponentCompetitionId"))
                    writer.uint32(/* id 46, wireType 0 =*/368).uint32(message.opponentCompetitionId);
                if (message.competitionParameter != null && Object.hasOwnProperty.call(message, "competitionParameter"))
                    $root.wm.protobuf.GhostCompetitionParameter.encode(message.competitionParameter, writer.uint32(/* id 47, wireType 2 =*/378).fork()).ldelim();
                if (message.specialTitles != null && message.specialTitles.length)
                    for (let i = 0; i < message.specialTitles.length; ++i)
                        writer.uint32(/* id 48, wireType 2 =*/386).string(message.specialTitles[i]);
                if (message.earnedTitles != null && message.earnedTitles.length)
                    for (let i = 0; i < message.earnedTitles.length; ++i)
                        writer.uint32(/* id 49, wireType 2 =*/394).string(message.earnedTitles[i]);
                if (message.ownedItems != null && message.ownedItems.length)
                    for (let i = 0; i < message.ownedItems.length; ++i)
                        $root.wm.protobuf.CarItem.encode(message.ownedItems[i], writer.uint32(/* id 50, wireType 2 =*/402).fork()).ldelim();
                writer.uint32(/* id 51, wireType 0 =*/408).bool(message.auraMotifAutoChange);
                writer.uint32(/* id 53, wireType 0 =*/424).uint32(message.screenshotCount);
                if (message.announceEventModePrize != null && Object.hasOwnProperty.call(message, "announceEventModePrize"))
                    writer.uint32(/* id 58, wireType 0 =*/464).bool(message.announceEventModePrize);
                writer.uint32(/* id 59, wireType 0 =*/472).bool(message.rgAcquireAllCrowns);
                if (message.driveLastPlayedAt != null && Object.hasOwnProperty.call(message, "driveLastPlayedAt"))
                    writer.uint32(/* id 61, wireType 0 =*/488).uint32(message.driveLastPlayedAt);
                if (message.insurance != null && Object.hasOwnProperty.call(message, "insurance"))
                    $root.wm.protobuf.LoadCarResponse.StoryInsurance.encode(message.insurance, writer.uint32(/* id 62, wireType 2 =*/498).fork()).ldelim();
                writer.uint32(/* id 63, wireType 0 =*/504).bool(message.stCompleted_100Episodes);
                writer.uint32(/* id 64, wireType 0 =*/512).uint32(message.rgPreviousVersionPlayCount);
                if (message.ghostExpeditionState != null && Object.hasOwnProperty.call(message, "ghostExpeditionState"))
                    writer.uint32(/* id 65, wireType 0 =*/520).int32(message.ghostExpeditionState);
                if (message.rgExpeditionScore != null && Object.hasOwnProperty.call(message, "rgExpeditionScore"))
                    writer.uint32(/* id 66, wireType 0 =*/528).uint32(message.rgExpeditionScore);
                writer.uint32(/* id 67, wireType 0 =*/536).uint32(message.rgHighwayClearCount);
                writer.uint32(/* id 68, wireType 0 =*/544).uint32(message.rgHighwayPoint);
                writer.uint32(/* id 69, wireType 0 =*/552).uint32(message.rgHighwayStationClearBits);
                writer.uint32(/* id 70, wireType 0 =*/560).uint32(message.rgScoreVs_2);
                writer.uint32(/* id 71, wireType 0 =*/568).uint32(message.rgHighwayPreviousDice);
                if (message.numOfStampTargetCars != null && Object.hasOwnProperty.call(message, "numOfStampTargetCars"))
                    writer.uint32(/* id 72, wireType 0 =*/576).uint32(message.numOfStampTargetCars);
                if (message.koshienPrize != null && message.koshienPrize.length)
                    for (let i = 0; i < message.koshienPrize.length; ++i)
                        $root.wm.protobuf.CarItem.encode(message.koshienPrize[i], writer.uint32(/* id 73, wireType 2 =*/586).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified LoadCarResponse message, length delimited. Does not implicitly {@link wm.protobuf.LoadCarResponse.verify|verify} messages.
             * @function encodeDelimited
             * @memberof wm.protobuf.LoadCarResponse
             * @static
             * @param {wm.protobuf.ILoadCarResponse} message LoadCarResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LoadCarResponse.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a LoadCarResponse message from the specified reader or buffer.
             * @function decode
             * @memberof wm.protobuf.LoadCarResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {wm.protobuf.LoadCarResponse} LoadCarResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LoadCarResponse.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.wm.protobuf.LoadCarResponse();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.error = reader.int32();
                            break;
                        }
                    case 2: {
                            message.car = $root.wm.protobuf.Car.decode(reader, reader.uint32());
                            break;
                        }
                    case 3: {
                            message.tuningPoint = reader.uint32();
                            break;
                        }
                    case 6: {
                            message.odometer = reader.uint32();
                            break;
                        }
                    case 7: {
                            message.playCount = reader.uint32();
                            break;
                        }
                    case 8: {
                            message.earnedCustomColor = reader.bool();
                            break;
                        }
                    case 10: {
                            message.setting = $root.wm.protobuf.CarSetting.decode(reader, reader.uint32());
                            break;
                        }
                    case 12: {
                            message.vsPlayCount = reader.uint32();
                            break;
                        }
                    case 13: {
                            message.vsBurstCount = reader.uint32();
                            break;
                        }
                    case 14: {
                            message.vsStarCount = reader.uint32();
                            break;
                        }
                    case 15: {
                            message.vsStarCountMax = reader.uint32();
                            break;
                        }
                    case 16: {
                            message.vsCoolOrWild = reader.sint32();
                            break;
                        }
                    case 17: {
                            message.vsSmoothOrRough = reader.sint32();
                            break;
                        }
                    case 18: {
                            message.vsTripleStarMedals = reader.uint32();
                            break;
                        }
                    case 19: {
                            message.vsDoubleStarMedals = reader.uint32();
                            break;
                        }
                    case 20: {
                            message.vsSingleStarMedals = reader.uint32();
                            break;
                        }
                    case 21: {
                            message.vsPlainMedals = reader.uint32();
                            break;
                        }
                    case 22: {
                            message.rgPlayCount = reader.uint32();
                            break;
                        }
                    case 23: {
                            message.rgWinCount = reader.uint32();
                            break;
                        }
                    case 24: {
                            message.rgTrophy = reader.uint32();
                            break;
                        }
                    case 64: {
                            message.rgPreviousVersionPlayCount = reader.uint32();
                            break;
                        }
                    case 25: {
                            message.rgScore = reader.uint32();
                            break;
                        }
                    case 70: {
                            message.rgScoreVs_2 = reader.uint32();
                            break;
                        }
                    case 66: {
                            message.rgExpeditionScore = reader.uint32();
                            break;
                        }
                    case 26: {
                            if (!(message.rgRegionMapScore && message.rgRegionMapScore.length))
                                message.rgRegionMapScore = [];
                            if ((tag & 7) === 2) {
                                let end2 = reader.uint32() + reader.pos;
                                while (reader.pos < end2)
                                    message.rgRegionMapScore.push(reader.uint32());
                            } else
                                message.rgRegionMapScore.push(reader.uint32());
                            break;
                        }
                    case 30: {
                            if (!(message.rgRegions && message.rgRegions.length))
                                message.rgRegions = [];
                            if ((tag & 7) === 2) {
                                let end2 = reader.uint32() + reader.pos;
                                while (reader.pos < end2)
                                    message.rgRegions.push(reader.uint32());
                            } else
                                message.rgRegions.push(reader.uint32());
                            break;
                        }
                    case 27: {
                            message.rgStamp = reader.uint32();
                            break;
                        }
                    case 59: {
                            message.rgAcquireAllCrowns = reader.bool();
                            break;
                        }
                    case 67: {
                            message.rgHighwayClearCount = reader.uint32();
                            break;
                        }
                    case 68: {
                            message.rgHighwayPoint = reader.uint32();
                            break;
                        }
                    case 69: {
                            message.rgHighwayStationClearBits = reader.uint32();
                            break;
                        }
                    case 71: {
                            message.rgHighwayPreviousDice = reader.uint32();
                            break;
                        }
                    case 28: {
                            message.dressupLevel = reader.uint32();
                            break;
                        }
                    case 29: {
                            message.dressupPoint = reader.uint32();
                            break;
                        }
                    case 34: {
                            message.stPlayCount = reader.uint32();
                            break;
                        }
                    case 35: {
                            message.stClearBits = reader.uint32();
                            break;
                        }
                    case 36: {
                            message.stClearDivCount = reader.uint32();
                            break;
                        }
                    case 37: {
                            message.stClearCount = reader.uint32();
                            break;
                        }
                    case 38: {
                            message.stLoseBits = reader.uint64();
                            break;
                        }
                    case 40: {
                            message.stConsecutiveWins = reader.uint32();
                            break;
                        }
                    case 41: {
                            message.stConsecutiveWinsMax = reader.uint32();
                            break;
                        }
                    case 63: {
                            message.stCompleted_100Episodes = reader.bool();
                            break;
                        }
                    case 42: {
                            message.challenger = $root.wm.protobuf.ChallengerCar.decode(reader, reader.uint32());
                            break;
                        }
                    case 43: {
                            message.challengerReturnCount = reader.uint32();
                            break;
                        }
                    case 72: {
                            message.numOfStampTargetCars = reader.uint32();
                            break;
                        }
                    case 44: {
                            message.opponentGhost = $root.wm.protobuf.GhostCar.decode(reader, reader.uint32());
                            break;
                        }
                    case 45: {
                            message.opponentTrailId = reader.uint64();
                            break;
                        }
                    case 46: {
                            message.opponentCompetitionId = reader.uint32();
                            break;
                        }
                    case 47: {
                            message.competitionParameter = $root.wm.protobuf.GhostCompetitionParameter.decode(reader, reader.uint32());
                            break;
                        }
                    case 48: {
                            if (!(message.specialTitles && message.specialTitles.length))
                                message.specialTitles = [];
                            message.specialTitles.push(reader.string());
                            break;
                        }
                    case 49: {
                            if (!(message.earnedTitles && message.earnedTitles.length))
                                message.earnedTitles = [];
                            message.earnedTitles.push(reader.string());
                            break;
                        }
                    case 50: {
                            if (!(message.ownedItems && message.ownedItems.length))
                                message.ownedItems = [];
                            message.ownedItems.push($root.wm.protobuf.CarItem.decode(reader, reader.uint32()));
                            break;
                        }
                    case 51: {
                            message.auraMotifAutoChange = reader.bool();
                            break;
                        }
                    case 53: {
                            message.screenshotCount = reader.uint32();
                            break;
                        }
                    case 58: {
                            message.announceEventModePrize = reader.bool();
                            break;
                        }
                    case 61: {
                            message.driveLastPlayedAt = reader.uint32();
                            break;
                        }
                    case 62: {
                            message.insurance = $root.wm.protobuf.LoadCarResponse.StoryInsurance.decode(reader, reader.uint32());
                            break;
                        }
                    case 65: {
                            message.ghostExpeditionState = reader.int32();
                            break;
                        }
                    case 73: {
                            if (!(message.koshienPrize && message.koshienPrize.length))
                                message.koshienPrize = [];
                            message.koshienPrize.push($root.wm.protobuf.CarItem.decode(reader, reader.uint32()));
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("error"))
                    throw $util.ProtocolError("missing required 'error'", { instance: message });
                if (!message.hasOwnProperty("car"))
                    throw $util.ProtocolError("missing required 'car'", { instance: message });
                if (!message.hasOwnProperty("tuningPoint"))
                    throw $util.ProtocolError("missing required 'tuningPoint'", { instance: message });
                if (!message.hasOwnProperty("odometer"))
                    throw $util.ProtocolError("missing required 'odometer'", { instance: message });
                if (!message.hasOwnProperty("playCount"))
                    throw $util.ProtocolError("missing required 'playCount'", { instance: message });
                if (!message.hasOwnProperty("earnedCustomColor"))
                    throw $util.ProtocolError("missing required 'earnedCustomColor'", { instance: message });
                if (!message.hasOwnProperty("setting"))
                    throw $util.ProtocolError("missing required 'setting'", { instance: message });
                if (!message.hasOwnProperty("vsPlayCount"))
                    throw $util.ProtocolError("missing required 'vsPlayCount'", { instance: message });
                if (!message.hasOwnProperty("vsBurstCount"))
                    throw $util.ProtocolError("missing required 'vsBurstCount'", { instance: message });
                if (!message.hasOwnProperty("vsStarCount"))
                    throw $util.ProtocolError("missing required 'vsStarCount'", { instance: message });
                if (!message.hasOwnProperty("vsStarCountMax"))
                    throw $util.ProtocolError("missing required 'vsStarCountMax'", { instance: message });
                if (!message.hasOwnProperty("vsCoolOrWild"))
                    throw $util.ProtocolError("missing required 'vsCoolOrWild'", { instance: message });
                if (!message.hasOwnProperty("vsSmoothOrRough"))
                    throw $util.ProtocolError("missing required 'vsSmoothOrRough'", { instance: message });
                if (!message.hasOwnProperty("vsTripleStarMedals"))
                    throw $util.ProtocolError("missing required 'vsTripleStarMedals'", { instance: message });
                if (!message.hasOwnProperty("vsDoubleStarMedals"))
                    throw $util.ProtocolError("missing required 'vsDoubleStarMedals'", { instance: message });
                if (!message.hasOwnProperty("vsSingleStarMedals"))
                    throw $util.ProtocolError("missing required 'vsSingleStarMedals'", { instance: message });
                if (!message.hasOwnProperty("vsPlainMedals"))
                    throw $util.ProtocolError("missing required 'vsPlainMedals'", { instance: message });
                if (!message.hasOwnProperty("rgPlayCount"))
                    throw $util.ProtocolError("missing required 'rgPlayCount'", { instance: message });
                if (!message.hasOwnProperty("rgWinCount"))
                    throw $util.ProtocolError("missing required 'rgWinCount'", { instance: message });
                if (!message.hasOwnProperty("rgTrophy"))
                    throw $util.ProtocolError("missing required 'rgTrophy'", { instance: message });
                if (!message.hasOwnProperty("rgPreviousVersionPlayCount"))
                    throw $util.ProtocolError("missing required 'rgPreviousVersionPlayCount'", { instance: message });
                if (!message.hasOwnProperty("rgScore"))
                    throw $util.ProtocolError("missing required 'rgScore'", { instance: message });
                if (!message.hasOwnProperty("rgScoreVs_2"))
                    throw $util.ProtocolError("missing required 'rgScoreVs_2'", { instance: message });
                if (!message.hasOwnProperty("rgStamp"))
                    throw $util.ProtocolError("missing required 'rgStamp'", { instance: message });
                if (!message.hasOwnProperty("rgAcquireAllCrowns"))
                    throw $util.ProtocolError("missing required 'rgAcquireAllCrowns'", { instance: message });
                if (!message.hasOwnProperty("rgHighwayClearCount"))
                    throw $util.ProtocolError("missing required 'rgHighwayClearCount'", { instance: message });
                if (!message.hasOwnProperty("rgHighwayPoint"))
                    throw $util.ProtocolError("missing required 'rgHighwayPoint'", { instance: message });
                if (!message.hasOwnProperty("rgHighwayStationClearBits"))
                    throw $util.ProtocolError("missing required 'rgHighwayStationClearBits'", { instance: message });
                if (!message.hasOwnProperty("rgHighwayPreviousDice"))
                    throw $util.ProtocolError("missing required 'rgHighwayPreviousDice'", { instance: message });
                if (!message.hasOwnProperty("dressupLevel"))
                    throw $util.ProtocolError("missing required 'dressupLevel'", { instance: message });
                if (!message.hasOwnProperty("dressupPoint"))
                    throw $util.ProtocolError("missing required 'dressupPoint'", { instance: message });
                if (!message.hasOwnProperty("stPlayCount"))
                    throw $util.ProtocolError("missing required 'stPlayCount'", { instance: message });
                if (!message.hasOwnProperty("stClearBits"))
                    throw $util.ProtocolError("missing required 'stClearBits'", { instance: message });
                if (!message.hasOwnProperty("stClearDivCount"))
                    throw $util.ProtocolError("missing required 'stClearDivCount'", { instance: message });
                if (!message.hasOwnProperty("stClearCount"))
                    throw $util.ProtocolError("missing required 'stClearCount'", { instance: message });
                if (!message.hasOwnProperty("stLoseBits"))
                    throw $util.ProtocolError("missing required 'stLoseBits'", { instance: message });
                if (!message.hasOwnProperty("stConsecutiveWins"))
                    throw $util.ProtocolError("missing required 'stConsecutiveWins'", { instance: message });
                if (!message.hasOwnProperty("stConsecutiveWinsMax"))
                    throw $util.ProtocolError("missing required 'stConsecutiveWinsMax'", { instance: message });
                if (!message.hasOwnProperty("stCompleted_100Episodes"))
                    throw $util.ProtocolError("missing required 'stCompleted_100Episodes'", { instance: message });
                if (!message.hasOwnProperty("auraMotifAutoChange"))
                    throw $util.ProtocolError("missing required 'auraMotifAutoChange'", { instance: message });
                if (!message.hasOwnProperty("screenshotCount"))
                    throw $util.ProtocolError("missing required 'screenshotCount'", { instance: message });
                return message;
            };

            /**
             * Decodes a LoadCarResponse message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof wm.protobuf.LoadCarResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {wm.protobuf.LoadCarResponse} LoadCarResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LoadCarResponse.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a LoadCarResponse message.
             * @function verify
             * @memberof wm.protobuf.LoadCarResponse
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            LoadCarResponse.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                switch (message.error) {
                default:
                    return "error: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 7:
                case 9:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 16:
                case 17:
                case 18:
                case 19:
                    break;
                }
                {
                    let error = $root.wm.protobuf.Car.verify(message.car);
                    if (error)
                        return "car." + error;
                }
                if (!$util.isInteger(message.tuningPoint))
                    return "tuningPoint: integer expected";
                if (!$util.isInteger(message.odometer))
                    return "odometer: integer expected";
                if (!$util.isInteger(message.playCount))
                    return "playCount: integer expected";
                if (typeof message.earnedCustomColor !== "boolean")
                    return "earnedCustomColor: boolean expected";
                {
                    let error = $root.wm.protobuf.CarSetting.verify(message.setting);
                    if (error)
                        return "setting." + error;
                }
                if (!$util.isInteger(message.vsPlayCount))
                    return "vsPlayCount: integer expected";
                if (!$util.isInteger(message.vsBurstCount))
                    return "vsBurstCount: integer expected";
                if (!$util.isInteger(message.vsStarCount))
                    return "vsStarCount: integer expected";
                if (!$util.isInteger(message.vsStarCountMax))
                    return "vsStarCountMax: integer expected";
                if (!$util.isInteger(message.vsCoolOrWild))
                    return "vsCoolOrWild: integer expected";
                if (!$util.isInteger(message.vsSmoothOrRough))
                    return "vsSmoothOrRough: integer expected";
                if (!$util.isInteger(message.vsTripleStarMedals))
                    return "vsTripleStarMedals: integer expected";
                if (!$util.isInteger(message.vsDoubleStarMedals))
                    return "vsDoubleStarMedals: integer expected";
                if (!$util.isInteger(message.vsSingleStarMedals))
                    return "vsSingleStarMedals: integer expected";
                if (!$util.isInteger(message.vsPlainMedals))
                    return "vsPlainMedals: integer expected";
                if (!$util.isInteger(message.rgPlayCount))
                    return "rgPlayCount: integer expected";
                if (!$util.isInteger(message.rgWinCount))
                    return "rgWinCount: integer expected";
                if (!$util.isInteger(message.rgTrophy))
                    return "rgTrophy: integer expected";
                if (!$util.isInteger(message.rgPreviousVersionPlayCount))
                    return "rgPreviousVersionPlayCount: integer expected";
                if (!$util.isInteger(message.rgScore))
                    return "rgScore: integer expected";
                if (!$util.isInteger(message.rgScoreVs_2))
                    return "rgScoreVs_2: integer expected";
                if (message.rgExpeditionScore != null && message.hasOwnProperty("rgExpeditionScore"))
                    if (!$util.isInteger(message.rgExpeditionScore))
                        return "rgExpeditionScore: integer expected";
                if (message.rgRegionMapScore != null && message.hasOwnProperty("rgRegionMapScore")) {
                    if (!Array.isArray(message.rgRegionMapScore))
                        return "rgRegionMapScore: array expected";
                    for (let i = 0; i < message.rgRegionMapScore.length; ++i)
                        if (!$util.isInteger(message.rgRegionMapScore[i]))
                            return "rgRegionMapScore: integer[] expected";
                }
                if (message.rgRegions != null && message.hasOwnProperty("rgRegions")) {
                    if (!Array.isArray(message.rgRegions))
                        return "rgRegions: array expected";
                    for (let i = 0; i < message.rgRegions.length; ++i)
                        if (!$util.isInteger(message.rgRegions[i]))
                            return "rgRegions: integer[] expected";
                }
                if (!$util.isInteger(message.rgStamp))
                    return "rgStamp: integer expected";
                if (typeof message.rgAcquireAllCrowns !== "boolean")
                    return "rgAcquireAllCrowns: boolean expected";
                if (!$util.isInteger(message.rgHighwayClearCount))
                    return "rgHighwayClearCount: integer expected";
                if (!$util.isInteger(message.rgHighwayPoint))
                    return "rgHighwayPoint: integer expected";
                if (!$util.isInteger(message.rgHighwayStationClearBits))
                    return "rgHighwayStationClearBits: integer expected";
                if (!$util.isInteger(message.rgHighwayPreviousDice))
                    return "rgHighwayPreviousDice: integer expected";
                if (!$util.isInteger(message.dressupLevel))
                    return "dressupLevel: integer expected";
                if (!$util.isInteger(message.dressupPoint))
                    return "dressupPoint: integer expected";
                if (!$util.isInteger(message.stPlayCount))
                    return "stPlayCount: integer expected";
                if (!$util.isInteger(message.stClearBits))
                    return "stClearBits: integer expected";
                if (!$util.isInteger(message.stClearDivCount))
                    return "stClearDivCount: integer expected";
                if (!$util.isInteger(message.stClearCount))
                    return "stClearCount: integer expected";
                if (!$util.isInteger(message.stLoseBits) && !(message.stLoseBits && $util.isInteger(message.stLoseBits.low) && $util.isInteger(message.stLoseBits.high)))
                    return "stLoseBits: integer|Long expected";
                if (!$util.isInteger(message.stConsecutiveWins))
                    return "stConsecutiveWins: integer expected";
                if (!$util.isInteger(message.stConsecutiveWinsMax))
                    return "stConsecutiveWinsMax: integer expected";
                if (typeof message.stCompleted_100Episodes !== "boolean")
                    return "stCompleted_100Episodes: boolean expected";
                if (message.challenger != null && message.hasOwnProperty("challenger")) {
                    let error = $root.wm.protobuf.ChallengerCar.verify(message.challenger);
                    if (error)
                        return "challenger." + error;
                }
                if (message.challengerReturnCount != null && message.hasOwnProperty("challengerReturnCount"))
                    if (!$util.isInteger(message.challengerReturnCount))
                        return "challengerReturnCount: integer expected";
                if (message.numOfStampTargetCars != null && message.hasOwnProperty("numOfStampTargetCars"))
                    if (!$util.isInteger(message.numOfStampTargetCars))
                        return "numOfStampTargetCars: integer expected";
                if (message.opponentGhost != null && message.hasOwnProperty("opponentGhost")) {
                    let error = $root.wm.protobuf.GhostCar.verify(message.opponentGhost);
                    if (error)
                        return "opponentGhost." + error;
                }
                if (message.opponentTrailId != null && message.hasOwnProperty("opponentTrailId"))
                    if (!$util.isInteger(message.opponentTrailId) && !(message.opponentTrailId && $util.isInteger(message.opponentTrailId.low) && $util.isInteger(message.opponentTrailId.high)))
                        return "opponentTrailId: integer|Long expected";
                if (message.opponentCompetitionId != null && message.hasOwnProperty("opponentCompetitionId"))
                    if (!$util.isInteger(message.opponentCompetitionId))
                        return "opponentCompetitionId: integer expected";
                if (message.competitionParameter != null && message.hasOwnProperty("competitionParameter")) {
                    let error = $root.wm.protobuf.GhostCompetitionParameter.verify(message.competitionParameter);
                    if (error)
                        return "competitionParameter." + error;
                }
                if (message.specialTitles != null && message.hasOwnProperty("specialTitles")) {
                    if (!Array.isArray(message.specialTitles))
                        return "specialTitles: array expected";
                    for (let i = 0; i < message.specialTitles.length; ++i)
                        if (!$util.isString(message.specialTitles[i]))
                            return "specialTitles: string[] expected";
                }
                if (message.earnedTitles != null && message.hasOwnProperty("earnedTitles")) {
                    if (!Array.isArray(message.earnedTitles))
                        return "earnedTitles: array expected";
                    for (let i = 0; i < message.earnedTitles.length; ++i)
                        if (!$util.isString(message.earnedTitles[i]))
                            return "earnedTitles: string[] expected";
                }
                if (message.ownedItems != null && message.hasOwnProperty("ownedItems")) {
                    if (!Array.isArray(message.ownedItems))
                        return "ownedItems: array expected";
                    for (let i = 0; i < message.ownedItems.length; ++i) {
                        let error = $root.wm.protobuf.CarItem.verify(message.ownedItems[i]);
                        if (error)
                            return "ownedItems." + error;
                    }
                }
                if (typeof message.auraMotifAutoChange !== "boolean")
                    return "auraMotifAutoChange: boolean expected";
                if (!$util.isInteger(message.screenshotCount))
                    return "screenshotCount: integer expected";
                if (message.announceEventModePrize != null && message.hasOwnProperty("announceEventModePrize"))
                    if (typeof message.announceEventModePrize !== "boolean")
                        return "announceEventModePrize: boolean expected";
                if (message.driveLastPlayedAt != null && message.hasOwnProperty("driveLastPlayedAt"))
                    if (!$util.isInteger(message.driveLastPlayedAt))
                        return "driveLastPlayedAt: integer expected";
                if (message.insurance != null && message.hasOwnProperty("insurance")) {
                    let error = $root.wm.protobuf.LoadCarResponse.StoryInsurance.verify(message.insurance);
                    if (error)
                        return "insurance." + error;
                }
                if (message.ghostExpeditionState != null && message.hasOwnProperty("ghostExpeditionState"))
                    switch (message.ghostExpeditionState) {
                    default:
                        return "ghostExpeditionState: enum value expected";
                    case 1:
                    case 2:
                    case 3:
                        break;
                    }
                if (message.koshienPrize != null && message.hasOwnProperty("koshienPrize")) {
                    if (!Array.isArray(message.koshienPrize))
                        return "koshienPrize: array expected";
                    for (let i = 0; i < message.koshienPrize.length; ++i) {
                        let error = $root.wm.protobuf.CarItem.verify(message.koshienPrize[i]);
                        if (error)
                            return "koshienPrize." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a LoadCarResponse message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof wm.protobuf.LoadCarResponse
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {wm.protobuf.LoadCarResponse} LoadCarResponse
             */
            LoadCarResponse.fromObject = function fromObject(object) {
                if (object instanceof $root.wm.protobuf.LoadCarResponse)
                    return object;
                let message = new $root.wm.protobuf.LoadCarResponse();
                switch (object.error) {
                default:
                    if (typeof object.error === "number") {
                        message.error = object.error;
                        break;
                    }
                    break;
                case "ERR_SUCCESS":
                case 0:
                    message.error = 0;
                    break;
                case "ERR_REQUEST":
                case 1:
                    message.error = 1;
                    break;
                case "ERR_NOT_FOUND":
                case 2:
                    message.error = 2;
                    break;
                case "ERR_ID_SERVER":
                case 3:
                    message.error = 3;
                    break;
                case "ERR_ID_BANNED":
                case 4:
                    message.error = 4;
                    break;
                case "ERR_USER_LOCKED":
                case 5:
                    message.error = 5;
                    break;
                case "ERR_USER_VERSION":
                case 6:
                    message.error = 6;
                    break;
                case "ERR_NAME_CONFLICTED":
                case 7:
                    message.error = 7;
                    break;
                case "ERR_FORBIDDEN":
                case 9:
                    message.error = 9;
                    break;
                case "ERR_USER_SUCCEEDED":
                case 11:
                    message.error = 11;
                    break;
                case "ERR_BEING_TRANSFERRED":
                case 12:
                    message.error = 12;
                    break;
                case "ERR_SCRATCH_LOCKED":
                case 13:
                    message.error = 13;
                    break;
                case "ERR_BINGO_REVENGE_LOCKED":
                case 14:
                    message.error = 14;
                    break;
                case "ERR_BINGO_ALREDY_LINKED":
                case 15:
                    message.error = 15;
                    break;
                case "ERR_BINGO_FINISHED":
                case 16:
                    message.error = 16;
                    break;
                case "ERR_BINGO_REACHED_MAX_USER":
                case 17:
                    message.error = 17;
                    break;
                case "ERR_CAR_NOT_FOUND":
                case 18:
                    message.error = 18;
                    break;
                case "ERR_BINGO_CARD_NOT_FOUND":
                case 19:
                    message.error = 19;
                    break;
                }
                if (object.car != null) {
                    if (typeof object.car !== "object")
                        throw TypeError(".wm.protobuf.LoadCarResponse.car: object expected");
                    message.car = $root.wm.protobuf.Car.fromObject(object.car);
                }
                if (object.tuningPoint != null)
                    message.tuningPoint = object.tuningPoint >>> 0;
                if (object.odometer != null)
                    message.odometer = object.odometer >>> 0;
                if (object.playCount != null)
                    message.playCount = object.playCount >>> 0;
                if (object.earnedCustomColor != null)
                    message.earnedCustomColor = Boolean(object.earnedCustomColor);
                if (object.setting != null) {
                    if (typeof object.setting !== "object")
                        throw TypeError(".wm.protobuf.LoadCarResponse.setting: object expected");
                    message.setting = $root.wm.protobuf.CarSetting.fromObject(object.setting);
                }
                if (object.vsPlayCount != null)
                    message.vsPlayCount = object.vsPlayCount >>> 0;
                if (object.vsBurstCount != null)
                    message.vsBurstCount = object.vsBurstCount >>> 0;
                if (object.vsStarCount != null)
                    message.vsStarCount = object.vsStarCount >>> 0;
                if (object.vsStarCountMax != null)
                    message.vsStarCountMax = object.vsStarCountMax >>> 0;
                if (object.vsCoolOrWild != null)
                    message.vsCoolOrWild = object.vsCoolOrWild | 0;
                if (object.vsSmoothOrRough != null)
                    message.vsSmoothOrRough = object.vsSmoothOrRough | 0;
                if (object.vsTripleStarMedals != null)
                    message.vsTripleStarMedals = object.vsTripleStarMedals >>> 0;
                if (object.vsDoubleStarMedals != null)
                    message.vsDoubleStarMedals = object.vsDoubleStarMedals >>> 0;
                if (object.vsSingleStarMedals != null)
                    message.vsSingleStarMedals = object.vsSingleStarMedals >>> 0;
                if (object.vsPlainMedals != null)
                    message.vsPlainMedals = object.vsPlainMedals >>> 0;
                if (object.rgPlayCount != null)
                    message.rgPlayCount = object.rgPlayCount >>> 0;
                if (object.rgWinCount != null)
                    message.rgWinCount = object.rgWinCount >>> 0;
                if (object.rgTrophy != null)
                    message.rgTrophy = object.rgTrophy >>> 0;
                if (object.rgPreviousVersionPlayCount != null)
                    message.rgPreviousVersionPlayCount = object.rgPreviousVersionPlayCount >>> 0;
                if (object.rgScore != null)
                    message.rgScore = object.rgScore >>> 0;
                if (object.rgScoreVs_2 != null)
                    message.rgScoreVs_2 = object.rgScoreVs_2 >>> 0;
                if (object.rgExpeditionScore != null)
                    message.rgExpeditionScore = object.rgExpeditionScore >>> 0;
                if (object.rgRegionMapScore) {
                    if (!Array.isArray(object.rgRegionMapScore))
                        throw TypeError(".wm.protobuf.LoadCarResponse.rgRegionMapScore: array expected");
                    message.rgRegionMapScore = [];
                    for (let i = 0; i < object.rgRegionMapScore.length; ++i)
                        message.rgRegionMapScore[i] = object.rgRegionMapScore[i] >>> 0;
                }
                if (object.rgRegions) {
                    if (!Array.isArray(object.rgRegions))
                        throw TypeError(".wm.protobuf.LoadCarResponse.rgRegions: array expected");
                    message.rgRegions = [];
                    for (let i = 0; i < object.rgRegions.length; ++i)
                        message.rgRegions[i] = object.rgRegions[i] >>> 0;
                }
                if (object.rgStamp != null)
                    message.rgStamp = object.rgStamp >>> 0;
                if (object.rgAcquireAllCrowns != null)
                    message.rgAcquireAllCrowns = Boolean(object.rgAcquireAllCrowns);
                if (object.rgHighwayClearCount != null)
                    message.rgHighwayClearCount = object.rgHighwayClearCount >>> 0;
                if (object.rgHighwayPoint != null)
                    message.rgHighwayPoint = object.rgHighwayPoint >>> 0;
                if (object.rgHighwayStationClearBits != null)
                    message.rgHighwayStationClearBits = object.rgHighwayStationClearBits >>> 0;
                if (object.rgHighwayPreviousDice != null)
                    message.rgHighwayPreviousDice = object.rgHighwayPreviousDice >>> 0;
                if (object.dressupLevel != null)
                    message.dressupLevel = object.dressupLevel >>> 0;
                if (object.dressupPoint != null)
                    message.dressupPoint = object.dressupPoint >>> 0;
                if (object.stPlayCount != null)
                    message.stPlayCount = object.stPlayCount >>> 0;
                if (object.stClearBits != null)
                    message.stClearBits = object.stClearBits >>> 0;
                if (object.stClearDivCount != null)
                    message.stClearDivCount = object.stClearDivCount >>> 0;
                if (object.stClearCount != null)
                    message.stClearCount = object.stClearCount >>> 0;
                if (object.stLoseBits != null)
                    if ($util.Long)
                        (message.stLoseBits = $util.Long.fromValue(object.stLoseBits)).unsigned = true;
                    else if (typeof object.stLoseBits === "string")
                        message.stLoseBits = parseInt(object.stLoseBits, 10);
                    else if (typeof object.stLoseBits === "number")
                        message.stLoseBits = object.stLoseBits;
                    else if (typeof object.stLoseBits === "object")
                        message.stLoseBits = new $util.LongBits(object.stLoseBits.low >>> 0, object.stLoseBits.high >>> 0).toNumber(true);
                if (object.stConsecutiveWins != null)
                    message.stConsecutiveWins = object.stConsecutiveWins >>> 0;
                if (object.stConsecutiveWinsMax != null)
                    message.stConsecutiveWinsMax = object.stConsecutiveWinsMax >>> 0;
                if (object.stCompleted_100Episodes != null)
                    message.stCompleted_100Episodes = Boolean(object.stCompleted_100Episodes);
                if (object.challenger != null) {
                    if (typeof object.challenger !== "object")
                        throw TypeError(".wm.protobuf.LoadCarResponse.challenger: object expected");
                    message.challenger = $root.wm.protobuf.ChallengerCar.fromObject(object.challenger);
                }
                if (object.challengerReturnCount != null)
                    message.challengerReturnCount = object.challengerReturnCount >>> 0;
                if (object.numOfStampTargetCars != null)
                    message.numOfStampTargetCars = object.numOfStampTargetCars >>> 0;
                if (object.opponentGhost != null) {
                    if (typeof object.opponentGhost !== "object")
                        throw TypeError(".wm.protobuf.LoadCarResponse.opponentGhost: object expected");
                    message.opponentGhost = $root.wm.protobuf.GhostCar.fromObject(object.opponentGhost);
                }
                if (object.opponentTrailId != null)
                    if ($util.Long)
                        (message.opponentTrailId = $util.Long.fromValue(object.opponentTrailId)).unsigned = true;
                    else if (typeof object.opponentTrailId === "string")
                        message.opponentTrailId = parseInt(object.opponentTrailId, 10);
                    else if (typeof object.opponentTrailId === "number")
                        message.opponentTrailId = object.opponentTrailId;
                    else if (typeof object.opponentTrailId === "object")
                        message.opponentTrailId = new $util.LongBits(object.opponentTrailId.low >>> 0, object.opponentTrailId.high >>> 0).toNumber(true);
                if (object.opponentCompetitionId != null)
                    message.opponentCompetitionId = object.opponentCompetitionId >>> 0;
                if (object.competitionParameter != null) {
                    if (typeof object.competitionParameter !== "object")
                        throw TypeError(".wm.protobuf.LoadCarResponse.competitionParameter: object expected");
                    message.competitionParameter = $root.wm.protobuf.GhostCompetitionParameter.fromObject(object.competitionParameter);
                }
                if (object.specialTitles) {
                    if (!Array.isArray(object.specialTitles))
                        throw TypeError(".wm.protobuf.LoadCarResponse.specialTitles: array expected");
                    message.specialTitles = [];
                    for (let i = 0; i < object.specialTitles.length; ++i)
                        message.specialTitles[i] = String(object.specialTitles[i]);
                }
                if (object.earnedTitles) {
                    if (!Array.isArray(object.earnedTitles))
                        throw TypeError(".wm.protobuf.LoadCarResponse.earnedTitles: array expected");
                    message.earnedTitles = [];
                    for (let i = 0; i < object.earnedTitles.length; ++i)
                        message.earnedTitles[i] = String(object.earnedTitles[i]);
                }
                if (object.ownedItems) {
                    if (!Array.isArray(object.ownedItems))
                        throw TypeError(".wm.protobuf.LoadCarResponse.ownedItems: array expected");
                    message.ownedItems = [];
                    for (let i = 0; i < object.ownedItems.length; ++i) {
                        if (typeof object.ownedItems[i] !== "object")
                            throw TypeError(".wm.protobuf.LoadCarResponse.ownedItems: object expected");
                        message.ownedItems[i] = $root.wm.protobuf.CarItem.fromObject(object.ownedItems[i]);
                    }
                }
                if (object.auraMotifAutoChange != null)
                    message.auraMotifAutoChange = Boolean(object.auraMotifAutoChange);
                if (object.screenshotCount != null)
                    message.screenshotCount = object.screenshotCount >>> 0;
                if (object.announceEventModePrize != null)
                    message.announceEventModePrize = Boolean(object.announceEventModePrize);
                if (object.driveLastPlayedAt != null)
                    message.driveLastPlayedAt = object.driveLastPlayedAt >>> 0;
                if (object.insurance != null) {
                    if (typeof object.insurance !== "object")
                        throw TypeError(".wm.protobuf.LoadCarResponse.insurance: object expected");
                    message.insurance = $root.wm.protobuf.LoadCarResponse.StoryInsurance.fromObject(object.insurance);
                }
                switch (object.ghostExpeditionState) {
                default:
                    if (typeof object.ghostExpeditionState === "number") {
                        message.ghostExpeditionState = object.ghostExpeditionState;
                        break;
                    }
                    break;
                case "EXPEDITION_NOT_PARTICIPATED":
                case 1:
                    message.ghostExpeditionState = 1;
                    break;
                case "EXPEDITION_PARTICIPATED":
                case 2:
                    message.ghostExpeditionState = 2;
                    break;
                case "EXPEDITION_RESULT_CONFIRMED":
                case 3:
                    message.ghostExpeditionState = 3;
                    break;
                }
                if (object.koshienPrize) {
                    if (!Array.isArray(object.koshienPrize))
                        throw TypeError(".wm.protobuf.LoadCarResponse.koshienPrize: array expected");
                    message.koshienPrize = [];
                    for (let i = 0; i < object.koshienPrize.length; ++i) {
                        if (typeof object.koshienPrize[i] !== "object")
                            throw TypeError(".wm.protobuf.LoadCarResponse.koshienPrize: object expected");
                        message.koshienPrize[i] = $root.wm.protobuf.CarItem.fromObject(object.koshienPrize[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from a LoadCarResponse message. Also converts values to other types if specified.
             * @function toObject
             * @memberof wm.protobuf.LoadCarResponse
             * @static
             * @param {wm.protobuf.LoadCarResponse} message LoadCarResponse
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            LoadCarResponse.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults) {
                    object.rgRegionMapScore = [];
                    object.rgRegions = [];
                    object.specialTitles = [];
                    object.earnedTitles = [];
                    object.ownedItems = [];
                    object.koshienPrize = [];
                }
                if (options.defaults) {
                    object.error = options.enums === String ? "ERR_SUCCESS" : 0;
                    object.car = null;
                    object.tuningPoint = 0;
                    object.odometer = 0;
                    object.playCount = 0;
                    object.earnedCustomColor = false;
                    object.setting = null;
                    object.vsPlayCount = 0;
                    object.vsBurstCount = 0;
                    object.vsStarCount = 0;
                    object.vsStarCountMax = 0;
                    object.vsCoolOrWild = 0;
                    object.vsSmoothOrRough = 0;
                    object.vsTripleStarMedals = 0;
                    object.vsDoubleStarMedals = 0;
                    object.vsSingleStarMedals = 0;
                    object.vsPlainMedals = 0;
                    object.rgPlayCount = 0;
                    object.rgWinCount = 0;
                    object.rgTrophy = 0;
                    object.rgScore = 0;
                    object.rgStamp = 0;
                    object.dressupLevel = 0;
                    object.dressupPoint = 0;
                    object.stPlayCount = 0;
                    object.stClearBits = 0;
                    object.stClearDivCount = 0;
                    object.stClearCount = 0;
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, true);
                        object.stLoseBits = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.stLoseBits = options.longs === String ? "0" : 0;
                    object.stConsecutiveWins = 0;
                    object.stConsecutiveWinsMax = 0;
                    object.challenger = null;
                    object.challengerReturnCount = 0;
                    object.opponentGhost = null;
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, true);
                        object.opponentTrailId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.opponentTrailId = options.longs === String ? "0" : 0;
                    object.opponentCompetitionId = 0;
                    object.competitionParameter = null;
                    object.auraMotifAutoChange = false;
                    object.screenshotCount = 0;
                    object.announceEventModePrize = false;
                    object.rgAcquireAllCrowns = false;
                    object.driveLastPlayedAt = 0;
                    object.insurance = null;
                    object.stCompleted_100Episodes = false;
                    object.rgPreviousVersionPlayCount = 0;
                    object.ghostExpeditionState = options.enums === String ? "EXPEDITION_NOT_PARTICIPATED" : 1;
                    object.rgExpeditionScore = 0;
                    object.rgHighwayClearCount = 0;
                    object.rgHighwayPoint = 0;
                    object.rgHighwayStationClearBits = 0;
                    object.rgScoreVs_2 = 0;
                    object.rgHighwayPreviousDice = 0;
                    object.numOfStampTargetCars = 0;
                }
                if (message.error != null && message.hasOwnProperty("error"))
                    object.error = options.enums === String ? $root.wm.protobuf.ErrorCode[message.error] === undefined ? message.error : $root.wm.protobuf.ErrorCode[message.error] : message.error;
                if (message.car != null && message.hasOwnProperty("car"))
                    object.car = $root.wm.protobuf.Car.toObject(message.car, options);
                if (message.tuningPoint != null && message.hasOwnProperty("tuningPoint"))
                    object.tuningPoint = message.tuningPoint;
                if (message.odometer != null && message.hasOwnProperty("odometer"))
                    object.odometer = message.odometer;
                if (message.playCount != null && message.hasOwnProperty("playCount"))
                    object.playCount = message.playCount;
                if (message.earnedCustomColor != null && message.hasOwnProperty("earnedCustomColor"))
                    object.earnedCustomColor = message.earnedCustomColor;
                if (message.setting != null && message.hasOwnProperty("setting"))
                    object.setting = $root.wm.protobuf.CarSetting.toObject(message.setting, options);
                if (message.vsPlayCount != null && message.hasOwnProperty("vsPlayCount"))
                    object.vsPlayCount = message.vsPlayCount;
                if (message.vsBurstCount != null && message.hasOwnProperty("vsBurstCount"))
                    object.vsBurstCount = message.vsBurstCount;
                if (message.vsStarCount != null && message.hasOwnProperty("vsStarCount"))
                    object.vsStarCount = message.vsStarCount;
                if (message.vsStarCountMax != null && message.hasOwnProperty("vsStarCountMax"))
                    object.vsStarCountMax = message.vsStarCountMax;
                if (message.vsCoolOrWild != null && message.hasOwnProperty("vsCoolOrWild"))
                    object.vsCoolOrWild = message.vsCoolOrWild;
                if (message.vsSmoothOrRough != null && message.hasOwnProperty("vsSmoothOrRough"))
                    object.vsSmoothOrRough = message.vsSmoothOrRough;
                if (message.vsTripleStarMedals != null && message.hasOwnProperty("vsTripleStarMedals"))
                    object.vsTripleStarMedals = message.vsTripleStarMedals;
                if (message.vsDoubleStarMedals != null && message.hasOwnProperty("vsDoubleStarMedals"))
                    object.vsDoubleStarMedals = message.vsDoubleStarMedals;
                if (message.vsSingleStarMedals != null && message.hasOwnProperty("vsSingleStarMedals"))
                    object.vsSingleStarMedals = message.vsSingleStarMedals;
                if (message.vsPlainMedals != null && message.hasOwnProperty("vsPlainMedals"))
                    object.vsPlainMedals = message.vsPlainMedals;
                if (message.rgPlayCount != null && message.hasOwnProperty("rgPlayCount"))
                    object.rgPlayCount = message.rgPlayCount;
                if (message.rgWinCount != null && message.hasOwnProperty("rgWinCount"))
                    object.rgWinCount = message.rgWinCount;
                if (message.rgTrophy != null && message.hasOwnProperty("rgTrophy"))
                    object.rgTrophy = message.rgTrophy;
                if (message.rgScore != null && message.hasOwnProperty("rgScore"))
                    object.rgScore = message.rgScore;
                if (message.rgRegionMapScore && message.rgRegionMapScore.length) {
                    object.rgRegionMapScore = [];
                    for (let j = 0; j < message.rgRegionMapScore.length; ++j)
                        object.rgRegionMapScore[j] = message.rgRegionMapScore[j];
                }
                if (message.rgStamp != null && message.hasOwnProperty("rgStamp"))
                    object.rgStamp = message.rgStamp;
                if (message.dressupLevel != null && message.hasOwnProperty("dressupLevel"))
                    object.dressupLevel = message.dressupLevel;
                if (message.dressupPoint != null && message.hasOwnProperty("dressupPoint"))
                    object.dressupPoint = message.dressupPoint;
                if (message.rgRegions && message.rgRegions.length) {
                    object.rgRegions = [];
                    for (let j = 0; j < message.rgRegions.length; ++j)
                        object.rgRegions[j] = message.rgRegions[j];
                }
                if (message.stPlayCount != null && message.hasOwnProperty("stPlayCount"))
                    object.stPlayCount = message.stPlayCount;
                if (message.stClearBits != null && message.hasOwnProperty("stClearBits"))
                    object.stClearBits = message.stClearBits;
                if (message.stClearDivCount != null && message.hasOwnProperty("stClearDivCount"))
                    object.stClearDivCount = message.stClearDivCount;
                if (message.stClearCount != null && message.hasOwnProperty("stClearCount"))
                    object.stClearCount = message.stClearCount;
                if (message.stLoseBits != null && message.hasOwnProperty("stLoseBits"))
                    if (typeof message.stLoseBits === "number")
                        object.stLoseBits = options.longs === String ? String(message.stLoseBits) : message.stLoseBits;
                    else
                        object.stLoseBits = options.longs === String ? $util.Long.prototype.toString.call(message.stLoseBits) : options.longs === Number ? new $util.LongBits(message.stLoseBits.low >>> 0, message.stLoseBits.high >>> 0).toNumber(true) : message.stLoseBits;
                if (message.stConsecutiveWins != null && message.hasOwnProperty("stConsecutiveWins"))
                    object.stConsecutiveWins = message.stConsecutiveWins;
                if (message.stConsecutiveWinsMax != null && message.hasOwnProperty("stConsecutiveWinsMax"))
                    object.stConsecutiveWinsMax = message.stConsecutiveWinsMax;
                if (message.challenger != null && message.hasOwnProperty("challenger"))
                    object.challenger = $root.wm.protobuf.ChallengerCar.toObject(message.challenger, options);
                if (message.challengerReturnCount != null && message.hasOwnProperty("challengerReturnCount"))
                    object.challengerReturnCount = message.challengerReturnCount;
                if (message.opponentGhost != null && message.hasOwnProperty("opponentGhost"))
                    object.opponentGhost = $root.wm.protobuf.GhostCar.toObject(message.opponentGhost, options);
                if (message.opponentTrailId != null && message.hasOwnProperty("opponentTrailId"))
                    if (typeof message.opponentTrailId === "number")
                        object.opponentTrailId = options.longs === String ? String(message.opponentTrailId) : message.opponentTrailId;
                    else
                        object.opponentTrailId = options.longs === String ? $util.Long.prototype.toString.call(message.opponentTrailId) : options.longs === Number ? new $util.LongBits(message.opponentTrailId.low >>> 0, message.opponentTrailId.high >>> 0).toNumber(true) : message.opponentTrailId;
                if (message.opponentCompetitionId != null && message.hasOwnProperty("opponentCompetitionId"))
                    object.opponentCompetitionId = message.opponentCompetitionId;
                if (message.competitionParameter != null && message.hasOwnProperty("competitionParameter"))
                    object.competitionParameter = $root.wm.protobuf.GhostCompetitionParameter.toObject(message.competitionParameter, options);
                if (message.specialTitles && message.specialTitles.length) {
                    object.specialTitles = [];
                    for (let j = 0; j < message.specialTitles.length; ++j)
                        object.specialTitles[j] = message.specialTitles[j];
                }
                if (message.earnedTitles && message.earnedTitles.length) {
                    object.earnedTitles = [];
                    for (let j = 0; j < message.earnedTitles.length; ++j)
                        object.earnedTitles[j] = message.earnedTitles[j];
                }
                if (message.ownedItems && message.ownedItems.length) {
                    object.ownedItems = [];
                    for (let j = 0; j < message.ownedItems.length; ++j)
                        object.ownedItems[j] = $root.wm.protobuf.CarItem.toObject(message.ownedItems[j], options);
                }
                if (message.auraMotifAutoChange != null && message.hasOwnProperty("auraMotifAutoChange"))
                    object.auraMotifAutoChange = message.auraMotifAutoChange;
                if (message.screenshotCount != null && message.hasOwnProperty("screenshotCount"))
                    object.screenshotCount = message.screenshotCount;
                if (message.announceEventModePrize != null && message.hasOwnProperty("announceEventModePrize"))
                    object.announceEventModePrize = message.announceEventModePrize;
                if (message.rgAcquireAllCrowns != null && message.hasOwnProperty("rgAcquireAllCrowns"))
                    object.rgAcquireAllCrowns = message.rgAcquireAllCrowns;
                if (message.driveLastPlayedAt != null && message.hasOwnProperty("driveLastPlayedAt"))
                    object.driveLastPlayedAt = message.driveLastPlayedAt;
                if (message.insurance != null && message.hasOwnProperty("insurance"))
                    object.insurance = $root.wm.protobuf.LoadCarResponse.StoryInsurance.toObject(message.insurance, options);
                if (message.stCompleted_100Episodes != null && message.hasOwnProperty("stCompleted_100Episodes"))
                    object.stCompleted_100Episodes = message.stCompleted_100Episodes;
                if (message.rgPreviousVersionPlayCount != null && message.hasOwnProperty("rgPreviousVersionPlayCount"))
                    object.rgPreviousVersionPlayCount = message.rgPreviousVersionPlayCount;
                if (message.ghostExpeditionState != null && message.hasOwnProperty("ghostExpeditionState"))
                    object.ghostExpeditionState = options.enums === String ? $root.wm.protobuf.GhostExpeditionParticipantState[message.ghostExpeditionState] === undefined ? message.ghostExpeditionState : $root.wm.protobuf.GhostExpeditionParticipantState[message.ghostExpeditionState] : message.ghostExpeditionState;
                if (message.rgExpeditionScore != null && message.hasOwnProperty("rgExpeditionScore"))
                    object.rgExpeditionScore = message.rgExpeditionScore;
                if (message.rgHighwayClearCount != null && message.hasOwnProperty("rgHighwayClearCount"))
                    object.rgHighwayClearCount = message.rgHighwayClearCount;
                if (message.rgHighwayPoint != null && message.hasOwnProperty("rgHighwayPoint"))
                    object.rgHighwayPoint = message.rgHighwayPoint;
                if (message.rgHighwayStationClearBits != null && message.hasOwnProperty("rgHighwayStationClearBits"))
                    object.rgHighwayStationClearBits = message.rgHighwayStationClearBits;
                if (message.rgScoreVs_2 != null && message.hasOwnProperty("rgScoreVs_2"))
                    object.rgScoreVs_2 = message.rgScoreVs_2;
                if (message.rgHighwayPreviousDice != null && message.hasOwnProperty("rgHighwayPreviousDice"))
                    object.rgHighwayPreviousDice = message.rgHighwayPreviousDice;
                if (message.numOfStampTargetCars != null && message.hasOwnProperty("numOfStampTargetCars"))
                    object.numOfStampTargetCars = message.numOfStampTargetCars;
                if (message.koshienPrize && message.koshienPrize.length) {
                    object.koshienPrize = [];
                    for (let j = 0; j < message.koshienPrize.length; ++j)
                        object.koshienPrize[j] = $root.wm.protobuf.CarItem.toObject(message.koshienPrize[j], options);
                }
                return object;
            };

            /**
             * Converts this LoadCarResponse to JSON.
             * @function toJSON
             * @memberof wm.protobuf.LoadCarResponse
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            LoadCarResponse.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for LoadCarResponse
             * @function getTypeUrl
             * @memberof wm.protobuf.LoadCarResponse
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            LoadCarResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/wm.protobuf.LoadCarResponse";
            };

            LoadCarResponse.StoryInsurance = (function() {

                /**
                 * Properties of a StoryInsurance.
                 * @memberof wm.protobuf.LoadCarResponse
                 * @interface IStoryInsurance
                 * @property {number} numOfRemains StoryInsurance numOfRemains
                 */

                /**
                 * Constructs a new StoryInsurance.
                 * @memberof wm.protobuf.LoadCarResponse
                 * @classdesc Represents a StoryInsurance.
                 * @implements IStoryInsurance
                 * @constructor
                 * @param {wm.protobuf.LoadCarResponse.IStoryInsurance=} [properties] Properties to set
                 */
                function StoryInsurance(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * StoryInsurance numOfRemains.
                 * @member {number} numOfRemains
                 * @memberof wm.protobuf.LoadCarResponse.StoryInsurance
                 * @instance
                 */
                StoryInsurance.prototype.numOfRemains = 0;

                /**
                 * Creates a new StoryInsurance instance using the specified properties.
                 * @function create
                 * @memberof wm.protobuf.LoadCarResponse.StoryInsurance
                 * @static
                 * @param {wm.protobuf.LoadCarResponse.IStoryInsurance=} [properties] Properties to set
                 * @returns {wm.protobuf.LoadCarResponse.StoryInsurance} StoryInsurance instance
                 */
                StoryInsurance.create = function create(properties) {
                    return new StoryInsurance(properties);
                };

                /**
                 * Encodes the specified StoryInsurance message. Does not implicitly {@link wm.protobuf.LoadCarResponse.StoryInsurance.verify|verify} messages.
                 * @function encode
                 * @memberof wm.protobuf.LoadCarResponse.StoryInsurance
                 * @static
                 * @param {wm.protobuf.LoadCarResponse.IStoryInsurance} message StoryInsurance message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                StoryInsurance.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.numOfRemains);
                    return writer;
                };

                /**
                 * Encodes the specified StoryInsurance message, length delimited. Does not implicitly {@link wm.protobuf.LoadCarResponse.StoryInsurance.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof wm.protobuf.LoadCarResponse.StoryInsurance
                 * @static
                 * @param {wm.protobuf.LoadCarResponse.IStoryInsurance} message StoryInsurance message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                StoryInsurance.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a StoryInsurance message from the specified reader or buffer.
                 * @function decode
                 * @memberof wm.protobuf.LoadCarResponse.StoryInsurance
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {wm.protobuf.LoadCarResponse.StoryInsurance} StoryInsurance
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                StoryInsurance.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.wm.protobuf.LoadCarResponse.StoryInsurance();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.numOfRemains = reader.uint32();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    if (!message.hasOwnProperty("numOfRemains"))
                        throw $util.ProtocolError("missing required 'numOfRemains'", { instance: message });
                    return message;
                };

                /**
                 * Decodes a StoryInsurance message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof wm.protobuf.LoadCarResponse.StoryInsurance
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {wm.protobuf.LoadCarResponse.StoryInsurance} StoryInsurance
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                StoryInsurance.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a StoryInsurance message.
                 * @function verify
                 * @memberof wm.protobuf.LoadCarResponse.StoryInsurance
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                StoryInsurance.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (!$util.isInteger(message.numOfRemains))
                        return "numOfRemains: integer expected";
                    return null;
                };

                /**
                 * Creates a StoryInsurance message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof wm.protobuf.LoadCarResponse.StoryInsurance
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {wm.protobuf.LoadCarResponse.StoryInsurance} StoryInsurance
                 */
                StoryInsurance.fromObject = function fromObject(object) {
                    if (object instanceof $root.wm.protobuf.LoadCarResponse.StoryInsurance)
                        return object;
                    let message = new $root.wm.protobuf.LoadCarResponse.StoryInsurance();
                    if (object.numOfRemains != null)
                        message.numOfRemains = object.numOfRemains >>> 0;
                    return message;
                };

                /**
                 * Creates a plain object from a StoryInsurance message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof wm.protobuf.LoadCarResponse.StoryInsurance
                 * @static
                 * @param {wm.protobuf.LoadCarResponse.StoryInsurance} message StoryInsurance
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                StoryInsurance.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults)
                        object.numOfRemains = 0;
                    if (message.numOfRemains != null && message.hasOwnProperty("numOfRemains"))
                        object.numOfRemains = message.numOfRemains;
                    return object;
                };

                /**
                 * Converts this StoryInsurance to JSON.
                 * @function toJSON
                 * @memberof wm.protobuf.LoadCarResponse.StoryInsurance
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                StoryInsurance.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                /**
                 * Gets the default type url for StoryInsurance
                 * @function getTypeUrl
                 * @memberof wm.protobuf.LoadCarResponse.StoryInsurance
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                StoryInsurance.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/wm.protobuf.LoadCarResponse.StoryInsurance";
                };

                return StoryInsurance;
            })();

            return LoadCarResponse;
        })();

        protobuf.CreateCarRequest = (function() {

            /**
             * Properties of a CreateCarRequest.
             * @memberof wm.protobuf
             * @interface ICreateCarRequest
             * @property {number|null} [userId] CreateCarRequest userId
             * @property {number|null} [banapassportAmId] CreateCarRequest banapassportAmId
             * @property {string|null} [cardChipId] CreateCarRequest cardChipId
             * @property {string|null} [accessCode] CreateCarRequest accessCode
             * @property {number|null} [cardTypeCode] CreateCarRequest cardTypeCode
             * @property {number|null} [cardRegionCode] CreateCarRequest cardRegionCode
             * @property {wm.protobuf.DeviceType|null} [device] CreateCarRequest device
             * @property {wm.protobuf.ICar} car CreateCarRequest car
             * @property {boolean} transmission CreateCarRequest transmission
             * @property {number} timestamp CreateCarRequest timestamp
             * @property {number|null} [userItemId] CreateCarRequest userItemId
             * @property {number|null} [deletedCarId] CreateCarRequest deletedCarId
             */

            /**
             * Constructs a new CreateCarRequest.
             * @memberof wm.protobuf
             * @classdesc Represents a CreateCarRequest.
             * @implements ICreateCarRequest
             * @constructor
             * @param {wm.protobuf.ICreateCarRequest=} [properties] Properties to set
             */
            function CreateCarRequest(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * CreateCarRequest userId.
             * @member {number} userId
             * @memberof wm.protobuf.CreateCarRequest
             * @instance
             */
            CreateCarRequest.prototype.userId = 0;

            /**
             * CreateCarRequest banapassportAmId.
             * @member {number} banapassportAmId
             * @memberof wm.protobuf.CreateCarRequest
             * @instance
             */
            CreateCarRequest.prototype.banapassportAmId = 0;

            /**
             * CreateCarRequest cardChipId.
             * @member {string} cardChipId
             * @memberof wm.protobuf.CreateCarRequest
             * @instance
             */
            CreateCarRequest.prototype.cardChipId = "";

            /**
             * CreateCarRequest accessCode.
             * @member {string} accessCode
             * @memberof wm.protobuf.CreateCarRequest
             * @instance
             */
            CreateCarRequest.prototype.accessCode = "";

            /**
             * CreateCarRequest cardTypeCode.
             * @member {number} cardTypeCode
             * @memberof wm.protobuf.CreateCarRequest
             * @instance
             */
            CreateCarRequest.prototype.cardTypeCode = 0;

            /**
             * CreateCarRequest cardRegionCode.
             * @member {number} cardRegionCode
             * @memberof wm.protobuf.CreateCarRequest
             * @instance
             */
            CreateCarRequest.prototype.cardRegionCode = 0;

            /**
             * CreateCarRequest device.
             * @member {wm.protobuf.DeviceType} device
             * @memberof wm.protobuf.CreateCarRequest
             * @instance
             */
            CreateCarRequest.prototype.device = 0;

            /**
             * CreateCarRequest car.
             * @member {wm.protobuf.ICar} car
             * @memberof wm.protobuf.CreateCarRequest
             * @instance
             */
            CreateCarRequest.prototype.car = null;

            /**
             * CreateCarRequest transmission.
             * @member {boolean} transmission
             * @memberof wm.protobuf.CreateCarRequest
             * @instance
             */
            CreateCarRequest.prototype.transmission = false;

            /**
             * CreateCarRequest timestamp.
             * @member {number} timestamp
             * @memberof wm.protobuf.CreateCarRequest
             * @instance
             */
            CreateCarRequest.prototype.timestamp = 0;

            /**
             * CreateCarRequest userItemId.
             * @member {number} userItemId
             * @memberof wm.protobuf.CreateCarRequest
             * @instance
             */
            CreateCarRequest.prototype.userItemId = 0;

            /**
             * CreateCarRequest deletedCarId.
             * @member {number} deletedCarId
             * @memberof wm.protobuf.CreateCarRequest
             * @instance
             */
            CreateCarRequest.prototype.deletedCarId = 0;

            /**
             * Creates a new CreateCarRequest instance using the specified properties.
             * @function create
             * @memberof wm.protobuf.CreateCarRequest
             * @static
             * @param {wm.protobuf.ICreateCarRequest=} [properties] Properties to set
             * @returns {wm.protobuf.CreateCarRequest} CreateCarRequest instance
             */
            CreateCarRequest.create = function create(properties) {
                return new CreateCarRequest(properties);
            };

            /**
             * Encodes the specified CreateCarRequest message. Does not implicitly {@link wm.protobuf.CreateCarRequest.verify|verify} messages.
             * @function encode
             * @memberof wm.protobuf.CreateCarRequest
             * @static
             * @param {wm.protobuf.ICreateCarRequest} message CreateCarRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            CreateCarRequest.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.userId != null && Object.hasOwnProperty.call(message, "userId"))
                    writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.userId);
                if (message.banapassportAmId != null && Object.hasOwnProperty.call(message, "banapassportAmId"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.banapassportAmId);
                if (message.cardChipId != null && Object.hasOwnProperty.call(message, "cardChipId"))
                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.cardChipId);
                if (message.accessCode != null && Object.hasOwnProperty.call(message, "accessCode"))
                    writer.uint32(/* id 4, wireType 2 =*/34).string(message.accessCode);
                if (message.cardTypeCode != null && Object.hasOwnProperty.call(message, "cardTypeCode"))
                    writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.cardTypeCode);
                if (message.cardRegionCode != null && Object.hasOwnProperty.call(message, "cardRegionCode"))
                    writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.cardRegionCode);
                if (message.device != null && Object.hasOwnProperty.call(message, "device"))
                    writer.uint32(/* id 7, wireType 0 =*/56).int32(message.device);
                $root.wm.protobuf.Car.encode(message.car, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                writer.uint32(/* id 9, wireType 0 =*/72).bool(message.transmission);
                writer.uint32(/* id 11, wireType 0 =*/88).uint32(message.timestamp);
                if (message.userItemId != null && Object.hasOwnProperty.call(message, "userItemId"))
                    writer.uint32(/* id 12, wireType 0 =*/96).uint32(message.userItemId);
                if (message.deletedCarId != null && Object.hasOwnProperty.call(message, "deletedCarId"))
                    writer.uint32(/* id 13, wireType 0 =*/104).uint32(message.deletedCarId);
                return writer;
            };

            /**
             * Encodes the specified CreateCarRequest message, length delimited. Does not implicitly {@link wm.protobuf.CreateCarRequest.verify|verify} messages.
             * @function encodeDelimited
             * @memberof wm.protobuf.CreateCarRequest
             * @static
             * @param {wm.protobuf.ICreateCarRequest} message CreateCarRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            CreateCarRequest.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a CreateCarRequest message from the specified reader or buffer.
             * @function decode
             * @memberof wm.protobuf.CreateCarRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {wm.protobuf.CreateCarRequest} CreateCarRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            CreateCarRequest.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.wm.protobuf.CreateCarRequest();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.userId = reader.uint32();
                            break;
                        }
                    case 2: {
                            message.banapassportAmId = reader.uint32();
                            break;
                        }
                    case 3: {
                            message.cardChipId = reader.string();
                            break;
                        }
                    case 4: {
                            message.accessCode = reader.string();
                            break;
                        }
                    case 5: {
                            message.cardTypeCode = reader.uint32();
                            break;
                        }
                    case 6: {
                            message.cardRegionCode = reader.uint32();
                            break;
                        }
                    case 7: {
                            message.device = reader.int32();
                            break;
                        }
                    case 8: {
                            message.car = $root.wm.protobuf.Car.decode(reader, reader.uint32());
                            break;
                        }
                    case 9: {
                            message.transmission = reader.bool();
                            break;
                        }
                    case 11: {
                            message.timestamp = reader.uint32();
                            break;
                        }
                    case 12: {
                            message.userItemId = reader.uint32();
                            break;
                        }
                    case 13: {
                            message.deletedCarId = reader.uint32();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("car"))
                    throw $util.ProtocolError("missing required 'car'", { instance: message });
                if (!message.hasOwnProperty("transmission"))
                    throw $util.ProtocolError("missing required 'transmission'", { instance: message });
                if (!message.hasOwnProperty("timestamp"))
                    throw $util.ProtocolError("missing required 'timestamp'", { instance: message });
                return message;
            };

            /**
             * Decodes a CreateCarRequest message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof wm.protobuf.CreateCarRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {wm.protobuf.CreateCarRequest} CreateCarRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            CreateCarRequest.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a CreateCarRequest message.
             * @function verify
             * @memberof wm.protobuf.CreateCarRequest
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            CreateCarRequest.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.userId != null && message.hasOwnProperty("userId"))
                    if (!$util.isInteger(message.userId))
                        return "userId: integer expected";
                if (message.banapassportAmId != null && message.hasOwnProperty("banapassportAmId"))
                    if (!$util.isInteger(message.banapassportAmId))
                        return "banapassportAmId: integer expected";
                if (message.cardChipId != null && message.hasOwnProperty("cardChipId"))
                    if (!$util.isString(message.cardChipId))
                        return "cardChipId: string expected";
                if (message.accessCode != null && message.hasOwnProperty("accessCode"))
                    if (!$util.isString(message.accessCode))
                        return "accessCode: string expected";
                if (message.cardTypeCode != null && message.hasOwnProperty("cardTypeCode"))
                    if (!$util.isInteger(message.cardTypeCode))
                        return "cardTypeCode: integer expected";
                if (message.cardRegionCode != null && message.hasOwnProperty("cardRegionCode"))
                    if (!$util.isInteger(message.cardRegionCode))
                        return "cardRegionCode: integer expected";
                if (message.device != null && message.hasOwnProperty("device"))
                    switch (message.device) {
                    default:
                        return "device: enum value expected";
                    case 0:
                    case 1:
                        break;
                    }
                {
                    let error = $root.wm.protobuf.Car.verify(message.car);
                    if (error)
                        return "car." + error;
                }
                if (typeof message.transmission !== "boolean")
                    return "transmission: boolean expected";
                if (!$util.isInteger(message.timestamp))
                    return "timestamp: integer expected";
                if (message.userItemId != null && message.hasOwnProperty("userItemId"))
                    if (!$util.isInteger(message.userItemId))
                        return "userItemId: integer expected";
                if (message.deletedCarId != null && message.hasOwnProperty("deletedCarId"))
                    if (!$util.isInteger(message.deletedCarId))
                        return "deletedCarId: integer expected";
                return null;
            };

            /**
             * Creates a CreateCarRequest message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof wm.protobuf.CreateCarRequest
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {wm.protobuf.CreateCarRequest} CreateCarRequest
             */
            CreateCarRequest.fromObject = function fromObject(object) {
                if (object instanceof $root.wm.protobuf.CreateCarRequest)
                    return object;
                let message = new $root.wm.protobuf.CreateCarRequest();
                if (object.userId != null)
                    message.userId = object.userId >>> 0;
                if (object.banapassportAmId != null)
                    message.banapassportAmId = object.banapassportAmId >>> 0;
                if (object.cardChipId != null)
                    message.cardChipId = String(object.cardChipId);
                if (object.accessCode != null)
                    message.accessCode = String(object.accessCode);
                if (object.cardTypeCode != null)
                    message.cardTypeCode = object.cardTypeCode >>> 0;
                if (object.cardRegionCode != null)
                    message.cardRegionCode = object.cardRegionCode >>> 0;
                switch (object.device) {
                default:
                    if (typeof object.device === "number") {
                        message.device = object.device;
                        break;
                    }
                    break;
                case "DEVICE_CARD":
                case 0:
                    message.device = 0;
                    break;
                case "DEVICE_PHONE":
                case 1:
                    message.device = 1;
                    break;
                }
                if (object.car != null) {
                    if (typeof object.car !== "object")
                        throw TypeError(".wm.protobuf.CreateCarRequest.car: object expected");
                    message.car = $root.wm.protobuf.Car.fromObject(object.car);
                }
                if (object.transmission != null)
                    message.transmission = Boolean(object.transmission);
                if (object.timestamp != null)
                    message.timestamp = object.timestamp >>> 0;
                if (object.userItemId != null)
                    message.userItemId = object.userItemId >>> 0;
                if (object.deletedCarId != null)
                    message.deletedCarId = object.deletedCarId >>> 0;
                return message;
            };

            /**
             * Creates a plain object from a CreateCarRequest message. Also converts values to other types if specified.
             * @function toObject
             * @memberof wm.protobuf.CreateCarRequest
             * @static
             * @param {wm.protobuf.CreateCarRequest} message CreateCarRequest
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            CreateCarRequest.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.userId = 0;
                    object.banapassportAmId = 0;
                    object.cardChipId = "";
                    object.accessCode = "";
                    object.cardTypeCode = 0;
                    object.cardRegionCode = 0;
                    object.device = options.enums === String ? "DEVICE_CARD" : 0;
                    object.car = null;
                    object.transmission = false;
                    object.timestamp = 0;
                    object.userItemId = 0;
                    object.deletedCarId = 0;
                }
                if (message.userId != null && message.hasOwnProperty("userId"))
                    object.userId = message.userId;
                if (message.banapassportAmId != null && message.hasOwnProperty("banapassportAmId"))
                    object.banapassportAmId = message.banapassportAmId;
                if (message.cardChipId != null && message.hasOwnProperty("cardChipId"))
                    object.cardChipId = message.cardChipId;
                if (message.accessCode != null && message.hasOwnProperty("accessCode"))
                    object.accessCode = message.accessCode;
                if (message.cardTypeCode != null && message.hasOwnProperty("cardTypeCode"))
                    object.cardTypeCode = message.cardTypeCode;
                if (message.cardRegionCode != null && message.hasOwnProperty("cardRegionCode"))
                    object.cardRegionCode = message.cardRegionCode;
                if (message.device != null && message.hasOwnProperty("device"))
                    object.device = options.enums === String ? $root.wm.protobuf.DeviceType[message.device] === undefined ? message.device : $root.wm.protobuf.DeviceType[message.device] : message.device;
                if (message.car != null && message.hasOwnProperty("car"))
                    object.car = $root.wm.protobuf.Car.toObject(message.car, options);
                if (message.transmission != null && message.hasOwnProperty("transmission"))
                    object.transmission = message.transmission;
                if (message.timestamp != null && message.hasOwnProperty("timestamp"))
                    object.timestamp = message.timestamp;
                if (message.userItemId != null && message.hasOwnProperty("userItemId"))
                    object.userItemId = message.userItemId;
                if (message.deletedCarId != null && message.hasOwnProperty("deletedCarId"))
                    object.deletedCarId = message.deletedCarId;
                return object;
            };

            /**
             * Converts this CreateCarRequest to JSON.
             * @function toJSON
             * @memberof wm.protobuf.CreateCarRequest
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            CreateCarRequest.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for CreateCarRequest
             * @function getTypeUrl
             * @memberof wm.protobuf.CreateCarRequest
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            CreateCarRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/wm.protobuf.CreateCarRequest";
            };

            return CreateCarRequest;
        })();

        protobuf.CreateCarResponse = (function() {

            /**
             * Properties of a CreateCarResponse.
             * @memberof wm.protobuf
             * @interface ICreateCarResponse
             * @property {wm.protobuf.ErrorCode} error CreateCarResponse error
             * @property {string|null} [accessCode] CreateCarResponse accessCode
             * @property {number|null} [banapassportAmId] CreateCarResponse banapassportAmId
             * @property {number|null} [mbid] CreateCarResponse mbid
             * @property {number} userId CreateCarResponse userId
             * @property {number} carId CreateCarResponse carId
             * @property {number|null} [stClearBits] CreateCarResponse stClearBits
             * @property {number|null} [stClearDivCount] CreateCarResponse stClearDivCount
             * @property {number|null} [stClearCount] CreateCarResponse stClearCount
             * @property {number|Long|null} [stLoseBits] CreateCarResponse stLoseBits
             * @property {number|null} [stConsecutiveWins] CreateCarResponse stConsecutiveWins
             * @property {number|null} [stConsecutiveWinsMax] CreateCarResponse stConsecutiveWinsMax
             * @property {number|null} [fullTunedCarCouponUnreceivableAt] CreateCarResponse fullTunedCarCouponUnreceivableAt
             */

            /**
             * Constructs a new CreateCarResponse.
             * @memberof wm.protobuf
             * @classdesc Represents a CreateCarResponse.
             * @implements ICreateCarResponse
             * @constructor
             * @param {wm.protobuf.ICreateCarResponse=} [properties] Properties to set
             */
            function CreateCarResponse(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * CreateCarResponse error.
             * @member {wm.protobuf.ErrorCode} error
             * @memberof wm.protobuf.CreateCarResponse
             * @instance
             */
            CreateCarResponse.prototype.error = 0;

            /**
             * CreateCarResponse accessCode.
             * @member {string} accessCode
             * @memberof wm.protobuf.CreateCarResponse
             * @instance
             */
            CreateCarResponse.prototype.accessCode = "";

            /**
             * CreateCarResponse banapassportAmId.
             * @member {number} banapassportAmId
             * @memberof wm.protobuf.CreateCarResponse
             * @instance
             */
            CreateCarResponse.prototype.banapassportAmId = 0;

            /**
             * CreateCarResponse mbid.
             * @member {number} mbid
             * @memberof wm.protobuf.CreateCarResponse
             * @instance
             */
            CreateCarResponse.prototype.mbid = 0;

            /**
             * CreateCarResponse userId.
             * @member {number} userId
             * @memberof wm.protobuf.CreateCarResponse
             * @instance
             */
            CreateCarResponse.prototype.userId = 0;

            /**
             * CreateCarResponse carId.
             * @member {number} carId
             * @memberof wm.protobuf.CreateCarResponse
             * @instance
             */
            CreateCarResponse.prototype.carId = 0;

            /**
             * CreateCarResponse stClearBits.
             * @member {number} stClearBits
             * @memberof wm.protobuf.CreateCarResponse
             * @instance
             */
            CreateCarResponse.prototype.stClearBits = 0;

            /**
             * CreateCarResponse stClearDivCount.
             * @member {number} stClearDivCount
             * @memberof wm.protobuf.CreateCarResponse
             * @instance
             */
            CreateCarResponse.prototype.stClearDivCount = 0;

            /**
             * CreateCarResponse stClearCount.
             * @member {number} stClearCount
             * @memberof wm.protobuf.CreateCarResponse
             * @instance
             */
            CreateCarResponse.prototype.stClearCount = 0;

            /**
             * CreateCarResponse stLoseBits.
             * @member {number|Long} stLoseBits
             * @memberof wm.protobuf.CreateCarResponse
             * @instance
             */
            CreateCarResponse.prototype.stLoseBits = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

            /**
             * CreateCarResponse stConsecutiveWins.
             * @member {number} stConsecutiveWins
             * @memberof wm.protobuf.CreateCarResponse
             * @instance
             */
            CreateCarResponse.prototype.stConsecutiveWins = 0;

            /**
             * CreateCarResponse stConsecutiveWinsMax.
             * @member {number} stConsecutiveWinsMax
             * @memberof wm.protobuf.CreateCarResponse
             * @instance
             */
            CreateCarResponse.prototype.stConsecutiveWinsMax = 0;

            /**
             * CreateCarResponse fullTunedCarCouponUnreceivableAt.
             * @member {number} fullTunedCarCouponUnreceivableAt
             * @memberof wm.protobuf.CreateCarResponse
             * @instance
             */
            CreateCarResponse.prototype.fullTunedCarCouponUnreceivableAt = 0;

            /**
             * Creates a new CreateCarResponse instance using the specified properties.
             * @function create
             * @memberof wm.protobuf.CreateCarResponse
             * @static
             * @param {wm.protobuf.ICreateCarResponse=} [properties] Properties to set
             * @returns {wm.protobuf.CreateCarResponse} CreateCarResponse instance
             */
            CreateCarResponse.create = function create(properties) {
                return new CreateCarResponse(properties);
            };

            /**
             * Encodes the specified CreateCarResponse message. Does not implicitly {@link wm.protobuf.CreateCarResponse.verify|verify} messages.
             * @function encode
             * @memberof wm.protobuf.CreateCarResponse
             * @static
             * @param {wm.protobuf.ICreateCarResponse} message CreateCarResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            CreateCarResponse.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
                if (message.accessCode != null && Object.hasOwnProperty.call(message, "accessCode"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.accessCode);
                if (message.banapassportAmId != null && Object.hasOwnProperty.call(message, "banapassportAmId"))
                    writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.banapassportAmId);
                if (message.mbid != null && Object.hasOwnProperty.call(message, "mbid"))
                    writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.mbid);
                writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.userId);
                writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.carId);
                if (message.stClearBits != null && Object.hasOwnProperty.call(message, "stClearBits"))
                    writer.uint32(/* id 8, wireType 0 =*/64).uint32(message.stClearBits);
                if (message.stClearDivCount != null && Object.hasOwnProperty.call(message, "stClearDivCount"))
                    writer.uint32(/* id 9, wireType 0 =*/72).uint32(message.stClearDivCount);
                if (message.stClearCount != null && Object.hasOwnProperty.call(message, "stClearCount"))
                    writer.uint32(/* id 10, wireType 0 =*/80).uint32(message.stClearCount);
                if (message.stLoseBits != null && Object.hasOwnProperty.call(message, "stLoseBits"))
                    writer.uint32(/* id 11, wireType 0 =*/88).uint64(message.stLoseBits);
                if (message.stConsecutiveWins != null && Object.hasOwnProperty.call(message, "stConsecutiveWins"))
                    writer.uint32(/* id 13, wireType 0 =*/104).uint32(message.stConsecutiveWins);
                if (message.stConsecutiveWinsMax != null && Object.hasOwnProperty.call(message, "stConsecutiveWinsMax"))
                    writer.uint32(/* id 14, wireType 0 =*/112).uint32(message.stConsecutiveWinsMax);
                if (message.fullTunedCarCouponUnreceivableAt != null && Object.hasOwnProperty.call(message, "fullTunedCarCouponUnreceivableAt"))
                    writer.uint32(/* id 17, wireType 0 =*/136).uint32(message.fullTunedCarCouponUnreceivableAt);
                return writer;
            };

            /**
             * Encodes the specified CreateCarResponse message, length delimited. Does not implicitly {@link wm.protobuf.CreateCarResponse.verify|verify} messages.
             * @function encodeDelimited
             * @memberof wm.protobuf.CreateCarResponse
             * @static
             * @param {wm.protobuf.ICreateCarResponse} message CreateCarResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            CreateCarResponse.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a CreateCarResponse message from the specified reader or buffer.
             * @function decode
             * @memberof wm.protobuf.CreateCarResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {wm.protobuf.CreateCarResponse} CreateCarResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            CreateCarResponse.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.wm.protobuf.CreateCarResponse();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.error = reader.int32();
                            break;
                        }
                    case 2: {
                            message.accessCode = reader.string();
                            break;
                        }
                    case 3: {
                            message.banapassportAmId = reader.uint32();
                            break;
                        }
                    case 4: {
                            message.mbid = reader.uint32();
                            break;
                        }
                    case 5: {
                            message.userId = reader.uint32();
                            break;
                        }
                    case 6: {
                            message.carId = reader.uint32();
                            break;
                        }
                    case 8: {
                            message.stClearBits = reader.uint32();
                            break;
                        }
                    case 9: {
                            message.stClearDivCount = reader.uint32();
                            break;
                        }
                    case 10: {
                            message.stClearCount = reader.uint32();
                            break;
                        }
                    case 11: {
                            message.stLoseBits = reader.uint64();
                            break;
                        }
                    case 13: {
                            message.stConsecutiveWins = reader.uint32();
                            break;
                        }
                    case 14: {
                            message.stConsecutiveWinsMax = reader.uint32();
                            break;
                        }
                    case 17: {
                            message.fullTunedCarCouponUnreceivableAt = reader.uint32();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("error"))
                    throw $util.ProtocolError("missing required 'error'", { instance: message });
                if (!message.hasOwnProperty("userId"))
                    throw $util.ProtocolError("missing required 'userId'", { instance: message });
                if (!message.hasOwnProperty("carId"))
                    throw $util.ProtocolError("missing required 'carId'", { instance: message });
                return message;
            };

            /**
             * Decodes a CreateCarResponse message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof wm.protobuf.CreateCarResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {wm.protobuf.CreateCarResponse} CreateCarResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            CreateCarResponse.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a CreateCarResponse message.
             * @function verify
             * @memberof wm.protobuf.CreateCarResponse
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            CreateCarResponse.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                switch (message.error) {
                default:
                    return "error: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 7:
                case 9:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 16:
                case 17:
                case 18:
                case 19:
                    break;
                }
                if (message.accessCode != null && message.hasOwnProperty("accessCode"))
                    if (!$util.isString(message.accessCode))
                        return "accessCode: string expected";
                if (message.banapassportAmId != null && message.hasOwnProperty("banapassportAmId"))
                    if (!$util.isInteger(message.banapassportAmId))
                        return "banapassportAmId: integer expected";
                if (message.mbid != null && message.hasOwnProperty("mbid"))
                    if (!$util.isInteger(message.mbid))
                        return "mbid: integer expected";
                if (!$util.isInteger(message.userId))
                    return "userId: integer expected";
                if (!$util.isInteger(message.carId))
                    return "carId: integer expected";
                if (message.stClearBits != null && message.hasOwnProperty("stClearBits"))
                    if (!$util.isInteger(message.stClearBits))
                        return "stClearBits: integer expected";
                if (message.stClearDivCount != null && message.hasOwnProperty("stClearDivCount"))
                    if (!$util.isInteger(message.stClearDivCount))
                        return "stClearDivCount: integer expected";
                if (message.stClearCount != null && message.hasOwnProperty("stClearCount"))
                    if (!$util.isInteger(message.stClearCount))
                        return "stClearCount: integer expected";
                if (message.stLoseBits != null && message.hasOwnProperty("stLoseBits"))
                    if (!$util.isInteger(message.stLoseBits) && !(message.stLoseBits && $util.isInteger(message.stLoseBits.low) && $util.isInteger(message.stLoseBits.high)))
                        return "stLoseBits: integer|Long expected";
                if (message.stConsecutiveWins != null && message.hasOwnProperty("stConsecutiveWins"))
                    if (!$util.isInteger(message.stConsecutiveWins))
                        return "stConsecutiveWins: integer expected";
                if (message.stConsecutiveWinsMax != null && message.hasOwnProperty("stConsecutiveWinsMax"))
                    if (!$util.isInteger(message.stConsecutiveWinsMax))
                        return "stConsecutiveWinsMax: integer expected";
                if (message.fullTunedCarCouponUnreceivableAt != null && message.hasOwnProperty("fullTunedCarCouponUnreceivableAt"))
                    if (!$util.isInteger(message.fullTunedCarCouponUnreceivableAt))
                        return "fullTunedCarCouponUnreceivableAt: integer expected";
                return null;
            };

            /**
             * Creates a CreateCarResponse message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof wm.protobuf.CreateCarResponse
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {wm.protobuf.CreateCarResponse} CreateCarResponse
             */
            CreateCarResponse.fromObject = function fromObject(object) {
                if (object instanceof $root.wm.protobuf.CreateCarResponse)
                    return object;
                let message = new $root.wm.protobuf.CreateCarResponse();
                switch (object.error) {
                default:
                    if (typeof object.error === "number") {
                        message.error = object.error;
                        break;
                    }
                    break;
                case "ERR_SUCCESS":
                case 0:
                    message.error = 0;
                    break;
                case "ERR_REQUEST":
                case 1:
                    message.error = 1;
                    break;
                case "ERR_NOT_FOUND":
                case 2:
                    message.error = 2;
                    break;
                case "ERR_ID_SERVER":
                case 3:
                    message.error = 3;
                    break;
                case "ERR_ID_BANNED":
                case 4:
                    message.error = 4;
                    break;
                case "ERR_USER_LOCKED":
                case 5:
                    message.error = 5;
                    break;
                case "ERR_USER_VERSION":
                case 6:
                    message.error = 6;
                    break;
                case "ERR_NAME_CONFLICTED":
                case 7:
                    message.error = 7;
                    break;
                case "ERR_FORBIDDEN":
                case 9:
                    message.error = 9;
                    break;
                case "ERR_USER_SUCCEEDED":
                case 11:
                    message.error = 11;
                    break;
                case "ERR_BEING_TRANSFERRED":
                case 12:
                    message.error = 12;
                    break;
                case "ERR_SCRATCH_LOCKED":
                case 13:
                    message.error = 13;
                    break;
                case "ERR_BINGO_REVENGE_LOCKED":
                case 14:
                    message.error = 14;
                    break;
                case "ERR_BINGO_ALREDY_LINKED":
                case 15:
                    message.error = 15;
                    break;
                case "ERR_BINGO_FINISHED":
                case 16:
                    message.error = 16;
                    break;
                case "ERR_BINGO_REACHED_MAX_USER":
                case 17:
                    message.error = 17;
                    break;
                case "ERR_CAR_NOT_FOUND":
                case 18:
                    message.error = 18;
                    break;
                case "ERR_BINGO_CARD_NOT_FOUND":
                case 19:
                    message.error = 19;
                    break;
                }
                if (object.accessCode != null)
                    message.accessCode = String(object.accessCode);
                if (object.banapassportAmId != null)
                    message.banapassportAmId = object.banapassportAmId >>> 0;
                if (object.mbid != null)
                    message.mbid = object.mbid >>> 0;
                if (object.userId != null)
                    message.userId = object.userId >>> 0;
                if (object.carId != null)
                    message.carId = object.carId >>> 0;
                if (object.stClearBits != null)
                    message.stClearBits = object.stClearBits >>> 0;
                if (object.stClearDivCount != null)
                    message.stClearDivCount = object.stClearDivCount >>> 0;
                if (object.stClearCount != null)
                    message.stClearCount = object.stClearCount >>> 0;
                if (object.stLoseBits != null)
                    if ($util.Long)
                        (message.stLoseBits = $util.Long.fromValue(object.stLoseBits)).unsigned = true;
                    else if (typeof object.stLoseBits === "string")
                        message.stLoseBits = parseInt(object.stLoseBits, 10);
                    else if (typeof object.stLoseBits === "number")
                        message.stLoseBits = object.stLoseBits;
                    else if (typeof object.stLoseBits === "object")
                        message.stLoseBits = new $util.LongBits(object.stLoseBits.low >>> 0, object.stLoseBits.high >>> 0).toNumber(true);
                if (object.stConsecutiveWins != null)
                    message.stConsecutiveWins = object.stConsecutiveWins >>> 0;
                if (object.stConsecutiveWinsMax != null)
                    message.stConsecutiveWinsMax = object.stConsecutiveWinsMax >>> 0;
                if (object.fullTunedCarCouponUnreceivableAt != null)
                    message.fullTunedCarCouponUnreceivableAt = object.fullTunedCarCouponUnreceivableAt >>> 0;
                return message;
            };

            /**
             * Creates a plain object from a CreateCarResponse message. Also converts values to other types if specified.
             * @function toObject
             * @memberof wm.protobuf.CreateCarResponse
             * @static
             * @param {wm.protobuf.CreateCarResponse} message CreateCarResponse
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            CreateCarResponse.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.error = options.enums === String ? "ERR_SUCCESS" : 0;
                    object.accessCode = "";
                    object.banapassportAmId = 0;
                    object.mbid = 0;
                    object.userId = 0;
                    object.carId = 0;
                    object.stClearBits = 0;
                    object.stClearDivCount = 0;
                    object.stClearCount = 0;
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, true);
                        object.stLoseBits = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.stLoseBits = options.longs === String ? "0" : 0;
                    object.stConsecutiveWins = 0;
                    object.stConsecutiveWinsMax = 0;
                    object.fullTunedCarCouponUnreceivableAt = 0;
                }
                if (message.error != null && message.hasOwnProperty("error"))
                    object.error = options.enums === String ? $root.wm.protobuf.ErrorCode[message.error] === undefined ? message.error : $root.wm.protobuf.ErrorCode[message.error] : message.error;
                if (message.accessCode != null && message.hasOwnProperty("accessCode"))
                    object.accessCode = message.accessCode;
                if (message.banapassportAmId != null && message.hasOwnProperty("banapassportAmId"))
                    object.banapassportAmId = message.banapassportAmId;
                if (message.mbid != null && message.hasOwnProperty("mbid"))
                    object.mbid = message.mbid;
                if (message.userId != null && message.hasOwnProperty("userId"))
                    object.userId = message.userId;
                if (message.carId != null && message.hasOwnProperty("carId"))
                    object.carId = message.carId;
                if (message.stClearBits != null && message.hasOwnProperty("stClearBits"))
                    object.stClearBits = message.stClearBits;
                if (message.stClearDivCount != null && message.hasOwnProperty("stClearDivCount"))
                    object.stClearDivCount = message.stClearDivCount;
                if (message.stClearCount != null && message.hasOwnProperty("stClearCount"))
                    object.stClearCount = message.stClearCount;
                if (message.stLoseBits != null && message.hasOwnProperty("stLoseBits"))
                    if (typeof message.stLoseBits === "number")
                        object.stLoseBits = options.longs === String ? String(message.stLoseBits) : message.stLoseBits;
                    else
                        object.stLoseBits = options.longs === String ? $util.Long.prototype.toString.call(message.stLoseBits) : options.longs === Number ? new $util.LongBits(message.stLoseBits.low >>> 0, message.stLoseBits.high >>> 0).toNumber(true) : message.stLoseBits;
                if (message.stConsecutiveWins != null && message.hasOwnProperty("stConsecutiveWins"))
                    object.stConsecutiveWins = message.stConsecutiveWins;
                if (message.stConsecutiveWinsMax != null && message.hasOwnProperty("stConsecutiveWinsMax"))
                    object.stConsecutiveWinsMax = message.stConsecutiveWinsMax;
                if (message.fullTunedCarCouponUnreceivableAt != null && message.hasOwnProperty("fullTunedCarCouponUnreceivableAt"))
                    object.fullTunedCarCouponUnreceivableAt = message.fullTunedCarCouponUnreceivableAt;
                return object;
            };

            /**
             * Converts this CreateCarResponse to JSON.
             * @function toJSON
             * @memberof wm.protobuf.CreateCarResponse
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            CreateCarResponse.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for CreateCarResponse
             * @function getTypeUrl
             * @memberof wm.protobuf.CreateCarResponse
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            CreateCarResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/wm.protobuf.CreateCarResponse";
            };

            return CreateCarResponse;
        })();

        protobuf.LoadGameHistoryRequest = (function() {

            /**
             * Properties of a LoadGameHistoryRequest.
             * @memberof wm.protobuf
             * @interface ILoadGameHistoryRequest
             * @property {number} carId LoadGameHistoryRequest carId
             */

            /**
             * Constructs a new LoadGameHistoryRequest.
             * @memberof wm.protobuf
             * @classdesc Represents a LoadGameHistoryRequest.
             * @implements ILoadGameHistoryRequest
             * @constructor
             * @param {wm.protobuf.ILoadGameHistoryRequest=} [properties] Properties to set
             */
            function LoadGameHistoryRequest(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * LoadGameHistoryRequest carId.
             * @member {number} carId
             * @memberof wm.protobuf.LoadGameHistoryRequest
             * @instance
             */
            LoadGameHistoryRequest.prototype.carId = 0;

            /**
             * Creates a new LoadGameHistoryRequest instance using the specified properties.
             * @function create
             * @memberof wm.protobuf.LoadGameHistoryRequest
             * @static
             * @param {wm.protobuf.ILoadGameHistoryRequest=} [properties] Properties to set
             * @returns {wm.protobuf.LoadGameHistoryRequest} LoadGameHistoryRequest instance
             */
            LoadGameHistoryRequest.create = function create(properties) {
                return new LoadGameHistoryRequest(properties);
            };

            /**
             * Encodes the specified LoadGameHistoryRequest message. Does not implicitly {@link wm.protobuf.LoadGameHistoryRequest.verify|verify} messages.
             * @function encode
             * @memberof wm.protobuf.LoadGameHistoryRequest
             * @static
             * @param {wm.protobuf.ILoadGameHistoryRequest} message LoadGameHistoryRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LoadGameHistoryRequest.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.carId);
                return writer;
            };

            /**
             * Encodes the specified LoadGameHistoryRequest message, length delimited. Does not implicitly {@link wm.protobuf.LoadGameHistoryRequest.verify|verify} messages.
             * @function encodeDelimited
             * @memberof wm.protobuf.LoadGameHistoryRequest
             * @static
             * @param {wm.protobuf.ILoadGameHistoryRequest} message LoadGameHistoryRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LoadGameHistoryRequest.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a LoadGameHistoryRequest message from the specified reader or buffer.
             * @function decode
             * @memberof wm.protobuf.LoadGameHistoryRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {wm.protobuf.LoadGameHistoryRequest} LoadGameHistoryRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LoadGameHistoryRequest.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.wm.protobuf.LoadGameHistoryRequest();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.carId = reader.uint32();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("carId"))
                    throw $util.ProtocolError("missing required 'carId'", { instance: message });
                return message;
            };

            /**
             * Decodes a LoadGameHistoryRequest message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof wm.protobuf.LoadGameHistoryRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {wm.protobuf.LoadGameHistoryRequest} LoadGameHistoryRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LoadGameHistoryRequest.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a LoadGameHistoryRequest message.
             * @function verify
             * @memberof wm.protobuf.LoadGameHistoryRequest
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            LoadGameHistoryRequest.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (!$util.isInteger(message.carId))
                    return "carId: integer expected";
                return null;
            };

            /**
             * Creates a LoadGameHistoryRequest message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof wm.protobuf.LoadGameHistoryRequest
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {wm.protobuf.LoadGameHistoryRequest} LoadGameHistoryRequest
             */
            LoadGameHistoryRequest.fromObject = function fromObject(object) {
                if (object instanceof $root.wm.protobuf.LoadGameHistoryRequest)
                    return object;
                let message = new $root.wm.protobuf.LoadGameHistoryRequest();
                if (object.carId != null)
                    message.carId = object.carId >>> 0;
                return message;
            };

            /**
             * Creates a plain object from a LoadGameHistoryRequest message. Also converts values to other types if specified.
             * @function toObject
             * @memberof wm.protobuf.LoadGameHistoryRequest
             * @static
             * @param {wm.protobuf.LoadGameHistoryRequest} message LoadGameHistoryRequest
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            LoadGameHistoryRequest.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults)
                    object.carId = 0;
                if (message.carId != null && message.hasOwnProperty("carId"))
                    object.carId = message.carId;
                return object;
            };

            /**
             * Converts this LoadGameHistoryRequest to JSON.
             * @function toJSON
             * @memberof wm.protobuf.LoadGameHistoryRequest
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            LoadGameHistoryRequest.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for LoadGameHistoryRequest
             * @function getTypeUrl
             * @memberof wm.protobuf.LoadGameHistoryRequest
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            LoadGameHistoryRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/wm.protobuf.LoadGameHistoryRequest";
            };

            return LoadGameHistoryRequest;
        })();

        protobuf.LoadGameHistoryResponse = (function() {

            /**
             * Properties of a LoadGameHistoryResponse.
             * @memberof wm.protobuf
             * @interface ILoadGameHistoryResponse
             * @property {wm.protobuf.ErrorCode} error LoadGameHistoryResponse error
             * @property {Array.<wm.protobuf.LoadGameHistoryResponse.ITimeAttackRecord>|null} [taRecords] LoadGameHistoryResponse taRecords
             * @property {number} taRankingUpdatedAt LoadGameHistoryResponse taRankingUpdatedAt
             * @property {Array.<wm.protobuf.LoadGameHistoryResponse.IGhostBattleRecord>|null} [ghostHistory] LoadGameHistoryResponse ghostHistory
             * @property {number} ghostBattleCount LoadGameHistoryResponse ghostBattleCount
             * @property {number} ghostBattleWinCount LoadGameHistoryResponse ghostBattleWinCount
             * @property {number} stampSheetCount LoadGameHistoryResponse stampSheetCount
             * @property {Array.<number>|null} [stampSheet] LoadGameHistoryResponse stampSheet
             */

            /**
             * Constructs a new LoadGameHistoryResponse.
             * @memberof wm.protobuf
             * @classdesc Represents a LoadGameHistoryResponse.
             * @implements ILoadGameHistoryResponse
             * @constructor
             * @param {wm.protobuf.ILoadGameHistoryResponse=} [properties] Properties to set
             */
            function LoadGameHistoryResponse(properties) {
                this.taRecords = [];
                this.ghostHistory = [];
                this.stampSheet = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * LoadGameHistoryResponse error.
             * @member {wm.protobuf.ErrorCode} error
             * @memberof wm.protobuf.LoadGameHistoryResponse
             * @instance
             */
            LoadGameHistoryResponse.prototype.error = 0;

            /**
             * LoadGameHistoryResponse taRecords.
             * @member {Array.<wm.protobuf.LoadGameHistoryResponse.ITimeAttackRecord>} taRecords
             * @memberof wm.protobuf.LoadGameHistoryResponse
             * @instance
             */
            LoadGameHistoryResponse.prototype.taRecords = $util.emptyArray;

            /**
             * LoadGameHistoryResponse taRankingUpdatedAt.
             * @member {number} taRankingUpdatedAt
             * @memberof wm.protobuf.LoadGameHistoryResponse
             * @instance
             */
            LoadGameHistoryResponse.prototype.taRankingUpdatedAt = 0;

            /**
             * LoadGameHistoryResponse ghostHistory.
             * @member {Array.<wm.protobuf.LoadGameHistoryResponse.IGhostBattleRecord>} ghostHistory
             * @memberof wm.protobuf.LoadGameHistoryResponse
             * @instance
             */
            LoadGameHistoryResponse.prototype.ghostHistory = $util.emptyArray;

            /**
             * LoadGameHistoryResponse ghostBattleCount.
             * @member {number} ghostBattleCount
             * @memberof wm.protobuf.LoadGameHistoryResponse
             * @instance
             */
            LoadGameHistoryResponse.prototype.ghostBattleCount = 0;

            /**
             * LoadGameHistoryResponse ghostBattleWinCount.
             * @member {number} ghostBattleWinCount
             * @memberof wm.protobuf.LoadGameHistoryResponse
             * @instance
             */
            LoadGameHistoryResponse.prototype.ghostBattleWinCount = 0;

            /**
             * LoadGameHistoryResponse stampSheetCount.
             * @member {number} stampSheetCount
             * @memberof wm.protobuf.LoadGameHistoryResponse
             * @instance
             */
            LoadGameHistoryResponse.prototype.stampSheetCount = 0;

            /**
             * LoadGameHistoryResponse stampSheet.
             * @member {Array.<number>} stampSheet
             * @memberof wm.protobuf.LoadGameHistoryResponse
             * @instance
             */
            LoadGameHistoryResponse.prototype.stampSheet = $util.emptyArray;

            /**
             * Creates a new LoadGameHistoryResponse instance using the specified properties.
             * @function create
             * @memberof wm.protobuf.LoadGameHistoryResponse
             * @static
             * @param {wm.protobuf.ILoadGameHistoryResponse=} [properties] Properties to set
             * @returns {wm.protobuf.LoadGameHistoryResponse} LoadGameHistoryResponse instance
             */
            LoadGameHistoryResponse.create = function create(properties) {
                return new LoadGameHistoryResponse(properties);
            };

            /**
             * Encodes the specified LoadGameHistoryResponse message. Does not implicitly {@link wm.protobuf.LoadGameHistoryResponse.verify|verify} messages.
             * @function encode
             * @memberof wm.protobuf.LoadGameHistoryResponse
             * @static
             * @param {wm.protobuf.ILoadGameHistoryResponse} message LoadGameHistoryResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LoadGameHistoryResponse.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
                if (message.taRecords != null && message.taRecords.length)
                    for (let i = 0; i < message.taRecords.length; ++i)
                        $root.wm.protobuf.LoadGameHistoryResponse.TimeAttackRecord.encode(message.taRecords[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.taRankingUpdatedAt);
                if (message.ghostHistory != null && message.ghostHistory.length)
                    for (let i = 0; i < message.ghostHistory.length; ++i)
                        $root.wm.protobuf.LoadGameHistoryResponse.GhostBattleRecord.encode(message.ghostHistory[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.ghostBattleCount);
                writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.ghostBattleWinCount);
                writer.uint32(/* id 7, wireType 0 =*/56).uint32(message.stampSheetCount);
                if (message.stampSheet != null && message.stampSheet.length)
                    for (let i = 0; i < message.stampSheet.length; ++i)
                        writer.uint32(/* id 8, wireType 0 =*/64).uint32(message.stampSheet[i]);
                return writer;
            };

            /**
             * Encodes the specified LoadGameHistoryResponse message, length delimited. Does not implicitly {@link wm.protobuf.LoadGameHistoryResponse.verify|verify} messages.
             * @function encodeDelimited
             * @memberof wm.protobuf.LoadGameHistoryResponse
             * @static
             * @param {wm.protobuf.ILoadGameHistoryResponse} message LoadGameHistoryResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LoadGameHistoryResponse.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a LoadGameHistoryResponse message from the specified reader or buffer.
             * @function decode
             * @memberof wm.protobuf.LoadGameHistoryResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {wm.protobuf.LoadGameHistoryResponse} LoadGameHistoryResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LoadGameHistoryResponse.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.wm.protobuf.LoadGameHistoryResponse();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.error = reader.int32();
                            break;
                        }
                    case 2: {
                            if (!(message.taRecords && message.taRecords.length))
                                message.taRecords = [];
                            message.taRecords.push($root.wm.protobuf.LoadGameHistoryResponse.TimeAttackRecord.decode(reader, reader.uint32()));
                            break;
                        }
                    case 3: {
                            message.taRankingUpdatedAt = reader.uint32();
                            break;
                        }
                    case 4: {
                            if (!(message.ghostHistory && message.ghostHistory.length))
                                message.ghostHistory = [];
                            message.ghostHistory.push($root.wm.protobuf.LoadGameHistoryResponse.GhostBattleRecord.decode(reader, reader.uint32()));
                            break;
                        }
                    case 5: {
                            message.ghostBattleCount = reader.uint32();
                            break;
                        }
                    case 6: {
                            message.ghostBattleWinCount = reader.uint32();
                            break;
                        }
                    case 7: {
                            message.stampSheetCount = reader.uint32();
                            break;
                        }
                    case 8: {
                            if (!(message.stampSheet && message.stampSheet.length))
                                message.stampSheet = [];
                            if ((tag & 7) === 2) {
                                let end2 = reader.uint32() + reader.pos;
                                while (reader.pos < end2)
                                    message.stampSheet.push(reader.uint32());
                            } else
                                message.stampSheet.push(reader.uint32());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("error"))
                    throw $util.ProtocolError("missing required 'error'", { instance: message });
                if (!message.hasOwnProperty("taRankingUpdatedAt"))
                    throw $util.ProtocolError("missing required 'taRankingUpdatedAt'", { instance: message });
                if (!message.hasOwnProperty("ghostBattleCount"))
                    throw $util.ProtocolError("missing required 'ghostBattleCount'", { instance: message });
                if (!message.hasOwnProperty("ghostBattleWinCount"))
                    throw $util.ProtocolError("missing required 'ghostBattleWinCount'", { instance: message });
                if (!message.hasOwnProperty("stampSheetCount"))
                    throw $util.ProtocolError("missing required 'stampSheetCount'", { instance: message });
                return message;
            };

            /**
             * Decodes a LoadGameHistoryResponse message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof wm.protobuf.LoadGameHistoryResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {wm.protobuf.LoadGameHistoryResponse} LoadGameHistoryResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LoadGameHistoryResponse.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a LoadGameHistoryResponse message.
             * @function verify
             * @memberof wm.protobuf.LoadGameHistoryResponse
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            LoadGameHistoryResponse.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                switch (message.error) {
                default:
                    return "error: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 7:
                case 9:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 16:
                case 17:
                case 18:
                case 19:
                    break;
                }
                if (message.taRecords != null && message.hasOwnProperty("taRecords")) {
                    if (!Array.isArray(message.taRecords))
                        return "taRecords: array expected";
                    for (let i = 0; i < message.taRecords.length; ++i) {
                        let error = $root.wm.protobuf.LoadGameHistoryResponse.TimeAttackRecord.verify(message.taRecords[i]);
                        if (error)
                            return "taRecords." + error;
                    }
                }
                if (!$util.isInteger(message.taRankingUpdatedAt))
                    return "taRankingUpdatedAt: integer expected";
                if (message.ghostHistory != null && message.hasOwnProperty("ghostHistory")) {
                    if (!Array.isArray(message.ghostHistory))
                        return "ghostHistory: array expected";
                    for (let i = 0; i < message.ghostHistory.length; ++i) {
                        let error = $root.wm.protobuf.LoadGameHistoryResponse.GhostBattleRecord.verify(message.ghostHistory[i]);
                        if (error)
                            return "ghostHistory." + error;
                    }
                }
                if (!$util.isInteger(message.ghostBattleCount))
                    return "ghostBattleCount: integer expected";
                if (!$util.isInteger(message.ghostBattleWinCount))
                    return "ghostBattleWinCount: integer expected";
                if (!$util.isInteger(message.stampSheetCount))
                    return "stampSheetCount: integer expected";
                if (message.stampSheet != null && message.hasOwnProperty("stampSheet")) {
                    if (!Array.isArray(message.stampSheet))
                        return "stampSheet: array expected";
                    for (let i = 0; i < message.stampSheet.length; ++i)
                        if (!$util.isInteger(message.stampSheet[i]))
                            return "stampSheet: integer[] expected";
                }
                return null;
            };

            /**
             * Creates a LoadGameHistoryResponse message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof wm.protobuf.LoadGameHistoryResponse
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {wm.protobuf.LoadGameHistoryResponse} LoadGameHistoryResponse
             */
            LoadGameHistoryResponse.fromObject = function fromObject(object) {
                if (object instanceof $root.wm.protobuf.LoadGameHistoryResponse)
                    return object;
                let message = new $root.wm.protobuf.LoadGameHistoryResponse();
                switch (object.error) {
                default:
                    if (typeof object.error === "number") {
                        message.error = object.error;
                        break;
                    }
                    break;
                case "ERR_SUCCESS":
                case 0:
                    message.error = 0;
                    break;
                case "ERR_REQUEST":
                case 1:
                    message.error = 1;
                    break;
                case "ERR_NOT_FOUND":
                case 2:
                    message.error = 2;
                    break;
                case "ERR_ID_SERVER":
                case 3:
                    message.error = 3;
                    break;
                case "ERR_ID_BANNED":
                case 4:
                    message.error = 4;
                    break;
                case "ERR_USER_LOCKED":
                case 5:
                    message.error = 5;
                    break;
                case "ERR_USER_VERSION":
                case 6:
                    message.error = 6;
                    break;
                case "ERR_NAME_CONFLICTED":
                case 7:
                    message.error = 7;
                    break;
                case "ERR_FORBIDDEN":
                case 9:
                    message.error = 9;
                    break;
                case "ERR_USER_SUCCEEDED":
                case 11:
                    message.error = 11;
                    break;
                case "ERR_BEING_TRANSFERRED":
                case 12:
                    message.error = 12;
                    break;
                case "ERR_SCRATCH_LOCKED":
                case 13:
                    message.error = 13;
                    break;
                case "ERR_BINGO_REVENGE_LOCKED":
                case 14:
                    message.error = 14;
                    break;
                case "ERR_BINGO_ALREDY_LINKED":
                case 15:
                    message.error = 15;
                    break;
                case "ERR_BINGO_FINISHED":
                case 16:
                    message.error = 16;
                    break;
                case "ERR_BINGO_REACHED_MAX_USER":
                case 17:
                    message.error = 17;
                    break;
                case "ERR_CAR_NOT_FOUND":
                case 18:
                    message.error = 18;
                    break;
                case "ERR_BINGO_CARD_NOT_FOUND":
                case 19:
                    message.error = 19;
                    break;
                }
                if (object.taRecords) {
                    if (!Array.isArray(object.taRecords))
                        throw TypeError(".wm.protobuf.LoadGameHistoryResponse.taRecords: array expected");
                    message.taRecords = [];
                    for (let i = 0; i < object.taRecords.length; ++i) {
                        if (typeof object.taRecords[i] !== "object")
                            throw TypeError(".wm.protobuf.LoadGameHistoryResponse.taRecords: object expected");
                        message.taRecords[i] = $root.wm.protobuf.LoadGameHistoryResponse.TimeAttackRecord.fromObject(object.taRecords[i]);
                    }
                }
                if (object.taRankingUpdatedAt != null)
                    message.taRankingUpdatedAt = object.taRankingUpdatedAt >>> 0;
                if (object.ghostHistory) {
                    if (!Array.isArray(object.ghostHistory))
                        throw TypeError(".wm.protobuf.LoadGameHistoryResponse.ghostHistory: array expected");
                    message.ghostHistory = [];
                    for (let i = 0; i < object.ghostHistory.length; ++i) {
                        if (typeof object.ghostHistory[i] !== "object")
                            throw TypeError(".wm.protobuf.LoadGameHistoryResponse.ghostHistory: object expected");
                        message.ghostHistory[i] = $root.wm.protobuf.LoadGameHistoryResponse.GhostBattleRecord.fromObject(object.ghostHistory[i]);
                    }
                }
                if (object.ghostBattleCount != null)
                    message.ghostBattleCount = object.ghostBattleCount >>> 0;
                if (object.ghostBattleWinCount != null)
                    message.ghostBattleWinCount = object.ghostBattleWinCount >>> 0;
                if (object.stampSheetCount != null)
                    message.stampSheetCount = object.stampSheetCount >>> 0;
                if (object.stampSheet) {
                    if (!Array.isArray(object.stampSheet))
                        throw TypeError(".wm.protobuf.LoadGameHistoryResponse.stampSheet: array expected");
                    message.stampSheet = [];
                    for (let i = 0; i < object.stampSheet.length; ++i)
                        message.stampSheet[i] = object.stampSheet[i] >>> 0;
                }
                return message;
            };

            /**
             * Creates a plain object from a LoadGameHistoryResponse message. Also converts values to other types if specified.
             * @function toObject
             * @memberof wm.protobuf.LoadGameHistoryResponse
             * @static
             * @param {wm.protobuf.LoadGameHistoryResponse} message LoadGameHistoryResponse
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            LoadGameHistoryResponse.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults) {
                    object.taRecords = [];
                    object.ghostHistory = [];
                    object.stampSheet = [];
                }
                if (options.defaults) {
                    object.error = options.enums === String ? "ERR_SUCCESS" : 0;
                    object.taRankingUpdatedAt = 0;
                    object.ghostBattleCount = 0;
                    object.ghostBattleWinCount = 0;
                    object.stampSheetCount = 0;
                }
                if (message.error != null && message.hasOwnProperty("error"))
                    object.error = options.enums === String ? $root.wm.protobuf.ErrorCode[message.error] === undefined ? message.error : $root.wm.protobuf.ErrorCode[message.error] : message.error;
                if (message.taRecords && message.taRecords.length) {
                    object.taRecords = [];
                    for (let j = 0; j < message.taRecords.length; ++j)
                        object.taRecords[j] = $root.wm.protobuf.LoadGameHistoryResponse.TimeAttackRecord.toObject(message.taRecords[j], options);
                }
                if (message.taRankingUpdatedAt != null && message.hasOwnProperty("taRankingUpdatedAt"))
                    object.taRankingUpdatedAt = message.taRankingUpdatedAt;
                if (message.ghostHistory && message.ghostHistory.length) {
                    object.ghostHistory = [];
                    for (let j = 0; j < message.ghostHistory.length; ++j)
                        object.ghostHistory[j] = $root.wm.protobuf.LoadGameHistoryResponse.GhostBattleRecord.toObject(message.ghostHistory[j], options);
                }
                if (message.ghostBattleCount != null && message.hasOwnProperty("ghostBattleCount"))
                    object.ghostBattleCount = message.ghostBattleCount;
                if (message.ghostBattleWinCount != null && message.hasOwnProperty("ghostBattleWinCount"))
                    object.ghostBattleWinCount = message.ghostBattleWinCount;
                if (message.stampSheetCount != null && message.hasOwnProperty("stampSheetCount"))
                    object.stampSheetCount = message.stampSheetCount;
                if (message.stampSheet && message.stampSheet.length) {
                    object.stampSheet = [];
                    for (let j = 0; j < message.stampSheet.length; ++j)
                        object.stampSheet[j] = message.stampSheet[j];
                }
                return object;
            };

            /**
             * Converts this LoadGameHistoryResponse to JSON.
             * @function toJSON
             * @memberof wm.protobuf.LoadGameHistoryResponse
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            LoadGameHistoryResponse.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for LoadGameHistoryResponse
             * @function getTypeUrl
             * @memberof wm.protobuf.LoadGameHistoryResponse
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            LoadGameHistoryResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/wm.protobuf.LoadGameHistoryResponse";
            };

            LoadGameHistoryResponse.TimeAttackRecord = (function() {

                /**
                 * Properties of a TimeAttackRecord.
                 * @memberof wm.protobuf.LoadGameHistoryResponse
                 * @interface ITimeAttackRecord
                 * @property {number} course TimeAttackRecord course
                 * @property {number|null} [time] TimeAttackRecord time
                 * @property {number|null} [tunePower] TimeAttackRecord tunePower
                 * @property {number|null} [tuneHandling] TimeAttackRecord tuneHandling
                 * @property {number|null} [wholeRank] TimeAttackRecord wholeRank
                 * @property {number} wholeParticipants TimeAttackRecord wholeParticipants
                 * @property {number|null} [modelRank] TimeAttackRecord modelRank
                 * @property {number} modelParticipants TimeAttackRecord modelParticipants
                 */

                /**
                 * Constructs a new TimeAttackRecord.
                 * @memberof wm.protobuf.LoadGameHistoryResponse
                 * @classdesc Represents a TimeAttackRecord.
                 * @implements ITimeAttackRecord
                 * @constructor
                 * @param {wm.protobuf.LoadGameHistoryResponse.ITimeAttackRecord=} [properties] Properties to set
                 */
                function TimeAttackRecord(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * TimeAttackRecord course.
                 * @member {number} course
                 * @memberof wm.protobuf.LoadGameHistoryResponse.TimeAttackRecord
                 * @instance
                 */
                TimeAttackRecord.prototype.course = 0;

                /**
                 * TimeAttackRecord time.
                 * @member {number} time
                 * @memberof wm.protobuf.LoadGameHistoryResponse.TimeAttackRecord
                 * @instance
                 */
                TimeAttackRecord.prototype.time = 0;

                /**
                 * TimeAttackRecord tunePower.
                 * @member {number} tunePower
                 * @memberof wm.protobuf.LoadGameHistoryResponse.TimeAttackRecord
                 * @instance
                 */
                TimeAttackRecord.prototype.tunePower = 0;

                /**
                 * TimeAttackRecord tuneHandling.
                 * @member {number} tuneHandling
                 * @memberof wm.protobuf.LoadGameHistoryResponse.TimeAttackRecord
                 * @instance
                 */
                TimeAttackRecord.prototype.tuneHandling = 0;

                /**
                 * TimeAttackRecord wholeRank.
                 * @member {number} wholeRank
                 * @memberof wm.protobuf.LoadGameHistoryResponse.TimeAttackRecord
                 * @instance
                 */
                TimeAttackRecord.prototype.wholeRank = 0;

                /**
                 * TimeAttackRecord wholeParticipants.
                 * @member {number} wholeParticipants
                 * @memberof wm.protobuf.LoadGameHistoryResponse.TimeAttackRecord
                 * @instance
                 */
                TimeAttackRecord.prototype.wholeParticipants = 0;

                /**
                 * TimeAttackRecord modelRank.
                 * @member {number} modelRank
                 * @memberof wm.protobuf.LoadGameHistoryResponse.TimeAttackRecord
                 * @instance
                 */
                TimeAttackRecord.prototype.modelRank = 0;

                /**
                 * TimeAttackRecord modelParticipants.
                 * @member {number} modelParticipants
                 * @memberof wm.protobuf.LoadGameHistoryResponse.TimeAttackRecord
                 * @instance
                 */
                TimeAttackRecord.prototype.modelParticipants = 0;

                /**
                 * Creates a new TimeAttackRecord instance using the specified properties.
                 * @function create
                 * @memberof wm.protobuf.LoadGameHistoryResponse.TimeAttackRecord
                 * @static
                 * @param {wm.protobuf.LoadGameHistoryResponse.ITimeAttackRecord=} [properties] Properties to set
                 * @returns {wm.protobuf.LoadGameHistoryResponse.TimeAttackRecord} TimeAttackRecord instance
                 */
                TimeAttackRecord.create = function create(properties) {
                    return new TimeAttackRecord(properties);
                };

                /**
                 * Encodes the specified TimeAttackRecord message. Does not implicitly {@link wm.protobuf.LoadGameHistoryResponse.TimeAttackRecord.verify|verify} messages.
                 * @function encode
                 * @memberof wm.protobuf.LoadGameHistoryResponse.TimeAttackRecord
                 * @static
                 * @param {wm.protobuf.LoadGameHistoryResponse.ITimeAttackRecord} message TimeAttackRecord message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                TimeAttackRecord.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.course);
                    if (message.time != null && Object.hasOwnProperty.call(message, "time"))
                        writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.time);
                    if (message.tunePower != null && Object.hasOwnProperty.call(message, "tunePower"))
                        writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.tunePower);
                    if (message.tuneHandling != null && Object.hasOwnProperty.call(message, "tuneHandling"))
                        writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.tuneHandling);
                    if (message.wholeRank != null && Object.hasOwnProperty.call(message, "wholeRank"))
                        writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.wholeRank);
                    writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.wholeParticipants);
                    if (message.modelRank != null && Object.hasOwnProperty.call(message, "modelRank"))
                        writer.uint32(/* id 7, wireType 0 =*/56).uint32(message.modelRank);
                    writer.uint32(/* id 8, wireType 0 =*/64).uint32(message.modelParticipants);
                    return writer;
                };

                /**
                 * Encodes the specified TimeAttackRecord message, length delimited. Does not implicitly {@link wm.protobuf.LoadGameHistoryResponse.TimeAttackRecord.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof wm.protobuf.LoadGameHistoryResponse.TimeAttackRecord
                 * @static
                 * @param {wm.protobuf.LoadGameHistoryResponse.ITimeAttackRecord} message TimeAttackRecord message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                TimeAttackRecord.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a TimeAttackRecord message from the specified reader or buffer.
                 * @function decode
                 * @memberof wm.protobuf.LoadGameHistoryResponse.TimeAttackRecord
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {wm.protobuf.LoadGameHistoryResponse.TimeAttackRecord} TimeAttackRecord
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                TimeAttackRecord.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.wm.protobuf.LoadGameHistoryResponse.TimeAttackRecord();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.course = reader.uint32();
                                break;
                            }
                        case 2: {
                                message.time = reader.uint32();
                                break;
                            }
                        case 3: {
                                message.tunePower = reader.uint32();
                                break;
                            }
                        case 4: {
                                message.tuneHandling = reader.uint32();
                                break;
                            }
                        case 5: {
                                message.wholeRank = reader.uint32();
                                break;
                            }
                        case 6: {
                                message.wholeParticipants = reader.uint32();
                                break;
                            }
                        case 7: {
                                message.modelRank = reader.uint32();
                                break;
                            }
                        case 8: {
                                message.modelParticipants = reader.uint32();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    if (!message.hasOwnProperty("course"))
                        throw $util.ProtocolError("missing required 'course'", { instance: message });
                    if (!message.hasOwnProperty("wholeParticipants"))
                        throw $util.ProtocolError("missing required 'wholeParticipants'", { instance: message });
                    if (!message.hasOwnProperty("modelParticipants"))
                        throw $util.ProtocolError("missing required 'modelParticipants'", { instance: message });
                    return message;
                };

                /**
                 * Decodes a TimeAttackRecord message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof wm.protobuf.LoadGameHistoryResponse.TimeAttackRecord
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {wm.protobuf.LoadGameHistoryResponse.TimeAttackRecord} TimeAttackRecord
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                TimeAttackRecord.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a TimeAttackRecord message.
                 * @function verify
                 * @memberof wm.protobuf.LoadGameHistoryResponse.TimeAttackRecord
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                TimeAttackRecord.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (!$util.isInteger(message.course))
                        return "course: integer expected";
                    if (message.time != null && message.hasOwnProperty("time"))
                        if (!$util.isInteger(message.time))
                            return "time: integer expected";
                    if (message.tunePower != null && message.hasOwnProperty("tunePower"))
                        if (!$util.isInteger(message.tunePower))
                            return "tunePower: integer expected";
                    if (message.tuneHandling != null && message.hasOwnProperty("tuneHandling"))
                        if (!$util.isInteger(message.tuneHandling))
                            return "tuneHandling: integer expected";
                    if (message.wholeRank != null && message.hasOwnProperty("wholeRank"))
                        if (!$util.isInteger(message.wholeRank))
                            return "wholeRank: integer expected";
                    if (!$util.isInteger(message.wholeParticipants))
                        return "wholeParticipants: integer expected";
                    if (message.modelRank != null && message.hasOwnProperty("modelRank"))
                        if (!$util.isInteger(message.modelRank))
                            return "modelRank: integer expected";
                    if (!$util.isInteger(message.modelParticipants))
                        return "modelParticipants: integer expected";
                    return null;
                };

                /**
                 * Creates a TimeAttackRecord message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof wm.protobuf.LoadGameHistoryResponse.TimeAttackRecord
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {wm.protobuf.LoadGameHistoryResponse.TimeAttackRecord} TimeAttackRecord
                 */
                TimeAttackRecord.fromObject = function fromObject(object) {
                    if (object instanceof $root.wm.protobuf.LoadGameHistoryResponse.TimeAttackRecord)
                        return object;
                    let message = new $root.wm.protobuf.LoadGameHistoryResponse.TimeAttackRecord();
                    if (object.course != null)
                        message.course = object.course >>> 0;
                    if (object.time != null)
                        message.time = object.time >>> 0;
                    if (object.tunePower != null)
                        message.tunePower = object.tunePower >>> 0;
                    if (object.tuneHandling != null)
                        message.tuneHandling = object.tuneHandling >>> 0;
                    if (object.wholeRank != null)
                        message.wholeRank = object.wholeRank >>> 0;
                    if (object.wholeParticipants != null)
                        message.wholeParticipants = object.wholeParticipants >>> 0;
                    if (object.modelRank != null)
                        message.modelRank = object.modelRank >>> 0;
                    if (object.modelParticipants != null)
                        message.modelParticipants = object.modelParticipants >>> 0;
                    return message;
                };

                /**
                 * Creates a plain object from a TimeAttackRecord message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof wm.protobuf.LoadGameHistoryResponse.TimeAttackRecord
                 * @static
                 * @param {wm.protobuf.LoadGameHistoryResponse.TimeAttackRecord} message TimeAttackRecord
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                TimeAttackRecord.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        object.course = 0;
                        object.time = 0;
                        object.tunePower = 0;
                        object.tuneHandling = 0;
                        object.wholeRank = 0;
                        object.wholeParticipants = 0;
                        object.modelRank = 0;
                        object.modelParticipants = 0;
                    }
                    if (message.course != null && message.hasOwnProperty("course"))
                        object.course = message.course;
                    if (message.time != null && message.hasOwnProperty("time"))
                        object.time = message.time;
                    if (message.tunePower != null && message.hasOwnProperty("tunePower"))
                        object.tunePower = message.tunePower;
                    if (message.tuneHandling != null && message.hasOwnProperty("tuneHandling"))
                        object.tuneHandling = message.tuneHandling;
                    if (message.wholeRank != null && message.hasOwnProperty("wholeRank"))
                        object.wholeRank = message.wholeRank;
                    if (message.wholeParticipants != null && message.hasOwnProperty("wholeParticipants"))
                        object.wholeParticipants = message.wholeParticipants;
                    if (message.modelRank != null && message.hasOwnProperty("modelRank"))
                        object.modelRank = message.modelRank;
                    if (message.modelParticipants != null && message.hasOwnProperty("modelParticipants"))
                        object.modelParticipants = message.modelParticipants;
                    return object;
                };

                /**
                 * Converts this TimeAttackRecord to JSON.
                 * @function toJSON
                 * @memberof wm.protobuf.LoadGameHistoryResponse.TimeAttackRecord
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                TimeAttackRecord.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                /**
                 * Gets the default type url for TimeAttackRecord
                 * @function getTypeUrl
                 * @memberof wm.protobuf.LoadGameHistoryResponse.TimeAttackRecord
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                TimeAttackRecord.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/wm.protobuf.LoadGameHistoryResponse.TimeAttackRecord";
                };

                return TimeAttackRecord;
            })();

            LoadGameHistoryResponse.GhostBattleRecord = (function() {

                /**
                 * Properties of a GhostBattleRecord.
                 * @memberof wm.protobuf.LoadGameHistoryResponse
                 * @interface IGhostBattleRecord
                 * @property {wm.protobuf.LoadGameHistoryResponse.GhostBattleRecord.IGhostCarSetting} carSetting GhostBattleRecord carSetting
                 * @property {wm.protobuf.LoadGameHistoryResponse.GhostBattleRecord.IGhostBattleRecordCar} opponent GhostBattleRecord opponent
                 * @property {Array.<wm.protobuf.LoadGameHistoryResponse.GhostBattleRecord.IGhostBattleRecordCar>|null} [mobs] GhostBattleRecord mobs
                 * @property {number} area GhostBattleRecord area
                 * @property {number} playedAt GhostBattleRecord playedAt
                 * @property {string} playedShopName GhostBattleRecord playedShopName
                 */

                /**
                 * Constructs a new GhostBattleRecord.
                 * @memberof wm.protobuf.LoadGameHistoryResponse
                 * @classdesc Represents a GhostBattleRecord.
                 * @implements IGhostBattleRecord
                 * @constructor
                 * @param {wm.protobuf.LoadGameHistoryResponse.IGhostBattleRecord=} [properties] Properties to set
                 */
                function GhostBattleRecord(properties) {
                    this.mobs = [];
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * GhostBattleRecord carSetting.
                 * @member {wm.protobuf.LoadGameHistoryResponse.GhostBattleRecord.IGhostCarSetting} carSetting
                 * @memberof wm.protobuf.LoadGameHistoryResponse.GhostBattleRecord
                 * @instance
                 */
                GhostBattleRecord.prototype.carSetting = null;

                /**
                 * GhostBattleRecord opponent.
                 * @member {wm.protobuf.LoadGameHistoryResponse.GhostBattleRecord.IGhostBattleRecordCar} opponent
                 * @memberof wm.protobuf.LoadGameHistoryResponse.GhostBattleRecord
                 * @instance
                 */
                GhostBattleRecord.prototype.opponent = null;

                /**
                 * GhostBattleRecord mobs.
                 * @member {Array.<wm.protobuf.LoadGameHistoryResponse.GhostBattleRecord.IGhostBattleRecordCar>} mobs
                 * @memberof wm.protobuf.LoadGameHistoryResponse.GhostBattleRecord
                 * @instance
                 */
                GhostBattleRecord.prototype.mobs = $util.emptyArray;

                /**
                 * GhostBattleRecord area.
                 * @member {number} area
                 * @memberof wm.protobuf.LoadGameHistoryResponse.GhostBattleRecord
                 * @instance
                 */
                GhostBattleRecord.prototype.area = 0;

                /**
                 * GhostBattleRecord playedAt.
                 * @member {number} playedAt
                 * @memberof wm.protobuf.LoadGameHistoryResponse.GhostBattleRecord
                 * @instance
                 */
                GhostBattleRecord.prototype.playedAt = 0;

                /**
                 * GhostBattleRecord playedShopName.
                 * @member {string} playedShopName
                 * @memberof wm.protobuf.LoadGameHistoryResponse.GhostBattleRecord
                 * @instance
                 */
                GhostBattleRecord.prototype.playedShopName = "";

                /**
                 * Creates a new GhostBattleRecord instance using the specified properties.
                 * @function create
                 * @memberof wm.protobuf.LoadGameHistoryResponse.GhostBattleRecord
                 * @static
                 * @param {wm.protobuf.LoadGameHistoryResponse.IGhostBattleRecord=} [properties] Properties to set
                 * @returns {wm.protobuf.LoadGameHistoryResponse.GhostBattleRecord} GhostBattleRecord instance
                 */
                GhostBattleRecord.create = function create(properties) {
                    return new GhostBattleRecord(properties);
                };

                /**
                 * Encodes the specified GhostBattleRecord message. Does not implicitly {@link wm.protobuf.LoadGameHistoryResponse.GhostBattleRecord.verify|verify} messages.
                 * @function encode
                 * @memberof wm.protobuf.LoadGameHistoryResponse.GhostBattleRecord
                 * @static
                 * @param {wm.protobuf.LoadGameHistoryResponse.IGhostBattleRecord} message GhostBattleRecord message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                GhostBattleRecord.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    $root.wm.protobuf.LoadGameHistoryResponse.GhostBattleRecord.GhostCarSetting.encode(message.carSetting, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    $root.wm.protobuf.LoadGameHistoryResponse.GhostBattleRecord.GhostBattleRecordCar.encode(message.opponent, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.mobs != null && message.mobs.length)
                        for (let i = 0; i < message.mobs.length; ++i)
                            $root.wm.protobuf.LoadGameHistoryResponse.GhostBattleRecord.GhostBattleRecordCar.encode(message.mobs[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.area);
                    writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.playedAt);
                    writer.uint32(/* id 6, wireType 2 =*/50).string(message.playedShopName);
                    return writer;
                };

                /**
                 * Encodes the specified GhostBattleRecord message, length delimited. Does not implicitly {@link wm.protobuf.LoadGameHistoryResponse.GhostBattleRecord.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof wm.protobuf.LoadGameHistoryResponse.GhostBattleRecord
                 * @static
                 * @param {wm.protobuf.LoadGameHistoryResponse.IGhostBattleRecord} message GhostBattleRecord message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                GhostBattleRecord.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a GhostBattleRecord message from the specified reader or buffer.
                 * @function decode
                 * @memberof wm.protobuf.LoadGameHistoryResponse.GhostBattleRecord
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {wm.protobuf.LoadGameHistoryResponse.GhostBattleRecord} GhostBattleRecord
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                GhostBattleRecord.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.wm.protobuf.LoadGameHistoryResponse.GhostBattleRecord();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.carSetting = $root.wm.protobuf.LoadGameHistoryResponse.GhostBattleRecord.GhostCarSetting.decode(reader, reader.uint32());
                                break;
                            }
                        case 2: {
                                message.opponent = $root.wm.protobuf.LoadGameHistoryResponse.GhostBattleRecord.GhostBattleRecordCar.decode(reader, reader.uint32());
                                break;
                            }
                        case 3: {
                                if (!(message.mobs && message.mobs.length))
                                    message.mobs = [];
                                message.mobs.push($root.wm.protobuf.LoadGameHistoryResponse.GhostBattleRecord.GhostBattleRecordCar.decode(reader, reader.uint32()));
                                break;
                            }
                        case 4: {
                                message.area = reader.uint32();
                                break;
                            }
                        case 5: {
                                message.playedAt = reader.uint32();
                                break;
                            }
                        case 6: {
                                message.playedShopName = reader.string();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    if (!message.hasOwnProperty("carSetting"))
                        throw $util.ProtocolError("missing required 'carSetting'", { instance: message });
                    if (!message.hasOwnProperty("opponent"))
                        throw $util.ProtocolError("missing required 'opponent'", { instance: message });
                    if (!message.hasOwnProperty("area"))
                        throw $util.ProtocolError("missing required 'area'", { instance: message });
                    if (!message.hasOwnProperty("playedAt"))
                        throw $util.ProtocolError("missing required 'playedAt'", { instance: message });
                    if (!message.hasOwnProperty("playedShopName"))
                        throw $util.ProtocolError("missing required 'playedShopName'", { instance: message });
                    return message;
                };

                /**
                 * Decodes a GhostBattleRecord message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof wm.protobuf.LoadGameHistoryResponse.GhostBattleRecord
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {wm.protobuf.LoadGameHistoryResponse.GhostBattleRecord} GhostBattleRecord
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                GhostBattleRecord.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a GhostBattleRecord message.
                 * @function verify
                 * @memberof wm.protobuf.LoadGameHistoryResponse.GhostBattleRecord
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                GhostBattleRecord.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    {
                        let error = $root.wm.protobuf.LoadGameHistoryResponse.GhostBattleRecord.GhostCarSetting.verify(message.carSetting);
                        if (error)
                            return "carSetting." + error;
                    }
                    {
                        let error = $root.wm.protobuf.LoadGameHistoryResponse.GhostBattleRecord.GhostBattleRecordCar.verify(message.opponent);
                        if (error)
                            return "opponent." + error;
                    }
                    if (message.mobs != null && message.hasOwnProperty("mobs")) {
                        if (!Array.isArray(message.mobs))
                            return "mobs: array expected";
                        for (let i = 0; i < message.mobs.length; ++i) {
                            let error = $root.wm.protobuf.LoadGameHistoryResponse.GhostBattleRecord.GhostBattleRecordCar.verify(message.mobs[i]);
                            if (error)
                                return "mobs." + error;
                        }
                    }
                    if (!$util.isInteger(message.area))
                        return "area: integer expected";
                    if (!$util.isInteger(message.playedAt))
                        return "playedAt: integer expected";
                    if (!$util.isString(message.playedShopName))
                        return "playedShopName: string expected";
                    return null;
                };

                /**
                 * Creates a GhostBattleRecord message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof wm.protobuf.LoadGameHistoryResponse.GhostBattleRecord
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {wm.protobuf.LoadGameHistoryResponse.GhostBattleRecord} GhostBattleRecord
                 */
                GhostBattleRecord.fromObject = function fromObject(object) {
                    if (object instanceof $root.wm.protobuf.LoadGameHistoryResponse.GhostBattleRecord)
                        return object;
                    let message = new $root.wm.protobuf.LoadGameHistoryResponse.GhostBattleRecord();
                    if (object.carSetting != null) {
                        if (typeof object.carSetting !== "object")
                            throw TypeError(".wm.protobuf.LoadGameHistoryResponse.GhostBattleRecord.carSetting: object expected");
                        message.carSetting = $root.wm.protobuf.LoadGameHistoryResponse.GhostBattleRecord.GhostCarSetting.fromObject(object.carSetting);
                    }
                    if (object.opponent != null) {
                        if (typeof object.opponent !== "object")
                            throw TypeError(".wm.protobuf.LoadGameHistoryResponse.GhostBattleRecord.opponent: object expected");
                        message.opponent = $root.wm.protobuf.LoadGameHistoryResponse.GhostBattleRecord.GhostBattleRecordCar.fromObject(object.opponent);
                    }
                    if (object.mobs) {
                        if (!Array.isArray(object.mobs))
                            throw TypeError(".wm.protobuf.LoadGameHistoryResponse.GhostBattleRecord.mobs: array expected");
                        message.mobs = [];
                        for (let i = 0; i < object.mobs.length; ++i) {
                            if (typeof object.mobs[i] !== "object")
                                throw TypeError(".wm.protobuf.LoadGameHistoryResponse.GhostBattleRecord.mobs: object expected");
                            message.mobs[i] = $root.wm.protobuf.LoadGameHistoryResponse.GhostBattleRecord.GhostBattleRecordCar.fromObject(object.mobs[i]);
                        }
                    }
                    if (object.area != null)
                        message.area = object.area >>> 0;
                    if (object.playedAt != null)
                        message.playedAt = object.playedAt >>> 0;
                    if (object.playedShopName != null)
                        message.playedShopName = String(object.playedShopName);
                    return message;
                };

                /**
                 * Creates a plain object from a GhostBattleRecord message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof wm.protobuf.LoadGameHistoryResponse.GhostBattleRecord
                 * @static
                 * @param {wm.protobuf.LoadGameHistoryResponse.GhostBattleRecord} message GhostBattleRecord
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                GhostBattleRecord.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.arrays || options.defaults)
                        object.mobs = [];
                    if (options.defaults) {
                        object.carSetting = null;
                        object.opponent = null;
                        object.area = 0;
                        object.playedAt = 0;
                        object.playedShopName = "";
                    }
                    if (message.carSetting != null && message.hasOwnProperty("carSetting"))
                        object.carSetting = $root.wm.protobuf.LoadGameHistoryResponse.GhostBattleRecord.GhostCarSetting.toObject(message.carSetting, options);
                    if (message.opponent != null && message.hasOwnProperty("opponent"))
                        object.opponent = $root.wm.protobuf.LoadGameHistoryResponse.GhostBattleRecord.GhostBattleRecordCar.toObject(message.opponent, options);
                    if (message.mobs && message.mobs.length) {
                        object.mobs = [];
                        for (let j = 0; j < message.mobs.length; ++j)
                            object.mobs[j] = $root.wm.protobuf.LoadGameHistoryResponse.GhostBattleRecord.GhostBattleRecordCar.toObject(message.mobs[j], options);
                    }
                    if (message.area != null && message.hasOwnProperty("area"))
                        object.area = message.area;
                    if (message.playedAt != null && message.hasOwnProperty("playedAt"))
                        object.playedAt = message.playedAt;
                    if (message.playedShopName != null && message.hasOwnProperty("playedShopName"))
                        object.playedShopName = message.playedShopName;
                    return object;
                };

                /**
                 * Converts this GhostBattleRecord to JSON.
                 * @function toJSON
                 * @memberof wm.protobuf.LoadGameHistoryResponse.GhostBattleRecord
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                GhostBattleRecord.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                /**
                 * Gets the default type url for GhostBattleRecord
                 * @function getTypeUrl
                 * @memberof wm.protobuf.LoadGameHistoryResponse.GhostBattleRecord
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                GhostBattleRecord.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/wm.protobuf.LoadGameHistoryResponse.GhostBattleRecord";
                };

                GhostBattleRecord.GhostCarSetting = (function() {

                    /**
                     * Properties of a GhostCarSetting.
                     * @memberof wm.protobuf.LoadGameHistoryResponse.GhostBattleRecord
                     * @interface IGhostCarSetting
                     * @property {number} tunePower GhostCarSetting tunePower
                     * @property {number} tuneHandling GhostCarSetting tuneHandling
                     */

                    /**
                     * Constructs a new GhostCarSetting.
                     * @memberof wm.protobuf.LoadGameHistoryResponse.GhostBattleRecord
                     * @classdesc Represents a GhostCarSetting.
                     * @implements IGhostCarSetting
                     * @constructor
                     * @param {wm.protobuf.LoadGameHistoryResponse.GhostBattleRecord.IGhostCarSetting=} [properties] Properties to set
                     */
                    function GhostCarSetting(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * GhostCarSetting tunePower.
                     * @member {number} tunePower
                     * @memberof wm.protobuf.LoadGameHistoryResponse.GhostBattleRecord.GhostCarSetting
                     * @instance
                     */
                    GhostCarSetting.prototype.tunePower = 0;

                    /**
                     * GhostCarSetting tuneHandling.
                     * @member {number} tuneHandling
                     * @memberof wm.protobuf.LoadGameHistoryResponse.GhostBattleRecord.GhostCarSetting
                     * @instance
                     */
                    GhostCarSetting.prototype.tuneHandling = 0;

                    /**
                     * Creates a new GhostCarSetting instance using the specified properties.
                     * @function create
                     * @memberof wm.protobuf.LoadGameHistoryResponse.GhostBattleRecord.GhostCarSetting
                     * @static
                     * @param {wm.protobuf.LoadGameHistoryResponse.GhostBattleRecord.IGhostCarSetting=} [properties] Properties to set
                     * @returns {wm.protobuf.LoadGameHistoryResponse.GhostBattleRecord.GhostCarSetting} GhostCarSetting instance
                     */
                    GhostCarSetting.create = function create(properties) {
                        return new GhostCarSetting(properties);
                    };

                    /**
                     * Encodes the specified GhostCarSetting message. Does not implicitly {@link wm.protobuf.LoadGameHistoryResponse.GhostBattleRecord.GhostCarSetting.verify|verify} messages.
                     * @function encode
                     * @memberof wm.protobuf.LoadGameHistoryResponse.GhostBattleRecord.GhostCarSetting
                     * @static
                     * @param {wm.protobuf.LoadGameHistoryResponse.GhostBattleRecord.IGhostCarSetting} message GhostCarSetting message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    GhostCarSetting.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.tunePower);
                        writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.tuneHandling);
                        return writer;
                    };

                    /**
                     * Encodes the specified GhostCarSetting message, length delimited. Does not implicitly {@link wm.protobuf.LoadGameHistoryResponse.GhostBattleRecord.GhostCarSetting.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof wm.protobuf.LoadGameHistoryResponse.GhostBattleRecord.GhostCarSetting
                     * @static
                     * @param {wm.protobuf.LoadGameHistoryResponse.GhostBattleRecord.IGhostCarSetting} message GhostCarSetting message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    GhostCarSetting.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a GhostCarSetting message from the specified reader or buffer.
                     * @function decode
                     * @memberof wm.protobuf.LoadGameHistoryResponse.GhostBattleRecord.GhostCarSetting
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {wm.protobuf.LoadGameHistoryResponse.GhostBattleRecord.GhostCarSetting} GhostCarSetting
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    GhostCarSetting.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.wm.protobuf.LoadGameHistoryResponse.GhostBattleRecord.GhostCarSetting();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.tunePower = reader.uint32();
                                    break;
                                }
                            case 2: {
                                    message.tuneHandling = reader.uint32();
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        if (!message.hasOwnProperty("tunePower"))
                            throw $util.ProtocolError("missing required 'tunePower'", { instance: message });
                        if (!message.hasOwnProperty("tuneHandling"))
                            throw $util.ProtocolError("missing required 'tuneHandling'", { instance: message });
                        return message;
                    };

                    /**
                     * Decodes a GhostCarSetting message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof wm.protobuf.LoadGameHistoryResponse.GhostBattleRecord.GhostCarSetting
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {wm.protobuf.LoadGameHistoryResponse.GhostBattleRecord.GhostCarSetting} GhostCarSetting
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    GhostCarSetting.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a GhostCarSetting message.
                     * @function verify
                     * @memberof wm.protobuf.LoadGameHistoryResponse.GhostBattleRecord.GhostCarSetting
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    GhostCarSetting.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (!$util.isInteger(message.tunePower))
                            return "tunePower: integer expected";
                        if (!$util.isInteger(message.tuneHandling))
                            return "tuneHandling: integer expected";
                        return null;
                    };

                    /**
                     * Creates a GhostCarSetting message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof wm.protobuf.LoadGameHistoryResponse.GhostBattleRecord.GhostCarSetting
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {wm.protobuf.LoadGameHistoryResponse.GhostBattleRecord.GhostCarSetting} GhostCarSetting
                     */
                    GhostCarSetting.fromObject = function fromObject(object) {
                        if (object instanceof $root.wm.protobuf.LoadGameHistoryResponse.GhostBattleRecord.GhostCarSetting)
                            return object;
                        let message = new $root.wm.protobuf.LoadGameHistoryResponse.GhostBattleRecord.GhostCarSetting();
                        if (object.tunePower != null)
                            message.tunePower = object.tunePower >>> 0;
                        if (object.tuneHandling != null)
                            message.tuneHandling = object.tuneHandling >>> 0;
                        return message;
                    };

                    /**
                     * Creates a plain object from a GhostCarSetting message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof wm.protobuf.LoadGameHistoryResponse.GhostBattleRecord.GhostCarSetting
                     * @static
                     * @param {wm.protobuf.LoadGameHistoryResponse.GhostBattleRecord.GhostCarSetting} message GhostCarSetting
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    GhostCarSetting.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            object.tunePower = 0;
                            object.tuneHandling = 0;
                        }
                        if (message.tunePower != null && message.hasOwnProperty("tunePower"))
                            object.tunePower = message.tunePower;
                        if (message.tuneHandling != null && message.hasOwnProperty("tuneHandling"))
                            object.tuneHandling = message.tuneHandling;
                        return object;
                    };

                    /**
                     * Converts this GhostCarSetting to JSON.
                     * @function toJSON
                     * @memberof wm.protobuf.LoadGameHistoryResponse.GhostBattleRecord.GhostCarSetting
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    GhostCarSetting.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    /**
                     * Gets the default type url for GhostCarSetting
                     * @function getTypeUrl
                     * @memberof wm.protobuf.LoadGameHistoryResponse.GhostBattleRecord.GhostCarSetting
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    GhostCarSetting.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/wm.protobuf.LoadGameHistoryResponse.GhostBattleRecord.GhostCarSetting";
                    };

                    return GhostCarSetting;
                })();

                GhostBattleRecord.GhostBattleRecordCar = (function() {

                    /**
                     * Properties of a GhostBattleRecordCar.
                     * @memberof wm.protobuf.LoadGameHistoryResponse.GhostBattleRecord
                     * @interface IGhostBattleRecordCar
                     * @property {wm.protobuf.ICar} car GhostBattleRecordCar car
                     * @property {number} result GhostBattleRecordCar result
                     */

                    /**
                     * Constructs a new GhostBattleRecordCar.
                     * @memberof wm.protobuf.LoadGameHistoryResponse.GhostBattleRecord
                     * @classdesc Represents a GhostBattleRecordCar.
                     * @implements IGhostBattleRecordCar
                     * @constructor
                     * @param {wm.protobuf.LoadGameHistoryResponse.GhostBattleRecord.IGhostBattleRecordCar=} [properties] Properties to set
                     */
                    function GhostBattleRecordCar(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * GhostBattleRecordCar car.
                     * @member {wm.protobuf.ICar} car
                     * @memberof wm.protobuf.LoadGameHistoryResponse.GhostBattleRecord.GhostBattleRecordCar
                     * @instance
                     */
                    GhostBattleRecordCar.prototype.car = null;

                    /**
                     * GhostBattleRecordCar result.
                     * @member {number} result
                     * @memberof wm.protobuf.LoadGameHistoryResponse.GhostBattleRecord.GhostBattleRecordCar
                     * @instance
                     */
                    GhostBattleRecordCar.prototype.result = 0;

                    /**
                     * Creates a new GhostBattleRecordCar instance using the specified properties.
                     * @function create
                     * @memberof wm.protobuf.LoadGameHistoryResponse.GhostBattleRecord.GhostBattleRecordCar
                     * @static
                     * @param {wm.protobuf.LoadGameHistoryResponse.GhostBattleRecord.IGhostBattleRecordCar=} [properties] Properties to set
                     * @returns {wm.protobuf.LoadGameHistoryResponse.GhostBattleRecord.GhostBattleRecordCar} GhostBattleRecordCar instance
                     */
                    GhostBattleRecordCar.create = function create(properties) {
                        return new GhostBattleRecordCar(properties);
                    };

                    /**
                     * Encodes the specified GhostBattleRecordCar message. Does not implicitly {@link wm.protobuf.LoadGameHistoryResponse.GhostBattleRecord.GhostBattleRecordCar.verify|verify} messages.
                     * @function encode
                     * @memberof wm.protobuf.LoadGameHistoryResponse.GhostBattleRecord.GhostBattleRecordCar
                     * @static
                     * @param {wm.protobuf.LoadGameHistoryResponse.GhostBattleRecord.IGhostBattleRecordCar} message GhostBattleRecordCar message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    GhostBattleRecordCar.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        $root.wm.protobuf.Car.encode(message.car, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.result);
                        return writer;
                    };

                    /**
                     * Encodes the specified GhostBattleRecordCar message, length delimited. Does not implicitly {@link wm.protobuf.LoadGameHistoryResponse.GhostBattleRecord.GhostBattleRecordCar.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof wm.protobuf.LoadGameHistoryResponse.GhostBattleRecord.GhostBattleRecordCar
                     * @static
                     * @param {wm.protobuf.LoadGameHistoryResponse.GhostBattleRecord.IGhostBattleRecordCar} message GhostBattleRecordCar message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    GhostBattleRecordCar.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a GhostBattleRecordCar message from the specified reader or buffer.
                     * @function decode
                     * @memberof wm.protobuf.LoadGameHistoryResponse.GhostBattleRecord.GhostBattleRecordCar
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {wm.protobuf.LoadGameHistoryResponse.GhostBattleRecord.GhostBattleRecordCar} GhostBattleRecordCar
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    GhostBattleRecordCar.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.wm.protobuf.LoadGameHistoryResponse.GhostBattleRecord.GhostBattleRecordCar();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.car = $root.wm.protobuf.Car.decode(reader, reader.uint32());
                                    break;
                                }
                            case 2: {
                                    message.result = reader.int32();
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        if (!message.hasOwnProperty("car"))
                            throw $util.ProtocolError("missing required 'car'", { instance: message });
                        if (!message.hasOwnProperty("result"))
                            throw $util.ProtocolError("missing required 'result'", { instance: message });
                        return message;
                    };

                    /**
                     * Decodes a GhostBattleRecordCar message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof wm.protobuf.LoadGameHistoryResponse.GhostBattleRecord.GhostBattleRecordCar
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {wm.protobuf.LoadGameHistoryResponse.GhostBattleRecord.GhostBattleRecordCar} GhostBattleRecordCar
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    GhostBattleRecordCar.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a GhostBattleRecordCar message.
                     * @function verify
                     * @memberof wm.protobuf.LoadGameHistoryResponse.GhostBattleRecord.GhostBattleRecordCar
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    GhostBattleRecordCar.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        {
                            let error = $root.wm.protobuf.Car.verify(message.car);
                            if (error)
                                return "car." + error;
                        }
                        if (!$util.isInteger(message.result))
                            return "result: integer expected";
                        return null;
                    };

                    /**
                     * Creates a GhostBattleRecordCar message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof wm.protobuf.LoadGameHistoryResponse.GhostBattleRecord.GhostBattleRecordCar
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {wm.protobuf.LoadGameHistoryResponse.GhostBattleRecord.GhostBattleRecordCar} GhostBattleRecordCar
                     */
                    GhostBattleRecordCar.fromObject = function fromObject(object) {
                        if (object instanceof $root.wm.protobuf.LoadGameHistoryResponse.GhostBattleRecord.GhostBattleRecordCar)
                            return object;
                        let message = new $root.wm.protobuf.LoadGameHistoryResponse.GhostBattleRecord.GhostBattleRecordCar();
                        if (object.car != null) {
                            if (typeof object.car !== "object")
                                throw TypeError(".wm.protobuf.LoadGameHistoryResponse.GhostBattleRecord.GhostBattleRecordCar.car: object expected");
                            message.car = $root.wm.protobuf.Car.fromObject(object.car);
                        }
                        if (object.result != null)
                            message.result = object.result | 0;
                        return message;
                    };

                    /**
                     * Creates a plain object from a GhostBattleRecordCar message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof wm.protobuf.LoadGameHistoryResponse.GhostBattleRecord.GhostBattleRecordCar
                     * @static
                     * @param {wm.protobuf.LoadGameHistoryResponse.GhostBattleRecord.GhostBattleRecordCar} message GhostBattleRecordCar
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    GhostBattleRecordCar.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            object.car = null;
                            object.result = 0;
                        }
                        if (message.car != null && message.hasOwnProperty("car"))
                            object.car = $root.wm.protobuf.Car.toObject(message.car, options);
                        if (message.result != null && message.hasOwnProperty("result"))
                            object.result = message.result;
                        return object;
                    };

                    /**
                     * Converts this GhostBattleRecordCar to JSON.
                     * @function toJSON
                     * @memberof wm.protobuf.LoadGameHistoryResponse.GhostBattleRecord.GhostBattleRecordCar
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    GhostBattleRecordCar.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    /**
                     * Gets the default type url for GhostBattleRecordCar
                     * @function getTypeUrl
                     * @memberof wm.protobuf.LoadGameHistoryResponse.GhostBattleRecord.GhostBattleRecordCar
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    GhostBattleRecordCar.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/wm.protobuf.LoadGameHistoryResponse.GhostBattleRecord.GhostBattleRecordCar";
                    };

                    return GhostBattleRecordCar;
                })();

                return GhostBattleRecord;
            })();

            return LoadGameHistoryResponse;
        })();

        protobuf.UpdateCarRequest = (function() {

            /**
             * Properties of an UpdateCarRequest.
             * @memberof wm.protobuf
             * @interface IUpdateCarRequest
             * @property {number} carId UpdateCarRequest carId
             * @property {wm.protobuf.ICar|null} [car] UpdateCarRequest car
             * @property {Array.<wm.protobuf.ICarItem>|null} [earnedItems] UpdateCarRequest earnedItems
             * @property {wm.protobuf.ICarSetting|null} [setting] UpdateCarRequest setting
             * @property {boolean|null} [toBeDeleted] UpdateCarRequest toBeDeleted
             * @property {boolean|null} [auraMotifAutoChange] UpdateCarRequest auraMotifAutoChange
             * @property {number|null} [rgStamp] UpdateCarRequest rgStamp
             * @property {number} timestamp UpdateCarRequest timestamp
             */

            /**
             * Constructs a new UpdateCarRequest.
             * @memberof wm.protobuf
             * @classdesc Represents an UpdateCarRequest.
             * @implements IUpdateCarRequest
             * @constructor
             * @param {wm.protobuf.IUpdateCarRequest=} [properties] Properties to set
             */
            function UpdateCarRequest(properties) {
                this.earnedItems = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * UpdateCarRequest carId.
             * @member {number} carId
             * @memberof wm.protobuf.UpdateCarRequest
             * @instance
             */
            UpdateCarRequest.prototype.carId = 0;

            /**
             * UpdateCarRequest car.
             * @member {wm.protobuf.ICar|null|undefined} car
             * @memberof wm.protobuf.UpdateCarRequest
             * @instance
             */
            UpdateCarRequest.prototype.car = null;

            /**
             * UpdateCarRequest earnedItems.
             * @member {Array.<wm.protobuf.ICarItem>} earnedItems
             * @memberof wm.protobuf.UpdateCarRequest
             * @instance
             */
            UpdateCarRequest.prototype.earnedItems = $util.emptyArray;

            /**
             * UpdateCarRequest setting.
             * @member {wm.protobuf.ICarSetting|null|undefined} setting
             * @memberof wm.protobuf.UpdateCarRequest
             * @instance
             */
            UpdateCarRequest.prototype.setting = null;

            /**
             * UpdateCarRequest toBeDeleted.
             * @member {boolean} toBeDeleted
             * @memberof wm.protobuf.UpdateCarRequest
             * @instance
             */
            UpdateCarRequest.prototype.toBeDeleted = false;

            /**
             * UpdateCarRequest auraMotifAutoChange.
             * @member {boolean} auraMotifAutoChange
             * @memberof wm.protobuf.UpdateCarRequest
             * @instance
             */
            UpdateCarRequest.prototype.auraMotifAutoChange = false;

            /**
             * UpdateCarRequest rgStamp.
             * @member {number} rgStamp
             * @memberof wm.protobuf.UpdateCarRequest
             * @instance
             */
            UpdateCarRequest.prototype.rgStamp = 0;

            /**
             * UpdateCarRequest timestamp.
             * @member {number} timestamp
             * @memberof wm.protobuf.UpdateCarRequest
             * @instance
             */
            UpdateCarRequest.prototype.timestamp = 0;

            /**
             * Creates a new UpdateCarRequest instance using the specified properties.
             * @function create
             * @memberof wm.protobuf.UpdateCarRequest
             * @static
             * @param {wm.protobuf.IUpdateCarRequest=} [properties] Properties to set
             * @returns {wm.protobuf.UpdateCarRequest} UpdateCarRequest instance
             */
            UpdateCarRequest.create = function create(properties) {
                return new UpdateCarRequest(properties);
            };

            /**
             * Encodes the specified UpdateCarRequest message. Does not implicitly {@link wm.protobuf.UpdateCarRequest.verify|verify} messages.
             * @function encode
             * @memberof wm.protobuf.UpdateCarRequest
             * @static
             * @param {wm.protobuf.IUpdateCarRequest} message UpdateCarRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            UpdateCarRequest.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.carId);
                if (message.car != null && Object.hasOwnProperty.call(message, "car"))
                    $root.wm.protobuf.Car.encode(message.car, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                if (message.earnedItems != null && message.earnedItems.length)
                    for (let i = 0; i < message.earnedItems.length; ++i)
                        $root.wm.protobuf.CarItem.encode(message.earnedItems[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                if (message.setting != null && Object.hasOwnProperty.call(message, "setting"))
                    $root.wm.protobuf.CarSetting.encode(message.setting, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                if (message.toBeDeleted != null && Object.hasOwnProperty.call(message, "toBeDeleted"))
                    writer.uint32(/* id 9, wireType 0 =*/72).bool(message.toBeDeleted);
                if (message.auraMotifAutoChange != null && Object.hasOwnProperty.call(message, "auraMotifAutoChange"))
                    writer.uint32(/* id 10, wireType 0 =*/80).bool(message.auraMotifAutoChange);
                if (message.rgStamp != null && Object.hasOwnProperty.call(message, "rgStamp"))
                    writer.uint32(/* id 12, wireType 0 =*/96).uint32(message.rgStamp);
                writer.uint32(/* id 13, wireType 0 =*/104).uint32(message.timestamp);
                return writer;
            };

            /**
             * Encodes the specified UpdateCarRequest message, length delimited. Does not implicitly {@link wm.protobuf.UpdateCarRequest.verify|verify} messages.
             * @function encodeDelimited
             * @memberof wm.protobuf.UpdateCarRequest
             * @static
             * @param {wm.protobuf.IUpdateCarRequest} message UpdateCarRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            UpdateCarRequest.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an UpdateCarRequest message from the specified reader or buffer.
             * @function decode
             * @memberof wm.protobuf.UpdateCarRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {wm.protobuf.UpdateCarRequest} UpdateCarRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            UpdateCarRequest.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.wm.protobuf.UpdateCarRequest();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.carId = reader.uint32();
                            break;
                        }
                    case 2: {
                            message.car = $root.wm.protobuf.Car.decode(reader, reader.uint32());
                            break;
                        }
                    case 4: {
                            if (!(message.earnedItems && message.earnedItems.length))
                                message.earnedItems = [];
                            message.earnedItems.push($root.wm.protobuf.CarItem.decode(reader, reader.uint32()));
                            break;
                        }
                    case 5: {
                            message.setting = $root.wm.protobuf.CarSetting.decode(reader, reader.uint32());
                            break;
                        }
                    case 9: {
                            message.toBeDeleted = reader.bool();
                            break;
                        }
                    case 10: {
                            message.auraMotifAutoChange = reader.bool();
                            break;
                        }
                    case 12: {
                            message.rgStamp = reader.uint32();
                            break;
                        }
                    case 13: {
                            message.timestamp = reader.uint32();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("carId"))
                    throw $util.ProtocolError("missing required 'carId'", { instance: message });
                if (!message.hasOwnProperty("timestamp"))
                    throw $util.ProtocolError("missing required 'timestamp'", { instance: message });
                return message;
            };

            /**
             * Decodes an UpdateCarRequest message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof wm.protobuf.UpdateCarRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {wm.protobuf.UpdateCarRequest} UpdateCarRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            UpdateCarRequest.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an UpdateCarRequest message.
             * @function verify
             * @memberof wm.protobuf.UpdateCarRequest
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            UpdateCarRequest.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (!$util.isInteger(message.carId))
                    return "carId: integer expected";
                if (message.car != null && message.hasOwnProperty("car")) {
                    let error = $root.wm.protobuf.Car.verify(message.car);
                    if (error)
                        return "car." + error;
                }
                if (message.earnedItems != null && message.hasOwnProperty("earnedItems")) {
                    if (!Array.isArray(message.earnedItems))
                        return "earnedItems: array expected";
                    for (let i = 0; i < message.earnedItems.length; ++i) {
                        let error = $root.wm.protobuf.CarItem.verify(message.earnedItems[i]);
                        if (error)
                            return "earnedItems." + error;
                    }
                }
                if (message.setting != null && message.hasOwnProperty("setting")) {
                    let error = $root.wm.protobuf.CarSetting.verify(message.setting);
                    if (error)
                        return "setting." + error;
                }
                if (message.toBeDeleted != null && message.hasOwnProperty("toBeDeleted"))
                    if (typeof message.toBeDeleted !== "boolean")
                        return "toBeDeleted: boolean expected";
                if (message.auraMotifAutoChange != null && message.hasOwnProperty("auraMotifAutoChange"))
                    if (typeof message.auraMotifAutoChange !== "boolean")
                        return "auraMotifAutoChange: boolean expected";
                if (message.rgStamp != null && message.hasOwnProperty("rgStamp"))
                    if (!$util.isInteger(message.rgStamp))
                        return "rgStamp: integer expected";
                if (!$util.isInteger(message.timestamp))
                    return "timestamp: integer expected";
                return null;
            };

            /**
             * Creates an UpdateCarRequest message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof wm.protobuf.UpdateCarRequest
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {wm.protobuf.UpdateCarRequest} UpdateCarRequest
             */
            UpdateCarRequest.fromObject = function fromObject(object) {
                if (object instanceof $root.wm.protobuf.UpdateCarRequest)
                    return object;
                let message = new $root.wm.protobuf.UpdateCarRequest();
                if (object.carId != null)
                    message.carId = object.carId >>> 0;
                if (object.car != null) {
                    if (typeof object.car !== "object")
                        throw TypeError(".wm.protobuf.UpdateCarRequest.car: object expected");
                    message.car = $root.wm.protobuf.Car.fromObject(object.car);
                }
                if (object.earnedItems) {
                    if (!Array.isArray(object.earnedItems))
                        throw TypeError(".wm.protobuf.UpdateCarRequest.earnedItems: array expected");
                    message.earnedItems = [];
                    for (let i = 0; i < object.earnedItems.length; ++i) {
                        if (typeof object.earnedItems[i] !== "object")
                            throw TypeError(".wm.protobuf.UpdateCarRequest.earnedItems: object expected");
                        message.earnedItems[i] = $root.wm.protobuf.CarItem.fromObject(object.earnedItems[i]);
                    }
                }
                if (object.setting != null) {
                    if (typeof object.setting !== "object")
                        throw TypeError(".wm.protobuf.UpdateCarRequest.setting: object expected");
                    message.setting = $root.wm.protobuf.CarSetting.fromObject(object.setting);
                }
                if (object.toBeDeleted != null)
                    message.toBeDeleted = Boolean(object.toBeDeleted);
                if (object.auraMotifAutoChange != null)
                    message.auraMotifAutoChange = Boolean(object.auraMotifAutoChange);
                if (object.rgStamp != null)
                    message.rgStamp = object.rgStamp >>> 0;
                if (object.timestamp != null)
                    message.timestamp = object.timestamp >>> 0;
                return message;
            };

            /**
             * Creates a plain object from an UpdateCarRequest message. Also converts values to other types if specified.
             * @function toObject
             * @memberof wm.protobuf.UpdateCarRequest
             * @static
             * @param {wm.protobuf.UpdateCarRequest} message UpdateCarRequest
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            UpdateCarRequest.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.earnedItems = [];
                if (options.defaults) {
                    object.carId = 0;
                    object.car = null;
                    object.setting = null;
                    object.toBeDeleted = false;
                    object.auraMotifAutoChange = false;
                    object.rgStamp = 0;
                    object.timestamp = 0;
                }
                if (message.carId != null && message.hasOwnProperty("carId"))
                    object.carId = message.carId;
                if (message.car != null && message.hasOwnProperty("car"))
                    object.car = $root.wm.protobuf.Car.toObject(message.car, options);
                if (message.earnedItems && message.earnedItems.length) {
                    object.earnedItems = [];
                    for (let j = 0; j < message.earnedItems.length; ++j)
                        object.earnedItems[j] = $root.wm.protobuf.CarItem.toObject(message.earnedItems[j], options);
                }
                if (message.setting != null && message.hasOwnProperty("setting"))
                    object.setting = $root.wm.protobuf.CarSetting.toObject(message.setting, options);
                if (message.toBeDeleted != null && message.hasOwnProperty("toBeDeleted"))
                    object.toBeDeleted = message.toBeDeleted;
                if (message.auraMotifAutoChange != null && message.hasOwnProperty("auraMotifAutoChange"))
                    object.auraMotifAutoChange = message.auraMotifAutoChange;
                if (message.rgStamp != null && message.hasOwnProperty("rgStamp"))
                    object.rgStamp = message.rgStamp;
                if (message.timestamp != null && message.hasOwnProperty("timestamp"))
                    object.timestamp = message.timestamp;
                return object;
            };

            /**
             * Converts this UpdateCarRequest to JSON.
             * @function toJSON
             * @memberof wm.protobuf.UpdateCarRequest
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            UpdateCarRequest.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for UpdateCarRequest
             * @function getTypeUrl
             * @memberof wm.protobuf.UpdateCarRequest
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            UpdateCarRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/wm.protobuf.UpdateCarRequest";
            };

            return UpdateCarRequest;
        })();

        protobuf.UpdateCarResponse = (function() {

            /**
             * Properties of an UpdateCarResponse.
             * @memberof wm.protobuf
             * @interface IUpdateCarResponse
             * @property {wm.protobuf.ErrorCode} error UpdateCarResponse error
             */

            /**
             * Constructs a new UpdateCarResponse.
             * @memberof wm.protobuf
             * @classdesc Represents an UpdateCarResponse.
             * @implements IUpdateCarResponse
             * @constructor
             * @param {wm.protobuf.IUpdateCarResponse=} [properties] Properties to set
             */
            function UpdateCarResponse(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * UpdateCarResponse error.
             * @member {wm.protobuf.ErrorCode} error
             * @memberof wm.protobuf.UpdateCarResponse
             * @instance
             */
            UpdateCarResponse.prototype.error = 0;

            /**
             * Creates a new UpdateCarResponse instance using the specified properties.
             * @function create
             * @memberof wm.protobuf.UpdateCarResponse
             * @static
             * @param {wm.protobuf.IUpdateCarResponse=} [properties] Properties to set
             * @returns {wm.protobuf.UpdateCarResponse} UpdateCarResponse instance
             */
            UpdateCarResponse.create = function create(properties) {
                return new UpdateCarResponse(properties);
            };

            /**
             * Encodes the specified UpdateCarResponse message. Does not implicitly {@link wm.protobuf.UpdateCarResponse.verify|verify} messages.
             * @function encode
             * @memberof wm.protobuf.UpdateCarResponse
             * @static
             * @param {wm.protobuf.IUpdateCarResponse} message UpdateCarResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            UpdateCarResponse.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
                return writer;
            };

            /**
             * Encodes the specified UpdateCarResponse message, length delimited. Does not implicitly {@link wm.protobuf.UpdateCarResponse.verify|verify} messages.
             * @function encodeDelimited
             * @memberof wm.protobuf.UpdateCarResponse
             * @static
             * @param {wm.protobuf.IUpdateCarResponse} message UpdateCarResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            UpdateCarResponse.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an UpdateCarResponse message from the specified reader or buffer.
             * @function decode
             * @memberof wm.protobuf.UpdateCarResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {wm.protobuf.UpdateCarResponse} UpdateCarResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            UpdateCarResponse.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.wm.protobuf.UpdateCarResponse();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.error = reader.int32();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("error"))
                    throw $util.ProtocolError("missing required 'error'", { instance: message });
                return message;
            };

            /**
             * Decodes an UpdateCarResponse message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof wm.protobuf.UpdateCarResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {wm.protobuf.UpdateCarResponse} UpdateCarResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            UpdateCarResponse.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an UpdateCarResponse message.
             * @function verify
             * @memberof wm.protobuf.UpdateCarResponse
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            UpdateCarResponse.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                switch (message.error) {
                default:
                    return "error: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 7:
                case 9:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 16:
                case 17:
                case 18:
                case 19:
                    break;
                }
                return null;
            };

            /**
             * Creates an UpdateCarResponse message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof wm.protobuf.UpdateCarResponse
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {wm.protobuf.UpdateCarResponse} UpdateCarResponse
             */
            UpdateCarResponse.fromObject = function fromObject(object) {
                if (object instanceof $root.wm.protobuf.UpdateCarResponse)
                    return object;
                let message = new $root.wm.protobuf.UpdateCarResponse();
                switch (object.error) {
                default:
                    if (typeof object.error === "number") {
                        message.error = object.error;
                        break;
                    }
                    break;
                case "ERR_SUCCESS":
                case 0:
                    message.error = 0;
                    break;
                case "ERR_REQUEST":
                case 1:
                    message.error = 1;
                    break;
                case "ERR_NOT_FOUND":
                case 2:
                    message.error = 2;
                    break;
                case "ERR_ID_SERVER":
                case 3:
                    message.error = 3;
                    break;
                case "ERR_ID_BANNED":
                case 4:
                    message.error = 4;
                    break;
                case "ERR_USER_LOCKED":
                case 5:
                    message.error = 5;
                    break;
                case "ERR_USER_VERSION":
                case 6:
                    message.error = 6;
                    break;
                case "ERR_NAME_CONFLICTED":
                case 7:
                    message.error = 7;
                    break;
                case "ERR_FORBIDDEN":
                case 9:
                    message.error = 9;
                    break;
                case "ERR_USER_SUCCEEDED":
                case 11:
                    message.error = 11;
                    break;
                case "ERR_BEING_TRANSFERRED":
                case 12:
                    message.error = 12;
                    break;
                case "ERR_SCRATCH_LOCKED":
                case 13:
                    message.error = 13;
                    break;
                case "ERR_BINGO_REVENGE_LOCKED":
                case 14:
                    message.error = 14;
                    break;
                case "ERR_BINGO_ALREDY_LINKED":
                case 15:
                    message.error = 15;
                    break;
                case "ERR_BINGO_FINISHED":
                case 16:
                    message.error = 16;
                    break;
                case "ERR_BINGO_REACHED_MAX_USER":
                case 17:
                    message.error = 17;
                    break;
                case "ERR_CAR_NOT_FOUND":
                case 18:
                    message.error = 18;
                    break;
                case "ERR_BINGO_CARD_NOT_FOUND":
                case 19:
                    message.error = 19;
                    break;
                }
                return message;
            };

            /**
             * Creates a plain object from an UpdateCarResponse message. Also converts values to other types if specified.
             * @function toObject
             * @memberof wm.protobuf.UpdateCarResponse
             * @static
             * @param {wm.protobuf.UpdateCarResponse} message UpdateCarResponse
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            UpdateCarResponse.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults)
                    object.error = options.enums === String ? "ERR_SUCCESS" : 0;
                if (message.error != null && message.hasOwnProperty("error"))
                    object.error = options.enums === String ? $root.wm.protobuf.ErrorCode[message.error] === undefined ? message.error : $root.wm.protobuf.ErrorCode[message.error] : message.error;
                return object;
            };

            /**
             * Converts this UpdateCarResponse to JSON.
             * @function toJSON
             * @memberof wm.protobuf.UpdateCarResponse
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            UpdateCarResponse.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for UpdateCarResponse
             * @function getTypeUrl
             * @memberof wm.protobuf.UpdateCarResponse
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            UpdateCarResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/wm.protobuf.UpdateCarResponse";
            };

            return UpdateCarResponse;
        })();

        protobuf.SaveGameResultRequest = (function() {

            /**
             * Properties of a SaveGameResultRequest.
             * @memberof wm.protobuf
             * @interface ISaveGameResultRequest
             * @property {number} carId SaveGameResultRequest carId
             * @property {wm.protobuf.GameMode} gameMode SaveGameResultRequest gameMode
             * @property {number} playedAt SaveGameResultRequest playedAt
             * @property {number} playCount SaveGameResultRequest playCount
             * @property {boolean} retired SaveGameResultRequest retired
             * @property {boolean} timeup SaveGameResultRequest timeup
             * @property {boolean|null} [noCredit] SaveGameResultRequest noCredit
             * @property {wm.protobuf.ICar|null} [car] SaveGameResultRequest car
             * @property {wm.protobuf.ICarSetting|null} [setting] SaveGameResultRequest setting
             * @property {number|null} [odometer] SaveGameResultRequest odometer
             * @property {boolean|null} [earnedCustomColor] SaveGameResultRequest earnedCustomColor
             * @property {Array.<wm.protobuf.TutorialType>|null} [confirmedTutorials] SaveGameResultRequest confirmedTutorials
             * @property {Array.<wm.protobuf.ICarItem>|null} [earnedItems] SaveGameResultRequest earnedItems
             * @property {Array.<wm.protobuf.IUserItem>|null} [earnedUserItems] SaveGameResultRequest earnedUserItems
             * @property {Array.<string>|null} [preservedTitles] SaveGameResultRequest preservedTitles
             * @property {Array.<number>|null} [neighborCars] SaveGameResultRequest neighborCars
             * @property {wm.protobuf.SaveGameResultRequest.IStoryResult|null} [stResult] SaveGameResultRequest stResult
             * @property {wm.protobuf.SaveGameResultRequest.ITimeAttackResult|null} [taResult] SaveGameResultRequest taResult
             * @property {wm.protobuf.SaveGameResultRequest.IVersusBattleResult|null} [vsResult] SaveGameResultRequest vsResult
             * @property {wm.protobuf.SaveGameResultRequest.IGhostBattleResult|null} [rgResult] SaveGameResultRequest rgResult
             * @property {wm.protobuf.GhostKoshienParticipantState|null} [koshienLastPlayedState] SaveGameResultRequest koshienLastPlayedState
             */

            /**
             * Constructs a new SaveGameResultRequest.
             * @memberof wm.protobuf
             * @classdesc Represents a SaveGameResultRequest.
             * @implements ISaveGameResultRequest
             * @constructor
             * @param {wm.protobuf.ISaveGameResultRequest=} [properties] Properties to set
             */
            function SaveGameResultRequest(properties) {
                this.confirmedTutorials = [];
                this.earnedItems = [];
                this.earnedUserItems = [];
                this.preservedTitles = [];
                this.neighborCars = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * SaveGameResultRequest carId.
             * @member {number} carId
             * @memberof wm.protobuf.SaveGameResultRequest
             * @instance
             */
            SaveGameResultRequest.prototype.carId = 0;

            /**
             * SaveGameResultRequest gameMode.
             * @member {wm.protobuf.GameMode} gameMode
             * @memberof wm.protobuf.SaveGameResultRequest
             * @instance
             */
            SaveGameResultRequest.prototype.gameMode = 1;

            /**
             * SaveGameResultRequest playedAt.
             * @member {number} playedAt
             * @memberof wm.protobuf.SaveGameResultRequest
             * @instance
             */
            SaveGameResultRequest.prototype.playedAt = 0;

            /**
             * SaveGameResultRequest playCount.
             * @member {number} playCount
             * @memberof wm.protobuf.SaveGameResultRequest
             * @instance
             */
            SaveGameResultRequest.prototype.playCount = 0;

            /**
             * SaveGameResultRequest retired.
             * @member {boolean} retired
             * @memberof wm.protobuf.SaveGameResultRequest
             * @instance
             */
            SaveGameResultRequest.prototype.retired = false;

            /**
             * SaveGameResultRequest timeup.
             * @member {boolean} timeup
             * @memberof wm.protobuf.SaveGameResultRequest
             * @instance
             */
            SaveGameResultRequest.prototype.timeup = false;

            /**
             * SaveGameResultRequest noCredit.
             * @member {boolean} noCredit
             * @memberof wm.protobuf.SaveGameResultRequest
             * @instance
             */
            SaveGameResultRequest.prototype.noCredit = false;

            /**
             * SaveGameResultRequest car.
             * @member {wm.protobuf.ICar|null|undefined} car
             * @memberof wm.protobuf.SaveGameResultRequest
             * @instance
             */
            SaveGameResultRequest.prototype.car = null;

            /**
             * SaveGameResultRequest setting.
             * @member {wm.protobuf.ICarSetting|null|undefined} setting
             * @memberof wm.protobuf.SaveGameResultRequest
             * @instance
             */
            SaveGameResultRequest.prototype.setting = null;

            /**
             * SaveGameResultRequest odometer.
             * @member {number} odometer
             * @memberof wm.protobuf.SaveGameResultRequest
             * @instance
             */
            SaveGameResultRequest.prototype.odometer = 0;

            /**
             * SaveGameResultRequest earnedCustomColor.
             * @member {boolean} earnedCustomColor
             * @memberof wm.protobuf.SaveGameResultRequest
             * @instance
             */
            SaveGameResultRequest.prototype.earnedCustomColor = false;

            /**
             * SaveGameResultRequest confirmedTutorials.
             * @member {Array.<wm.protobuf.TutorialType>} confirmedTutorials
             * @memberof wm.protobuf.SaveGameResultRequest
             * @instance
             */
            SaveGameResultRequest.prototype.confirmedTutorials = $util.emptyArray;

            /**
             * SaveGameResultRequest earnedItems.
             * @member {Array.<wm.protobuf.ICarItem>} earnedItems
             * @memberof wm.protobuf.SaveGameResultRequest
             * @instance
             */
            SaveGameResultRequest.prototype.earnedItems = $util.emptyArray;

            /**
             * SaveGameResultRequest earnedUserItems.
             * @member {Array.<wm.protobuf.IUserItem>} earnedUserItems
             * @memberof wm.protobuf.SaveGameResultRequest
             * @instance
             */
            SaveGameResultRequest.prototype.earnedUserItems = $util.emptyArray;

            /**
             * SaveGameResultRequest preservedTitles.
             * @member {Array.<string>} preservedTitles
             * @memberof wm.protobuf.SaveGameResultRequest
             * @instance
             */
            SaveGameResultRequest.prototype.preservedTitles = $util.emptyArray;

            /**
             * SaveGameResultRequest neighborCars.
             * @member {Array.<number>} neighborCars
             * @memberof wm.protobuf.SaveGameResultRequest
             * @instance
             */
            SaveGameResultRequest.prototype.neighborCars = $util.emptyArray;

            /**
             * SaveGameResultRequest stResult.
             * @member {wm.protobuf.SaveGameResultRequest.IStoryResult|null|undefined} stResult
             * @memberof wm.protobuf.SaveGameResultRequest
             * @instance
             */
            SaveGameResultRequest.prototype.stResult = null;

            /**
             * SaveGameResultRequest taResult.
             * @member {wm.protobuf.SaveGameResultRequest.ITimeAttackResult|null|undefined} taResult
             * @memberof wm.protobuf.SaveGameResultRequest
             * @instance
             */
            SaveGameResultRequest.prototype.taResult = null;

            /**
             * SaveGameResultRequest vsResult.
             * @member {wm.protobuf.SaveGameResultRequest.IVersusBattleResult|null|undefined} vsResult
             * @memberof wm.protobuf.SaveGameResultRequest
             * @instance
             */
            SaveGameResultRequest.prototype.vsResult = null;

            /**
             * SaveGameResultRequest rgResult.
             * @member {wm.protobuf.SaveGameResultRequest.IGhostBattleResult|null|undefined} rgResult
             * @memberof wm.protobuf.SaveGameResultRequest
             * @instance
             */
            SaveGameResultRequest.prototype.rgResult = null;

            /**
             * SaveGameResultRequest koshienLastPlayedState.
             * @member {wm.protobuf.GhostKoshienParticipantState} koshienLastPlayedState
             * @memberof wm.protobuf.SaveGameResultRequest
             * @instance
             */
            SaveGameResultRequest.prototype.koshienLastPlayedState = 1;

            /**
             * Creates a new SaveGameResultRequest instance using the specified properties.
             * @function create
             * @memberof wm.protobuf.SaveGameResultRequest
             * @static
             * @param {wm.protobuf.ISaveGameResultRequest=} [properties] Properties to set
             * @returns {wm.protobuf.SaveGameResultRequest} SaveGameResultRequest instance
             */
            SaveGameResultRequest.create = function create(properties) {
                return new SaveGameResultRequest(properties);
            };

            /**
             * Encodes the specified SaveGameResultRequest message. Does not implicitly {@link wm.protobuf.SaveGameResultRequest.verify|verify} messages.
             * @function encode
             * @memberof wm.protobuf.SaveGameResultRequest
             * @static
             * @param {wm.protobuf.ISaveGameResultRequest} message SaveGameResultRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SaveGameResultRequest.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.carId);
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.gameMode);
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.playedAt);
                writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.playCount);
                writer.uint32(/* id 5, wireType 0 =*/40).bool(message.retired);
                writer.uint32(/* id 6, wireType 0 =*/48).bool(message.timeup);
                if (message.car != null && Object.hasOwnProperty.call(message, "car"))
                    $root.wm.protobuf.Car.encode(message.car, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                if (message.setting != null && Object.hasOwnProperty.call(message, "setting"))
                    $root.wm.protobuf.CarSetting.encode(message.setting, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                if (message.odometer != null && Object.hasOwnProperty.call(message, "odometer"))
                    writer.uint32(/* id 9, wireType 0 =*/72).uint32(message.odometer);
                if (message.noCredit != null && Object.hasOwnProperty.call(message, "noCredit"))
                    writer.uint32(/* id 10, wireType 0 =*/80).bool(message.noCredit);
                if (message.earnedCustomColor != null && Object.hasOwnProperty.call(message, "earnedCustomColor"))
                    writer.uint32(/* id 11, wireType 0 =*/88).bool(message.earnedCustomColor);
                if (message.confirmedTutorials != null && message.confirmedTutorials.length)
                    for (let i = 0; i < message.confirmedTutorials.length; ++i)
                        writer.uint32(/* id 12, wireType 0 =*/96).int32(message.confirmedTutorials[i]);
                if (message.earnedItems != null && message.earnedItems.length)
                    for (let i = 0; i < message.earnedItems.length; ++i)
                        $root.wm.protobuf.CarItem.encode(message.earnedItems[i], writer.uint32(/* id 13, wireType 2 =*/106).fork()).ldelim();
                if (message.earnedUserItems != null && message.earnedUserItems.length)
                    for (let i = 0; i < message.earnedUserItems.length; ++i)
                        $root.wm.protobuf.UserItem.encode(message.earnedUserItems[i], writer.uint32(/* id 14, wireType 2 =*/114).fork()).ldelim();
                if (message.preservedTitles != null && message.preservedTitles.length)
                    for (let i = 0; i < message.preservedTitles.length; ++i)
                        writer.uint32(/* id 15, wireType 2 =*/122).string(message.preservedTitles[i]);
                if (message.neighborCars != null && message.neighborCars.length)
                    for (let i = 0; i < message.neighborCars.length; ++i)
                        writer.uint32(/* id 21, wireType 0 =*/168).uint32(message.neighborCars[i]);
                if (message.stResult != null && Object.hasOwnProperty.call(message, "stResult"))
                    $root.wm.protobuf.SaveGameResultRequest.StoryResult.encode(message.stResult, writer.uint32(/* id 22, wireType 2 =*/178).fork()).ldelim();
                if (message.taResult != null && Object.hasOwnProperty.call(message, "taResult"))
                    $root.wm.protobuf.SaveGameResultRequest.TimeAttackResult.encode(message.taResult, writer.uint32(/* id 23, wireType 2 =*/186).fork()).ldelim();
                if (message.vsResult != null && Object.hasOwnProperty.call(message, "vsResult"))
                    $root.wm.protobuf.SaveGameResultRequest.VersusBattleResult.encode(message.vsResult, writer.uint32(/* id 24, wireType 2 =*/194).fork()).ldelim();
                if (message.rgResult != null && Object.hasOwnProperty.call(message, "rgResult"))
                    $root.wm.protobuf.SaveGameResultRequest.GhostBattleResult.encode(message.rgResult, writer.uint32(/* id 25, wireType 2 =*/202).fork()).ldelim();
                if (message.koshienLastPlayedState != null && Object.hasOwnProperty.call(message, "koshienLastPlayedState"))
                    writer.uint32(/* id 26, wireType 0 =*/208).int32(message.koshienLastPlayedState);
                return writer;
            };

            /**
             * Encodes the specified SaveGameResultRequest message, length delimited. Does not implicitly {@link wm.protobuf.SaveGameResultRequest.verify|verify} messages.
             * @function encodeDelimited
             * @memberof wm.protobuf.SaveGameResultRequest
             * @static
             * @param {wm.protobuf.ISaveGameResultRequest} message SaveGameResultRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SaveGameResultRequest.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a SaveGameResultRequest message from the specified reader or buffer.
             * @function decode
             * @memberof wm.protobuf.SaveGameResultRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {wm.protobuf.SaveGameResultRequest} SaveGameResultRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SaveGameResultRequest.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.wm.protobuf.SaveGameResultRequest();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.carId = reader.uint32();
                            break;
                        }
                    case 2: {
                            message.gameMode = reader.int32();
                            break;
                        }
                    case 3: {
                            message.playedAt = reader.uint32();
                            break;
                        }
                    case 4: {
                            message.playCount = reader.uint32();
                            break;
                        }
                    case 5: {
                            message.retired = reader.bool();
                            break;
                        }
                    case 6: {
                            message.timeup = reader.bool();
                            break;
                        }
                    case 10: {
                            message.noCredit = reader.bool();
                            break;
                        }
                    case 7: {
                            message.car = $root.wm.protobuf.Car.decode(reader, reader.uint32());
                            break;
                        }
                    case 8: {
                            message.setting = $root.wm.protobuf.CarSetting.decode(reader, reader.uint32());
                            break;
                        }
                    case 9: {
                            message.odometer = reader.uint32();
                            break;
                        }
                    case 11: {
                            message.earnedCustomColor = reader.bool();
                            break;
                        }
                    case 12: {
                            if (!(message.confirmedTutorials && message.confirmedTutorials.length))
                                message.confirmedTutorials = [];
                            if ((tag & 7) === 2) {
                                let end2 = reader.uint32() + reader.pos;
                                while (reader.pos < end2)
                                    message.confirmedTutorials.push(reader.int32());
                            } else
                                message.confirmedTutorials.push(reader.int32());
                            break;
                        }
                    case 13: {
                            if (!(message.earnedItems && message.earnedItems.length))
                                message.earnedItems = [];
                            message.earnedItems.push($root.wm.protobuf.CarItem.decode(reader, reader.uint32()));
                            break;
                        }
                    case 14: {
                            if (!(message.earnedUserItems && message.earnedUserItems.length))
                                message.earnedUserItems = [];
                            message.earnedUserItems.push($root.wm.protobuf.UserItem.decode(reader, reader.uint32()));
                            break;
                        }
                    case 15: {
                            if (!(message.preservedTitles && message.preservedTitles.length))
                                message.preservedTitles = [];
                            message.preservedTitles.push(reader.string());
                            break;
                        }
                    case 21: {
                            if (!(message.neighborCars && message.neighborCars.length))
                                message.neighborCars = [];
                            if ((tag & 7) === 2) {
                                let end2 = reader.uint32() + reader.pos;
                                while (reader.pos < end2)
                                    message.neighborCars.push(reader.uint32());
                            } else
                                message.neighborCars.push(reader.uint32());
                            break;
                        }
                    case 22: {
                            message.stResult = $root.wm.protobuf.SaveGameResultRequest.StoryResult.decode(reader, reader.uint32());
                            break;
                        }
                    case 23: {
                            message.taResult = $root.wm.protobuf.SaveGameResultRequest.TimeAttackResult.decode(reader, reader.uint32());
                            break;
                        }
                    case 24: {
                            message.vsResult = $root.wm.protobuf.SaveGameResultRequest.VersusBattleResult.decode(reader, reader.uint32());
                            break;
                        }
                    case 25: {
                            message.rgResult = $root.wm.protobuf.SaveGameResultRequest.GhostBattleResult.decode(reader, reader.uint32());
                            break;
                        }
                    case 26: {
                            message.koshienLastPlayedState = reader.int32();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("carId"))
                    throw $util.ProtocolError("missing required 'carId'", { instance: message });
                if (!message.hasOwnProperty("gameMode"))
                    throw $util.ProtocolError("missing required 'gameMode'", { instance: message });
                if (!message.hasOwnProperty("playedAt"))
                    throw $util.ProtocolError("missing required 'playedAt'", { instance: message });
                if (!message.hasOwnProperty("playCount"))
                    throw $util.ProtocolError("missing required 'playCount'", { instance: message });
                if (!message.hasOwnProperty("retired"))
                    throw $util.ProtocolError("missing required 'retired'", { instance: message });
                if (!message.hasOwnProperty("timeup"))
                    throw $util.ProtocolError("missing required 'timeup'", { instance: message });
                return message;
            };

            /**
             * Decodes a SaveGameResultRequest message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof wm.protobuf.SaveGameResultRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {wm.protobuf.SaveGameResultRequest} SaveGameResultRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SaveGameResultRequest.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a SaveGameResultRequest message.
             * @function verify
             * @memberof wm.protobuf.SaveGameResultRequest
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            SaveGameResultRequest.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (!$util.isInteger(message.carId))
                    return "carId: integer expected";
                switch (message.gameMode) {
                default:
                    return "gameMode: enum value expected";
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                    break;
                }
                if (!$util.isInteger(message.playedAt))
                    return "playedAt: integer expected";
                if (!$util.isInteger(message.playCount))
                    return "playCount: integer expected";
                if (typeof message.retired !== "boolean")
                    return "retired: boolean expected";
                if (typeof message.timeup !== "boolean")
                    return "timeup: boolean expected";
                if (message.noCredit != null && message.hasOwnProperty("noCredit"))
                    if (typeof message.noCredit !== "boolean")
                        return "noCredit: boolean expected";
                if (message.car != null && message.hasOwnProperty("car")) {
                    let error = $root.wm.protobuf.Car.verify(message.car);
                    if (error)
                        return "car." + error;
                }
                if (message.setting != null && message.hasOwnProperty("setting")) {
                    let error = $root.wm.protobuf.CarSetting.verify(message.setting);
                    if (error)
                        return "setting." + error;
                }
                if (message.odometer != null && message.hasOwnProperty("odometer"))
                    if (!$util.isInteger(message.odometer))
                        return "odometer: integer expected";
                if (message.earnedCustomColor != null && message.hasOwnProperty("earnedCustomColor"))
                    if (typeof message.earnedCustomColor !== "boolean")
                        return "earnedCustomColor: boolean expected";
                if (message.confirmedTutorials != null && message.hasOwnProperty("confirmedTutorials")) {
                    if (!Array.isArray(message.confirmedTutorials))
                        return "confirmedTutorials: array expected";
                    for (let i = 0; i < message.confirmedTutorials.length; ++i)
                        switch (message.confirmedTutorials[i]) {
                        default:
                            return "confirmedTutorials: enum value[] expected";
                        case 0:
                        case 1:
                        case 2:
                        case 3:
                        case 4:
                        case 5:
                        case 6:
                        case 7:
                        case 8:
                        case 9:
                        case 10:
                        case 11:
                        case 12:
                        case 13:
                        case 14:
                        case 15:
                        case 16:
                        case 17:
                        case 18:
                        case 19:
                        case 20:
                        case 21:
                        case 22:
                        case 23:
                        case 24:
                        case 25:
                        case 26:
                        case 27:
                        case 28:
                        case 29:
                        case 30:
                        case 31:
                        case 32:
                        case 33:
                        case 34:
                        case 35:
                        case 36:
                        case 37:
                        case 38:
                        case 39:
                        case 40:
                        case 41:
                        case 42:
                        case 43:
                        case 44:
                        case 45:
                        case 46:
                        case 47:
                        case 48:
                        case 49:
                        case 50:
                        case 51:
                        case 52:
                        case 53:
                        case 54:
                        case 55:
                        case 56:
                        case 57:
                        case 58:
                        case 59:
                        case 60:
                        case 61:
                            break;
                        }
                }
                if (message.earnedItems != null && message.hasOwnProperty("earnedItems")) {
                    if (!Array.isArray(message.earnedItems))
                        return "earnedItems: array expected";
                    for (let i = 0; i < message.earnedItems.length; ++i) {
                        let error = $root.wm.protobuf.CarItem.verify(message.earnedItems[i]);
                        if (error)
                            return "earnedItems." + error;
                    }
                }
                if (message.earnedUserItems != null && message.hasOwnProperty("earnedUserItems")) {
                    if (!Array.isArray(message.earnedUserItems))
                        return "earnedUserItems: array expected";
                    for (let i = 0; i < message.earnedUserItems.length; ++i) {
                        let error = $root.wm.protobuf.UserItem.verify(message.earnedUserItems[i]);
                        if (error)
                            return "earnedUserItems." + error;
                    }
                }
                if (message.preservedTitles != null && message.hasOwnProperty("preservedTitles")) {
                    if (!Array.isArray(message.preservedTitles))
                        return "preservedTitles: array expected";
                    for (let i = 0; i < message.preservedTitles.length; ++i)
                        if (!$util.isString(message.preservedTitles[i]))
                            return "preservedTitles: string[] expected";
                }
                if (message.neighborCars != null && message.hasOwnProperty("neighborCars")) {
                    if (!Array.isArray(message.neighborCars))
                        return "neighborCars: array expected";
                    for (let i = 0; i < message.neighborCars.length; ++i)
                        if (!$util.isInteger(message.neighborCars[i]))
                            return "neighborCars: integer[] expected";
                }
                if (message.stResult != null && message.hasOwnProperty("stResult")) {
                    let error = $root.wm.protobuf.SaveGameResultRequest.StoryResult.verify(message.stResult);
                    if (error)
                        return "stResult." + error;
                }
                if (message.taResult != null && message.hasOwnProperty("taResult")) {
                    let error = $root.wm.protobuf.SaveGameResultRequest.TimeAttackResult.verify(message.taResult);
                    if (error)
                        return "taResult." + error;
                }
                if (message.vsResult != null && message.hasOwnProperty("vsResult")) {
                    let error = $root.wm.protobuf.SaveGameResultRequest.VersusBattleResult.verify(message.vsResult);
                    if (error)
                        return "vsResult." + error;
                }
                if (message.rgResult != null && message.hasOwnProperty("rgResult")) {
                    let error = $root.wm.protobuf.SaveGameResultRequest.GhostBattleResult.verify(message.rgResult);
                    if (error)
                        return "rgResult." + error;
                }
                if (message.koshienLastPlayedState != null && message.hasOwnProperty("koshienLastPlayedState"))
                    switch (message.koshienLastPlayedState) {
                    default:
                        return "koshienLastPlayedState: enum value expected";
                    case 1:
                    case 2:
                    case 3:
                    case 4:
                    case 5:
                    case 6:
                    case 7:
                    case 8:
                    case 9:
                    case 10:
                        break;
                    }
                return null;
            };

            /**
             * Creates a SaveGameResultRequest message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof wm.protobuf.SaveGameResultRequest
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {wm.protobuf.SaveGameResultRequest} SaveGameResultRequest
             */
            SaveGameResultRequest.fromObject = function fromObject(object) {
                if (object instanceof $root.wm.protobuf.SaveGameResultRequest)
                    return object;
                let message = new $root.wm.protobuf.SaveGameResultRequest();
                if (object.carId != null)
                    message.carId = object.carId >>> 0;
                switch (object.gameMode) {
                default:
                    if (typeof object.gameMode === "number") {
                        message.gameMode = object.gameMode;
                        break;
                    }
                    break;
                case "MODE_STORY":
                case 1:
                    message.gameMode = 1;
                    break;
                case "MODE_TIME_ATTACK":
                case 2:
                    message.gameMode = 2;
                    break;
                case "MODE_VS_BATTLE":
                case 3:
                    message.gameMode = 3;
                    break;
                case "MODE_GHOST_BATTLE":
                case 4:
                    message.gameMode = 4;
                    break;
                case "MODE_EVENT":
                case 5:
                    message.gameMode = 5;
                    break;
                }
                if (object.playedAt != null)
                    message.playedAt = object.playedAt >>> 0;
                if (object.playCount != null)
                    message.playCount = object.playCount >>> 0;
                if (object.retired != null)
                    message.retired = Boolean(object.retired);
                if (object.timeup != null)
                    message.timeup = Boolean(object.timeup);
                if (object.noCredit != null)
                    message.noCredit = Boolean(object.noCredit);
                if (object.car != null) {
                    if (typeof object.car !== "object")
                        throw TypeError(".wm.protobuf.SaveGameResultRequest.car: object expected");
                    message.car = $root.wm.protobuf.Car.fromObject(object.car);
                }
                if (object.setting != null) {
                    if (typeof object.setting !== "object")
                        throw TypeError(".wm.protobuf.SaveGameResultRequest.setting: object expected");
                    message.setting = $root.wm.protobuf.CarSetting.fromObject(object.setting);
                }
                if (object.odometer != null)
                    message.odometer = object.odometer >>> 0;
                if (object.earnedCustomColor != null)
                    message.earnedCustomColor = Boolean(object.earnedCustomColor);
                if (object.confirmedTutorials) {
                    if (!Array.isArray(object.confirmedTutorials))
                        throw TypeError(".wm.protobuf.SaveGameResultRequest.confirmedTutorials: array expected");
                    message.confirmedTutorials = [];
                    for (let i = 0; i < object.confirmedTutorials.length; ++i)
                        switch (object.confirmedTutorials[i]) {
                        default:
                            if (typeof object.confirmedTutorials[i] === "number") {
                                message.confirmedTutorials[i] = object.confirmedTutorials[i];
                                break;
                            }
                        case "TUTORIAL_ID_STORY":
                        case 0:
                            message.confirmedTutorials[i] = 0;
                            break;
                        case "TUTORIAL_ID_TIME_ATTACK":
                        case 1:
                            message.confirmedTutorials[i] = 1;
                            break;
                        case "TUTORIAL_ID_GHOST":
                        case 2:
                            message.confirmedTutorials[i] = 2;
                            break;
                        case "TUTORIAL_ID_GHOST_CHALLENGE":
                        case 3:
                            message.confirmedTutorials[i] = 3;
                            break;
                        case "TUTORIAL_ID_UNUSED_4":
                        case 4:
                            message.confirmedTutorials[i] = 4;
                            break;
                        case "TUTORIAL_ID_UNUSED_5":
                        case 5:
                            message.confirmedTutorials[i] = 5;
                            break;
                        case "TUTORIAL_ID_GHOST_SEARCH":
                        case 6:
                            message.confirmedTutorials[i] = 6;
                            break;
                        case "TUTORIAL_ID_GHOST_COMPETITION":
                        case 7:
                            message.confirmedTutorials[i] = 7;
                            break;
                        case "TUTORIAL_ID_HP600_CARD":
                        case 8:
                            message.confirmedTutorials[i] = 8;
                            break;
                        case "TUTORIAL_ID_UNUSED_9":
                        case 9:
                            message.confirmedTutorials[i] = 9;
                            break;
                        case "TUTORIAL_ID_COMPETITION_QUALIFIED":
                        case 10:
                            message.confirmedTutorials[i] = 10;
                            break;
                        case "TUTORIAL_ID_COMPETITION_TERMINAL":
                        case 11:
                            message.confirmedTutorials[i] = 11;
                            break;
                        case "TUTORIAL_ID_COMPETITION_NOTICE":
                        case 12:
                            message.confirmedTutorials[i] = 12;
                            break;
                        case "TUTORIAL_ID_COMPETITION_FINISHED":
                        case 13:
                            message.confirmedTutorials[i] = 13;
                            break;
                        case "TUTORIAL_ID_UNUSED_14":
                        case 14:
                            message.confirmedTutorials[i] = 14;
                            break;
                        case "TUTORIAL_ID_UNUSED_15":
                        case 15:
                            message.confirmedTutorials[i] = 15;
                            break;
                        case "TUTORIAL_ID_UNUSED_16":
                        case 16:
                            message.confirmedTutorials[i] = 16;
                            break;
                        case "TUTORIAL_ID_UNUSED_17":
                        case 17:
                            message.confirmedTutorials[i] = 17;
                            break;
                        case "TUTORIAL_ID_UNUSED_18":
                        case 18:
                            message.confirmedTutorials[i] = 18;
                            break;
                        case "TUTORIAL_ID_UNUSED_19":
                        case 19:
                            message.confirmedTutorials[i] = 19;
                            break;
                        case "TUTORIAL_ID_GHOST_STAMP":
                        case 20:
                            message.confirmedTutorials[i] = 20;
                            break;
                        case "TUTORIAL_ID_GHOST_STAMP_DECLINED":
                        case 21:
                            message.confirmedTutorials[i] = 21;
                            break;
                        case "TUTORIAL_ID_GHOST_STAMP_FRIENDS":
                        case 22:
                            message.confirmedTutorials[i] = 22;
                            break;
                        case "TUTORIAL_ID_TERMINAL_SCRATCH":
                        case 23:
                            message.confirmedTutorials[i] = 23;
                            break;
                        case "TUTORIAL_ID_TURN_SCRATCH_SHEET":
                        case 24:
                            message.confirmedTutorials[i] = 24;
                            break;
                        case "TUTORIAL_ID_INVITE_FRIEND_CAMPAIGN":
                        case 25:
                            message.confirmedTutorials[i] = 25;
                            break;
                        case "TUTORIAL_ID_CAR_COUPON_FULL_TUNED_RECEIVABLE":
                        case 26:
                            message.confirmedTutorials[i] = 26;
                            break;
                        case "TUTORIAL_ID_VS_CONTINUE_TICKET":
                        case 27:
                            message.confirmedTutorials[i] = 27;
                            break;
                        case "TUTORIAL_ID_UNUSED_28":
                        case 28:
                            message.confirmedTutorials[i] = 28;
                            break;
                        case "TUTORIAL_ID_UNUSED_29":
                        case 29:
                            message.confirmedTutorials[i] = 29;
                            break;
                        case "TUTORIAL_ID_UNUSED_30":
                        case 30:
                            message.confirmedTutorials[i] = 30;
                            break;
                        case "TUTORIAL_ID_DRESS_UP":
                        case 31:
                            message.confirmedTutorials[i] = 31;
                            break;
                        case "TUTORIAL_ID_UNUSED_32":
                        case 32:
                            message.confirmedTutorials[i] = 32;
                            break;
                        case "TUTORIAL_ID_STORY_NEW_FEATURE":
                        case 33:
                            message.confirmedTutorials[i] = 33;
                            break;
                        case "TUTORIAL_ID_GHOST_NEW_FEATURE":
                        case 34:
                            message.confirmedTutorials[i] = 34;
                            break;
                        case "TUTORIAL_ID_UNUSED_35":
                        case 35:
                            message.confirmedTutorials[i] = 35;
                            break;
                        case "TUTORIAL_ID_GHOST_EXPEDITION_NEW":
                        case 36:
                            message.confirmedTutorials[i] = 36;
                            break;
                        case "TUTORIAL_ID_GHOST_EXPEDITION_WANTED":
                        case 37:
                            message.confirmedTutorials[i] = 37;
                            break;
                        case "TUTORIAL_ID_GHOST_EXPEDITION_WANTED2":
                        case 38:
                            message.confirmedTutorials[i] = 38;
                            break;
                        case "TUTORIAL_ID_GHOST_EXPEDITION_REWARD":
                        case 39:
                            message.confirmedTutorials[i] = 39;
                            break;
                        case "TUTORIAL_ID_MULTI_GHOST_VS_2":
                        case 40:
                            message.confirmedTutorials[i] = 40;
                            break;
                        case "TUTORIAL_ID_MULTI_GHOST_VS_3":
                        case 41:
                            message.confirmedTutorials[i] = 41;
                            break;
                        case "TUTORIAL_ID_GHOST_SELECT_BY_OTHER_PLACE":
                        case 42:
                            message.confirmedTutorials[i] = 42;
                            break;
                        case "TUTORIAL_ID_GHOST_SELECT_BY_MANUFACTURER":
                        case 43:
                            message.confirmedTutorials[i] = 43;
                            break;
                        case "TUTORIAL_ID_GHOST_SELECT_BY_OTHER_MANUFACTURER":
                        case 44:
                            message.confirmedTutorials[i] = 44;
                            break;
                        case "TUTORIAL_ID_GHOST_SELECT_BY_PLAYED":
                        case 45:
                            message.confirmedTutorials[i] = 45;
                            break;
                        case "TUTORIAL_ID_GHOST_HIGHWAY_NEW":
                        case 46:
                            message.confirmedTutorials[i] = 46;
                            break;
                        case "TUTORIAL_ID_GHOST_HIGHWAY_STATION":
                        case 47:
                            message.confirmedTutorials[i] = 47;
                            break;
                        case "TUTORIAL_ID_GHOST_HIGHWAY_BOSS":
                        case 48:
                            message.confirmedTutorials[i] = 48;
                            break;
                        case "TUTORIAL_ID_GHOST_TROPHY":
                        case 49:
                            message.confirmedTutorials[i] = 49;
                            break;
                        case "TUTORIAL_ID_GHOST_SELECT":
                        case 50:
                            message.confirmedTutorials[i] = 50;
                            break;
                        case "TUTORIAL_ID_GHOST_SELECT_BY_SAME_PLACE":
                        case 51:
                            message.confirmedTutorials[i] = 51;
                            break;
                        case "TUTORIAL_ID_GHOST_BINGO_NEW":
                        case 52:
                            message.confirmedTutorials[i] = 52;
                            break;
                        case "TUTORIAL_ID_UNUSED_53":
                        case 53:
                            message.confirmedTutorials[i] = 53;
                            break;
                        case "TUTORIAL_ID_GHOST_BINGO_LINK":
                        case 54:
                            message.confirmedTutorials[i] = 54;
                            break;
                        case "TUTORIAL_ID_GHOST_KOSHIEN_NEW":
                        case 55:
                            message.confirmedTutorials[i] = 55;
                            break;
                        case "TUTORIAL_ID_GHOST_KOSHIEN_NOTICE":
                        case 56:
                            message.confirmedTutorials[i] = 56;
                            break;
                        case "TUTORIAL_ID_GHOST_KOSHIEN_MVP_UPDATE":
                        case 57:
                            message.confirmedTutorials[i] = 57;
                            break;
                        case "TUTORIAL_ID_BINGO_LUCKY_CHANCE":
                        case 58:
                            message.confirmedTutorials[i] = 58;
                            break;
                        case "TUTORIAL_ID_GHOST_KOSHIEN_FINISHED":
                        case 59:
                            message.confirmedTutorials[i] = 59;
                            break;
                        case "TUTORIAL_ID_GHOST_KOSHIEN_AFTEREVENT":
                        case 60:
                            message.confirmedTutorials[i] = 60;
                            break;
                        case "TUTORIAL_ID_GHOST_BINGO_AREA":
                        case 61:
                            message.confirmedTutorials[i] = 61;
                            break;
                        }
                }
                if (object.earnedItems) {
                    if (!Array.isArray(object.earnedItems))
                        throw TypeError(".wm.protobuf.SaveGameResultRequest.earnedItems: array expected");
                    message.earnedItems = [];
                    for (let i = 0; i < object.earnedItems.length; ++i) {
                        if (typeof object.earnedItems[i] !== "object")
                            throw TypeError(".wm.protobuf.SaveGameResultRequest.earnedItems: object expected");
                        message.earnedItems[i] = $root.wm.protobuf.CarItem.fromObject(object.earnedItems[i]);
                    }
                }
                if (object.earnedUserItems) {
                    if (!Array.isArray(object.earnedUserItems))
                        throw TypeError(".wm.protobuf.SaveGameResultRequest.earnedUserItems: array expected");
                    message.earnedUserItems = [];
                    for (let i = 0; i < object.earnedUserItems.length; ++i) {
                        if (typeof object.earnedUserItems[i] !== "object")
                            throw TypeError(".wm.protobuf.SaveGameResultRequest.earnedUserItems: object expected");
                        message.earnedUserItems[i] = $root.wm.protobuf.UserItem.fromObject(object.earnedUserItems[i]);
                    }
                }
                if (object.preservedTitles) {
                    if (!Array.isArray(object.preservedTitles))
                        throw TypeError(".wm.protobuf.SaveGameResultRequest.preservedTitles: array expected");
                    message.preservedTitles = [];
                    for (let i = 0; i < object.preservedTitles.length; ++i)
                        message.preservedTitles[i] = String(object.preservedTitles[i]);
                }
                if (object.neighborCars) {
                    if (!Array.isArray(object.neighborCars))
                        throw TypeError(".wm.protobuf.SaveGameResultRequest.neighborCars: array expected");
                    message.neighborCars = [];
                    for (let i = 0; i < object.neighborCars.length; ++i)
                        message.neighborCars[i] = object.neighborCars[i] >>> 0;
                }
                if (object.stResult != null) {
                    if (typeof object.stResult !== "object")
                        throw TypeError(".wm.protobuf.SaveGameResultRequest.stResult: object expected");
                    message.stResult = $root.wm.protobuf.SaveGameResultRequest.StoryResult.fromObject(object.stResult);
                }
                if (object.taResult != null) {
                    if (typeof object.taResult !== "object")
                        throw TypeError(".wm.protobuf.SaveGameResultRequest.taResult: object expected");
                    message.taResult = $root.wm.protobuf.SaveGameResultRequest.TimeAttackResult.fromObject(object.taResult);
                }
                if (object.vsResult != null) {
                    if (typeof object.vsResult !== "object")
                        throw TypeError(".wm.protobuf.SaveGameResultRequest.vsResult: object expected");
                    message.vsResult = $root.wm.protobuf.SaveGameResultRequest.VersusBattleResult.fromObject(object.vsResult);
                }
                if (object.rgResult != null) {
                    if (typeof object.rgResult !== "object")
                        throw TypeError(".wm.protobuf.SaveGameResultRequest.rgResult: object expected");
                    message.rgResult = $root.wm.protobuf.SaveGameResultRequest.GhostBattleResult.fromObject(object.rgResult);
                }
                switch (object.koshienLastPlayedState) {
                default:
                    if (typeof object.koshienLastPlayedState === "number") {
                        message.koshienLastPlayedState = object.koshienLastPlayedState;
                        break;
                    }
                    break;
                case "KOSHIEN_NOT_PARTICIPATED":
                case 1:
                    message.koshienLastPlayedState = 1;
                    break;
                case "KOSHIEN_FIRST_QUALIFIED":
                case 2:
                    message.koshienLastPlayedState = 2;
                    break;
                case "KOSHIEN_SECOND_QUALIFIED":
                case 3:
                    message.koshienLastPlayedState = 3;
                    break;
                case "KOSHIEN_REGION_PARTICIPATED":
                case 4:
                    message.koshienLastPlayedState = 4;
                    break;
                case "KOSHIEN_PARTICIPATED":
                case 5:
                    message.koshienLastPlayedState = 5;
                    break;
                case "KOSHIEN_FIRST_QUALIFIED_LOSE":
                case 6:
                    message.koshienLastPlayedState = 6;
                    break;
                case "KOSHIEN_SECOND_QUALIFIED_LOSE":
                case 7:
                    message.koshienLastPlayedState = 7;
                    break;
                case "KOSHIEN_REGION_PARTICIPATED_LOSE":
                case 8:
                    message.koshienLastPlayedState = 8;
                    break;
                case "KOSHIEN_WON":
                case 9:
                    message.koshienLastPlayedState = 9;
                    break;
                case "KOSHIEN_UNUSED":
                case 10:
                    message.koshienLastPlayedState = 10;
                    break;
                }
                return message;
            };

            /**
             * Creates a plain object from a SaveGameResultRequest message. Also converts values to other types if specified.
             * @function toObject
             * @memberof wm.protobuf.SaveGameResultRequest
             * @static
             * @param {wm.protobuf.SaveGameResultRequest} message SaveGameResultRequest
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            SaveGameResultRequest.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults) {
                    object.confirmedTutorials = [];
                    object.earnedItems = [];
                    object.earnedUserItems = [];
                    object.preservedTitles = [];
                    object.neighborCars = [];
                }
                if (options.defaults) {
                    object.carId = 0;
                    object.gameMode = options.enums === String ? "MODE_STORY" : 1;
                    object.playedAt = 0;
                    object.playCount = 0;
                    object.retired = false;
                    object.timeup = false;
                    object.car = null;
                    object.setting = null;
                    object.odometer = 0;
                    object.noCredit = false;
                    object.earnedCustomColor = false;
                    object.stResult = null;
                    object.taResult = null;
                    object.vsResult = null;
                    object.rgResult = null;
                    object.koshienLastPlayedState = options.enums === String ? "KOSHIEN_NOT_PARTICIPATED" : 1;
                }
                if (message.carId != null && message.hasOwnProperty("carId"))
                    object.carId = message.carId;
                if (message.gameMode != null && message.hasOwnProperty("gameMode"))
                    object.gameMode = options.enums === String ? $root.wm.protobuf.GameMode[message.gameMode] === undefined ? message.gameMode : $root.wm.protobuf.GameMode[message.gameMode] : message.gameMode;
                if (message.playedAt != null && message.hasOwnProperty("playedAt"))
                    object.playedAt = message.playedAt;
                if (message.playCount != null && message.hasOwnProperty("playCount"))
                    object.playCount = message.playCount;
                if (message.retired != null && message.hasOwnProperty("retired"))
                    object.retired = message.retired;
                if (message.timeup != null && message.hasOwnProperty("timeup"))
                    object.timeup = message.timeup;
                if (message.car != null && message.hasOwnProperty("car"))
                    object.car = $root.wm.protobuf.Car.toObject(message.car, options);
                if (message.setting != null && message.hasOwnProperty("setting"))
                    object.setting = $root.wm.protobuf.CarSetting.toObject(message.setting, options);
                if (message.odometer != null && message.hasOwnProperty("odometer"))
                    object.odometer = message.odometer;
                if (message.noCredit != null && message.hasOwnProperty("noCredit"))
                    object.noCredit = message.noCredit;
                if (message.earnedCustomColor != null && message.hasOwnProperty("earnedCustomColor"))
                    object.earnedCustomColor = message.earnedCustomColor;
                if (message.confirmedTutorials && message.confirmedTutorials.length) {
                    object.confirmedTutorials = [];
                    for (let j = 0; j < message.confirmedTutorials.length; ++j)
                        object.confirmedTutorials[j] = options.enums === String ? $root.wm.protobuf.TutorialType[message.confirmedTutorials[j]] === undefined ? message.confirmedTutorials[j] : $root.wm.protobuf.TutorialType[message.confirmedTutorials[j]] : message.confirmedTutorials[j];
                }
                if (message.earnedItems && message.earnedItems.length) {
                    object.earnedItems = [];
                    for (let j = 0; j < message.earnedItems.length; ++j)
                        object.earnedItems[j] = $root.wm.protobuf.CarItem.toObject(message.earnedItems[j], options);
                }
                if (message.earnedUserItems && message.earnedUserItems.length) {
                    object.earnedUserItems = [];
                    for (let j = 0; j < message.earnedUserItems.length; ++j)
                        object.earnedUserItems[j] = $root.wm.protobuf.UserItem.toObject(message.earnedUserItems[j], options);
                }
                if (message.preservedTitles && message.preservedTitles.length) {
                    object.preservedTitles = [];
                    for (let j = 0; j < message.preservedTitles.length; ++j)
                        object.preservedTitles[j] = message.preservedTitles[j];
                }
                if (message.neighborCars && message.neighborCars.length) {
                    object.neighborCars = [];
                    for (let j = 0; j < message.neighborCars.length; ++j)
                        object.neighborCars[j] = message.neighborCars[j];
                }
                if (message.stResult != null && message.hasOwnProperty("stResult"))
                    object.stResult = $root.wm.protobuf.SaveGameResultRequest.StoryResult.toObject(message.stResult, options);
                if (message.taResult != null && message.hasOwnProperty("taResult"))
                    object.taResult = $root.wm.protobuf.SaveGameResultRequest.TimeAttackResult.toObject(message.taResult, options);
                if (message.vsResult != null && message.hasOwnProperty("vsResult"))
                    object.vsResult = $root.wm.protobuf.SaveGameResultRequest.VersusBattleResult.toObject(message.vsResult, options);
                if (message.rgResult != null && message.hasOwnProperty("rgResult"))
                    object.rgResult = $root.wm.protobuf.SaveGameResultRequest.GhostBattleResult.toObject(message.rgResult, options);
                if (message.koshienLastPlayedState != null && message.hasOwnProperty("koshienLastPlayedState"))
                    object.koshienLastPlayedState = options.enums === String ? $root.wm.protobuf.GhostKoshienParticipantState[message.koshienLastPlayedState] === undefined ? message.koshienLastPlayedState : $root.wm.protobuf.GhostKoshienParticipantState[message.koshienLastPlayedState] : message.koshienLastPlayedState;
                return object;
            };

            /**
             * Converts this SaveGameResultRequest to JSON.
             * @function toJSON
             * @memberof wm.protobuf.SaveGameResultRequest
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            SaveGameResultRequest.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for SaveGameResultRequest
             * @function getTypeUrl
             * @memberof wm.protobuf.SaveGameResultRequest
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            SaveGameResultRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/wm.protobuf.SaveGameResultRequest";
            };

            SaveGameResultRequest.StoryResult = (function() {

                /**
                 * Properties of a StoryResult.
                 * @memberof wm.protobuf.SaveGameResultRequest
                 * @interface IStoryResult
                 * @property {number} stPlayCount StoryResult stPlayCount
                 * @property {number} stPlayedStory StoryResult stPlayedStory
                 * @property {number|null} [tuningPoint] StoryResult tuningPoint
                 * @property {number|null} [stClearBits] StoryResult stClearBits
                 * @property {number|null} [stClearDivCount] StoryResult stClearDivCount
                 * @property {number|null} [stClearCount] StoryResult stClearCount
                 * @property {number|Long|null} [stLoseBits] StoryResult stLoseBits
                 * @property {number|null} [stConsecutiveWins] StoryResult stConsecutiveWins
                 * @property {boolean|null} [stCompleted_100Episodes] StoryResult stCompleted_100Episodes
                 * @property {boolean|null} [isInsuranceUsed] StoryResult isInsuranceUsed
                 */

                /**
                 * Constructs a new StoryResult.
                 * @memberof wm.protobuf.SaveGameResultRequest
                 * @classdesc Represents a StoryResult.
                 * @implements IStoryResult
                 * @constructor
                 * @param {wm.protobuf.SaveGameResultRequest.IStoryResult=} [properties] Properties to set
                 */
                function StoryResult(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * StoryResult stPlayCount.
                 * @member {number} stPlayCount
                 * @memberof wm.protobuf.SaveGameResultRequest.StoryResult
                 * @instance
                 */
                StoryResult.prototype.stPlayCount = 0;

                /**
                 * StoryResult stPlayedStory.
                 * @member {number} stPlayedStory
                 * @memberof wm.protobuf.SaveGameResultRequest.StoryResult
                 * @instance
                 */
                StoryResult.prototype.stPlayedStory = 0;

                /**
                 * StoryResult tuningPoint.
                 * @member {number} tuningPoint
                 * @memberof wm.protobuf.SaveGameResultRequest.StoryResult
                 * @instance
                 */
                StoryResult.prototype.tuningPoint = 0;

                /**
                 * StoryResult stClearBits.
                 * @member {number} stClearBits
                 * @memberof wm.protobuf.SaveGameResultRequest.StoryResult
                 * @instance
                 */
                StoryResult.prototype.stClearBits = 0;

                /**
                 * StoryResult stClearDivCount.
                 * @member {number} stClearDivCount
                 * @memberof wm.protobuf.SaveGameResultRequest.StoryResult
                 * @instance
                 */
                StoryResult.prototype.stClearDivCount = 0;

                /**
                 * StoryResult stClearCount.
                 * @member {number} stClearCount
                 * @memberof wm.protobuf.SaveGameResultRequest.StoryResult
                 * @instance
                 */
                StoryResult.prototype.stClearCount = 0;

                /**
                 * StoryResult stLoseBits.
                 * @member {number|Long} stLoseBits
                 * @memberof wm.protobuf.SaveGameResultRequest.StoryResult
                 * @instance
                 */
                StoryResult.prototype.stLoseBits = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

                /**
                 * StoryResult stConsecutiveWins.
                 * @member {number} stConsecutiveWins
                 * @memberof wm.protobuf.SaveGameResultRequest.StoryResult
                 * @instance
                 */
                StoryResult.prototype.stConsecutiveWins = 0;

                /**
                 * StoryResult stCompleted_100Episodes.
                 * @member {boolean} stCompleted_100Episodes
                 * @memberof wm.protobuf.SaveGameResultRequest.StoryResult
                 * @instance
                 */
                StoryResult.prototype.stCompleted_100Episodes = false;

                /**
                 * StoryResult isInsuranceUsed.
                 * @member {boolean} isInsuranceUsed
                 * @memberof wm.protobuf.SaveGameResultRequest.StoryResult
                 * @instance
                 */
                StoryResult.prototype.isInsuranceUsed = false;

                /**
                 * Creates a new StoryResult instance using the specified properties.
                 * @function create
                 * @memberof wm.protobuf.SaveGameResultRequest.StoryResult
                 * @static
                 * @param {wm.protobuf.SaveGameResultRequest.IStoryResult=} [properties] Properties to set
                 * @returns {wm.protobuf.SaveGameResultRequest.StoryResult} StoryResult instance
                 */
                StoryResult.create = function create(properties) {
                    return new StoryResult(properties);
                };

                /**
                 * Encodes the specified StoryResult message. Does not implicitly {@link wm.protobuf.SaveGameResultRequest.StoryResult.verify|verify} messages.
                 * @function encode
                 * @memberof wm.protobuf.SaveGameResultRequest.StoryResult
                 * @static
                 * @param {wm.protobuf.SaveGameResultRequest.IStoryResult} message StoryResult message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                StoryResult.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.stPlayCount);
                    if (message.tuningPoint != null && Object.hasOwnProperty.call(message, "tuningPoint"))
                        writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.tuningPoint);
                    if (message.stClearBits != null && Object.hasOwnProperty.call(message, "stClearBits"))
                        writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.stClearBits);
                    if (message.stClearDivCount != null && Object.hasOwnProperty.call(message, "stClearDivCount"))
                        writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.stClearDivCount);
                    if (message.stClearCount != null && Object.hasOwnProperty.call(message, "stClearCount"))
                        writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.stClearCount);
                    if (message.stLoseBits != null && Object.hasOwnProperty.call(message, "stLoseBits"))
                        writer.uint32(/* id 6, wireType 0 =*/48).uint64(message.stLoseBits);
                    if (message.stConsecutiveWins != null && Object.hasOwnProperty.call(message, "stConsecutiveWins"))
                        writer.uint32(/* id 8, wireType 0 =*/64).uint32(message.stConsecutiveWins);
                    writer.uint32(/* id 9, wireType 0 =*/72).uint32(message.stPlayedStory);
                    if (message.stCompleted_100Episodes != null && Object.hasOwnProperty.call(message, "stCompleted_100Episodes"))
                        writer.uint32(/* id 10, wireType 0 =*/80).bool(message.stCompleted_100Episodes);
                    if (message.isInsuranceUsed != null && Object.hasOwnProperty.call(message, "isInsuranceUsed"))
                        writer.uint32(/* id 11, wireType 0 =*/88).bool(message.isInsuranceUsed);
                    return writer;
                };

                /**
                 * Encodes the specified StoryResult message, length delimited. Does not implicitly {@link wm.protobuf.SaveGameResultRequest.StoryResult.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof wm.protobuf.SaveGameResultRequest.StoryResult
                 * @static
                 * @param {wm.protobuf.SaveGameResultRequest.IStoryResult} message StoryResult message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                StoryResult.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a StoryResult message from the specified reader or buffer.
                 * @function decode
                 * @memberof wm.protobuf.SaveGameResultRequest.StoryResult
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {wm.protobuf.SaveGameResultRequest.StoryResult} StoryResult
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                StoryResult.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.wm.protobuf.SaveGameResultRequest.StoryResult();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.stPlayCount = reader.uint32();
                                break;
                            }
                        case 9: {
                                message.stPlayedStory = reader.uint32();
                                break;
                            }
                        case 2: {
                                message.tuningPoint = reader.uint32();
                                break;
                            }
                        case 3: {
                                message.stClearBits = reader.uint32();
                                break;
                            }
                        case 4: {
                                message.stClearDivCount = reader.uint32();
                                break;
                            }
                        case 5: {
                                message.stClearCount = reader.uint32();
                                break;
                            }
                        case 6: {
                                message.stLoseBits = reader.uint64();
                                break;
                            }
                        case 8: {
                                message.stConsecutiveWins = reader.uint32();
                                break;
                            }
                        case 10: {
                                message.stCompleted_100Episodes = reader.bool();
                                break;
                            }
                        case 11: {
                                message.isInsuranceUsed = reader.bool();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    if (!message.hasOwnProperty("stPlayCount"))
                        throw $util.ProtocolError("missing required 'stPlayCount'", { instance: message });
                    if (!message.hasOwnProperty("stPlayedStory"))
                        throw $util.ProtocolError("missing required 'stPlayedStory'", { instance: message });
                    return message;
                };

                /**
                 * Decodes a StoryResult message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof wm.protobuf.SaveGameResultRequest.StoryResult
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {wm.protobuf.SaveGameResultRequest.StoryResult} StoryResult
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                StoryResult.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a StoryResult message.
                 * @function verify
                 * @memberof wm.protobuf.SaveGameResultRequest.StoryResult
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                StoryResult.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (!$util.isInteger(message.stPlayCount))
                        return "stPlayCount: integer expected";
                    if (!$util.isInteger(message.stPlayedStory))
                        return "stPlayedStory: integer expected";
                    if (message.tuningPoint != null && message.hasOwnProperty("tuningPoint"))
                        if (!$util.isInteger(message.tuningPoint))
                            return "tuningPoint: integer expected";
                    if (message.stClearBits != null && message.hasOwnProperty("stClearBits"))
                        if (!$util.isInteger(message.stClearBits))
                            return "stClearBits: integer expected";
                    if (message.stClearDivCount != null && message.hasOwnProperty("stClearDivCount"))
                        if (!$util.isInteger(message.stClearDivCount))
                            return "stClearDivCount: integer expected";
                    if (message.stClearCount != null && message.hasOwnProperty("stClearCount"))
                        if (!$util.isInteger(message.stClearCount))
                            return "stClearCount: integer expected";
                    if (message.stLoseBits != null && message.hasOwnProperty("stLoseBits"))
                        if (!$util.isInteger(message.stLoseBits) && !(message.stLoseBits && $util.isInteger(message.stLoseBits.low) && $util.isInteger(message.stLoseBits.high)))
                            return "stLoseBits: integer|Long expected";
                    if (message.stConsecutiveWins != null && message.hasOwnProperty("stConsecutiveWins"))
                        if (!$util.isInteger(message.stConsecutiveWins))
                            return "stConsecutiveWins: integer expected";
                    if (message.stCompleted_100Episodes != null && message.hasOwnProperty("stCompleted_100Episodes"))
                        if (typeof message.stCompleted_100Episodes !== "boolean")
                            return "stCompleted_100Episodes: boolean expected";
                    if (message.isInsuranceUsed != null && message.hasOwnProperty("isInsuranceUsed"))
                        if (typeof message.isInsuranceUsed !== "boolean")
                            return "isInsuranceUsed: boolean expected";
                    return null;
                };

                /**
                 * Creates a StoryResult message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof wm.protobuf.SaveGameResultRequest.StoryResult
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {wm.protobuf.SaveGameResultRequest.StoryResult} StoryResult
                 */
                StoryResult.fromObject = function fromObject(object) {
                    if (object instanceof $root.wm.protobuf.SaveGameResultRequest.StoryResult)
                        return object;
                    let message = new $root.wm.protobuf.SaveGameResultRequest.StoryResult();
                    if (object.stPlayCount != null)
                        message.stPlayCount = object.stPlayCount >>> 0;
                    if (object.stPlayedStory != null)
                        message.stPlayedStory = object.stPlayedStory >>> 0;
                    if (object.tuningPoint != null)
                        message.tuningPoint = object.tuningPoint >>> 0;
                    if (object.stClearBits != null)
                        message.stClearBits = object.stClearBits >>> 0;
                    if (object.stClearDivCount != null)
                        message.stClearDivCount = object.stClearDivCount >>> 0;
                    if (object.stClearCount != null)
                        message.stClearCount = object.stClearCount >>> 0;
                    if (object.stLoseBits != null)
                        if ($util.Long)
                            (message.stLoseBits = $util.Long.fromValue(object.stLoseBits)).unsigned = true;
                        else if (typeof object.stLoseBits === "string")
                            message.stLoseBits = parseInt(object.stLoseBits, 10);
                        else if (typeof object.stLoseBits === "number")
                            message.stLoseBits = object.stLoseBits;
                        else if (typeof object.stLoseBits === "object")
                            message.stLoseBits = new $util.LongBits(object.stLoseBits.low >>> 0, object.stLoseBits.high >>> 0).toNumber(true);
                    if (object.stConsecutiveWins != null)
                        message.stConsecutiveWins = object.stConsecutiveWins >>> 0;
                    if (object.stCompleted_100Episodes != null)
                        message.stCompleted_100Episodes = Boolean(object.stCompleted_100Episodes);
                    if (object.isInsuranceUsed != null)
                        message.isInsuranceUsed = Boolean(object.isInsuranceUsed);
                    return message;
                };

                /**
                 * Creates a plain object from a StoryResult message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof wm.protobuf.SaveGameResultRequest.StoryResult
                 * @static
                 * @param {wm.protobuf.SaveGameResultRequest.StoryResult} message StoryResult
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                StoryResult.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        object.stPlayCount = 0;
                        object.tuningPoint = 0;
                        object.stClearBits = 0;
                        object.stClearDivCount = 0;
                        object.stClearCount = 0;
                        if ($util.Long) {
                            let long = new $util.Long(0, 0, true);
                            object.stLoseBits = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.stLoseBits = options.longs === String ? "0" : 0;
                        object.stConsecutiveWins = 0;
                        object.stPlayedStory = 0;
                        object.stCompleted_100Episodes = false;
                        object.isInsuranceUsed = false;
                    }
                    if (message.stPlayCount != null && message.hasOwnProperty("stPlayCount"))
                        object.stPlayCount = message.stPlayCount;
                    if (message.tuningPoint != null && message.hasOwnProperty("tuningPoint"))
                        object.tuningPoint = message.tuningPoint;
                    if (message.stClearBits != null && message.hasOwnProperty("stClearBits"))
                        object.stClearBits = message.stClearBits;
                    if (message.stClearDivCount != null && message.hasOwnProperty("stClearDivCount"))
                        object.stClearDivCount = message.stClearDivCount;
                    if (message.stClearCount != null && message.hasOwnProperty("stClearCount"))
                        object.stClearCount = message.stClearCount;
                    if (message.stLoseBits != null && message.hasOwnProperty("stLoseBits"))
                        if (typeof message.stLoseBits === "number")
                            object.stLoseBits = options.longs === String ? String(message.stLoseBits) : message.stLoseBits;
                        else
                            object.stLoseBits = options.longs === String ? $util.Long.prototype.toString.call(message.stLoseBits) : options.longs === Number ? new $util.LongBits(message.stLoseBits.low >>> 0, message.stLoseBits.high >>> 0).toNumber(true) : message.stLoseBits;
                    if (message.stConsecutiveWins != null && message.hasOwnProperty("stConsecutiveWins"))
                        object.stConsecutiveWins = message.stConsecutiveWins;
                    if (message.stPlayedStory != null && message.hasOwnProperty("stPlayedStory"))
                        object.stPlayedStory = message.stPlayedStory;
                    if (message.stCompleted_100Episodes != null && message.hasOwnProperty("stCompleted_100Episodes"))
                        object.stCompleted_100Episodes = message.stCompleted_100Episodes;
                    if (message.isInsuranceUsed != null && message.hasOwnProperty("isInsuranceUsed"))
                        object.isInsuranceUsed = message.isInsuranceUsed;
                    return object;
                };

                /**
                 * Converts this StoryResult to JSON.
                 * @function toJSON
                 * @memberof wm.protobuf.SaveGameResultRequest.StoryResult
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                StoryResult.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                /**
                 * Gets the default type url for StoryResult
                 * @function getTypeUrl
                 * @memberof wm.protobuf.SaveGameResultRequest.StoryResult
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                StoryResult.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/wm.protobuf.SaveGameResultRequest.StoryResult";
                };

                return StoryResult;
            })();

            SaveGameResultRequest.TimeAttackResult = (function() {

                /**
                 * Properties of a TimeAttackResult.
                 * @memberof wm.protobuf.SaveGameResultRequest
                 * @interface ITimeAttackResult
                 * @property {number} time TimeAttackResult time
                 * @property {number} course TimeAttackResult course
                 * @property {boolean} isMorning TimeAttackResult isMorning
                 * @property {number} section_1Time TimeAttackResult section_1Time
                 * @property {number} section_2Time TimeAttackResult section_2Time
                 * @property {number} section_3Time TimeAttackResult section_3Time
                 * @property {number} section_4Time TimeAttackResult section_4Time
                 * @property {number|null} [section_5Time] TimeAttackResult section_5Time
                 * @property {number|null} [section_6Time] TimeAttackResult section_6Time
                 * @property {number|null} [section_7Time] TimeAttackResult section_7Time
                 * @property {number|null} [wholeRank] TimeAttackResult wholeRank
                 * @property {number|null} [modelRank] TimeAttackResult modelRank
                 */

                /**
                 * Constructs a new TimeAttackResult.
                 * @memberof wm.protobuf.SaveGameResultRequest
                 * @classdesc Represents a TimeAttackResult.
                 * @implements ITimeAttackResult
                 * @constructor
                 * @param {wm.protobuf.SaveGameResultRequest.ITimeAttackResult=} [properties] Properties to set
                 */
                function TimeAttackResult(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * TimeAttackResult time.
                 * @member {number} time
                 * @memberof wm.protobuf.SaveGameResultRequest.TimeAttackResult
                 * @instance
                 */
                TimeAttackResult.prototype.time = 0;

                /**
                 * TimeAttackResult course.
                 * @member {number} course
                 * @memberof wm.protobuf.SaveGameResultRequest.TimeAttackResult
                 * @instance
                 */
                TimeAttackResult.prototype.course = 0;

                /**
                 * TimeAttackResult isMorning.
                 * @member {boolean} isMorning
                 * @memberof wm.protobuf.SaveGameResultRequest.TimeAttackResult
                 * @instance
                 */
                TimeAttackResult.prototype.isMorning = false;

                /**
                 * TimeAttackResult section_1Time.
                 * @member {number} section_1Time
                 * @memberof wm.protobuf.SaveGameResultRequest.TimeAttackResult
                 * @instance
                 */
                TimeAttackResult.prototype.section_1Time = 0;

                /**
                 * TimeAttackResult section_2Time.
                 * @member {number} section_2Time
                 * @memberof wm.protobuf.SaveGameResultRequest.TimeAttackResult
                 * @instance
                 */
                TimeAttackResult.prototype.section_2Time = 0;

                /**
                 * TimeAttackResult section_3Time.
                 * @member {number} section_3Time
                 * @memberof wm.protobuf.SaveGameResultRequest.TimeAttackResult
                 * @instance
                 */
                TimeAttackResult.prototype.section_3Time = 0;

                /**
                 * TimeAttackResult section_4Time.
                 * @member {number} section_4Time
                 * @memberof wm.protobuf.SaveGameResultRequest.TimeAttackResult
                 * @instance
                 */
                TimeAttackResult.prototype.section_4Time = 0;

                /**
                 * TimeAttackResult section_5Time.
                 * @member {number} section_5Time
                 * @memberof wm.protobuf.SaveGameResultRequest.TimeAttackResult
                 * @instance
                 */
                TimeAttackResult.prototype.section_5Time = 0;

                /**
                 * TimeAttackResult section_6Time.
                 * @member {number} section_6Time
                 * @memberof wm.protobuf.SaveGameResultRequest.TimeAttackResult
                 * @instance
                 */
                TimeAttackResult.prototype.section_6Time = 0;

                /**
                 * TimeAttackResult section_7Time.
                 * @member {number} section_7Time
                 * @memberof wm.protobuf.SaveGameResultRequest.TimeAttackResult
                 * @instance
                 */
                TimeAttackResult.prototype.section_7Time = 0;

                /**
                 * TimeAttackResult wholeRank.
                 * @member {number} wholeRank
                 * @memberof wm.protobuf.SaveGameResultRequest.TimeAttackResult
                 * @instance
                 */
                TimeAttackResult.prototype.wholeRank = 0;

                /**
                 * TimeAttackResult modelRank.
                 * @member {number} modelRank
                 * @memberof wm.protobuf.SaveGameResultRequest.TimeAttackResult
                 * @instance
                 */
                TimeAttackResult.prototype.modelRank = 0;

                /**
                 * Creates a new TimeAttackResult instance using the specified properties.
                 * @function create
                 * @memberof wm.protobuf.SaveGameResultRequest.TimeAttackResult
                 * @static
                 * @param {wm.protobuf.SaveGameResultRequest.ITimeAttackResult=} [properties] Properties to set
                 * @returns {wm.protobuf.SaveGameResultRequest.TimeAttackResult} TimeAttackResult instance
                 */
                TimeAttackResult.create = function create(properties) {
                    return new TimeAttackResult(properties);
                };

                /**
                 * Encodes the specified TimeAttackResult message. Does not implicitly {@link wm.protobuf.SaveGameResultRequest.TimeAttackResult.verify|verify} messages.
                 * @function encode
                 * @memberof wm.protobuf.SaveGameResultRequest.TimeAttackResult
                 * @static
                 * @param {wm.protobuf.SaveGameResultRequest.ITimeAttackResult} message TimeAttackResult message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                TimeAttackResult.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.time);
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.course);
                    writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.section_1Time);
                    writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.section_2Time);
                    writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.section_3Time);
                    writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.section_4Time);
                    if (message.section_5Time != null && Object.hasOwnProperty.call(message, "section_5Time"))
                        writer.uint32(/* id 7, wireType 0 =*/56).uint32(message.section_5Time);
                    if (message.section_6Time != null && Object.hasOwnProperty.call(message, "section_6Time"))
                        writer.uint32(/* id 8, wireType 0 =*/64).uint32(message.section_6Time);
                    if (message.section_7Time != null && Object.hasOwnProperty.call(message, "section_7Time"))
                        writer.uint32(/* id 9, wireType 0 =*/72).uint32(message.section_7Time);
                    if (message.wholeRank != null && Object.hasOwnProperty.call(message, "wholeRank"))
                        writer.uint32(/* id 10, wireType 0 =*/80).uint32(message.wholeRank);
                    if (message.modelRank != null && Object.hasOwnProperty.call(message, "modelRank"))
                        writer.uint32(/* id 11, wireType 0 =*/88).uint32(message.modelRank);
                    writer.uint32(/* id 12, wireType 0 =*/96).bool(message.isMorning);
                    return writer;
                };

                /**
                 * Encodes the specified TimeAttackResult message, length delimited. Does not implicitly {@link wm.protobuf.SaveGameResultRequest.TimeAttackResult.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof wm.protobuf.SaveGameResultRequest.TimeAttackResult
                 * @static
                 * @param {wm.protobuf.SaveGameResultRequest.ITimeAttackResult} message TimeAttackResult message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                TimeAttackResult.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a TimeAttackResult message from the specified reader or buffer.
                 * @function decode
                 * @memberof wm.protobuf.SaveGameResultRequest.TimeAttackResult
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {wm.protobuf.SaveGameResultRequest.TimeAttackResult} TimeAttackResult
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                TimeAttackResult.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.wm.protobuf.SaveGameResultRequest.TimeAttackResult();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.time = reader.uint32();
                                break;
                            }
                        case 2: {
                                message.course = reader.uint32();
                                break;
                            }
                        case 12: {
                                message.isMorning = reader.bool();
                                break;
                            }
                        case 3: {
                                message.section_1Time = reader.uint32();
                                break;
                            }
                        case 4: {
                                message.section_2Time = reader.uint32();
                                break;
                            }
                        case 5: {
                                message.section_3Time = reader.uint32();
                                break;
                            }
                        case 6: {
                                message.section_4Time = reader.uint32();
                                break;
                            }
                        case 7: {
                                message.section_5Time = reader.uint32();
                                break;
                            }
                        case 8: {
                                message.section_6Time = reader.uint32();
                                break;
                            }
                        case 9: {
                                message.section_7Time = reader.uint32();
                                break;
                            }
                        case 10: {
                                message.wholeRank = reader.uint32();
                                break;
                            }
                        case 11: {
                                message.modelRank = reader.uint32();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    if (!message.hasOwnProperty("time"))
                        throw $util.ProtocolError("missing required 'time'", { instance: message });
                    if (!message.hasOwnProperty("course"))
                        throw $util.ProtocolError("missing required 'course'", { instance: message });
                    if (!message.hasOwnProperty("isMorning"))
                        throw $util.ProtocolError("missing required 'isMorning'", { instance: message });
                    if (!message.hasOwnProperty("section_1Time"))
                        throw $util.ProtocolError("missing required 'section_1Time'", { instance: message });
                    if (!message.hasOwnProperty("section_2Time"))
                        throw $util.ProtocolError("missing required 'section_2Time'", { instance: message });
                    if (!message.hasOwnProperty("section_3Time"))
                        throw $util.ProtocolError("missing required 'section_3Time'", { instance: message });
                    if (!message.hasOwnProperty("section_4Time"))
                        throw $util.ProtocolError("missing required 'section_4Time'", { instance: message });
                    return message;
                };

                /**
                 * Decodes a TimeAttackResult message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof wm.protobuf.SaveGameResultRequest.TimeAttackResult
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {wm.protobuf.SaveGameResultRequest.TimeAttackResult} TimeAttackResult
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                TimeAttackResult.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a TimeAttackResult message.
                 * @function verify
                 * @memberof wm.protobuf.SaveGameResultRequest.TimeAttackResult
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                TimeAttackResult.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (!$util.isInteger(message.time))
                        return "time: integer expected";
                    if (!$util.isInteger(message.course))
                        return "course: integer expected";
                    if (typeof message.isMorning !== "boolean")
                        return "isMorning: boolean expected";
                    if (!$util.isInteger(message.section_1Time))
                        return "section_1Time: integer expected";
                    if (!$util.isInteger(message.section_2Time))
                        return "section_2Time: integer expected";
                    if (!$util.isInteger(message.section_3Time))
                        return "section_3Time: integer expected";
                    if (!$util.isInteger(message.section_4Time))
                        return "section_4Time: integer expected";
                    if (message.section_5Time != null && message.hasOwnProperty("section_5Time"))
                        if (!$util.isInteger(message.section_5Time))
                            return "section_5Time: integer expected";
                    if (message.section_6Time != null && message.hasOwnProperty("section_6Time"))
                        if (!$util.isInteger(message.section_6Time))
                            return "section_6Time: integer expected";
                    if (message.section_7Time != null && message.hasOwnProperty("section_7Time"))
                        if (!$util.isInteger(message.section_7Time))
                            return "section_7Time: integer expected";
                    if (message.wholeRank != null && message.hasOwnProperty("wholeRank"))
                        if (!$util.isInteger(message.wholeRank))
                            return "wholeRank: integer expected";
                    if (message.modelRank != null && message.hasOwnProperty("modelRank"))
                        if (!$util.isInteger(message.modelRank))
                            return "modelRank: integer expected";
                    return null;
                };

                /**
                 * Creates a TimeAttackResult message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof wm.protobuf.SaveGameResultRequest.TimeAttackResult
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {wm.protobuf.SaveGameResultRequest.TimeAttackResult} TimeAttackResult
                 */
                TimeAttackResult.fromObject = function fromObject(object) {
                    if (object instanceof $root.wm.protobuf.SaveGameResultRequest.TimeAttackResult)
                        return object;
                    let message = new $root.wm.protobuf.SaveGameResultRequest.TimeAttackResult();
                    if (object.time != null)
                        message.time = object.time >>> 0;
                    if (object.course != null)
                        message.course = object.course >>> 0;
                    if (object.isMorning != null)
                        message.isMorning = Boolean(object.isMorning);
                    if (object.section_1Time != null)
                        message.section_1Time = object.section_1Time >>> 0;
                    if (object.section_2Time != null)
                        message.section_2Time = object.section_2Time >>> 0;
                    if (object.section_3Time != null)
                        message.section_3Time = object.section_3Time >>> 0;
                    if (object.section_4Time != null)
                        message.section_4Time = object.section_4Time >>> 0;
                    if (object.section_5Time != null)
                        message.section_5Time = object.section_5Time >>> 0;
                    if (object.section_6Time != null)
                        message.section_6Time = object.section_6Time >>> 0;
                    if (object.section_7Time != null)
                        message.section_7Time = object.section_7Time >>> 0;
                    if (object.wholeRank != null)
                        message.wholeRank = object.wholeRank >>> 0;
                    if (object.modelRank != null)
                        message.modelRank = object.modelRank >>> 0;
                    return message;
                };

                /**
                 * Creates a plain object from a TimeAttackResult message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof wm.protobuf.SaveGameResultRequest.TimeAttackResult
                 * @static
                 * @param {wm.protobuf.SaveGameResultRequest.TimeAttackResult} message TimeAttackResult
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                TimeAttackResult.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        object.time = 0;
                        object.course = 0;
                        object.section_1Time = 0;
                        object.section_2Time = 0;
                        object.section_3Time = 0;
                        object.section_4Time = 0;
                        object.section_5Time = 0;
                        object.section_6Time = 0;
                        object.section_7Time = 0;
                        object.wholeRank = 0;
                        object.modelRank = 0;
                        object.isMorning = false;
                    }
                    if (message.time != null && message.hasOwnProperty("time"))
                        object.time = message.time;
                    if (message.course != null && message.hasOwnProperty("course"))
                        object.course = message.course;
                    if (message.section_1Time != null && message.hasOwnProperty("section_1Time"))
                        object.section_1Time = message.section_1Time;
                    if (message.section_2Time != null && message.hasOwnProperty("section_2Time"))
                        object.section_2Time = message.section_2Time;
                    if (message.section_3Time != null && message.hasOwnProperty("section_3Time"))
                        object.section_3Time = message.section_3Time;
                    if (message.section_4Time != null && message.hasOwnProperty("section_4Time"))
                        object.section_4Time = message.section_4Time;
                    if (message.section_5Time != null && message.hasOwnProperty("section_5Time"))
                        object.section_5Time = message.section_5Time;
                    if (message.section_6Time != null && message.hasOwnProperty("section_6Time"))
                        object.section_6Time = message.section_6Time;
                    if (message.section_7Time != null && message.hasOwnProperty("section_7Time"))
                        object.section_7Time = message.section_7Time;
                    if (message.wholeRank != null && message.hasOwnProperty("wholeRank"))
                        object.wholeRank = message.wholeRank;
                    if (message.modelRank != null && message.hasOwnProperty("modelRank"))
                        object.modelRank = message.modelRank;
                    if (message.isMorning != null && message.hasOwnProperty("isMorning"))
                        object.isMorning = message.isMorning;
                    return object;
                };

                /**
                 * Converts this TimeAttackResult to JSON.
                 * @function toJSON
                 * @memberof wm.protobuf.SaveGameResultRequest.TimeAttackResult
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                TimeAttackResult.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                /**
                 * Gets the default type url for TimeAttackResult
                 * @function getTypeUrl
                 * @memberof wm.protobuf.SaveGameResultRequest.TimeAttackResult
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                TimeAttackResult.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/wm.protobuf.SaveGameResultRequest.TimeAttackResult";
                };

                return TimeAttackResult;
            })();

            SaveGameResultRequest.VersusBattleResult = (function() {

                /**
                 * Properties of a VersusBattleResult.
                 * @memberof wm.protobuf.SaveGameResultRequest
                 * @interface IVersusBattleResult
                 * @property {number} result VersusBattleResult result
                 * @property {boolean} survived VersusBattleResult survived
                 * @property {Array.<number>|null} [opponentCarId] VersusBattleResult opponentCarId
                 * @property {number} numOfPlayers VersusBattleResult numOfPlayers
                 * @property {number} area VersusBattleResult area
                 * @property {boolean} isMorning VersusBattleResult isMorning
                 * @property {number} vsPlayCount VersusBattleResult vsPlayCount
                 * @property {number|null} [vsBurstCount] VersusBattleResult vsBurstCount
                 * @property {number|null} [vsStarCount] VersusBattleResult vsStarCount
                 * @property {number|null} [vsStarCountMax] VersusBattleResult vsStarCountMax
                 * @property {number|null} [vsCoolOrWild] VersusBattleResult vsCoolOrWild
                 * @property {number|null} [vsSmoothOrRough] VersusBattleResult vsSmoothOrRough
                 * @property {number|null} [vsTripleStarMedals] VersusBattleResult vsTripleStarMedals
                 * @property {number|null} [vsDoubleStarMedals] VersusBattleResult vsDoubleStarMedals
                 * @property {number|null} [vsSingleStarMedals] VersusBattleResult vsSingleStarMedals
                 * @property {number|null} [vsPlainMedals] VersusBattleResult vsPlainMedals
                 */

                /**
                 * Constructs a new VersusBattleResult.
                 * @memberof wm.protobuf.SaveGameResultRequest
                 * @classdesc Represents a VersusBattleResult.
                 * @implements IVersusBattleResult
                 * @constructor
                 * @param {wm.protobuf.SaveGameResultRequest.IVersusBattleResult=} [properties] Properties to set
                 */
                function VersusBattleResult(properties) {
                    this.opponentCarId = [];
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * VersusBattleResult result.
                 * @member {number} result
                 * @memberof wm.protobuf.SaveGameResultRequest.VersusBattleResult
                 * @instance
                 */
                VersusBattleResult.prototype.result = 0;

                /**
                 * VersusBattleResult survived.
                 * @member {boolean} survived
                 * @memberof wm.protobuf.SaveGameResultRequest.VersusBattleResult
                 * @instance
                 */
                VersusBattleResult.prototype.survived = false;

                /**
                 * VersusBattleResult opponentCarId.
                 * @member {Array.<number>} opponentCarId
                 * @memberof wm.protobuf.SaveGameResultRequest.VersusBattleResult
                 * @instance
                 */
                VersusBattleResult.prototype.opponentCarId = $util.emptyArray;

                /**
                 * VersusBattleResult numOfPlayers.
                 * @member {number} numOfPlayers
                 * @memberof wm.protobuf.SaveGameResultRequest.VersusBattleResult
                 * @instance
                 */
                VersusBattleResult.prototype.numOfPlayers = 0;

                /**
                 * VersusBattleResult area.
                 * @member {number} area
                 * @memberof wm.protobuf.SaveGameResultRequest.VersusBattleResult
                 * @instance
                 */
                VersusBattleResult.prototype.area = 0;

                /**
                 * VersusBattleResult isMorning.
                 * @member {boolean} isMorning
                 * @memberof wm.protobuf.SaveGameResultRequest.VersusBattleResult
                 * @instance
                 */
                VersusBattleResult.prototype.isMorning = false;

                /**
                 * VersusBattleResult vsPlayCount.
                 * @member {number} vsPlayCount
                 * @memberof wm.protobuf.SaveGameResultRequest.VersusBattleResult
                 * @instance
                 */
                VersusBattleResult.prototype.vsPlayCount = 0;

                /**
                 * VersusBattleResult vsBurstCount.
                 * @member {number} vsBurstCount
                 * @memberof wm.protobuf.SaveGameResultRequest.VersusBattleResult
                 * @instance
                 */
                VersusBattleResult.prototype.vsBurstCount = 0;

                /**
                 * VersusBattleResult vsStarCount.
                 * @member {number} vsStarCount
                 * @memberof wm.protobuf.SaveGameResultRequest.VersusBattleResult
                 * @instance
                 */
                VersusBattleResult.prototype.vsStarCount = 0;

                /**
                 * VersusBattleResult vsStarCountMax.
                 * @member {number} vsStarCountMax
                 * @memberof wm.protobuf.SaveGameResultRequest.VersusBattleResult
                 * @instance
                 */
                VersusBattleResult.prototype.vsStarCountMax = 0;

                /**
                 * VersusBattleResult vsCoolOrWild.
                 * @member {number} vsCoolOrWild
                 * @memberof wm.protobuf.SaveGameResultRequest.VersusBattleResult
                 * @instance
                 */
                VersusBattleResult.prototype.vsCoolOrWild = 0;

                /**
                 * VersusBattleResult vsSmoothOrRough.
                 * @member {number} vsSmoothOrRough
                 * @memberof wm.protobuf.SaveGameResultRequest.VersusBattleResult
                 * @instance
                 */
                VersusBattleResult.prototype.vsSmoothOrRough = 0;

                /**
                 * VersusBattleResult vsTripleStarMedals.
                 * @member {number} vsTripleStarMedals
                 * @memberof wm.protobuf.SaveGameResultRequest.VersusBattleResult
                 * @instance
                 */
                VersusBattleResult.prototype.vsTripleStarMedals = 0;

                /**
                 * VersusBattleResult vsDoubleStarMedals.
                 * @member {number} vsDoubleStarMedals
                 * @memberof wm.protobuf.SaveGameResultRequest.VersusBattleResult
                 * @instance
                 */
                VersusBattleResult.prototype.vsDoubleStarMedals = 0;

                /**
                 * VersusBattleResult vsSingleStarMedals.
                 * @member {number} vsSingleStarMedals
                 * @memberof wm.protobuf.SaveGameResultRequest.VersusBattleResult
                 * @instance
                 */
                VersusBattleResult.prototype.vsSingleStarMedals = 0;

                /**
                 * VersusBattleResult vsPlainMedals.
                 * @member {number} vsPlainMedals
                 * @memberof wm.protobuf.SaveGameResultRequest.VersusBattleResult
                 * @instance
                 */
                VersusBattleResult.prototype.vsPlainMedals = 0;

                /**
                 * Creates a new VersusBattleResult instance using the specified properties.
                 * @function create
                 * @memberof wm.protobuf.SaveGameResultRequest.VersusBattleResult
                 * @static
                 * @param {wm.protobuf.SaveGameResultRequest.IVersusBattleResult=} [properties] Properties to set
                 * @returns {wm.protobuf.SaveGameResultRequest.VersusBattleResult} VersusBattleResult instance
                 */
                VersusBattleResult.create = function create(properties) {
                    return new VersusBattleResult(properties);
                };

                /**
                 * Encodes the specified VersusBattleResult message. Does not implicitly {@link wm.protobuf.SaveGameResultRequest.VersusBattleResult.verify|verify} messages.
                 * @function encode
                 * @memberof wm.protobuf.SaveGameResultRequest.VersusBattleResult
                 * @static
                 * @param {wm.protobuf.SaveGameResultRequest.IVersusBattleResult} message VersusBattleResult message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                VersusBattleResult.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.result);
                    writer.uint32(/* id 2, wireType 0 =*/16).bool(message.survived);
                    if (message.opponentCarId != null && message.opponentCarId.length)
                        for (let i = 0; i < message.opponentCarId.length; ++i)
                            writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.opponentCarId[i]);
                    writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.numOfPlayers);
                    writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.vsPlayCount);
                    if (message.vsBurstCount != null && Object.hasOwnProperty.call(message, "vsBurstCount"))
                        writer.uint32(/* id 7, wireType 0 =*/56).uint32(message.vsBurstCount);
                    if (message.vsStarCount != null && Object.hasOwnProperty.call(message, "vsStarCount"))
                        writer.uint32(/* id 8, wireType 0 =*/64).uint32(message.vsStarCount);
                    if (message.vsCoolOrWild != null && Object.hasOwnProperty.call(message, "vsCoolOrWild"))
                        writer.uint32(/* id 9, wireType 0 =*/72).sint32(message.vsCoolOrWild);
                    if (message.vsSmoothOrRough != null && Object.hasOwnProperty.call(message, "vsSmoothOrRough"))
                        writer.uint32(/* id 10, wireType 0 =*/80).sint32(message.vsSmoothOrRough);
                    if (message.vsTripleStarMedals != null && Object.hasOwnProperty.call(message, "vsTripleStarMedals"))
                        writer.uint32(/* id 11, wireType 0 =*/88).uint32(message.vsTripleStarMedals);
                    if (message.vsDoubleStarMedals != null && Object.hasOwnProperty.call(message, "vsDoubleStarMedals"))
                        writer.uint32(/* id 12, wireType 0 =*/96).uint32(message.vsDoubleStarMedals);
                    if (message.vsSingleStarMedals != null && Object.hasOwnProperty.call(message, "vsSingleStarMedals"))
                        writer.uint32(/* id 13, wireType 0 =*/104).uint32(message.vsSingleStarMedals);
                    if (message.vsPlainMedals != null && Object.hasOwnProperty.call(message, "vsPlainMedals"))
                        writer.uint32(/* id 14, wireType 0 =*/112).uint32(message.vsPlainMedals);
                    if (message.vsStarCountMax != null && Object.hasOwnProperty.call(message, "vsStarCountMax"))
                        writer.uint32(/* id 15, wireType 0 =*/120).uint32(message.vsStarCountMax);
                    writer.uint32(/* id 17, wireType 0 =*/136).uint32(message.area);
                    writer.uint32(/* id 18, wireType 0 =*/144).bool(message.isMorning);
                    return writer;
                };

                /**
                 * Encodes the specified VersusBattleResult message, length delimited. Does not implicitly {@link wm.protobuf.SaveGameResultRequest.VersusBattleResult.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof wm.protobuf.SaveGameResultRequest.VersusBattleResult
                 * @static
                 * @param {wm.protobuf.SaveGameResultRequest.IVersusBattleResult} message VersusBattleResult message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                VersusBattleResult.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a VersusBattleResult message from the specified reader or buffer.
                 * @function decode
                 * @memberof wm.protobuf.SaveGameResultRequest.VersusBattleResult
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {wm.protobuf.SaveGameResultRequest.VersusBattleResult} VersusBattleResult
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                VersusBattleResult.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.wm.protobuf.SaveGameResultRequest.VersusBattleResult();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.result = reader.uint32();
                                break;
                            }
                        case 2: {
                                message.survived = reader.bool();
                                break;
                            }
                        case 3: {
                                if (!(message.opponentCarId && message.opponentCarId.length))
                                    message.opponentCarId = [];
                                if ((tag & 7) === 2) {
                                    let end2 = reader.uint32() + reader.pos;
                                    while (reader.pos < end2)
                                        message.opponentCarId.push(reader.uint32());
                                } else
                                    message.opponentCarId.push(reader.uint32());
                                break;
                            }
                        case 5: {
                                message.numOfPlayers = reader.uint32();
                                break;
                            }
                        case 17: {
                                message.area = reader.uint32();
                                break;
                            }
                        case 18: {
                                message.isMorning = reader.bool();
                                break;
                            }
                        case 6: {
                                message.vsPlayCount = reader.uint32();
                                break;
                            }
                        case 7: {
                                message.vsBurstCount = reader.uint32();
                                break;
                            }
                        case 8: {
                                message.vsStarCount = reader.uint32();
                                break;
                            }
                        case 15: {
                                message.vsStarCountMax = reader.uint32();
                                break;
                            }
                        case 9: {
                                message.vsCoolOrWild = reader.sint32();
                                break;
                            }
                        case 10: {
                                message.vsSmoothOrRough = reader.sint32();
                                break;
                            }
                        case 11: {
                                message.vsTripleStarMedals = reader.uint32();
                                break;
                            }
                        case 12: {
                                message.vsDoubleStarMedals = reader.uint32();
                                break;
                            }
                        case 13: {
                                message.vsSingleStarMedals = reader.uint32();
                                break;
                            }
                        case 14: {
                                message.vsPlainMedals = reader.uint32();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    if (!message.hasOwnProperty("result"))
                        throw $util.ProtocolError("missing required 'result'", { instance: message });
                    if (!message.hasOwnProperty("survived"))
                        throw $util.ProtocolError("missing required 'survived'", { instance: message });
                    if (!message.hasOwnProperty("numOfPlayers"))
                        throw $util.ProtocolError("missing required 'numOfPlayers'", { instance: message });
                    if (!message.hasOwnProperty("area"))
                        throw $util.ProtocolError("missing required 'area'", { instance: message });
                    if (!message.hasOwnProperty("isMorning"))
                        throw $util.ProtocolError("missing required 'isMorning'", { instance: message });
                    if (!message.hasOwnProperty("vsPlayCount"))
                        throw $util.ProtocolError("missing required 'vsPlayCount'", { instance: message });
                    return message;
                };

                /**
                 * Decodes a VersusBattleResult message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof wm.protobuf.SaveGameResultRequest.VersusBattleResult
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {wm.protobuf.SaveGameResultRequest.VersusBattleResult} VersusBattleResult
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                VersusBattleResult.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a VersusBattleResult message.
                 * @function verify
                 * @memberof wm.protobuf.SaveGameResultRequest.VersusBattleResult
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                VersusBattleResult.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (!$util.isInteger(message.result))
                        return "result: integer expected";
                    if (typeof message.survived !== "boolean")
                        return "survived: boolean expected";
                    if (message.opponentCarId != null && message.hasOwnProperty("opponentCarId")) {
                        if (!Array.isArray(message.opponentCarId))
                            return "opponentCarId: array expected";
                        for (let i = 0; i < message.opponentCarId.length; ++i)
                            if (!$util.isInteger(message.opponentCarId[i]))
                                return "opponentCarId: integer[] expected";
                    }
                    if (!$util.isInteger(message.numOfPlayers))
                        return "numOfPlayers: integer expected";
                    if (!$util.isInteger(message.area))
                        return "area: integer expected";
                    if (typeof message.isMorning !== "boolean")
                        return "isMorning: boolean expected";
                    if (!$util.isInteger(message.vsPlayCount))
                        return "vsPlayCount: integer expected";
                    if (message.vsBurstCount != null && message.hasOwnProperty("vsBurstCount"))
                        if (!$util.isInteger(message.vsBurstCount))
                            return "vsBurstCount: integer expected";
                    if (message.vsStarCount != null && message.hasOwnProperty("vsStarCount"))
                        if (!$util.isInteger(message.vsStarCount))
                            return "vsStarCount: integer expected";
                    if (message.vsStarCountMax != null && message.hasOwnProperty("vsStarCountMax"))
                        if (!$util.isInteger(message.vsStarCountMax))
                            return "vsStarCountMax: integer expected";
                    if (message.vsCoolOrWild != null && message.hasOwnProperty("vsCoolOrWild"))
                        if (!$util.isInteger(message.vsCoolOrWild))
                            return "vsCoolOrWild: integer expected";
                    if (message.vsSmoothOrRough != null && message.hasOwnProperty("vsSmoothOrRough"))
                        if (!$util.isInteger(message.vsSmoothOrRough))
                            return "vsSmoothOrRough: integer expected";
                    if (message.vsTripleStarMedals != null && message.hasOwnProperty("vsTripleStarMedals"))
                        if (!$util.isInteger(message.vsTripleStarMedals))
                            return "vsTripleStarMedals: integer expected";
                    if (message.vsDoubleStarMedals != null && message.hasOwnProperty("vsDoubleStarMedals"))
                        if (!$util.isInteger(message.vsDoubleStarMedals))
                            return "vsDoubleStarMedals: integer expected";
                    if (message.vsSingleStarMedals != null && message.hasOwnProperty("vsSingleStarMedals"))
                        if (!$util.isInteger(message.vsSingleStarMedals))
                            return "vsSingleStarMedals: integer expected";
                    if (message.vsPlainMedals != null && message.hasOwnProperty("vsPlainMedals"))
                        if (!$util.isInteger(message.vsPlainMedals))
                            return "vsPlainMedals: integer expected";
                    return null;
                };

                /**
                 * Creates a VersusBattleResult message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof wm.protobuf.SaveGameResultRequest.VersusBattleResult
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {wm.protobuf.SaveGameResultRequest.VersusBattleResult} VersusBattleResult
                 */
                VersusBattleResult.fromObject = function fromObject(object) {
                    if (object instanceof $root.wm.protobuf.SaveGameResultRequest.VersusBattleResult)
                        return object;
                    let message = new $root.wm.protobuf.SaveGameResultRequest.VersusBattleResult();
                    if (object.result != null)
                        message.result = object.result >>> 0;
                    if (object.survived != null)
                        message.survived = Boolean(object.survived);
                    if (object.opponentCarId) {
                        if (!Array.isArray(object.opponentCarId))
                            throw TypeError(".wm.protobuf.SaveGameResultRequest.VersusBattleResult.opponentCarId: array expected");
                        message.opponentCarId = [];
                        for (let i = 0; i < object.opponentCarId.length; ++i)
                            message.opponentCarId[i] = object.opponentCarId[i] >>> 0;
                    }
                    if (object.numOfPlayers != null)
                        message.numOfPlayers = object.numOfPlayers >>> 0;
                    if (object.area != null)
                        message.area = object.area >>> 0;
                    if (object.isMorning != null)
                        message.isMorning = Boolean(object.isMorning);
                    if (object.vsPlayCount != null)
                        message.vsPlayCount = object.vsPlayCount >>> 0;
                    if (object.vsBurstCount != null)
                        message.vsBurstCount = object.vsBurstCount >>> 0;
                    if (object.vsStarCount != null)
                        message.vsStarCount = object.vsStarCount >>> 0;
                    if (object.vsStarCountMax != null)
                        message.vsStarCountMax = object.vsStarCountMax >>> 0;
                    if (object.vsCoolOrWild != null)
                        message.vsCoolOrWild = object.vsCoolOrWild | 0;
                    if (object.vsSmoothOrRough != null)
                        message.vsSmoothOrRough = object.vsSmoothOrRough | 0;
                    if (object.vsTripleStarMedals != null)
                        message.vsTripleStarMedals = object.vsTripleStarMedals >>> 0;
                    if (object.vsDoubleStarMedals != null)
                        message.vsDoubleStarMedals = object.vsDoubleStarMedals >>> 0;
                    if (object.vsSingleStarMedals != null)
                        message.vsSingleStarMedals = object.vsSingleStarMedals >>> 0;
                    if (object.vsPlainMedals != null)
                        message.vsPlainMedals = object.vsPlainMedals >>> 0;
                    return message;
                };

                /**
                 * Creates a plain object from a VersusBattleResult message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof wm.protobuf.SaveGameResultRequest.VersusBattleResult
                 * @static
                 * @param {wm.protobuf.SaveGameResultRequest.VersusBattleResult} message VersusBattleResult
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                VersusBattleResult.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.arrays || options.defaults)
                        object.opponentCarId = [];
                    if (options.defaults) {
                        object.result = 0;
                        object.survived = false;
                        object.numOfPlayers = 0;
                        object.vsPlayCount = 0;
                        object.vsBurstCount = 0;
                        object.vsStarCount = 0;
                        object.vsCoolOrWild = 0;
                        object.vsSmoothOrRough = 0;
                        object.vsTripleStarMedals = 0;
                        object.vsDoubleStarMedals = 0;
                        object.vsSingleStarMedals = 0;
                        object.vsPlainMedals = 0;
                        object.vsStarCountMax = 0;
                        object.area = 0;
                        object.isMorning = false;
                    }
                    if (message.result != null && message.hasOwnProperty("result"))
                        object.result = message.result;
                    if (message.survived != null && message.hasOwnProperty("survived"))
                        object.survived = message.survived;
                    if (message.opponentCarId && message.opponentCarId.length) {
                        object.opponentCarId = [];
                        for (let j = 0; j < message.opponentCarId.length; ++j)
                            object.opponentCarId[j] = message.opponentCarId[j];
                    }
                    if (message.numOfPlayers != null && message.hasOwnProperty("numOfPlayers"))
                        object.numOfPlayers = message.numOfPlayers;
                    if (message.vsPlayCount != null && message.hasOwnProperty("vsPlayCount"))
                        object.vsPlayCount = message.vsPlayCount;
                    if (message.vsBurstCount != null && message.hasOwnProperty("vsBurstCount"))
                        object.vsBurstCount = message.vsBurstCount;
                    if (message.vsStarCount != null && message.hasOwnProperty("vsStarCount"))
                        object.vsStarCount = message.vsStarCount;
                    if (message.vsCoolOrWild != null && message.hasOwnProperty("vsCoolOrWild"))
                        object.vsCoolOrWild = message.vsCoolOrWild;
                    if (message.vsSmoothOrRough != null && message.hasOwnProperty("vsSmoothOrRough"))
                        object.vsSmoothOrRough = message.vsSmoothOrRough;
                    if (message.vsTripleStarMedals != null && message.hasOwnProperty("vsTripleStarMedals"))
                        object.vsTripleStarMedals = message.vsTripleStarMedals;
                    if (message.vsDoubleStarMedals != null && message.hasOwnProperty("vsDoubleStarMedals"))
                        object.vsDoubleStarMedals = message.vsDoubleStarMedals;
                    if (message.vsSingleStarMedals != null && message.hasOwnProperty("vsSingleStarMedals"))
                        object.vsSingleStarMedals = message.vsSingleStarMedals;
                    if (message.vsPlainMedals != null && message.hasOwnProperty("vsPlainMedals"))
                        object.vsPlainMedals = message.vsPlainMedals;
                    if (message.vsStarCountMax != null && message.hasOwnProperty("vsStarCountMax"))
                        object.vsStarCountMax = message.vsStarCountMax;
                    if (message.area != null && message.hasOwnProperty("area"))
                        object.area = message.area;
                    if (message.isMorning != null && message.hasOwnProperty("isMorning"))
                        object.isMorning = message.isMorning;
                    return object;
                };

                /**
                 * Converts this VersusBattleResult to JSON.
                 * @function toJSON
                 * @memberof wm.protobuf.SaveGameResultRequest.VersusBattleResult
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                VersusBattleResult.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                /**
                 * Gets the default type url for VersusBattleResult
                 * @function getTypeUrl
                 * @memberof wm.protobuf.SaveGameResultRequest.VersusBattleResult
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                VersusBattleResult.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/wm.protobuf.SaveGameResultRequest.VersusBattleResult";
                };

                return VersusBattleResult;
            })();

            SaveGameResultRequest.GhostBattleResult = (function() {

                /**
                 * Properties of a GhostBattleResult.
                 * @memberof wm.protobuf.SaveGameResultRequest
                 * @interface IGhostBattleResult
                 * @property {Array.<wm.protobuf.SaveGameResultRequest.GhostBattleResult.IGhostBattleOpponent>|null} [opponents] GhostBattleResult opponents
                 * @property {number} path GhostBattleResult path
                 * @property {boolean} isMorning GhostBattleResult isMorning
                 * @property {wm.protobuf.GhostSelectionMethod} selectionMethod GhostBattleResult selectionMethod
                 * @property {number|null} [stampSheetCount] GhostBattleResult stampSheetCount
                 * @property {Array.<number>|null} [stampSheet] GhostBattleResult stampSheet
                 * @property {number|null} [rgStamp] GhostBattleResult rgStamp
                 * @property {Array.<number>|null} [confirmedTransferredStampTargetCarIds] GhostBattleResult confirmedTransferredStampTargetCarIds
                 * @property {number} rgPlayCount GhostBattleResult rgPlayCount
                 * @property {number|null} [dressupLevel] GhostBattleResult dressupLevel
                 * @property {number|null} [dressupPoint] GhostBattleResult dressupPoint
                 * @property {number|null} [rgTrophy] GhostBattleResult rgTrophy
                 * @property {Array.<number>|null} [rgRegionMapScore] GhostBattleResult rgRegionMapScore
                 * @property {number|null} [competitionId] GhostBattleResult competitionId
                 * @property {number|null} [periodId] GhostBattleResult periodId
                 * @property {number|null} [brakingPoint] GhostBattleResult brakingPoint
                 * @property {boolean|null} [acquireCrown] GhostBattleResult acquireCrown
                 * @property {boolean|null} [acquireAllCrowns] GhostBattleResult acquireAllCrowns
                 * @property {wm.protobuf.SaveGameResultRequest.GhostBattleResult.IGhostExpeditionResult|null} [expeditionResult] GhostBattleResult expeditionResult
                 * @property {wm.protobuf.SaveGameResultRequest.GhostBattleResult.IGhostHighwayResult|null} [highwayResult] GhostBattleResult highwayResult
                 * @property {number|null} [koshienId] GhostBattleResult koshienId
                 * @property {number|null} [koshienPeriodId] GhostBattleResult koshienPeriodId
                 * @property {number|null} [koshienUpdateCount] GhostBattleResult koshienUpdateCount
                 */

                /**
                 * Constructs a new GhostBattleResult.
                 * @memberof wm.protobuf.SaveGameResultRequest
                 * @classdesc Represents a GhostBattleResult.
                 * @implements IGhostBattleResult
                 * @constructor
                 * @param {wm.protobuf.SaveGameResultRequest.IGhostBattleResult=} [properties] Properties to set
                 */
                function GhostBattleResult(properties) {
                    this.opponents = [];
                    this.stampSheet = [];
                    this.confirmedTransferredStampTargetCarIds = [];
                    this.rgRegionMapScore = [];
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * GhostBattleResult opponents.
                 * @member {Array.<wm.protobuf.SaveGameResultRequest.GhostBattleResult.IGhostBattleOpponent>} opponents
                 * @memberof wm.protobuf.SaveGameResultRequest.GhostBattleResult
                 * @instance
                 */
                GhostBattleResult.prototype.opponents = $util.emptyArray;

                /**
                 * GhostBattleResult path.
                 * @member {number} path
                 * @memberof wm.protobuf.SaveGameResultRequest.GhostBattleResult
                 * @instance
                 */
                GhostBattleResult.prototype.path = 0;

                /**
                 * GhostBattleResult isMorning.
                 * @member {boolean} isMorning
                 * @memberof wm.protobuf.SaveGameResultRequest.GhostBattleResult
                 * @instance
                 */
                GhostBattleResult.prototype.isMorning = false;

                /**
                 * GhostBattleResult selectionMethod.
                 * @member {wm.protobuf.GhostSelectionMethod} selectionMethod
                 * @memberof wm.protobuf.SaveGameResultRequest.GhostBattleResult
                 * @instance
                 */
                GhostBattleResult.prototype.selectionMethod = 1;

                /**
                 * GhostBattleResult stampSheetCount.
                 * @member {number} stampSheetCount
                 * @memberof wm.protobuf.SaveGameResultRequest.GhostBattleResult
                 * @instance
                 */
                GhostBattleResult.prototype.stampSheetCount = 0;

                /**
                 * GhostBattleResult stampSheet.
                 * @member {Array.<number>} stampSheet
                 * @memberof wm.protobuf.SaveGameResultRequest.GhostBattleResult
                 * @instance
                 */
                GhostBattleResult.prototype.stampSheet = $util.emptyArray;

                /**
                 * GhostBattleResult rgStamp.
                 * @member {number} rgStamp
                 * @memberof wm.protobuf.SaveGameResultRequest.GhostBattleResult
                 * @instance
                 */
                GhostBattleResult.prototype.rgStamp = 0;

                /**
                 * GhostBattleResult confirmedTransferredStampTargetCarIds.
                 * @member {Array.<number>} confirmedTransferredStampTargetCarIds
                 * @memberof wm.protobuf.SaveGameResultRequest.GhostBattleResult
                 * @instance
                 */
                GhostBattleResult.prototype.confirmedTransferredStampTargetCarIds = $util.emptyArray;

                /**
                 * GhostBattleResult rgPlayCount.
                 * @member {number} rgPlayCount
                 * @memberof wm.protobuf.SaveGameResultRequest.GhostBattleResult
                 * @instance
                 */
                GhostBattleResult.prototype.rgPlayCount = 0;

                /**
                 * GhostBattleResult dressupLevel.
                 * @member {number} dressupLevel
                 * @memberof wm.protobuf.SaveGameResultRequest.GhostBattleResult
                 * @instance
                 */
                GhostBattleResult.prototype.dressupLevel = 0;

                /**
                 * GhostBattleResult dressupPoint.
                 * @member {number} dressupPoint
                 * @memberof wm.protobuf.SaveGameResultRequest.GhostBattleResult
                 * @instance
                 */
                GhostBattleResult.prototype.dressupPoint = 0;

                /**
                 * GhostBattleResult rgTrophy.
                 * @member {number} rgTrophy
                 * @memberof wm.protobuf.SaveGameResultRequest.GhostBattleResult
                 * @instance
                 */
                GhostBattleResult.prototype.rgTrophy = 0;

                /**
                 * GhostBattleResult rgRegionMapScore.
                 * @member {Array.<number>} rgRegionMapScore
                 * @memberof wm.protobuf.SaveGameResultRequest.GhostBattleResult
                 * @instance
                 */
                GhostBattleResult.prototype.rgRegionMapScore = $util.emptyArray;

                /**
                 * GhostBattleResult competitionId.
                 * @member {number} competitionId
                 * @memberof wm.protobuf.SaveGameResultRequest.GhostBattleResult
                 * @instance
                 */
                GhostBattleResult.prototype.competitionId = 0;

                /**
                 * GhostBattleResult periodId.
                 * @member {number} periodId
                 * @memberof wm.protobuf.SaveGameResultRequest.GhostBattleResult
                 * @instance
                 */
                GhostBattleResult.prototype.periodId = 0;

                /**
                 * GhostBattleResult brakingPoint.
                 * @member {number} brakingPoint
                 * @memberof wm.protobuf.SaveGameResultRequest.GhostBattleResult
                 * @instance
                 */
                GhostBattleResult.prototype.brakingPoint = 0;

                /**
                 * GhostBattleResult acquireCrown.
                 * @member {boolean} acquireCrown
                 * @memberof wm.protobuf.SaveGameResultRequest.GhostBattleResult
                 * @instance
                 */
                GhostBattleResult.prototype.acquireCrown = false;

                /**
                 * GhostBattleResult acquireAllCrowns.
                 * @member {boolean} acquireAllCrowns
                 * @memberof wm.protobuf.SaveGameResultRequest.GhostBattleResult
                 * @instance
                 */
                GhostBattleResult.prototype.acquireAllCrowns = false;

                /**
                 * GhostBattleResult expeditionResult.
                 * @member {wm.protobuf.SaveGameResultRequest.GhostBattleResult.IGhostExpeditionResult|null|undefined} expeditionResult
                 * @memberof wm.protobuf.SaveGameResultRequest.GhostBattleResult
                 * @instance
                 */
                GhostBattleResult.prototype.expeditionResult = null;

                /**
                 * GhostBattleResult highwayResult.
                 * @member {wm.protobuf.SaveGameResultRequest.GhostBattleResult.IGhostHighwayResult|null|undefined} highwayResult
                 * @memberof wm.protobuf.SaveGameResultRequest.GhostBattleResult
                 * @instance
                 */
                GhostBattleResult.prototype.highwayResult = null;

                /**
                 * GhostBattleResult koshienId.
                 * @member {number} koshienId
                 * @memberof wm.protobuf.SaveGameResultRequest.GhostBattleResult
                 * @instance
                 */
                GhostBattleResult.prototype.koshienId = 0;

                /**
                 * GhostBattleResult koshienPeriodId.
                 * @member {number} koshienPeriodId
                 * @memberof wm.protobuf.SaveGameResultRequest.GhostBattleResult
                 * @instance
                 */
                GhostBattleResult.prototype.koshienPeriodId = 0;

                /**
                 * GhostBattleResult koshienUpdateCount.
                 * @member {number} koshienUpdateCount
                 * @memberof wm.protobuf.SaveGameResultRequest.GhostBattleResult
                 * @instance
                 */
                GhostBattleResult.prototype.koshienUpdateCount = 0;

                /**
                 * Creates a new GhostBattleResult instance using the specified properties.
                 * @function create
                 * @memberof wm.protobuf.SaveGameResultRequest.GhostBattleResult
                 * @static
                 * @param {wm.protobuf.SaveGameResultRequest.IGhostBattleResult=} [properties] Properties to set
                 * @returns {wm.protobuf.SaveGameResultRequest.GhostBattleResult} GhostBattleResult instance
                 */
                GhostBattleResult.create = function create(properties) {
                    return new GhostBattleResult(properties);
                };

                /**
                 * Encodes the specified GhostBattleResult message. Does not implicitly {@link wm.protobuf.SaveGameResultRequest.GhostBattleResult.verify|verify} messages.
                 * @function encode
                 * @memberof wm.protobuf.SaveGameResultRequest.GhostBattleResult
                 * @static
                 * @param {wm.protobuf.SaveGameResultRequest.IGhostBattleResult} message GhostBattleResult message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                GhostBattleResult.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.opponents != null && message.opponents.length)
                        for (let i = 0; i < message.opponents.length; ++i)
                            $root.wm.protobuf.SaveGameResultRequest.GhostBattleResult.GhostBattleOpponent.encode(message.opponents[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.path);
                    writer.uint32(/* id 4, wireType 0 =*/32).int32(message.selectionMethod);
                    if (message.stampSheetCount != null && Object.hasOwnProperty.call(message, "stampSheetCount"))
                        writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.stampSheetCount);
                    if (message.stampSheet != null && message.stampSheet.length)
                        for (let i = 0; i < message.stampSheet.length; ++i)
                            writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.stampSheet[i]);
                    writer.uint32(/* id 8, wireType 0 =*/64).uint32(message.rgPlayCount);
                    if (message.dressupLevel != null && Object.hasOwnProperty.call(message, "dressupLevel"))
                        writer.uint32(/* id 10, wireType 0 =*/80).uint32(message.dressupLevel);
                    if (message.dressupPoint != null && Object.hasOwnProperty.call(message, "dressupPoint"))
                        writer.uint32(/* id 11, wireType 0 =*/88).uint32(message.dressupPoint);
                    if (message.rgRegionMapScore != null && message.rgRegionMapScore.length)
                        for (let i = 0; i < message.rgRegionMapScore.length; ++i)
                            writer.uint32(/* id 14, wireType 0 =*/112).uint32(message.rgRegionMapScore[i]);
                    if (message.competitionId != null && Object.hasOwnProperty.call(message, "competitionId"))
                        writer.uint32(/* id 16, wireType 0 =*/128).uint32(message.competitionId);
                    if (message.periodId != null && Object.hasOwnProperty.call(message, "periodId"))
                        writer.uint32(/* id 17, wireType 0 =*/136).uint32(message.periodId);
                    if (message.brakingPoint != null && Object.hasOwnProperty.call(message, "brakingPoint"))
                        writer.uint32(/* id 18, wireType 0 =*/144).uint32(message.brakingPoint);
                    if (message.acquireCrown != null && Object.hasOwnProperty.call(message, "acquireCrown"))
                        writer.uint32(/* id 20, wireType 0 =*/160).bool(message.acquireCrown);
                    if (message.acquireAllCrowns != null && Object.hasOwnProperty.call(message, "acquireAllCrowns"))
                        writer.uint32(/* id 21, wireType 0 =*/168).bool(message.acquireAllCrowns);
                    if (message.rgStamp != null && Object.hasOwnProperty.call(message, "rgStamp"))
                        writer.uint32(/* id 23, wireType 0 =*/184).uint32(message.rgStamp);
                    if (message.confirmedTransferredStampTargetCarIds != null && message.confirmedTransferredStampTargetCarIds.length)
                        for (let i = 0; i < message.confirmedTransferredStampTargetCarIds.length; ++i)
                            writer.uint32(/* id 24, wireType 0 =*/192).uint32(message.confirmedTransferredStampTargetCarIds[i]);
                    writer.uint32(/* id 25, wireType 0 =*/200).bool(message.isMorning);
                    if (message.expeditionResult != null && Object.hasOwnProperty.call(message, "expeditionResult"))
                        $root.wm.protobuf.SaveGameResultRequest.GhostBattleResult.GhostExpeditionResult.encode(message.expeditionResult, writer.uint32(/* id 26, wireType 2 =*/210).fork()).ldelim();
                    if (message.rgTrophy != null && Object.hasOwnProperty.call(message, "rgTrophy"))
                        writer.uint32(/* id 27, wireType 0 =*/216).uint32(message.rgTrophy);
                    if (message.highwayResult != null && Object.hasOwnProperty.call(message, "highwayResult"))
                        $root.wm.protobuf.SaveGameResultRequest.GhostBattleResult.GhostHighwayResult.encode(message.highwayResult, writer.uint32(/* id 28, wireType 2 =*/226).fork()).ldelim();
                    if (message.koshienId != null && Object.hasOwnProperty.call(message, "koshienId"))
                        writer.uint32(/* id 30, wireType 0 =*/240).uint32(message.koshienId);
                    if (message.koshienPeriodId != null && Object.hasOwnProperty.call(message, "koshienPeriodId"))
                        writer.uint32(/* id 31, wireType 0 =*/248).uint32(message.koshienPeriodId);
                    if (message.koshienUpdateCount != null && Object.hasOwnProperty.call(message, "koshienUpdateCount"))
                        writer.uint32(/* id 32, wireType 0 =*/256).uint32(message.koshienUpdateCount);
                    return writer;
                };

                /**
                 * Encodes the specified GhostBattleResult message, length delimited. Does not implicitly {@link wm.protobuf.SaveGameResultRequest.GhostBattleResult.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof wm.protobuf.SaveGameResultRequest.GhostBattleResult
                 * @static
                 * @param {wm.protobuf.SaveGameResultRequest.IGhostBattleResult} message GhostBattleResult message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                GhostBattleResult.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a GhostBattleResult message from the specified reader or buffer.
                 * @function decode
                 * @memberof wm.protobuf.SaveGameResultRequest.GhostBattleResult
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {wm.protobuf.SaveGameResultRequest.GhostBattleResult} GhostBattleResult
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                GhostBattleResult.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.wm.protobuf.SaveGameResultRequest.GhostBattleResult();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                if (!(message.opponents && message.opponents.length))
                                    message.opponents = [];
                                message.opponents.push($root.wm.protobuf.SaveGameResultRequest.GhostBattleResult.GhostBattleOpponent.decode(reader, reader.uint32()));
                                break;
                            }
                        case 3: {
                                message.path = reader.uint32();
                                break;
                            }
                        case 25: {
                                message.isMorning = reader.bool();
                                break;
                            }
                        case 4: {
                                message.selectionMethod = reader.int32();
                                break;
                            }
                        case 5: {
                                message.stampSheetCount = reader.uint32();
                                break;
                            }
                        case 6: {
                                if (!(message.stampSheet && message.stampSheet.length))
                                    message.stampSheet = [];
                                if ((tag & 7) === 2) {
                                    let end2 = reader.uint32() + reader.pos;
                                    while (reader.pos < end2)
                                        message.stampSheet.push(reader.uint32());
                                } else
                                    message.stampSheet.push(reader.uint32());
                                break;
                            }
                        case 23: {
                                message.rgStamp = reader.uint32();
                                break;
                            }
                        case 24: {
                                if (!(message.confirmedTransferredStampTargetCarIds && message.confirmedTransferredStampTargetCarIds.length))
                                    message.confirmedTransferredStampTargetCarIds = [];
                                if ((tag & 7) === 2) {
                                    let end2 = reader.uint32() + reader.pos;
                                    while (reader.pos < end2)
                                        message.confirmedTransferredStampTargetCarIds.push(reader.uint32());
                                } else
                                    message.confirmedTransferredStampTargetCarIds.push(reader.uint32());
                                break;
                            }
                        case 8: {
                                message.rgPlayCount = reader.uint32();
                                break;
                            }
                        case 10: {
                                message.dressupLevel = reader.uint32();
                                break;
                            }
                        case 11: {
                                message.dressupPoint = reader.uint32();
                                break;
                            }
                        case 27: {
                                message.rgTrophy = reader.uint32();
                                break;
                            }
                        case 14: {
                                if (!(message.rgRegionMapScore && message.rgRegionMapScore.length))
                                    message.rgRegionMapScore = [];
                                if ((tag & 7) === 2) {
                                    let end2 = reader.uint32() + reader.pos;
                                    while (reader.pos < end2)
                                        message.rgRegionMapScore.push(reader.uint32());
                                } else
                                    message.rgRegionMapScore.push(reader.uint32());
                                break;
                            }
                        case 16: {
                                message.competitionId = reader.uint32();
                                break;
                            }
                        case 17: {
                                message.periodId = reader.uint32();
                                break;
                            }
                        case 18: {
                                message.brakingPoint = reader.uint32();
                                break;
                            }
                        case 20: {
                                message.acquireCrown = reader.bool();
                                break;
                            }
                        case 21: {
                                message.acquireAllCrowns = reader.bool();
                                break;
                            }
                        case 26: {
                                message.expeditionResult = $root.wm.protobuf.SaveGameResultRequest.GhostBattleResult.GhostExpeditionResult.decode(reader, reader.uint32());
                                break;
                            }
                        case 28: {
                                message.highwayResult = $root.wm.protobuf.SaveGameResultRequest.GhostBattleResult.GhostHighwayResult.decode(reader, reader.uint32());
                                break;
                            }
                        case 30: {
                                message.koshienId = reader.uint32();
                                break;
                            }
                        case 31: {
                                message.koshienPeriodId = reader.uint32();
                                break;
                            }
                        case 32: {
                                message.koshienUpdateCount = reader.uint32();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    if (!message.hasOwnProperty("path"))
                        throw $util.ProtocolError("missing required 'path'", { instance: message });
                    if (!message.hasOwnProperty("isMorning"))
                        throw $util.ProtocolError("missing required 'isMorning'", { instance: message });
                    if (!message.hasOwnProperty("selectionMethod"))
                        throw $util.ProtocolError("missing required 'selectionMethod'", { instance: message });
                    if (!message.hasOwnProperty("rgPlayCount"))
                        throw $util.ProtocolError("missing required 'rgPlayCount'", { instance: message });
                    return message;
                };

                /**
                 * Decodes a GhostBattleResult message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof wm.protobuf.SaveGameResultRequest.GhostBattleResult
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {wm.protobuf.SaveGameResultRequest.GhostBattleResult} GhostBattleResult
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                GhostBattleResult.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a GhostBattleResult message.
                 * @function verify
                 * @memberof wm.protobuf.SaveGameResultRequest.GhostBattleResult
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                GhostBattleResult.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.opponents != null && message.hasOwnProperty("opponents")) {
                        if (!Array.isArray(message.opponents))
                            return "opponents: array expected";
                        for (let i = 0; i < message.opponents.length; ++i) {
                            let error = $root.wm.protobuf.SaveGameResultRequest.GhostBattleResult.GhostBattleOpponent.verify(message.opponents[i]);
                            if (error)
                                return "opponents." + error;
                        }
                    }
                    if (!$util.isInteger(message.path))
                        return "path: integer expected";
                    if (typeof message.isMorning !== "boolean")
                        return "isMorning: boolean expected";
                    switch (message.selectionMethod) {
                    default:
                        return "selectionMethod: enum value expected";
                    case 1:
                    case 2:
                    case 3:
                    case 4:
                    case 5:
                    case 6:
                    case 7:
                    case 8:
                    case 9:
                    case 10:
                    case 11:
                    case 12:
                    case 13:
                    case 14:
                    case 15:
                    case 16:
                    case 17:
                    case 18:
                    case 19:
                    case 20:
                    case 21:
                    case 22:
                    case 23:
                    case 24:
                    case 25:
                    case 26:
                    case 27:
                        break;
                    }
                    if (message.stampSheetCount != null && message.hasOwnProperty("stampSheetCount"))
                        if (!$util.isInteger(message.stampSheetCount))
                            return "stampSheetCount: integer expected";
                    if (message.stampSheet != null && message.hasOwnProperty("stampSheet")) {
                        if (!Array.isArray(message.stampSheet))
                            return "stampSheet: array expected";
                        for (let i = 0; i < message.stampSheet.length; ++i)
                            if (!$util.isInteger(message.stampSheet[i]))
                                return "stampSheet: integer[] expected";
                    }
                    if (message.rgStamp != null && message.hasOwnProperty("rgStamp"))
                        if (!$util.isInteger(message.rgStamp))
                            return "rgStamp: integer expected";
                    if (message.confirmedTransferredStampTargetCarIds != null && message.hasOwnProperty("confirmedTransferredStampTargetCarIds")) {
                        if (!Array.isArray(message.confirmedTransferredStampTargetCarIds))
                            return "confirmedTransferredStampTargetCarIds: array expected";
                        for (let i = 0; i < message.confirmedTransferredStampTargetCarIds.length; ++i)
                            if (!$util.isInteger(message.confirmedTransferredStampTargetCarIds[i]))
                                return "confirmedTransferredStampTargetCarIds: integer[] expected";
                    }
                    if (!$util.isInteger(message.rgPlayCount))
                        return "rgPlayCount: integer expected";
                    if (message.dressupLevel != null && message.hasOwnProperty("dressupLevel"))
                        if (!$util.isInteger(message.dressupLevel))
                            return "dressupLevel: integer expected";
                    if (message.dressupPoint != null && message.hasOwnProperty("dressupPoint"))
                        if (!$util.isInteger(message.dressupPoint))
                            return "dressupPoint: integer expected";
                    if (message.rgTrophy != null && message.hasOwnProperty("rgTrophy"))
                        if (!$util.isInteger(message.rgTrophy))
                            return "rgTrophy: integer expected";
                    if (message.rgRegionMapScore != null && message.hasOwnProperty("rgRegionMapScore")) {
                        if (!Array.isArray(message.rgRegionMapScore))
                            return "rgRegionMapScore: array expected";
                        for (let i = 0; i < message.rgRegionMapScore.length; ++i)
                            if (!$util.isInteger(message.rgRegionMapScore[i]))
                                return "rgRegionMapScore: integer[] expected";
                    }
                    if (message.competitionId != null && message.hasOwnProperty("competitionId"))
                        if (!$util.isInteger(message.competitionId))
                            return "competitionId: integer expected";
                    if (message.periodId != null && message.hasOwnProperty("periodId"))
                        if (!$util.isInteger(message.periodId))
                            return "periodId: integer expected";
                    if (message.brakingPoint != null && message.hasOwnProperty("brakingPoint"))
                        if (!$util.isInteger(message.brakingPoint))
                            return "brakingPoint: integer expected";
                    if (message.acquireCrown != null && message.hasOwnProperty("acquireCrown"))
                        if (typeof message.acquireCrown !== "boolean")
                            return "acquireCrown: boolean expected";
                    if (message.acquireAllCrowns != null && message.hasOwnProperty("acquireAllCrowns"))
                        if (typeof message.acquireAllCrowns !== "boolean")
                            return "acquireAllCrowns: boolean expected";
                    if (message.expeditionResult != null && message.hasOwnProperty("expeditionResult")) {
                        let error = $root.wm.protobuf.SaveGameResultRequest.GhostBattleResult.GhostExpeditionResult.verify(message.expeditionResult);
                        if (error)
                            return "expeditionResult." + error;
                    }
                    if (message.highwayResult != null && message.hasOwnProperty("highwayResult")) {
                        let error = $root.wm.protobuf.SaveGameResultRequest.GhostBattleResult.GhostHighwayResult.verify(message.highwayResult);
                        if (error)
                            return "highwayResult." + error;
                    }
                    if (message.koshienId != null && message.hasOwnProperty("koshienId"))
                        if (!$util.isInteger(message.koshienId))
                            return "koshienId: integer expected";
                    if (message.koshienPeriodId != null && message.hasOwnProperty("koshienPeriodId"))
                        if (!$util.isInteger(message.koshienPeriodId))
                            return "koshienPeriodId: integer expected";
                    if (message.koshienUpdateCount != null && message.hasOwnProperty("koshienUpdateCount"))
                        if (!$util.isInteger(message.koshienUpdateCount))
                            return "koshienUpdateCount: integer expected";
                    return null;
                };

                /**
                 * Creates a GhostBattleResult message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof wm.protobuf.SaveGameResultRequest.GhostBattleResult
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {wm.protobuf.SaveGameResultRequest.GhostBattleResult} GhostBattleResult
                 */
                GhostBattleResult.fromObject = function fromObject(object) {
                    if (object instanceof $root.wm.protobuf.SaveGameResultRequest.GhostBattleResult)
                        return object;
                    let message = new $root.wm.protobuf.SaveGameResultRequest.GhostBattleResult();
                    if (object.opponents) {
                        if (!Array.isArray(object.opponents))
                            throw TypeError(".wm.protobuf.SaveGameResultRequest.GhostBattleResult.opponents: array expected");
                        message.opponents = [];
                        for (let i = 0; i < object.opponents.length; ++i) {
                            if (typeof object.opponents[i] !== "object")
                                throw TypeError(".wm.protobuf.SaveGameResultRequest.GhostBattleResult.opponents: object expected");
                            message.opponents[i] = $root.wm.protobuf.SaveGameResultRequest.GhostBattleResult.GhostBattleOpponent.fromObject(object.opponents[i]);
                        }
                    }
                    if (object.path != null)
                        message.path = object.path >>> 0;
                    if (object.isMorning != null)
                        message.isMorning = Boolean(object.isMorning);
                    switch (object.selectionMethod) {
                    default:
                        if (typeof object.selectionMethod === "number") {
                            message.selectionMethod = object.selectionMethod;
                            break;
                        }
                        break;
                    case "GHOST_SEARCH_BY_REGION":
                    case 1:
                        message.selectionMethod = 1;
                        break;
                    case "GHOST_SELECT_BY_LEVEL":
                    case 2:
                        message.selectionMethod = 2;
                        break;
                    case "GHOST_SELECT_CROWN_MATCH":
                    case 3:
                        message.selectionMethod = 3;
                        break;
                    case "GHOST_SELECT_STAMP_MATCH":
                    case 4:
                        message.selectionMethod = 4;
                        break;
                    case "GHOST_SELECT_FROM_HISTORY":
                    case 5:
                        message.selectionMethod = 5;
                        break;
                    case "GHOST_SEARCH_BY_SHOP":
                    case 6:
                        message.selectionMethod = 6;
                        break;
                    case "GHOST_SEARCH_BY_NAME":
                    case 7:
                        message.selectionMethod = 7;
                        break;
                    case "GHOST_ACCEPT_CHALLENGER":
                    case 8:
                        message.selectionMethod = 8;
                        break;
                    case "GHOST_APPOINTMENT":
                    case 9:
                        message.selectionMethod = 9;
                        break;
                    case "GHOST_DEFAULT_OPPONENT":
                    case 10:
                        message.selectionMethod = 10;
                        break;
                    case "GHOST_COMPETITION":
                    case 11:
                        message.selectionMethod = 11;
                        break;
                    case "GHOST_SELECT_FROM_BOOKMARKS":
                    case 12:
                        message.selectionMethod = 12;
                        break;
                    case "GHOST_EXPEDITION":
                    case 13:
                        message.selectionMethod = 13;
                        break;
                    case "GHOST_SELECT_BY_PLACE":
                    case 14:
                        message.selectionMethod = 14;
                        break;
                    case "GHOST_SELECT_BY_OTHER_PLACE":
                    case 15:
                        message.selectionMethod = 15;
                        break;
                    case "GHOST_SELECT_BY_MANUFACTURER":
                    case 16:
                        message.selectionMethod = 16;
                        break;
                    case "GHOST_SELECT_BY_OTHER_MANUFACTURER":
                    case 17:
                        message.selectionMethod = 17;
                        break;
                    case "GHOST_SELECT_BY_PLAYED":
                    case 18:
                        message.selectionMethod = 18;
                        break;
                    case "GHOST_UNUSED_19":
                    case 19:
                        message.selectionMethod = 19;
                        break;
                    case "GHOST_SELECT_BY_REGION_MANUFACTURER":
                    case 20:
                        message.selectionMethod = 20;
                        break;
                    case "GHOST_UNUSED_21":
                    case 21:
                        message.selectionMethod = 21;
                        break;
                    case "GHOST_SELECT_BY_REGION_PLAYED":
                    case 22:
                        message.selectionMethod = 22;
                        break;
                    case "GHOST_SELECT_BY_REGION_STATION":
                    case 23:
                        message.selectionMethod = 23;
                        break;
                    case "GHOST_SELECT_BY_REGION_BOSS":
                    case 24:
                        message.selectionMethod = 24;
                        break;
                    case "GHOST_SELECT_BY_REGION_PLACE":
                    case 25:
                        message.selectionMethod = 25;
                        break;
                    case "GHOST_BINGO_CHALLENGE":
                    case 26:
                        message.selectionMethod = 26;
                        break;
                    case "GHOST_KOSHIEN":
                    case 27:
                        message.selectionMethod = 27;
                        break;
                    }
                    if (object.stampSheetCount != null)
                        message.stampSheetCount = object.stampSheetCount >>> 0;
                    if (object.stampSheet) {
                        if (!Array.isArray(object.stampSheet))
                            throw TypeError(".wm.protobuf.SaveGameResultRequest.GhostBattleResult.stampSheet: array expected");
                        message.stampSheet = [];
                        for (let i = 0; i < object.stampSheet.length; ++i)
                            message.stampSheet[i] = object.stampSheet[i] >>> 0;
                    }
                    if (object.rgStamp != null)
                        message.rgStamp = object.rgStamp >>> 0;
                    if (object.confirmedTransferredStampTargetCarIds) {
                        if (!Array.isArray(object.confirmedTransferredStampTargetCarIds))
                            throw TypeError(".wm.protobuf.SaveGameResultRequest.GhostBattleResult.confirmedTransferredStampTargetCarIds: array expected");
                        message.confirmedTransferredStampTargetCarIds = [];
                        for (let i = 0; i < object.confirmedTransferredStampTargetCarIds.length; ++i)
                            message.confirmedTransferredStampTargetCarIds[i] = object.confirmedTransferredStampTargetCarIds[i] >>> 0;
                    }
                    if (object.rgPlayCount != null)
                        message.rgPlayCount = object.rgPlayCount >>> 0;
                    if (object.dressupLevel != null)
                        message.dressupLevel = object.dressupLevel >>> 0;
                    if (object.dressupPoint != null)
                        message.dressupPoint = object.dressupPoint >>> 0;
                    if (object.rgTrophy != null)
                        message.rgTrophy = object.rgTrophy >>> 0;
                    if (object.rgRegionMapScore) {
                        if (!Array.isArray(object.rgRegionMapScore))
                            throw TypeError(".wm.protobuf.SaveGameResultRequest.GhostBattleResult.rgRegionMapScore: array expected");
                        message.rgRegionMapScore = [];
                        for (let i = 0; i < object.rgRegionMapScore.length; ++i)
                            message.rgRegionMapScore[i] = object.rgRegionMapScore[i] >>> 0;
                    }
                    if (object.competitionId != null)
                        message.competitionId = object.competitionId >>> 0;
                    if (object.periodId != null)
                        message.periodId = object.periodId >>> 0;
                    if (object.brakingPoint != null)
                        message.brakingPoint = object.brakingPoint >>> 0;
                    if (object.acquireCrown != null)
                        message.acquireCrown = Boolean(object.acquireCrown);
                    if (object.acquireAllCrowns != null)
                        message.acquireAllCrowns = Boolean(object.acquireAllCrowns);
                    if (object.expeditionResult != null) {
                        if (typeof object.expeditionResult !== "object")
                            throw TypeError(".wm.protobuf.SaveGameResultRequest.GhostBattleResult.expeditionResult: object expected");
                        message.expeditionResult = $root.wm.protobuf.SaveGameResultRequest.GhostBattleResult.GhostExpeditionResult.fromObject(object.expeditionResult);
                    }
                    if (object.highwayResult != null) {
                        if (typeof object.highwayResult !== "object")
                            throw TypeError(".wm.protobuf.SaveGameResultRequest.GhostBattleResult.highwayResult: object expected");
                        message.highwayResult = $root.wm.protobuf.SaveGameResultRequest.GhostBattleResult.GhostHighwayResult.fromObject(object.highwayResult);
                    }
                    if (object.koshienId != null)
                        message.koshienId = object.koshienId >>> 0;
                    if (object.koshienPeriodId != null)
                        message.koshienPeriodId = object.koshienPeriodId >>> 0;
                    if (object.koshienUpdateCount != null)
                        message.koshienUpdateCount = object.koshienUpdateCount >>> 0;
                    return message;
                };

                /**
                 * Creates a plain object from a GhostBattleResult message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof wm.protobuf.SaveGameResultRequest.GhostBattleResult
                 * @static
                 * @param {wm.protobuf.SaveGameResultRequest.GhostBattleResult} message GhostBattleResult
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                GhostBattleResult.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.arrays || options.defaults) {
                        object.opponents = [];
                        object.stampSheet = [];
                        object.rgRegionMapScore = [];
                        object.confirmedTransferredStampTargetCarIds = [];
                    }
                    if (options.defaults) {
                        object.path = 0;
                        object.selectionMethod = options.enums === String ? "GHOST_SEARCH_BY_REGION" : 1;
                        object.stampSheetCount = 0;
                        object.rgPlayCount = 0;
                        object.dressupLevel = 0;
                        object.dressupPoint = 0;
                        object.competitionId = 0;
                        object.periodId = 0;
                        object.brakingPoint = 0;
                        object.acquireCrown = false;
                        object.acquireAllCrowns = false;
                        object.rgStamp = 0;
                        object.isMorning = false;
                        object.expeditionResult = null;
                        object.rgTrophy = 0;
                        object.highwayResult = null;
                        object.koshienId = 0;
                        object.koshienPeriodId = 0;
                        object.koshienUpdateCount = 0;
                    }
                    if (message.opponents && message.opponents.length) {
                        object.opponents = [];
                        for (let j = 0; j < message.opponents.length; ++j)
                            object.opponents[j] = $root.wm.protobuf.SaveGameResultRequest.GhostBattleResult.GhostBattleOpponent.toObject(message.opponents[j], options);
                    }
                    if (message.path != null && message.hasOwnProperty("path"))
                        object.path = message.path;
                    if (message.selectionMethod != null && message.hasOwnProperty("selectionMethod"))
                        object.selectionMethod = options.enums === String ? $root.wm.protobuf.GhostSelectionMethod[message.selectionMethod] === undefined ? message.selectionMethod : $root.wm.protobuf.GhostSelectionMethod[message.selectionMethod] : message.selectionMethod;
                    if (message.stampSheetCount != null && message.hasOwnProperty("stampSheetCount"))
                        object.stampSheetCount = message.stampSheetCount;
                    if (message.stampSheet && message.stampSheet.length) {
                        object.stampSheet = [];
                        for (let j = 0; j < message.stampSheet.length; ++j)
                            object.stampSheet[j] = message.stampSheet[j];
                    }
                    if (message.rgPlayCount != null && message.hasOwnProperty("rgPlayCount"))
                        object.rgPlayCount = message.rgPlayCount;
                    if (message.dressupLevel != null && message.hasOwnProperty("dressupLevel"))
                        object.dressupLevel = message.dressupLevel;
                    if (message.dressupPoint != null && message.hasOwnProperty("dressupPoint"))
                        object.dressupPoint = message.dressupPoint;
                    if (message.rgRegionMapScore && message.rgRegionMapScore.length) {
                        object.rgRegionMapScore = [];
                        for (let j = 0; j < message.rgRegionMapScore.length; ++j)
                            object.rgRegionMapScore[j] = message.rgRegionMapScore[j];
                    }
                    if (message.competitionId != null && message.hasOwnProperty("competitionId"))
                        object.competitionId = message.competitionId;
                    if (message.periodId != null && message.hasOwnProperty("periodId"))
                        object.periodId = message.periodId;
                    if (message.brakingPoint != null && message.hasOwnProperty("brakingPoint"))
                        object.brakingPoint = message.brakingPoint;
                    if (message.acquireCrown != null && message.hasOwnProperty("acquireCrown"))
                        object.acquireCrown = message.acquireCrown;
                    if (message.acquireAllCrowns != null && message.hasOwnProperty("acquireAllCrowns"))
                        object.acquireAllCrowns = message.acquireAllCrowns;
                    if (message.rgStamp != null && message.hasOwnProperty("rgStamp"))
                        object.rgStamp = message.rgStamp;
                    if (message.confirmedTransferredStampTargetCarIds && message.confirmedTransferredStampTargetCarIds.length) {
                        object.confirmedTransferredStampTargetCarIds = [];
                        for (let j = 0; j < message.confirmedTransferredStampTargetCarIds.length; ++j)
                            object.confirmedTransferredStampTargetCarIds[j] = message.confirmedTransferredStampTargetCarIds[j];
                    }
                    if (message.isMorning != null && message.hasOwnProperty("isMorning"))
                        object.isMorning = message.isMorning;
                    if (message.expeditionResult != null && message.hasOwnProperty("expeditionResult"))
                        object.expeditionResult = $root.wm.protobuf.SaveGameResultRequest.GhostBattleResult.GhostExpeditionResult.toObject(message.expeditionResult, options);
                    if (message.rgTrophy != null && message.hasOwnProperty("rgTrophy"))
                        object.rgTrophy = message.rgTrophy;
                    if (message.highwayResult != null && message.hasOwnProperty("highwayResult"))
                        object.highwayResult = $root.wm.protobuf.SaveGameResultRequest.GhostBattleResult.GhostHighwayResult.toObject(message.highwayResult, options);
                    if (message.koshienId != null && message.hasOwnProperty("koshienId"))
                        object.koshienId = message.koshienId;
                    if (message.koshienPeriodId != null && message.hasOwnProperty("koshienPeriodId"))
                        object.koshienPeriodId = message.koshienPeriodId;
                    if (message.koshienUpdateCount != null && message.hasOwnProperty("koshienUpdateCount"))
                        object.koshienUpdateCount = message.koshienUpdateCount;
                    return object;
                };

                /**
                 * Converts this GhostBattleResult to JSON.
                 * @function toJSON
                 * @memberof wm.protobuf.SaveGameResultRequest.GhostBattleResult
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                GhostBattleResult.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                /**
                 * Gets the default type url for GhostBattleResult
                 * @function getTypeUrl
                 * @memberof wm.protobuf.SaveGameResultRequest.GhostBattleResult
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                GhostBattleResult.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/wm.protobuf.SaveGameResultRequest.GhostBattleResult";
                };

                GhostBattleResult.GhostExpeditionResult = (function() {

                    /**
                     * Properties of a GhostExpeditionResult.
                     * @memberof wm.protobuf.SaveGameResultRequest.GhostBattleResult
                     * @interface IGhostExpeditionResult
                     * @property {number} ghostExpeditionId GhostExpeditionResult ghostExpeditionId
                     * @property {number|null} [sugorokuPoint] GhostExpeditionResult sugorokuPoint
                     * @property {number|null} [earnedScore] GhostExpeditionResult earnedScore
                     * @property {number|null} [score] GhostExpeditionResult score
                     * @property {number|null} [wantedId] GhostExpeditionResult wantedId
                     * @property {Array.<wm.protobuf.IUserItem>|null} [earnedItems] GhostExpeditionResult earnedItems
                     * @property {Array.<boolean>|null} [aftereventBonus] GhostExpeditionResult aftereventBonus
                     */

                    /**
                     * Constructs a new GhostExpeditionResult.
                     * @memberof wm.protobuf.SaveGameResultRequest.GhostBattleResult
                     * @classdesc Represents a GhostExpeditionResult.
                     * @implements IGhostExpeditionResult
                     * @constructor
                     * @param {wm.protobuf.SaveGameResultRequest.GhostBattleResult.IGhostExpeditionResult=} [properties] Properties to set
                     */
                    function GhostExpeditionResult(properties) {
                        this.earnedItems = [];
                        this.aftereventBonus = [];
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * GhostExpeditionResult ghostExpeditionId.
                     * @member {number} ghostExpeditionId
                     * @memberof wm.protobuf.SaveGameResultRequest.GhostBattleResult.GhostExpeditionResult
                     * @instance
                     */
                    GhostExpeditionResult.prototype.ghostExpeditionId = 0;

                    /**
                     * GhostExpeditionResult sugorokuPoint.
                     * @member {number} sugorokuPoint
                     * @memberof wm.protobuf.SaveGameResultRequest.GhostBattleResult.GhostExpeditionResult
                     * @instance
                     */
                    GhostExpeditionResult.prototype.sugorokuPoint = 0;

                    /**
                     * GhostExpeditionResult earnedScore.
                     * @member {number} earnedScore
                     * @memberof wm.protobuf.SaveGameResultRequest.GhostBattleResult.GhostExpeditionResult
                     * @instance
                     */
                    GhostExpeditionResult.prototype.earnedScore = 0;

                    /**
                     * GhostExpeditionResult score.
                     * @member {number} score
                     * @memberof wm.protobuf.SaveGameResultRequest.GhostBattleResult.GhostExpeditionResult
                     * @instance
                     */
                    GhostExpeditionResult.prototype.score = 0;

                    /**
                     * GhostExpeditionResult wantedId.
                     * @member {number} wantedId
                     * @memberof wm.protobuf.SaveGameResultRequest.GhostBattleResult.GhostExpeditionResult
                     * @instance
                     */
                    GhostExpeditionResult.prototype.wantedId = 0;

                    /**
                     * GhostExpeditionResult earnedItems.
                     * @member {Array.<wm.protobuf.IUserItem>} earnedItems
                     * @memberof wm.protobuf.SaveGameResultRequest.GhostBattleResult.GhostExpeditionResult
                     * @instance
                     */
                    GhostExpeditionResult.prototype.earnedItems = $util.emptyArray;

                    /**
                     * GhostExpeditionResult aftereventBonus.
                     * @member {Array.<boolean>} aftereventBonus
                     * @memberof wm.protobuf.SaveGameResultRequest.GhostBattleResult.GhostExpeditionResult
                     * @instance
                     */
                    GhostExpeditionResult.prototype.aftereventBonus = $util.emptyArray;

                    /**
                     * Creates a new GhostExpeditionResult instance using the specified properties.
                     * @function create
                     * @memberof wm.protobuf.SaveGameResultRequest.GhostBattleResult.GhostExpeditionResult
                     * @static
                     * @param {wm.protobuf.SaveGameResultRequest.GhostBattleResult.IGhostExpeditionResult=} [properties] Properties to set
                     * @returns {wm.protobuf.SaveGameResultRequest.GhostBattleResult.GhostExpeditionResult} GhostExpeditionResult instance
                     */
                    GhostExpeditionResult.create = function create(properties) {
                        return new GhostExpeditionResult(properties);
                    };

                    /**
                     * Encodes the specified GhostExpeditionResult message. Does not implicitly {@link wm.protobuf.SaveGameResultRequest.GhostBattleResult.GhostExpeditionResult.verify|verify} messages.
                     * @function encode
                     * @memberof wm.protobuf.SaveGameResultRequest.GhostBattleResult.GhostExpeditionResult
                     * @static
                     * @param {wm.protobuf.SaveGameResultRequest.GhostBattleResult.IGhostExpeditionResult} message GhostExpeditionResult message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    GhostExpeditionResult.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.ghostExpeditionId);
                        if (message.sugorokuPoint != null && Object.hasOwnProperty.call(message, "sugorokuPoint"))
                            writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.sugorokuPoint);
                        if (message.earnedScore != null && Object.hasOwnProperty.call(message, "earnedScore"))
                            writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.earnedScore);
                        if (message.score != null && Object.hasOwnProperty.call(message, "score"))
                            writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.score);
                        if (message.wantedId != null && Object.hasOwnProperty.call(message, "wantedId"))
                            writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.wantedId);
                        if (message.earnedItems != null && message.earnedItems.length)
                            for (let i = 0; i < message.earnedItems.length; ++i)
                                $root.wm.protobuf.UserItem.encode(message.earnedItems[i], writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                        if (message.aftereventBonus != null && message.aftereventBonus.length)
                            for (let i = 0; i < message.aftereventBonus.length; ++i)
                                writer.uint32(/* id 7, wireType 0 =*/56).bool(message.aftereventBonus[i]);
                        return writer;
                    };

                    /**
                     * Encodes the specified GhostExpeditionResult message, length delimited. Does not implicitly {@link wm.protobuf.SaveGameResultRequest.GhostBattleResult.GhostExpeditionResult.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof wm.protobuf.SaveGameResultRequest.GhostBattleResult.GhostExpeditionResult
                     * @static
                     * @param {wm.protobuf.SaveGameResultRequest.GhostBattleResult.IGhostExpeditionResult} message GhostExpeditionResult message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    GhostExpeditionResult.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a GhostExpeditionResult message from the specified reader or buffer.
                     * @function decode
                     * @memberof wm.protobuf.SaveGameResultRequest.GhostBattleResult.GhostExpeditionResult
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {wm.protobuf.SaveGameResultRequest.GhostBattleResult.GhostExpeditionResult} GhostExpeditionResult
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    GhostExpeditionResult.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.wm.protobuf.SaveGameResultRequest.GhostBattleResult.GhostExpeditionResult();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.ghostExpeditionId = reader.uint32();
                                    break;
                                }
                            case 2: {
                                    message.sugorokuPoint = reader.uint32();
                                    break;
                                }
                            case 3: {
                                    message.earnedScore = reader.uint32();
                                    break;
                                }
                            case 4: {
                                    message.score = reader.uint32();
                                    break;
                                }
                            case 5: {
                                    message.wantedId = reader.uint32();
                                    break;
                                }
                            case 6: {
                                    if (!(message.earnedItems && message.earnedItems.length))
                                        message.earnedItems = [];
                                    message.earnedItems.push($root.wm.protobuf.UserItem.decode(reader, reader.uint32()));
                                    break;
                                }
                            case 7: {
                                    if (!(message.aftereventBonus && message.aftereventBonus.length))
                                        message.aftereventBonus = [];
                                    if ((tag & 7) === 2) {
                                        let end2 = reader.uint32() + reader.pos;
                                        while (reader.pos < end2)
                                            message.aftereventBonus.push(reader.bool());
                                    } else
                                        message.aftereventBonus.push(reader.bool());
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        if (!message.hasOwnProperty("ghostExpeditionId"))
                            throw $util.ProtocolError("missing required 'ghostExpeditionId'", { instance: message });
                        return message;
                    };

                    /**
                     * Decodes a GhostExpeditionResult message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof wm.protobuf.SaveGameResultRequest.GhostBattleResult.GhostExpeditionResult
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {wm.protobuf.SaveGameResultRequest.GhostBattleResult.GhostExpeditionResult} GhostExpeditionResult
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    GhostExpeditionResult.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a GhostExpeditionResult message.
                     * @function verify
                     * @memberof wm.protobuf.SaveGameResultRequest.GhostBattleResult.GhostExpeditionResult
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    GhostExpeditionResult.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (!$util.isInteger(message.ghostExpeditionId))
                            return "ghostExpeditionId: integer expected";
                        if (message.sugorokuPoint != null && message.hasOwnProperty("sugorokuPoint"))
                            if (!$util.isInteger(message.sugorokuPoint))
                                return "sugorokuPoint: integer expected";
                        if (message.earnedScore != null && message.hasOwnProperty("earnedScore"))
                            if (!$util.isInteger(message.earnedScore))
                                return "earnedScore: integer expected";
                        if (message.score != null && message.hasOwnProperty("score"))
                            if (!$util.isInteger(message.score))
                                return "score: integer expected";
                        if (message.wantedId != null && message.hasOwnProperty("wantedId"))
                            if (!$util.isInteger(message.wantedId))
                                return "wantedId: integer expected";
                        if (message.earnedItems != null && message.hasOwnProperty("earnedItems")) {
                            if (!Array.isArray(message.earnedItems))
                                return "earnedItems: array expected";
                            for (let i = 0; i < message.earnedItems.length; ++i) {
                                let error = $root.wm.protobuf.UserItem.verify(message.earnedItems[i]);
                                if (error)
                                    return "earnedItems." + error;
                            }
                        }
                        if (message.aftereventBonus != null && message.hasOwnProperty("aftereventBonus")) {
                            if (!Array.isArray(message.aftereventBonus))
                                return "aftereventBonus: array expected";
                            for (let i = 0; i < message.aftereventBonus.length; ++i)
                                if (typeof message.aftereventBonus[i] !== "boolean")
                                    return "aftereventBonus: boolean[] expected";
                        }
                        return null;
                    };

                    /**
                     * Creates a GhostExpeditionResult message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof wm.protobuf.SaveGameResultRequest.GhostBattleResult.GhostExpeditionResult
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {wm.protobuf.SaveGameResultRequest.GhostBattleResult.GhostExpeditionResult} GhostExpeditionResult
                     */
                    GhostExpeditionResult.fromObject = function fromObject(object) {
                        if (object instanceof $root.wm.protobuf.SaveGameResultRequest.GhostBattleResult.GhostExpeditionResult)
                            return object;
                        let message = new $root.wm.protobuf.SaveGameResultRequest.GhostBattleResult.GhostExpeditionResult();
                        if (object.ghostExpeditionId != null)
                            message.ghostExpeditionId = object.ghostExpeditionId >>> 0;
                        if (object.sugorokuPoint != null)
                            message.sugorokuPoint = object.sugorokuPoint >>> 0;
                        if (object.earnedScore != null)
                            message.earnedScore = object.earnedScore >>> 0;
                        if (object.score != null)
                            message.score = object.score >>> 0;
                        if (object.wantedId != null)
                            message.wantedId = object.wantedId >>> 0;
                        if (object.earnedItems) {
                            if (!Array.isArray(object.earnedItems))
                                throw TypeError(".wm.protobuf.SaveGameResultRequest.GhostBattleResult.GhostExpeditionResult.earnedItems: array expected");
                            message.earnedItems = [];
                            for (let i = 0; i < object.earnedItems.length; ++i) {
                                if (typeof object.earnedItems[i] !== "object")
                                    throw TypeError(".wm.protobuf.SaveGameResultRequest.GhostBattleResult.GhostExpeditionResult.earnedItems: object expected");
                                message.earnedItems[i] = $root.wm.protobuf.UserItem.fromObject(object.earnedItems[i]);
                            }
                        }
                        if (object.aftereventBonus) {
                            if (!Array.isArray(object.aftereventBonus))
                                throw TypeError(".wm.protobuf.SaveGameResultRequest.GhostBattleResult.GhostExpeditionResult.aftereventBonus: array expected");
                            message.aftereventBonus = [];
                            for (let i = 0; i < object.aftereventBonus.length; ++i)
                                message.aftereventBonus[i] = Boolean(object.aftereventBonus[i]);
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a GhostExpeditionResult message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof wm.protobuf.SaveGameResultRequest.GhostBattleResult.GhostExpeditionResult
                     * @static
                     * @param {wm.protobuf.SaveGameResultRequest.GhostBattleResult.GhostExpeditionResult} message GhostExpeditionResult
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    GhostExpeditionResult.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.arrays || options.defaults) {
                            object.earnedItems = [];
                            object.aftereventBonus = [];
                        }
                        if (options.defaults) {
                            object.ghostExpeditionId = 0;
                            object.sugorokuPoint = 0;
                            object.earnedScore = 0;
                            object.score = 0;
                            object.wantedId = 0;
                        }
                        if (message.ghostExpeditionId != null && message.hasOwnProperty("ghostExpeditionId"))
                            object.ghostExpeditionId = message.ghostExpeditionId;
                        if (message.sugorokuPoint != null && message.hasOwnProperty("sugorokuPoint"))
                            object.sugorokuPoint = message.sugorokuPoint;
                        if (message.earnedScore != null && message.hasOwnProperty("earnedScore"))
                            object.earnedScore = message.earnedScore;
                        if (message.score != null && message.hasOwnProperty("score"))
                            object.score = message.score;
                        if (message.wantedId != null && message.hasOwnProperty("wantedId"))
                            object.wantedId = message.wantedId;
                        if (message.earnedItems && message.earnedItems.length) {
                            object.earnedItems = [];
                            for (let j = 0; j < message.earnedItems.length; ++j)
                                object.earnedItems[j] = $root.wm.protobuf.UserItem.toObject(message.earnedItems[j], options);
                        }
                        if (message.aftereventBonus && message.aftereventBonus.length) {
                            object.aftereventBonus = [];
                            for (let j = 0; j < message.aftereventBonus.length; ++j)
                                object.aftereventBonus[j] = message.aftereventBonus[j];
                        }
                        return object;
                    };

                    /**
                     * Converts this GhostExpeditionResult to JSON.
                     * @function toJSON
                     * @memberof wm.protobuf.SaveGameResultRequest.GhostBattleResult.GhostExpeditionResult
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    GhostExpeditionResult.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    /**
                     * Gets the default type url for GhostExpeditionResult
                     * @function getTypeUrl
                     * @memberof wm.protobuf.SaveGameResultRequest.GhostBattleResult.GhostExpeditionResult
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    GhostExpeditionResult.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/wm.protobuf.SaveGameResultRequest.GhostBattleResult.GhostExpeditionResult";
                    };

                    return GhostExpeditionResult;
                })();

                GhostBattleResult.GhostHighwayResult = (function() {

                    /**
                     * Properties of a GhostHighwayResult.
                     * @memberof wm.protobuf.SaveGameResultRequest.GhostBattleResult
                     * @interface IGhostHighwayResult
                     * @property {number} rgHighwayClearCount GhostHighwayResult rgHighwayClearCount
                     * @property {number} rgHighwayPoint GhostHighwayResult rgHighwayPoint
                     * @property {number} rgHighwayStationClearBits GhostHighwayResult rgHighwayStationClearBits
                     * @property {number} rgHighwayPreviousDice GhostHighwayResult rgHighwayPreviousDice
                     * @property {number} rgHighwayRegionId GhostHighwayResult rgHighwayRegionId
                     */

                    /**
                     * Constructs a new GhostHighwayResult.
                     * @memberof wm.protobuf.SaveGameResultRequest.GhostBattleResult
                     * @classdesc Represents a GhostHighwayResult.
                     * @implements IGhostHighwayResult
                     * @constructor
                     * @param {wm.protobuf.SaveGameResultRequest.GhostBattleResult.IGhostHighwayResult=} [properties] Properties to set
                     */
                    function GhostHighwayResult(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * GhostHighwayResult rgHighwayClearCount.
                     * @member {number} rgHighwayClearCount
                     * @memberof wm.protobuf.SaveGameResultRequest.GhostBattleResult.GhostHighwayResult
                     * @instance
                     */
                    GhostHighwayResult.prototype.rgHighwayClearCount = 0;

                    /**
                     * GhostHighwayResult rgHighwayPoint.
                     * @member {number} rgHighwayPoint
                     * @memberof wm.protobuf.SaveGameResultRequest.GhostBattleResult.GhostHighwayResult
                     * @instance
                     */
                    GhostHighwayResult.prototype.rgHighwayPoint = 0;

                    /**
                     * GhostHighwayResult rgHighwayStationClearBits.
                     * @member {number} rgHighwayStationClearBits
                     * @memberof wm.protobuf.SaveGameResultRequest.GhostBattleResult.GhostHighwayResult
                     * @instance
                     */
                    GhostHighwayResult.prototype.rgHighwayStationClearBits = 0;

                    /**
                     * GhostHighwayResult rgHighwayPreviousDice.
                     * @member {number} rgHighwayPreviousDice
                     * @memberof wm.protobuf.SaveGameResultRequest.GhostBattleResult.GhostHighwayResult
                     * @instance
                     */
                    GhostHighwayResult.prototype.rgHighwayPreviousDice = 0;

                    /**
                     * GhostHighwayResult rgHighwayRegionId.
                     * @member {number} rgHighwayRegionId
                     * @memberof wm.protobuf.SaveGameResultRequest.GhostBattleResult.GhostHighwayResult
                     * @instance
                     */
                    GhostHighwayResult.prototype.rgHighwayRegionId = 0;

                    /**
                     * Creates a new GhostHighwayResult instance using the specified properties.
                     * @function create
                     * @memberof wm.protobuf.SaveGameResultRequest.GhostBattleResult.GhostHighwayResult
                     * @static
                     * @param {wm.protobuf.SaveGameResultRequest.GhostBattleResult.IGhostHighwayResult=} [properties] Properties to set
                     * @returns {wm.protobuf.SaveGameResultRequest.GhostBattleResult.GhostHighwayResult} GhostHighwayResult instance
                     */
                    GhostHighwayResult.create = function create(properties) {
                        return new GhostHighwayResult(properties);
                    };

                    /**
                     * Encodes the specified GhostHighwayResult message. Does not implicitly {@link wm.protobuf.SaveGameResultRequest.GhostBattleResult.GhostHighwayResult.verify|verify} messages.
                     * @function encode
                     * @memberof wm.protobuf.SaveGameResultRequest.GhostBattleResult.GhostHighwayResult
                     * @static
                     * @param {wm.protobuf.SaveGameResultRequest.GhostBattleResult.IGhostHighwayResult} message GhostHighwayResult message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    GhostHighwayResult.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.rgHighwayClearCount);
                        writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.rgHighwayPoint);
                        writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.rgHighwayStationClearBits);
                        writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.rgHighwayPreviousDice);
                        writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.rgHighwayRegionId);
                        return writer;
                    };

                    /**
                     * Encodes the specified GhostHighwayResult message, length delimited. Does not implicitly {@link wm.protobuf.SaveGameResultRequest.GhostBattleResult.GhostHighwayResult.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof wm.protobuf.SaveGameResultRequest.GhostBattleResult.GhostHighwayResult
                     * @static
                     * @param {wm.protobuf.SaveGameResultRequest.GhostBattleResult.IGhostHighwayResult} message GhostHighwayResult message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    GhostHighwayResult.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a GhostHighwayResult message from the specified reader or buffer.
                     * @function decode
                     * @memberof wm.protobuf.SaveGameResultRequest.GhostBattleResult.GhostHighwayResult
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {wm.protobuf.SaveGameResultRequest.GhostBattleResult.GhostHighwayResult} GhostHighwayResult
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    GhostHighwayResult.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.wm.protobuf.SaveGameResultRequest.GhostBattleResult.GhostHighwayResult();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.rgHighwayClearCount = reader.uint32();
                                    break;
                                }
                            case 2: {
                                    message.rgHighwayPoint = reader.uint32();
                                    break;
                                }
                            case 3: {
                                    message.rgHighwayStationClearBits = reader.uint32();
                                    break;
                                }
                            case 4: {
                                    message.rgHighwayPreviousDice = reader.uint32();
                                    break;
                                }
                            case 5: {
                                    message.rgHighwayRegionId = reader.uint32();
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        if (!message.hasOwnProperty("rgHighwayClearCount"))
                            throw $util.ProtocolError("missing required 'rgHighwayClearCount'", { instance: message });
                        if (!message.hasOwnProperty("rgHighwayPoint"))
                            throw $util.ProtocolError("missing required 'rgHighwayPoint'", { instance: message });
                        if (!message.hasOwnProperty("rgHighwayStationClearBits"))
                            throw $util.ProtocolError("missing required 'rgHighwayStationClearBits'", { instance: message });
                        if (!message.hasOwnProperty("rgHighwayPreviousDice"))
                            throw $util.ProtocolError("missing required 'rgHighwayPreviousDice'", { instance: message });
                        if (!message.hasOwnProperty("rgHighwayRegionId"))
                            throw $util.ProtocolError("missing required 'rgHighwayRegionId'", { instance: message });
                        return message;
                    };

                    /**
                     * Decodes a GhostHighwayResult message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof wm.protobuf.SaveGameResultRequest.GhostBattleResult.GhostHighwayResult
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {wm.protobuf.SaveGameResultRequest.GhostBattleResult.GhostHighwayResult} GhostHighwayResult
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    GhostHighwayResult.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a GhostHighwayResult message.
                     * @function verify
                     * @memberof wm.protobuf.SaveGameResultRequest.GhostBattleResult.GhostHighwayResult
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    GhostHighwayResult.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (!$util.isInteger(message.rgHighwayClearCount))
                            return "rgHighwayClearCount: integer expected";
                        if (!$util.isInteger(message.rgHighwayPoint))
                            return "rgHighwayPoint: integer expected";
                        if (!$util.isInteger(message.rgHighwayStationClearBits))
                            return "rgHighwayStationClearBits: integer expected";
                        if (!$util.isInteger(message.rgHighwayPreviousDice))
                            return "rgHighwayPreviousDice: integer expected";
                        if (!$util.isInteger(message.rgHighwayRegionId))
                            return "rgHighwayRegionId: integer expected";
                        return null;
                    };

                    /**
                     * Creates a GhostHighwayResult message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof wm.protobuf.SaveGameResultRequest.GhostBattleResult.GhostHighwayResult
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {wm.protobuf.SaveGameResultRequest.GhostBattleResult.GhostHighwayResult} GhostHighwayResult
                     */
                    GhostHighwayResult.fromObject = function fromObject(object) {
                        if (object instanceof $root.wm.protobuf.SaveGameResultRequest.GhostBattleResult.GhostHighwayResult)
                            return object;
                        let message = new $root.wm.protobuf.SaveGameResultRequest.GhostBattleResult.GhostHighwayResult();
                        if (object.rgHighwayClearCount != null)
                            message.rgHighwayClearCount = object.rgHighwayClearCount >>> 0;
                        if (object.rgHighwayPoint != null)
                            message.rgHighwayPoint = object.rgHighwayPoint >>> 0;
                        if (object.rgHighwayStationClearBits != null)
                            message.rgHighwayStationClearBits = object.rgHighwayStationClearBits >>> 0;
                        if (object.rgHighwayPreviousDice != null)
                            message.rgHighwayPreviousDice = object.rgHighwayPreviousDice >>> 0;
                        if (object.rgHighwayRegionId != null)
                            message.rgHighwayRegionId = object.rgHighwayRegionId >>> 0;
                        return message;
                    };

                    /**
                     * Creates a plain object from a GhostHighwayResult message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof wm.protobuf.SaveGameResultRequest.GhostBattleResult.GhostHighwayResult
                     * @static
                     * @param {wm.protobuf.SaveGameResultRequest.GhostBattleResult.GhostHighwayResult} message GhostHighwayResult
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    GhostHighwayResult.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            object.rgHighwayClearCount = 0;
                            object.rgHighwayPoint = 0;
                            object.rgHighwayStationClearBits = 0;
                            object.rgHighwayPreviousDice = 0;
                            object.rgHighwayRegionId = 0;
                        }
                        if (message.rgHighwayClearCount != null && message.hasOwnProperty("rgHighwayClearCount"))
                            object.rgHighwayClearCount = message.rgHighwayClearCount;
                        if (message.rgHighwayPoint != null && message.hasOwnProperty("rgHighwayPoint"))
                            object.rgHighwayPoint = message.rgHighwayPoint;
                        if (message.rgHighwayStationClearBits != null && message.hasOwnProperty("rgHighwayStationClearBits"))
                            object.rgHighwayStationClearBits = message.rgHighwayStationClearBits;
                        if (message.rgHighwayPreviousDice != null && message.hasOwnProperty("rgHighwayPreviousDice"))
                            object.rgHighwayPreviousDice = message.rgHighwayPreviousDice;
                        if (message.rgHighwayRegionId != null && message.hasOwnProperty("rgHighwayRegionId"))
                            object.rgHighwayRegionId = message.rgHighwayRegionId;
                        return object;
                    };

                    /**
                     * Converts this GhostHighwayResult to JSON.
                     * @function toJSON
                     * @memberof wm.protobuf.SaveGameResultRequest.GhostBattleResult.GhostHighwayResult
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    GhostHighwayResult.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    /**
                     * Gets the default type url for GhostHighwayResult
                     * @function getTypeUrl
                     * @memberof wm.protobuf.SaveGameResultRequest.GhostBattleResult.GhostHighwayResult
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    GhostHighwayResult.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/wm.protobuf.SaveGameResultRequest.GhostBattleResult.GhostHighwayResult";
                    };

                    return GhostHighwayResult;
                })();

                GhostBattleResult.GhostBattleOpponent = (function() {

                    /**
                     * Properties of a GhostBattleOpponent.
                     * @memberof wm.protobuf.SaveGameResultRequest.GhostBattleResult
                     * @interface IGhostBattleOpponent
                     * @property {number} result GhostBattleOpponent result
                     * @property {number} carId GhostBattleOpponent carId
                     * @property {number} tunePower GhostBattleOpponent tunePower
                     * @property {number} tuneHandling GhostBattleOpponent tuneHandling
                     * @property {boolean|null} [receiveStamp] GhostBattleOpponent receiveStamp
                     * @property {number|null} [bingoNumber] GhostBattleOpponent bingoNumber
                     */

                    /**
                     * Constructs a new GhostBattleOpponent.
                     * @memberof wm.protobuf.SaveGameResultRequest.GhostBattleResult
                     * @classdesc Represents a GhostBattleOpponent.
                     * @implements IGhostBattleOpponent
                     * @constructor
                     * @param {wm.protobuf.SaveGameResultRequest.GhostBattleResult.IGhostBattleOpponent=} [properties] Properties to set
                     */
                    function GhostBattleOpponent(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * GhostBattleOpponent result.
                     * @member {number} result
                     * @memberof wm.protobuf.SaveGameResultRequest.GhostBattleResult.GhostBattleOpponent
                     * @instance
                     */
                    GhostBattleOpponent.prototype.result = 0;

                    /**
                     * GhostBattleOpponent carId.
                     * @member {number} carId
                     * @memberof wm.protobuf.SaveGameResultRequest.GhostBattleResult.GhostBattleOpponent
                     * @instance
                     */
                    GhostBattleOpponent.prototype.carId = 0;

                    /**
                     * GhostBattleOpponent tunePower.
                     * @member {number} tunePower
                     * @memberof wm.protobuf.SaveGameResultRequest.GhostBattleResult.GhostBattleOpponent
                     * @instance
                     */
                    GhostBattleOpponent.prototype.tunePower = 0;

                    /**
                     * GhostBattleOpponent tuneHandling.
                     * @member {number} tuneHandling
                     * @memberof wm.protobuf.SaveGameResultRequest.GhostBattleResult.GhostBattleOpponent
                     * @instance
                     */
                    GhostBattleOpponent.prototype.tuneHandling = 0;

                    /**
                     * GhostBattleOpponent receiveStamp.
                     * @member {boolean} receiveStamp
                     * @memberof wm.protobuf.SaveGameResultRequest.GhostBattleResult.GhostBattleOpponent
                     * @instance
                     */
                    GhostBattleOpponent.prototype.receiveStamp = false;

                    /**
                     * GhostBattleOpponent bingoNumber.
                     * @member {number} bingoNumber
                     * @memberof wm.protobuf.SaveGameResultRequest.GhostBattleResult.GhostBattleOpponent
                     * @instance
                     */
                    GhostBattleOpponent.prototype.bingoNumber = 0;

                    /**
                     * Creates a new GhostBattleOpponent instance using the specified properties.
                     * @function create
                     * @memberof wm.protobuf.SaveGameResultRequest.GhostBattleResult.GhostBattleOpponent
                     * @static
                     * @param {wm.protobuf.SaveGameResultRequest.GhostBattleResult.IGhostBattleOpponent=} [properties] Properties to set
                     * @returns {wm.protobuf.SaveGameResultRequest.GhostBattleResult.GhostBattleOpponent} GhostBattleOpponent instance
                     */
                    GhostBattleOpponent.create = function create(properties) {
                        return new GhostBattleOpponent(properties);
                    };

                    /**
                     * Encodes the specified GhostBattleOpponent message. Does not implicitly {@link wm.protobuf.SaveGameResultRequest.GhostBattleResult.GhostBattleOpponent.verify|verify} messages.
                     * @function encode
                     * @memberof wm.protobuf.SaveGameResultRequest.GhostBattleResult.GhostBattleOpponent
                     * @static
                     * @param {wm.protobuf.SaveGameResultRequest.GhostBattleResult.IGhostBattleOpponent} message GhostBattleOpponent message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    GhostBattleOpponent.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        writer.uint32(/* id 1, wireType 0 =*/8).sint32(message.result);
                        writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.carId);
                        writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.tunePower);
                        writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.tuneHandling);
                        if (message.receiveStamp != null && Object.hasOwnProperty.call(message, "receiveStamp"))
                            writer.uint32(/* id 5, wireType 0 =*/40).bool(message.receiveStamp);
                        if (message.bingoNumber != null && Object.hasOwnProperty.call(message, "bingoNumber"))
                            writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.bingoNumber);
                        return writer;
                    };

                    /**
                     * Encodes the specified GhostBattleOpponent message, length delimited. Does not implicitly {@link wm.protobuf.SaveGameResultRequest.GhostBattleResult.GhostBattleOpponent.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof wm.protobuf.SaveGameResultRequest.GhostBattleResult.GhostBattleOpponent
                     * @static
                     * @param {wm.protobuf.SaveGameResultRequest.GhostBattleResult.IGhostBattleOpponent} message GhostBattleOpponent message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    GhostBattleOpponent.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a GhostBattleOpponent message from the specified reader or buffer.
                     * @function decode
                     * @memberof wm.protobuf.SaveGameResultRequest.GhostBattleResult.GhostBattleOpponent
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {wm.protobuf.SaveGameResultRequest.GhostBattleResult.GhostBattleOpponent} GhostBattleOpponent
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    GhostBattleOpponent.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.wm.protobuf.SaveGameResultRequest.GhostBattleResult.GhostBattleOpponent();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.result = reader.sint32();
                                    break;
                                }
                            case 2: {
                                    message.carId = reader.uint32();
                                    break;
                                }
                            case 3: {
                                    message.tunePower = reader.uint32();
                                    break;
                                }
                            case 4: {
                                    message.tuneHandling = reader.uint32();
                                    break;
                                }
                            case 5: {
                                    message.receiveStamp = reader.bool();
                                    break;
                                }
                            case 6: {
                                    message.bingoNumber = reader.uint32();
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        if (!message.hasOwnProperty("result"))
                            throw $util.ProtocolError("missing required 'result'", { instance: message });
                        if (!message.hasOwnProperty("carId"))
                            throw $util.ProtocolError("missing required 'carId'", { instance: message });
                        if (!message.hasOwnProperty("tunePower"))
                            throw $util.ProtocolError("missing required 'tunePower'", { instance: message });
                        if (!message.hasOwnProperty("tuneHandling"))
                            throw $util.ProtocolError("missing required 'tuneHandling'", { instance: message });
                        return message;
                    };

                    /**
                     * Decodes a GhostBattleOpponent message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof wm.protobuf.SaveGameResultRequest.GhostBattleResult.GhostBattleOpponent
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {wm.protobuf.SaveGameResultRequest.GhostBattleResult.GhostBattleOpponent} GhostBattleOpponent
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    GhostBattleOpponent.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a GhostBattleOpponent message.
                     * @function verify
                     * @memberof wm.protobuf.SaveGameResultRequest.GhostBattleResult.GhostBattleOpponent
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    GhostBattleOpponent.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (!$util.isInteger(message.result))
                            return "result: integer expected";
                        if (!$util.isInteger(message.carId))
                            return "carId: integer expected";
                        if (!$util.isInteger(message.tunePower))
                            return "tunePower: integer expected";
                        if (!$util.isInteger(message.tuneHandling))
                            return "tuneHandling: integer expected";
                        if (message.receiveStamp != null && message.hasOwnProperty("receiveStamp"))
                            if (typeof message.receiveStamp !== "boolean")
                                return "receiveStamp: boolean expected";
                        if (message.bingoNumber != null && message.hasOwnProperty("bingoNumber"))
                            if (!$util.isInteger(message.bingoNumber))
                                return "bingoNumber: integer expected";
                        return null;
                    };

                    /**
                     * Creates a GhostBattleOpponent message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof wm.protobuf.SaveGameResultRequest.GhostBattleResult.GhostBattleOpponent
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {wm.protobuf.SaveGameResultRequest.GhostBattleResult.GhostBattleOpponent} GhostBattleOpponent
                     */
                    GhostBattleOpponent.fromObject = function fromObject(object) {
                        if (object instanceof $root.wm.protobuf.SaveGameResultRequest.GhostBattleResult.GhostBattleOpponent)
                            return object;
                        let message = new $root.wm.protobuf.SaveGameResultRequest.GhostBattleResult.GhostBattleOpponent();
                        if (object.result != null)
                            message.result = object.result | 0;
                        if (object.carId != null)
                            message.carId = object.carId >>> 0;
                        if (object.tunePower != null)
                            message.tunePower = object.tunePower >>> 0;
                        if (object.tuneHandling != null)
                            message.tuneHandling = object.tuneHandling >>> 0;
                        if (object.receiveStamp != null)
                            message.receiveStamp = Boolean(object.receiveStamp);
                        if (object.bingoNumber != null)
                            message.bingoNumber = object.bingoNumber >>> 0;
                        return message;
                    };

                    /**
                     * Creates a plain object from a GhostBattleOpponent message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof wm.protobuf.SaveGameResultRequest.GhostBattleResult.GhostBattleOpponent
                     * @static
                     * @param {wm.protobuf.SaveGameResultRequest.GhostBattleResult.GhostBattleOpponent} message GhostBattleOpponent
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    GhostBattleOpponent.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            object.result = 0;
                            object.carId = 0;
                            object.tunePower = 0;
                            object.tuneHandling = 0;
                            object.receiveStamp = false;
                            object.bingoNumber = 0;
                        }
                        if (message.result != null && message.hasOwnProperty("result"))
                            object.result = message.result;
                        if (message.carId != null && message.hasOwnProperty("carId"))
                            object.carId = message.carId;
                        if (message.tunePower != null && message.hasOwnProperty("tunePower"))
                            object.tunePower = message.tunePower;
                        if (message.tuneHandling != null && message.hasOwnProperty("tuneHandling"))
                            object.tuneHandling = message.tuneHandling;
                        if (message.receiveStamp != null && message.hasOwnProperty("receiveStamp"))
                            object.receiveStamp = message.receiveStamp;
                        if (message.bingoNumber != null && message.hasOwnProperty("bingoNumber"))
                            object.bingoNumber = message.bingoNumber;
                        return object;
                    };

                    /**
                     * Converts this GhostBattleOpponent to JSON.
                     * @function toJSON
                     * @memberof wm.protobuf.SaveGameResultRequest.GhostBattleResult.GhostBattleOpponent
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    GhostBattleOpponent.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    /**
                     * Gets the default type url for GhostBattleOpponent
                     * @function getTypeUrl
                     * @memberof wm.protobuf.SaveGameResultRequest.GhostBattleResult.GhostBattleOpponent
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    GhostBattleOpponent.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/wm.protobuf.SaveGameResultRequest.GhostBattleResult.GhostBattleOpponent";
                    };

                    return GhostBattleOpponent;
                })();

                return GhostBattleResult;
            })();

            return SaveGameResultRequest;
        })();

        protobuf.SaveGameResultResponse = (function() {

            /**
             * Properties of a SaveGameResultResponse.
             * @memberof wm.protobuf
             * @interface ISaveGameResultResponse
             * @property {wm.protobuf.ErrorCode} error SaveGameResultResponse error
             * @property {number|Long|null} [ghostSessionId] SaveGameResultResponse ghostSessionId
             * @property {Array.<wm.protobuf.IUserItem>|null} [availableTickets] SaveGameResultResponse availableTickets
             */

            /**
             * Constructs a new SaveGameResultResponse.
             * @memberof wm.protobuf
             * @classdesc Represents a SaveGameResultResponse.
             * @implements ISaveGameResultResponse
             * @constructor
             * @param {wm.protobuf.ISaveGameResultResponse=} [properties] Properties to set
             */
            function SaveGameResultResponse(properties) {
                this.availableTickets = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * SaveGameResultResponse error.
             * @member {wm.protobuf.ErrorCode} error
             * @memberof wm.protobuf.SaveGameResultResponse
             * @instance
             */
            SaveGameResultResponse.prototype.error = 0;

            /**
             * SaveGameResultResponse ghostSessionId.
             * @member {number|Long} ghostSessionId
             * @memberof wm.protobuf.SaveGameResultResponse
             * @instance
             */
            SaveGameResultResponse.prototype.ghostSessionId = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

            /**
             * SaveGameResultResponse availableTickets.
             * @member {Array.<wm.protobuf.IUserItem>} availableTickets
             * @memberof wm.protobuf.SaveGameResultResponse
             * @instance
             */
            SaveGameResultResponse.prototype.availableTickets = $util.emptyArray;

            /**
             * Creates a new SaveGameResultResponse instance using the specified properties.
             * @function create
             * @memberof wm.protobuf.SaveGameResultResponse
             * @static
             * @param {wm.protobuf.ISaveGameResultResponse=} [properties] Properties to set
             * @returns {wm.protobuf.SaveGameResultResponse} SaveGameResultResponse instance
             */
            SaveGameResultResponse.create = function create(properties) {
                return new SaveGameResultResponse(properties);
            };

            /**
             * Encodes the specified SaveGameResultResponse message. Does not implicitly {@link wm.protobuf.SaveGameResultResponse.verify|verify} messages.
             * @function encode
             * @memberof wm.protobuf.SaveGameResultResponse
             * @static
             * @param {wm.protobuf.ISaveGameResultResponse} message SaveGameResultResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SaveGameResultResponse.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
                if (message.ghostSessionId != null && Object.hasOwnProperty.call(message, "ghostSessionId"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.ghostSessionId);
                if (message.availableTickets != null && message.availableTickets.length)
                    for (let i = 0; i < message.availableTickets.length; ++i)
                        $root.wm.protobuf.UserItem.encode(message.availableTickets[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified SaveGameResultResponse message, length delimited. Does not implicitly {@link wm.protobuf.SaveGameResultResponse.verify|verify} messages.
             * @function encodeDelimited
             * @memberof wm.protobuf.SaveGameResultResponse
             * @static
             * @param {wm.protobuf.ISaveGameResultResponse} message SaveGameResultResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SaveGameResultResponse.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a SaveGameResultResponse message from the specified reader or buffer.
             * @function decode
             * @memberof wm.protobuf.SaveGameResultResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {wm.protobuf.SaveGameResultResponse} SaveGameResultResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SaveGameResultResponse.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.wm.protobuf.SaveGameResultResponse();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.error = reader.int32();
                            break;
                        }
                    case 2: {
                            message.ghostSessionId = reader.uint64();
                            break;
                        }
                    case 3: {
                            if (!(message.availableTickets && message.availableTickets.length))
                                message.availableTickets = [];
                            message.availableTickets.push($root.wm.protobuf.UserItem.decode(reader, reader.uint32()));
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("error"))
                    throw $util.ProtocolError("missing required 'error'", { instance: message });
                return message;
            };

            /**
             * Decodes a SaveGameResultResponse message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof wm.protobuf.SaveGameResultResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {wm.protobuf.SaveGameResultResponse} SaveGameResultResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SaveGameResultResponse.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a SaveGameResultResponse message.
             * @function verify
             * @memberof wm.protobuf.SaveGameResultResponse
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            SaveGameResultResponse.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                switch (message.error) {
                default:
                    return "error: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 7:
                case 9:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 16:
                case 17:
                case 18:
                case 19:
                    break;
                }
                if (message.ghostSessionId != null && message.hasOwnProperty("ghostSessionId"))
                    if (!$util.isInteger(message.ghostSessionId) && !(message.ghostSessionId && $util.isInteger(message.ghostSessionId.low) && $util.isInteger(message.ghostSessionId.high)))
                        return "ghostSessionId: integer|Long expected";
                if (message.availableTickets != null && message.hasOwnProperty("availableTickets")) {
                    if (!Array.isArray(message.availableTickets))
                        return "availableTickets: array expected";
                    for (let i = 0; i < message.availableTickets.length; ++i) {
                        let error = $root.wm.protobuf.UserItem.verify(message.availableTickets[i]);
                        if (error)
                            return "availableTickets." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a SaveGameResultResponse message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof wm.protobuf.SaveGameResultResponse
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {wm.protobuf.SaveGameResultResponse} SaveGameResultResponse
             */
            SaveGameResultResponse.fromObject = function fromObject(object) {
                if (object instanceof $root.wm.protobuf.SaveGameResultResponse)
                    return object;
                let message = new $root.wm.protobuf.SaveGameResultResponse();
                switch (object.error) {
                default:
                    if (typeof object.error === "number") {
                        message.error = object.error;
                        break;
                    }
                    break;
                case "ERR_SUCCESS":
                case 0:
                    message.error = 0;
                    break;
                case "ERR_REQUEST":
                case 1:
                    message.error = 1;
                    break;
                case "ERR_NOT_FOUND":
                case 2:
                    message.error = 2;
                    break;
                case "ERR_ID_SERVER":
                case 3:
                    message.error = 3;
                    break;
                case "ERR_ID_BANNED":
                case 4:
                    message.error = 4;
                    break;
                case "ERR_USER_LOCKED":
                case 5:
                    message.error = 5;
                    break;
                case "ERR_USER_VERSION":
                case 6:
                    message.error = 6;
                    break;
                case "ERR_NAME_CONFLICTED":
                case 7:
                    message.error = 7;
                    break;
                case "ERR_FORBIDDEN":
                case 9:
                    message.error = 9;
                    break;
                case "ERR_USER_SUCCEEDED":
                case 11:
                    message.error = 11;
                    break;
                case "ERR_BEING_TRANSFERRED":
                case 12:
                    message.error = 12;
                    break;
                case "ERR_SCRATCH_LOCKED":
                case 13:
                    message.error = 13;
                    break;
                case "ERR_BINGO_REVENGE_LOCKED":
                case 14:
                    message.error = 14;
                    break;
                case "ERR_BINGO_ALREDY_LINKED":
                case 15:
                    message.error = 15;
                    break;
                case "ERR_BINGO_FINISHED":
                case 16:
                    message.error = 16;
                    break;
                case "ERR_BINGO_REACHED_MAX_USER":
                case 17:
                    message.error = 17;
                    break;
                case "ERR_CAR_NOT_FOUND":
                case 18:
                    message.error = 18;
                    break;
                case "ERR_BINGO_CARD_NOT_FOUND":
                case 19:
                    message.error = 19;
                    break;
                }
                if (object.ghostSessionId != null)
                    if ($util.Long)
                        (message.ghostSessionId = $util.Long.fromValue(object.ghostSessionId)).unsigned = true;
                    else if (typeof object.ghostSessionId === "string")
                        message.ghostSessionId = parseInt(object.ghostSessionId, 10);
                    else if (typeof object.ghostSessionId === "number")
                        message.ghostSessionId = object.ghostSessionId;
                    else if (typeof object.ghostSessionId === "object")
                        message.ghostSessionId = new $util.LongBits(object.ghostSessionId.low >>> 0, object.ghostSessionId.high >>> 0).toNumber(true);
                if (object.availableTickets) {
                    if (!Array.isArray(object.availableTickets))
                        throw TypeError(".wm.protobuf.SaveGameResultResponse.availableTickets: array expected");
                    message.availableTickets = [];
                    for (let i = 0; i < object.availableTickets.length; ++i) {
                        if (typeof object.availableTickets[i] !== "object")
                            throw TypeError(".wm.protobuf.SaveGameResultResponse.availableTickets: object expected");
                        message.availableTickets[i] = $root.wm.protobuf.UserItem.fromObject(object.availableTickets[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from a SaveGameResultResponse message. Also converts values to other types if specified.
             * @function toObject
             * @memberof wm.protobuf.SaveGameResultResponse
             * @static
             * @param {wm.protobuf.SaveGameResultResponse} message SaveGameResultResponse
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            SaveGameResultResponse.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.availableTickets = [];
                if (options.defaults) {
                    object.error = options.enums === String ? "ERR_SUCCESS" : 0;
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, true);
                        object.ghostSessionId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.ghostSessionId = options.longs === String ? "0" : 0;
                }
                if (message.error != null && message.hasOwnProperty("error"))
                    object.error = options.enums === String ? $root.wm.protobuf.ErrorCode[message.error] === undefined ? message.error : $root.wm.protobuf.ErrorCode[message.error] : message.error;
                if (message.ghostSessionId != null && message.hasOwnProperty("ghostSessionId"))
                    if (typeof message.ghostSessionId === "number")
                        object.ghostSessionId = options.longs === String ? String(message.ghostSessionId) : message.ghostSessionId;
                    else
                        object.ghostSessionId = options.longs === String ? $util.Long.prototype.toString.call(message.ghostSessionId) : options.longs === Number ? new $util.LongBits(message.ghostSessionId.low >>> 0, message.ghostSessionId.high >>> 0).toNumber(true) : message.ghostSessionId;
                if (message.availableTickets && message.availableTickets.length) {
                    object.availableTickets = [];
                    for (let j = 0; j < message.availableTickets.length; ++j)
                        object.availableTickets[j] = $root.wm.protobuf.UserItem.toObject(message.availableTickets[j], options);
                }
                return object;
            };

            /**
             * Converts this SaveGameResultResponse to JSON.
             * @function toJSON
             * @memberof wm.protobuf.SaveGameResultResponse
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            SaveGameResultResponse.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for SaveGameResultResponse
             * @function getTypeUrl
             * @memberof wm.protobuf.SaveGameResultResponse
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            SaveGameResultResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/wm.protobuf.SaveGameResultResponse";
            };

            return SaveGameResultResponse;
        })();

        protobuf.SaveChargeRequest = (function() {

            /**
             * Properties of a SaveChargeRequest.
             * @memberof wm.protobuf
             * @interface ISaveChargeRequest
             * @property {Array.<wm.protobuf.SaveChargeRequest.IChargeLog>|null} [chargeLogs] SaveChargeRequest chargeLogs
             */

            /**
             * Constructs a new SaveChargeRequest.
             * @memberof wm.protobuf
             * @classdesc Represents a SaveChargeRequest.
             * @implements ISaveChargeRequest
             * @constructor
             * @param {wm.protobuf.ISaveChargeRequest=} [properties] Properties to set
             */
            function SaveChargeRequest(properties) {
                this.chargeLogs = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * SaveChargeRequest chargeLogs.
             * @member {Array.<wm.protobuf.SaveChargeRequest.IChargeLog>} chargeLogs
             * @memberof wm.protobuf.SaveChargeRequest
             * @instance
             */
            SaveChargeRequest.prototype.chargeLogs = $util.emptyArray;

            /**
             * Creates a new SaveChargeRequest instance using the specified properties.
             * @function create
             * @memberof wm.protobuf.SaveChargeRequest
             * @static
             * @param {wm.protobuf.ISaveChargeRequest=} [properties] Properties to set
             * @returns {wm.protobuf.SaveChargeRequest} SaveChargeRequest instance
             */
            SaveChargeRequest.create = function create(properties) {
                return new SaveChargeRequest(properties);
            };

            /**
             * Encodes the specified SaveChargeRequest message. Does not implicitly {@link wm.protobuf.SaveChargeRequest.verify|verify} messages.
             * @function encode
             * @memberof wm.protobuf.SaveChargeRequest
             * @static
             * @param {wm.protobuf.ISaveChargeRequest} message SaveChargeRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SaveChargeRequest.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.chargeLogs != null && message.chargeLogs.length)
                    for (let i = 0; i < message.chargeLogs.length; ++i)
                        $root.wm.protobuf.SaveChargeRequest.ChargeLog.encode(message.chargeLogs[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified SaveChargeRequest message, length delimited. Does not implicitly {@link wm.protobuf.SaveChargeRequest.verify|verify} messages.
             * @function encodeDelimited
             * @memberof wm.protobuf.SaveChargeRequest
             * @static
             * @param {wm.protobuf.ISaveChargeRequest} message SaveChargeRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SaveChargeRequest.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a SaveChargeRequest message from the specified reader or buffer.
             * @function decode
             * @memberof wm.protobuf.SaveChargeRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {wm.protobuf.SaveChargeRequest} SaveChargeRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SaveChargeRequest.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.wm.protobuf.SaveChargeRequest();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            if (!(message.chargeLogs && message.chargeLogs.length))
                                message.chargeLogs = [];
                            message.chargeLogs.push($root.wm.protobuf.SaveChargeRequest.ChargeLog.decode(reader, reader.uint32()));
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a SaveChargeRequest message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof wm.protobuf.SaveChargeRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {wm.protobuf.SaveChargeRequest} SaveChargeRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SaveChargeRequest.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a SaveChargeRequest message.
             * @function verify
             * @memberof wm.protobuf.SaveChargeRequest
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            SaveChargeRequest.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.chargeLogs != null && message.hasOwnProperty("chargeLogs")) {
                    if (!Array.isArray(message.chargeLogs))
                        return "chargeLogs: array expected";
                    for (let i = 0; i < message.chargeLogs.length; ++i) {
                        let error = $root.wm.protobuf.SaveChargeRequest.ChargeLog.verify(message.chargeLogs[i]);
                        if (error)
                            return "chargeLogs." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a SaveChargeRequest message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof wm.protobuf.SaveChargeRequest
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {wm.protobuf.SaveChargeRequest} SaveChargeRequest
             */
            SaveChargeRequest.fromObject = function fromObject(object) {
                if (object instanceof $root.wm.protobuf.SaveChargeRequest)
                    return object;
                let message = new $root.wm.protobuf.SaveChargeRequest();
                if (object.chargeLogs) {
                    if (!Array.isArray(object.chargeLogs))
                        throw TypeError(".wm.protobuf.SaveChargeRequest.chargeLogs: array expected");
                    message.chargeLogs = [];
                    for (let i = 0; i < object.chargeLogs.length; ++i) {
                        if (typeof object.chargeLogs[i] !== "object")
                            throw TypeError(".wm.protobuf.SaveChargeRequest.chargeLogs: object expected");
                        message.chargeLogs[i] = $root.wm.protobuf.SaveChargeRequest.ChargeLog.fromObject(object.chargeLogs[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from a SaveChargeRequest message. Also converts values to other types if specified.
             * @function toObject
             * @memberof wm.protobuf.SaveChargeRequest
             * @static
             * @param {wm.protobuf.SaveChargeRequest} message SaveChargeRequest
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            SaveChargeRequest.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.chargeLogs = [];
                if (message.chargeLogs && message.chargeLogs.length) {
                    object.chargeLogs = [];
                    for (let j = 0; j < message.chargeLogs.length; ++j)
                        object.chargeLogs[j] = $root.wm.protobuf.SaveChargeRequest.ChargeLog.toObject(message.chargeLogs[j], options);
                }
                return object;
            };

            /**
             * Converts this SaveChargeRequest to JSON.
             * @function toJSON
             * @memberof wm.protobuf.SaveChargeRequest
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            SaveChargeRequest.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for SaveChargeRequest
             * @function getTypeUrl
             * @memberof wm.protobuf.SaveChargeRequest
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            SaveChargeRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/wm.protobuf.SaveChargeRequest";
            };

            SaveChargeRequest.ChargeLog = (function() {

                /**
                 * Properties of a ChargeLog.
                 * @memberof wm.protobuf.SaveChargeRequest
                 * @interface IChargeLog
                 * @property {number} datetime ChargeLog datetime
                 * @property {string} pcbSerial ChargeLog pcbSerial
                 * @property {string} placeId ChargeLog placeId
                 * @property {number|null} [userId] ChargeLog userId
                 */

                /**
                 * Constructs a new ChargeLog.
                 * @memberof wm.protobuf.SaveChargeRequest
                 * @classdesc Represents a ChargeLog.
                 * @implements IChargeLog
                 * @constructor
                 * @param {wm.protobuf.SaveChargeRequest.IChargeLog=} [properties] Properties to set
                 */
                function ChargeLog(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * ChargeLog datetime.
                 * @member {number} datetime
                 * @memberof wm.protobuf.SaveChargeRequest.ChargeLog
                 * @instance
                 */
                ChargeLog.prototype.datetime = 0;

                /**
                 * ChargeLog pcbSerial.
                 * @member {string} pcbSerial
                 * @memberof wm.protobuf.SaveChargeRequest.ChargeLog
                 * @instance
                 */
                ChargeLog.prototype.pcbSerial = "";

                /**
                 * ChargeLog placeId.
                 * @member {string} placeId
                 * @memberof wm.protobuf.SaveChargeRequest.ChargeLog
                 * @instance
                 */
                ChargeLog.prototype.placeId = "";

                /**
                 * ChargeLog userId.
                 * @member {number} userId
                 * @memberof wm.protobuf.SaveChargeRequest.ChargeLog
                 * @instance
                 */
                ChargeLog.prototype.userId = 0;

                /**
                 * Creates a new ChargeLog instance using the specified properties.
                 * @function create
                 * @memberof wm.protobuf.SaveChargeRequest.ChargeLog
                 * @static
                 * @param {wm.protobuf.SaveChargeRequest.IChargeLog=} [properties] Properties to set
                 * @returns {wm.protobuf.SaveChargeRequest.ChargeLog} ChargeLog instance
                 */
                ChargeLog.create = function create(properties) {
                    return new ChargeLog(properties);
                };

                /**
                 * Encodes the specified ChargeLog message. Does not implicitly {@link wm.protobuf.SaveChargeRequest.ChargeLog.verify|verify} messages.
                 * @function encode
                 * @memberof wm.protobuf.SaveChargeRequest.ChargeLog
                 * @static
                 * @param {wm.protobuf.SaveChargeRequest.IChargeLog} message ChargeLog message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ChargeLog.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.datetime);
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.pcbSerial);
                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.placeId);
                    if (message.userId != null && Object.hasOwnProperty.call(message, "userId"))
                        writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.userId);
                    return writer;
                };

                /**
                 * Encodes the specified ChargeLog message, length delimited. Does not implicitly {@link wm.protobuf.SaveChargeRequest.ChargeLog.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof wm.protobuf.SaveChargeRequest.ChargeLog
                 * @static
                 * @param {wm.protobuf.SaveChargeRequest.IChargeLog} message ChargeLog message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ChargeLog.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a ChargeLog message from the specified reader or buffer.
                 * @function decode
                 * @memberof wm.protobuf.SaveChargeRequest.ChargeLog
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {wm.protobuf.SaveChargeRequest.ChargeLog} ChargeLog
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ChargeLog.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.wm.protobuf.SaveChargeRequest.ChargeLog();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.datetime = reader.uint32();
                                break;
                            }
                        case 2: {
                                message.pcbSerial = reader.string();
                                break;
                            }
                        case 3: {
                                message.placeId = reader.string();
                                break;
                            }
                        case 4: {
                                message.userId = reader.uint32();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    if (!message.hasOwnProperty("datetime"))
                        throw $util.ProtocolError("missing required 'datetime'", { instance: message });
                    if (!message.hasOwnProperty("pcbSerial"))
                        throw $util.ProtocolError("missing required 'pcbSerial'", { instance: message });
                    if (!message.hasOwnProperty("placeId"))
                        throw $util.ProtocolError("missing required 'placeId'", { instance: message });
                    return message;
                };

                /**
                 * Decodes a ChargeLog message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof wm.protobuf.SaveChargeRequest.ChargeLog
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {wm.protobuf.SaveChargeRequest.ChargeLog} ChargeLog
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ChargeLog.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a ChargeLog message.
                 * @function verify
                 * @memberof wm.protobuf.SaveChargeRequest.ChargeLog
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ChargeLog.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (!$util.isInteger(message.datetime))
                        return "datetime: integer expected";
                    if (!$util.isString(message.pcbSerial))
                        return "pcbSerial: string expected";
                    if (!$util.isString(message.placeId))
                        return "placeId: string expected";
                    if (message.userId != null && message.hasOwnProperty("userId"))
                        if (!$util.isInteger(message.userId))
                            return "userId: integer expected";
                    return null;
                };

                /**
                 * Creates a ChargeLog message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof wm.protobuf.SaveChargeRequest.ChargeLog
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {wm.protobuf.SaveChargeRequest.ChargeLog} ChargeLog
                 */
                ChargeLog.fromObject = function fromObject(object) {
                    if (object instanceof $root.wm.protobuf.SaveChargeRequest.ChargeLog)
                        return object;
                    let message = new $root.wm.protobuf.SaveChargeRequest.ChargeLog();
                    if (object.datetime != null)
                        message.datetime = object.datetime >>> 0;
                    if (object.pcbSerial != null)
                        message.pcbSerial = String(object.pcbSerial);
                    if (object.placeId != null)
                        message.placeId = String(object.placeId);
                    if (object.userId != null)
                        message.userId = object.userId >>> 0;
                    return message;
                };

                /**
                 * Creates a plain object from a ChargeLog message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof wm.protobuf.SaveChargeRequest.ChargeLog
                 * @static
                 * @param {wm.protobuf.SaveChargeRequest.ChargeLog} message ChargeLog
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ChargeLog.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        object.datetime = 0;
                        object.pcbSerial = "";
                        object.placeId = "";
                        object.userId = 0;
                    }
                    if (message.datetime != null && message.hasOwnProperty("datetime"))
                        object.datetime = message.datetime;
                    if (message.pcbSerial != null && message.hasOwnProperty("pcbSerial"))
                        object.pcbSerial = message.pcbSerial;
                    if (message.placeId != null && message.hasOwnProperty("placeId"))
                        object.placeId = message.placeId;
                    if (message.userId != null && message.hasOwnProperty("userId"))
                        object.userId = message.userId;
                    return object;
                };

                /**
                 * Converts this ChargeLog to JSON.
                 * @function toJSON
                 * @memberof wm.protobuf.SaveChargeRequest.ChargeLog
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ChargeLog.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                /**
                 * Gets the default type url for ChargeLog
                 * @function getTypeUrl
                 * @memberof wm.protobuf.SaveChargeRequest.ChargeLog
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                ChargeLog.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/wm.protobuf.SaveChargeRequest.ChargeLog";
                };

                return ChargeLog;
            })();

            return SaveChargeRequest;
        })();

        protobuf.SaveChargeResponse = (function() {

            /**
             * Properties of a SaveChargeResponse.
             * @memberof wm.protobuf
             * @interface ISaveChargeResponse
             * @property {wm.protobuf.ErrorCode} error SaveChargeResponse error
             */

            /**
             * Constructs a new SaveChargeResponse.
             * @memberof wm.protobuf
             * @classdesc Represents a SaveChargeResponse.
             * @implements ISaveChargeResponse
             * @constructor
             * @param {wm.protobuf.ISaveChargeResponse=} [properties] Properties to set
             */
            function SaveChargeResponse(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * SaveChargeResponse error.
             * @member {wm.protobuf.ErrorCode} error
             * @memberof wm.protobuf.SaveChargeResponse
             * @instance
             */
            SaveChargeResponse.prototype.error = 0;

            /**
             * Creates a new SaveChargeResponse instance using the specified properties.
             * @function create
             * @memberof wm.protobuf.SaveChargeResponse
             * @static
             * @param {wm.protobuf.ISaveChargeResponse=} [properties] Properties to set
             * @returns {wm.protobuf.SaveChargeResponse} SaveChargeResponse instance
             */
            SaveChargeResponse.create = function create(properties) {
                return new SaveChargeResponse(properties);
            };

            /**
             * Encodes the specified SaveChargeResponse message. Does not implicitly {@link wm.protobuf.SaveChargeResponse.verify|verify} messages.
             * @function encode
             * @memberof wm.protobuf.SaveChargeResponse
             * @static
             * @param {wm.protobuf.ISaveChargeResponse} message SaveChargeResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SaveChargeResponse.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
                return writer;
            };

            /**
             * Encodes the specified SaveChargeResponse message, length delimited. Does not implicitly {@link wm.protobuf.SaveChargeResponse.verify|verify} messages.
             * @function encodeDelimited
             * @memberof wm.protobuf.SaveChargeResponse
             * @static
             * @param {wm.protobuf.ISaveChargeResponse} message SaveChargeResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SaveChargeResponse.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a SaveChargeResponse message from the specified reader or buffer.
             * @function decode
             * @memberof wm.protobuf.SaveChargeResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {wm.protobuf.SaveChargeResponse} SaveChargeResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SaveChargeResponse.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.wm.protobuf.SaveChargeResponse();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.error = reader.int32();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("error"))
                    throw $util.ProtocolError("missing required 'error'", { instance: message });
                return message;
            };

            /**
             * Decodes a SaveChargeResponse message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof wm.protobuf.SaveChargeResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {wm.protobuf.SaveChargeResponse} SaveChargeResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SaveChargeResponse.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a SaveChargeResponse message.
             * @function verify
             * @memberof wm.protobuf.SaveChargeResponse
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            SaveChargeResponse.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                switch (message.error) {
                default:
                    return "error: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 7:
                case 9:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 16:
                case 17:
                case 18:
                case 19:
                    break;
                }
                return null;
            };

            /**
             * Creates a SaveChargeResponse message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof wm.protobuf.SaveChargeResponse
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {wm.protobuf.SaveChargeResponse} SaveChargeResponse
             */
            SaveChargeResponse.fromObject = function fromObject(object) {
                if (object instanceof $root.wm.protobuf.SaveChargeResponse)
                    return object;
                let message = new $root.wm.protobuf.SaveChargeResponse();
                switch (object.error) {
                default:
                    if (typeof object.error === "number") {
                        message.error = object.error;
                        break;
                    }
                    break;
                case "ERR_SUCCESS":
                case 0:
                    message.error = 0;
                    break;
                case "ERR_REQUEST":
                case 1:
                    message.error = 1;
                    break;
                case "ERR_NOT_FOUND":
                case 2:
                    message.error = 2;
                    break;
                case "ERR_ID_SERVER":
                case 3:
                    message.error = 3;
                    break;
                case "ERR_ID_BANNED":
                case 4:
                    message.error = 4;
                    break;
                case "ERR_USER_LOCKED":
                case 5:
                    message.error = 5;
                    break;
                case "ERR_USER_VERSION":
                case 6:
                    message.error = 6;
                    break;
                case "ERR_NAME_CONFLICTED":
                case 7:
                    message.error = 7;
                    break;
                case "ERR_FORBIDDEN":
                case 9:
                    message.error = 9;
                    break;
                case "ERR_USER_SUCCEEDED":
                case 11:
                    message.error = 11;
                    break;
                case "ERR_BEING_TRANSFERRED":
                case 12:
                    message.error = 12;
                    break;
                case "ERR_SCRATCH_LOCKED":
                case 13:
                    message.error = 13;
                    break;
                case "ERR_BINGO_REVENGE_LOCKED":
                case 14:
                    message.error = 14;
                    break;
                case "ERR_BINGO_ALREDY_LINKED":
                case 15:
                    message.error = 15;
                    break;
                case "ERR_BINGO_FINISHED":
                case 16:
                    message.error = 16;
                    break;
                case "ERR_BINGO_REACHED_MAX_USER":
                case 17:
                    message.error = 17;
                    break;
                case "ERR_CAR_NOT_FOUND":
                case 18:
                    message.error = 18;
                    break;
                case "ERR_BINGO_CARD_NOT_FOUND":
                case 19:
                    message.error = 19;
                    break;
                }
                return message;
            };

            /**
             * Creates a plain object from a SaveChargeResponse message. Also converts values to other types if specified.
             * @function toObject
             * @memberof wm.protobuf.SaveChargeResponse
             * @static
             * @param {wm.protobuf.SaveChargeResponse} message SaveChargeResponse
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            SaveChargeResponse.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults)
                    object.error = options.enums === String ? "ERR_SUCCESS" : 0;
                if (message.error != null && message.hasOwnProperty("error"))
                    object.error = options.enums === String ? $root.wm.protobuf.ErrorCode[message.error] === undefined ? message.error : $root.wm.protobuf.ErrorCode[message.error] : message.error;
                return object;
            };

            /**
             * Converts this SaveChargeResponse to JSON.
             * @function toJSON
             * @memberof wm.protobuf.SaveChargeResponse
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            SaveChargeResponse.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for SaveChargeResponse
             * @function getTypeUrl
             * @memberof wm.protobuf.SaveChargeResponse
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            SaveChargeResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/wm.protobuf.SaveChargeResponse";
            };

            return SaveChargeResponse;
        })();

        protobuf.LoadGhostBattleInfoRequest = (function() {

            /**
             * Properties of a LoadGhostBattleInfoRequest.
             * @memberof wm.protobuf
             * @interface ILoadGhostBattleInfoRequest
             * @property {number} carId LoadGhostBattleInfoRequest carId
             */

            /**
             * Constructs a new LoadGhostBattleInfoRequest.
             * @memberof wm.protobuf
             * @classdesc Represents a LoadGhostBattleInfoRequest.
             * @implements ILoadGhostBattleInfoRequest
             * @constructor
             * @param {wm.protobuf.ILoadGhostBattleInfoRequest=} [properties] Properties to set
             */
            function LoadGhostBattleInfoRequest(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * LoadGhostBattleInfoRequest carId.
             * @member {number} carId
             * @memberof wm.protobuf.LoadGhostBattleInfoRequest
             * @instance
             */
            LoadGhostBattleInfoRequest.prototype.carId = 0;

            /**
             * Creates a new LoadGhostBattleInfoRequest instance using the specified properties.
             * @function create
             * @memberof wm.protobuf.LoadGhostBattleInfoRequest
             * @static
             * @param {wm.protobuf.ILoadGhostBattleInfoRequest=} [properties] Properties to set
             * @returns {wm.protobuf.LoadGhostBattleInfoRequest} LoadGhostBattleInfoRequest instance
             */
            LoadGhostBattleInfoRequest.create = function create(properties) {
                return new LoadGhostBattleInfoRequest(properties);
            };

            /**
             * Encodes the specified LoadGhostBattleInfoRequest message. Does not implicitly {@link wm.protobuf.LoadGhostBattleInfoRequest.verify|verify} messages.
             * @function encode
             * @memberof wm.protobuf.LoadGhostBattleInfoRequest
             * @static
             * @param {wm.protobuf.ILoadGhostBattleInfoRequest} message LoadGhostBattleInfoRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LoadGhostBattleInfoRequest.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.carId);
                return writer;
            };

            /**
             * Encodes the specified LoadGhostBattleInfoRequest message, length delimited. Does not implicitly {@link wm.protobuf.LoadGhostBattleInfoRequest.verify|verify} messages.
             * @function encodeDelimited
             * @memberof wm.protobuf.LoadGhostBattleInfoRequest
             * @static
             * @param {wm.protobuf.ILoadGhostBattleInfoRequest} message LoadGhostBattleInfoRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LoadGhostBattleInfoRequest.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a LoadGhostBattleInfoRequest message from the specified reader or buffer.
             * @function decode
             * @memberof wm.protobuf.LoadGhostBattleInfoRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {wm.protobuf.LoadGhostBattleInfoRequest} LoadGhostBattleInfoRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LoadGhostBattleInfoRequest.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.wm.protobuf.LoadGhostBattleInfoRequest();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.carId = reader.uint32();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("carId"))
                    throw $util.ProtocolError("missing required 'carId'", { instance: message });
                return message;
            };

            /**
             * Decodes a LoadGhostBattleInfoRequest message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof wm.protobuf.LoadGhostBattleInfoRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {wm.protobuf.LoadGhostBattleInfoRequest} LoadGhostBattleInfoRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LoadGhostBattleInfoRequest.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a LoadGhostBattleInfoRequest message.
             * @function verify
             * @memberof wm.protobuf.LoadGhostBattleInfoRequest
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            LoadGhostBattleInfoRequest.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (!$util.isInteger(message.carId))
                    return "carId: integer expected";
                return null;
            };

            /**
             * Creates a LoadGhostBattleInfoRequest message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof wm.protobuf.LoadGhostBattleInfoRequest
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {wm.protobuf.LoadGhostBattleInfoRequest} LoadGhostBattleInfoRequest
             */
            LoadGhostBattleInfoRequest.fromObject = function fromObject(object) {
                if (object instanceof $root.wm.protobuf.LoadGhostBattleInfoRequest)
                    return object;
                let message = new $root.wm.protobuf.LoadGhostBattleInfoRequest();
                if (object.carId != null)
                    message.carId = object.carId >>> 0;
                return message;
            };

            /**
             * Creates a plain object from a LoadGhostBattleInfoRequest message. Also converts values to other types if specified.
             * @function toObject
             * @memberof wm.protobuf.LoadGhostBattleInfoRequest
             * @static
             * @param {wm.protobuf.LoadGhostBattleInfoRequest} message LoadGhostBattleInfoRequest
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            LoadGhostBattleInfoRequest.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults)
                    object.carId = 0;
                if (message.carId != null && message.hasOwnProperty("carId"))
                    object.carId = message.carId;
                return object;
            };

            /**
             * Converts this LoadGhostBattleInfoRequest to JSON.
             * @function toJSON
             * @memberof wm.protobuf.LoadGhostBattleInfoRequest
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            LoadGhostBattleInfoRequest.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for LoadGhostBattleInfoRequest
             * @function getTypeUrl
             * @memberof wm.protobuf.LoadGhostBattleInfoRequest
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            LoadGhostBattleInfoRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/wm.protobuf.LoadGhostBattleInfoRequest";
            };

            return LoadGhostBattleInfoRequest;
        })();

        protobuf.LoadGhostBattleInfoResponse = (function() {

            /**
             * Properties of a LoadGhostBattleInfoResponse.
             * @memberof wm.protobuf
             * @interface ILoadGhostBattleInfoResponse
             * @property {wm.protobuf.ErrorCode} error LoadGhostBattleInfoResponse error
             * @property {Array.<wm.protobuf.IFriendCar>|null} [friendCars] LoadGhostBattleInfoResponse friendCars
             * @property {Array.<wm.protobuf.IChallengerCar>|null} [challengers] LoadGhostBattleInfoResponse challengers
             * @property {Array.<wm.protobuf.IStampTargetCar>|null} [stampTargetCars] LoadGhostBattleInfoResponse stampTargetCars
             * @property {Array.<wm.protobuf.IPreviousVersionStampTargetCar>|null} [previousVersionStampTargetCars] LoadGhostBattleInfoResponse previousVersionStampTargetCars
             * @property {Array.<wm.protobuf.IBookmarkedCar>|null} [bookmarkedCars] LoadGhostBattleInfoResponse bookmarkedCars
             * @property {boolean} promotedToBuddy LoadGhostBattleInfoResponse promotedToBuddy
             * @property {Array.<wm.protobuf.ICar>|null} [history] LoadGhostBattleInfoResponse history
             * @property {Array.<wm.protobuf.LoadGhostBattleInfoResponse.IWeakenedCar>|null} [weakenedCars] LoadGhostBattleInfoResponse weakenedCars
             * @property {number} stampSheetCount LoadGhostBattleInfoResponse stampSheetCount
             * @property {Array.<number>|null} [stampSheet] LoadGhostBattleInfoResponse stampSheet
             * @property {Array.<number>|null} [stampReturnStats] LoadGhostBattleInfoResponse stampReturnStats
             * @property {Array.<number>|null} [acquiredBingoNumbers] LoadGhostBattleInfoResponse acquiredBingoNumbers
             */

            /**
             * Constructs a new LoadGhostBattleInfoResponse.
             * @memberof wm.protobuf
             * @classdesc Represents a LoadGhostBattleInfoResponse.
             * @implements ILoadGhostBattleInfoResponse
             * @constructor
             * @param {wm.protobuf.ILoadGhostBattleInfoResponse=} [properties] Properties to set
             */
            function LoadGhostBattleInfoResponse(properties) {
                this.friendCars = [];
                this.challengers = [];
                this.stampTargetCars = [];
                this.previousVersionStampTargetCars = [];
                this.bookmarkedCars = [];
                this.history = [];
                this.weakenedCars = [];
                this.stampSheet = [];
                this.stampReturnStats = [];
                this.acquiredBingoNumbers = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * LoadGhostBattleInfoResponse error.
             * @member {wm.protobuf.ErrorCode} error
             * @memberof wm.protobuf.LoadGhostBattleInfoResponse
             * @instance
             */
            LoadGhostBattleInfoResponse.prototype.error = 0;

            /**
             * LoadGhostBattleInfoResponse friendCars.
             * @member {Array.<wm.protobuf.IFriendCar>} friendCars
             * @memberof wm.protobuf.LoadGhostBattleInfoResponse
             * @instance
             */
            LoadGhostBattleInfoResponse.prototype.friendCars = $util.emptyArray;

            /**
             * LoadGhostBattleInfoResponse challengers.
             * @member {Array.<wm.protobuf.IChallengerCar>} challengers
             * @memberof wm.protobuf.LoadGhostBattleInfoResponse
             * @instance
             */
            LoadGhostBattleInfoResponse.prototype.challengers = $util.emptyArray;

            /**
             * LoadGhostBattleInfoResponse stampTargetCars.
             * @member {Array.<wm.protobuf.IStampTargetCar>} stampTargetCars
             * @memberof wm.protobuf.LoadGhostBattleInfoResponse
             * @instance
             */
            LoadGhostBattleInfoResponse.prototype.stampTargetCars = $util.emptyArray;

            /**
             * LoadGhostBattleInfoResponse previousVersionStampTargetCars.
             * @member {Array.<wm.protobuf.IPreviousVersionStampTargetCar>} previousVersionStampTargetCars
             * @memberof wm.protobuf.LoadGhostBattleInfoResponse
             * @instance
             */
            LoadGhostBattleInfoResponse.prototype.previousVersionStampTargetCars = $util.emptyArray;

            /**
             * LoadGhostBattleInfoResponse bookmarkedCars.
             * @member {Array.<wm.protobuf.IBookmarkedCar>} bookmarkedCars
             * @memberof wm.protobuf.LoadGhostBattleInfoResponse
             * @instance
             */
            LoadGhostBattleInfoResponse.prototype.bookmarkedCars = $util.emptyArray;

            /**
             * LoadGhostBattleInfoResponse promotedToBuddy.
             * @member {boolean} promotedToBuddy
             * @memberof wm.protobuf.LoadGhostBattleInfoResponse
             * @instance
             */
            LoadGhostBattleInfoResponse.prototype.promotedToBuddy = false;

            /**
             * LoadGhostBattleInfoResponse history.
             * @member {Array.<wm.protobuf.ICar>} history
             * @memberof wm.protobuf.LoadGhostBattleInfoResponse
             * @instance
             */
            LoadGhostBattleInfoResponse.prototype.history = $util.emptyArray;

            /**
             * LoadGhostBattleInfoResponse weakenedCars.
             * @member {Array.<wm.protobuf.LoadGhostBattleInfoResponse.IWeakenedCar>} weakenedCars
             * @memberof wm.protobuf.LoadGhostBattleInfoResponse
             * @instance
             */
            LoadGhostBattleInfoResponse.prototype.weakenedCars = $util.emptyArray;

            /**
             * LoadGhostBattleInfoResponse stampSheetCount.
             * @member {number} stampSheetCount
             * @memberof wm.protobuf.LoadGhostBattleInfoResponse
             * @instance
             */
            LoadGhostBattleInfoResponse.prototype.stampSheetCount = 0;

            /**
             * LoadGhostBattleInfoResponse stampSheet.
             * @member {Array.<number>} stampSheet
             * @memberof wm.protobuf.LoadGhostBattleInfoResponse
             * @instance
             */
            LoadGhostBattleInfoResponse.prototype.stampSheet = $util.emptyArray;

            /**
             * LoadGhostBattleInfoResponse stampReturnStats.
             * @member {Array.<number>} stampReturnStats
             * @memberof wm.protobuf.LoadGhostBattleInfoResponse
             * @instance
             */
            LoadGhostBattleInfoResponse.prototype.stampReturnStats = $util.emptyArray;

            /**
             * LoadGhostBattleInfoResponse acquiredBingoNumbers.
             * @member {Array.<number>} acquiredBingoNumbers
             * @memberof wm.protobuf.LoadGhostBattleInfoResponse
             * @instance
             */
            LoadGhostBattleInfoResponse.prototype.acquiredBingoNumbers = $util.emptyArray;

            /**
             * Creates a new LoadGhostBattleInfoResponse instance using the specified properties.
             * @function create
             * @memberof wm.protobuf.LoadGhostBattleInfoResponse
             * @static
             * @param {wm.protobuf.ILoadGhostBattleInfoResponse=} [properties] Properties to set
             * @returns {wm.protobuf.LoadGhostBattleInfoResponse} LoadGhostBattleInfoResponse instance
             */
            LoadGhostBattleInfoResponse.create = function create(properties) {
                return new LoadGhostBattleInfoResponse(properties);
            };

            /**
             * Encodes the specified LoadGhostBattleInfoResponse message. Does not implicitly {@link wm.protobuf.LoadGhostBattleInfoResponse.verify|verify} messages.
             * @function encode
             * @memberof wm.protobuf.LoadGhostBattleInfoResponse
             * @static
             * @param {wm.protobuf.ILoadGhostBattleInfoResponse} message LoadGhostBattleInfoResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LoadGhostBattleInfoResponse.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
                if (message.friendCars != null && message.friendCars.length)
                    for (let i = 0; i < message.friendCars.length; ++i)
                        $root.wm.protobuf.FriendCar.encode(message.friendCars[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                if (message.challengers != null && message.challengers.length)
                    for (let i = 0; i < message.challengers.length; ++i)
                        $root.wm.protobuf.ChallengerCar.encode(message.challengers[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                if (message.stampTargetCars != null && message.stampTargetCars.length)
                    for (let i = 0; i < message.stampTargetCars.length; ++i)
                        $root.wm.protobuf.StampTargetCar.encode(message.stampTargetCars[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                if (message.history != null && message.history.length)
                    for (let i = 0; i < message.history.length; ++i)
                        $root.wm.protobuf.Car.encode(message.history[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                writer.uint32(/* id 7, wireType 0 =*/56).uint32(message.stampSheetCount);
                if (message.stampSheet != null && message.stampSheet.length)
                    for (let i = 0; i < message.stampSheet.length; ++i)
                        writer.uint32(/* id 8, wireType 0 =*/64).uint32(message.stampSheet[i]);
                if (message.stampReturnStats != null && message.stampReturnStats.length)
                    for (let i = 0; i < message.stampReturnStats.length; ++i)
                        writer.uint32(/* id 9, wireType 0 =*/72).uint32(message.stampReturnStats[i]);
                if (message.weakenedCars != null && message.weakenedCars.length)
                    for (let i = 0; i < message.weakenedCars.length; ++i)
                        $root.wm.protobuf.LoadGhostBattleInfoResponse.WeakenedCar.encode(message.weakenedCars[i], writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();
                if (message.bookmarkedCars != null && message.bookmarkedCars.length)
                    for (let i = 0; i < message.bookmarkedCars.length; ++i)
                        $root.wm.protobuf.BookmarkedCar.encode(message.bookmarkedCars[i], writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();
                if (message.previousVersionStampTargetCars != null && message.previousVersionStampTargetCars.length)
                    for (let i = 0; i < message.previousVersionStampTargetCars.length; ++i)
                        $root.wm.protobuf.PreviousVersionStampTargetCar.encode(message.previousVersionStampTargetCars[i], writer.uint32(/* id 12, wireType 2 =*/98).fork()).ldelim();
                writer.uint32(/* id 13, wireType 0 =*/104).bool(message.promotedToBuddy);
                if (message.acquiredBingoNumbers != null && message.acquiredBingoNumbers.length)
                    for (let i = 0; i < message.acquiredBingoNumbers.length; ++i)
                        writer.uint32(/* id 15, wireType 0 =*/120).uint32(message.acquiredBingoNumbers[i]);
                return writer;
            };

            /**
             * Encodes the specified LoadGhostBattleInfoResponse message, length delimited. Does not implicitly {@link wm.protobuf.LoadGhostBattleInfoResponse.verify|verify} messages.
             * @function encodeDelimited
             * @memberof wm.protobuf.LoadGhostBattleInfoResponse
             * @static
             * @param {wm.protobuf.ILoadGhostBattleInfoResponse} message LoadGhostBattleInfoResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LoadGhostBattleInfoResponse.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a LoadGhostBattleInfoResponse message from the specified reader or buffer.
             * @function decode
             * @memberof wm.protobuf.LoadGhostBattleInfoResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {wm.protobuf.LoadGhostBattleInfoResponse} LoadGhostBattleInfoResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LoadGhostBattleInfoResponse.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.wm.protobuf.LoadGhostBattleInfoResponse();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.error = reader.int32();
                            break;
                        }
                    case 2: {
                            if (!(message.friendCars && message.friendCars.length))
                                message.friendCars = [];
                            message.friendCars.push($root.wm.protobuf.FriendCar.decode(reader, reader.uint32()));
                            break;
                        }
                    case 3: {
                            if (!(message.challengers && message.challengers.length))
                                message.challengers = [];
                            message.challengers.push($root.wm.protobuf.ChallengerCar.decode(reader, reader.uint32()));
                            break;
                        }
                    case 4: {
                            if (!(message.stampTargetCars && message.stampTargetCars.length))
                                message.stampTargetCars = [];
                            message.stampTargetCars.push($root.wm.protobuf.StampTargetCar.decode(reader, reader.uint32()));
                            break;
                        }
                    case 12: {
                            if (!(message.previousVersionStampTargetCars && message.previousVersionStampTargetCars.length))
                                message.previousVersionStampTargetCars = [];
                            message.previousVersionStampTargetCars.push($root.wm.protobuf.PreviousVersionStampTargetCar.decode(reader, reader.uint32()));
                            break;
                        }
                    case 11: {
                            if (!(message.bookmarkedCars && message.bookmarkedCars.length))
                                message.bookmarkedCars = [];
                            message.bookmarkedCars.push($root.wm.protobuf.BookmarkedCar.decode(reader, reader.uint32()));
                            break;
                        }
                    case 13: {
                            message.promotedToBuddy = reader.bool();
                            break;
                        }
                    case 5: {
                            if (!(message.history && message.history.length))
                                message.history = [];
                            message.history.push($root.wm.protobuf.Car.decode(reader, reader.uint32()));
                            break;
                        }
                    case 10: {
                            if (!(message.weakenedCars && message.weakenedCars.length))
                                message.weakenedCars = [];
                            message.weakenedCars.push($root.wm.protobuf.LoadGhostBattleInfoResponse.WeakenedCar.decode(reader, reader.uint32()));
                            break;
                        }
                    case 7: {
                            message.stampSheetCount = reader.uint32();
                            break;
                        }
                    case 8: {
                            if (!(message.stampSheet && message.stampSheet.length))
                                message.stampSheet = [];
                            if ((tag & 7) === 2) {
                                let end2 = reader.uint32() + reader.pos;
                                while (reader.pos < end2)
                                    message.stampSheet.push(reader.uint32());
                            } else
                                message.stampSheet.push(reader.uint32());
                            break;
                        }
                    case 9: {
                            if (!(message.stampReturnStats && message.stampReturnStats.length))
                                message.stampReturnStats = [];
                            if ((tag & 7) === 2) {
                                let end2 = reader.uint32() + reader.pos;
                                while (reader.pos < end2)
                                    message.stampReturnStats.push(reader.uint32());
                            } else
                                message.stampReturnStats.push(reader.uint32());
                            break;
                        }
                    case 15: {
                            if (!(message.acquiredBingoNumbers && message.acquiredBingoNumbers.length))
                                message.acquiredBingoNumbers = [];
                            if ((tag & 7) === 2) {
                                let end2 = reader.uint32() + reader.pos;
                                while (reader.pos < end2)
                                    message.acquiredBingoNumbers.push(reader.uint32());
                            } else
                                message.acquiredBingoNumbers.push(reader.uint32());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("error"))
                    throw $util.ProtocolError("missing required 'error'", { instance: message });
                if (!message.hasOwnProperty("promotedToBuddy"))
                    throw $util.ProtocolError("missing required 'promotedToBuddy'", { instance: message });
                if (!message.hasOwnProperty("stampSheetCount"))
                    throw $util.ProtocolError("missing required 'stampSheetCount'", { instance: message });
                return message;
            };

            /**
             * Decodes a LoadGhostBattleInfoResponse message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof wm.protobuf.LoadGhostBattleInfoResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {wm.protobuf.LoadGhostBattleInfoResponse} LoadGhostBattleInfoResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LoadGhostBattleInfoResponse.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a LoadGhostBattleInfoResponse message.
             * @function verify
             * @memberof wm.protobuf.LoadGhostBattleInfoResponse
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            LoadGhostBattleInfoResponse.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                switch (message.error) {
                default:
                    return "error: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 7:
                case 9:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 16:
                case 17:
                case 18:
                case 19:
                    break;
                }
                if (message.friendCars != null && message.hasOwnProperty("friendCars")) {
                    if (!Array.isArray(message.friendCars))
                        return "friendCars: array expected";
                    for (let i = 0; i < message.friendCars.length; ++i) {
                        let error = $root.wm.protobuf.FriendCar.verify(message.friendCars[i]);
                        if (error)
                            return "friendCars." + error;
                    }
                }
                if (message.challengers != null && message.hasOwnProperty("challengers")) {
                    if (!Array.isArray(message.challengers))
                        return "challengers: array expected";
                    for (let i = 0; i < message.challengers.length; ++i) {
                        let error = $root.wm.protobuf.ChallengerCar.verify(message.challengers[i]);
                        if (error)
                            return "challengers." + error;
                    }
                }
                if (message.stampTargetCars != null && message.hasOwnProperty("stampTargetCars")) {
                    if (!Array.isArray(message.stampTargetCars))
                        return "stampTargetCars: array expected";
                    for (let i = 0; i < message.stampTargetCars.length; ++i) {
                        let error = $root.wm.protobuf.StampTargetCar.verify(message.stampTargetCars[i]);
                        if (error)
                            return "stampTargetCars." + error;
                    }
                }
                if (message.previousVersionStampTargetCars != null && message.hasOwnProperty("previousVersionStampTargetCars")) {
                    if (!Array.isArray(message.previousVersionStampTargetCars))
                        return "previousVersionStampTargetCars: array expected";
                    for (let i = 0; i < message.previousVersionStampTargetCars.length; ++i) {
                        let error = $root.wm.protobuf.PreviousVersionStampTargetCar.verify(message.previousVersionStampTargetCars[i]);
                        if (error)
                            return "previousVersionStampTargetCars." + error;
                    }
                }
                if (message.bookmarkedCars != null && message.hasOwnProperty("bookmarkedCars")) {
                    if (!Array.isArray(message.bookmarkedCars))
                        return "bookmarkedCars: array expected";
                    for (let i = 0; i < message.bookmarkedCars.length; ++i) {
                        let error = $root.wm.protobuf.BookmarkedCar.verify(message.bookmarkedCars[i]);
                        if (error)
                            return "bookmarkedCars." + error;
                    }
                }
                if (typeof message.promotedToBuddy !== "boolean")
                    return "promotedToBuddy: boolean expected";
                if (message.history != null && message.hasOwnProperty("history")) {
                    if (!Array.isArray(message.history))
                        return "history: array expected";
                    for (let i = 0; i < message.history.length; ++i) {
                        let error = $root.wm.protobuf.Car.verify(message.history[i]);
                        if (error)
                            return "history." + error;
                    }
                }
                if (message.weakenedCars != null && message.hasOwnProperty("weakenedCars")) {
                    if (!Array.isArray(message.weakenedCars))
                        return "weakenedCars: array expected";
                    for (let i = 0; i < message.weakenedCars.length; ++i) {
                        let error = $root.wm.protobuf.LoadGhostBattleInfoResponse.WeakenedCar.verify(message.weakenedCars[i]);
                        if (error)
                            return "weakenedCars." + error;
                    }
                }
                if (!$util.isInteger(message.stampSheetCount))
                    return "stampSheetCount: integer expected";
                if (message.stampSheet != null && message.hasOwnProperty("stampSheet")) {
                    if (!Array.isArray(message.stampSheet))
                        return "stampSheet: array expected";
                    for (let i = 0; i < message.stampSheet.length; ++i)
                        if (!$util.isInteger(message.stampSheet[i]))
                            return "stampSheet: integer[] expected";
                }
                if (message.stampReturnStats != null && message.hasOwnProperty("stampReturnStats")) {
                    if (!Array.isArray(message.stampReturnStats))
                        return "stampReturnStats: array expected";
                    for (let i = 0; i < message.stampReturnStats.length; ++i)
                        if (!$util.isInteger(message.stampReturnStats[i]))
                            return "stampReturnStats: integer[] expected";
                }
                if (message.acquiredBingoNumbers != null && message.hasOwnProperty("acquiredBingoNumbers")) {
                    if (!Array.isArray(message.acquiredBingoNumbers))
                        return "acquiredBingoNumbers: array expected";
                    for (let i = 0; i < message.acquiredBingoNumbers.length; ++i)
                        if (!$util.isInteger(message.acquiredBingoNumbers[i]))
                            return "acquiredBingoNumbers: integer[] expected";
                }
                return null;
            };

            /**
             * Creates a LoadGhostBattleInfoResponse message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof wm.protobuf.LoadGhostBattleInfoResponse
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {wm.protobuf.LoadGhostBattleInfoResponse} LoadGhostBattleInfoResponse
             */
            LoadGhostBattleInfoResponse.fromObject = function fromObject(object) {
                if (object instanceof $root.wm.protobuf.LoadGhostBattleInfoResponse)
                    return object;
                let message = new $root.wm.protobuf.LoadGhostBattleInfoResponse();
                switch (object.error) {
                default:
                    if (typeof object.error === "number") {
                        message.error = object.error;
                        break;
                    }
                    break;
                case "ERR_SUCCESS":
                case 0:
                    message.error = 0;
                    break;
                case "ERR_REQUEST":
                case 1:
                    message.error = 1;
                    break;
                case "ERR_NOT_FOUND":
                case 2:
                    message.error = 2;
                    break;
                case "ERR_ID_SERVER":
                case 3:
                    message.error = 3;
                    break;
                case "ERR_ID_BANNED":
                case 4:
                    message.error = 4;
                    break;
                case "ERR_USER_LOCKED":
                case 5:
                    message.error = 5;
                    break;
                case "ERR_USER_VERSION":
                case 6:
                    message.error = 6;
                    break;
                case "ERR_NAME_CONFLICTED":
                case 7:
                    message.error = 7;
                    break;
                case "ERR_FORBIDDEN":
                case 9:
                    message.error = 9;
                    break;
                case "ERR_USER_SUCCEEDED":
                case 11:
                    message.error = 11;
                    break;
                case "ERR_BEING_TRANSFERRED":
                case 12:
                    message.error = 12;
                    break;
                case "ERR_SCRATCH_LOCKED":
                case 13:
                    message.error = 13;
                    break;
                case "ERR_BINGO_REVENGE_LOCKED":
                case 14:
                    message.error = 14;
                    break;
                case "ERR_BINGO_ALREDY_LINKED":
                case 15:
                    message.error = 15;
                    break;
                case "ERR_BINGO_FINISHED":
                case 16:
                    message.error = 16;
                    break;
                case "ERR_BINGO_REACHED_MAX_USER":
                case 17:
                    message.error = 17;
                    break;
                case "ERR_CAR_NOT_FOUND":
                case 18:
                    message.error = 18;
                    break;
                case "ERR_BINGO_CARD_NOT_FOUND":
                case 19:
                    message.error = 19;
                    break;
                }
                if (object.friendCars) {
                    if (!Array.isArray(object.friendCars))
                        throw TypeError(".wm.protobuf.LoadGhostBattleInfoResponse.friendCars: array expected");
                    message.friendCars = [];
                    for (let i = 0; i < object.friendCars.length; ++i) {
                        if (typeof object.friendCars[i] !== "object")
                            throw TypeError(".wm.protobuf.LoadGhostBattleInfoResponse.friendCars: object expected");
                        message.friendCars[i] = $root.wm.protobuf.FriendCar.fromObject(object.friendCars[i]);
                    }
                }
                if (object.challengers) {
                    if (!Array.isArray(object.challengers))
                        throw TypeError(".wm.protobuf.LoadGhostBattleInfoResponse.challengers: array expected");
                    message.challengers = [];
                    for (let i = 0; i < object.challengers.length; ++i) {
                        if (typeof object.challengers[i] !== "object")
                            throw TypeError(".wm.protobuf.LoadGhostBattleInfoResponse.challengers: object expected");
                        message.challengers[i] = $root.wm.protobuf.ChallengerCar.fromObject(object.challengers[i]);
                    }
                }
                if (object.stampTargetCars) {
                    if (!Array.isArray(object.stampTargetCars))
                        throw TypeError(".wm.protobuf.LoadGhostBattleInfoResponse.stampTargetCars: array expected");
                    message.stampTargetCars = [];
                    for (let i = 0; i < object.stampTargetCars.length; ++i) {
                        if (typeof object.stampTargetCars[i] !== "object")
                            throw TypeError(".wm.protobuf.LoadGhostBattleInfoResponse.stampTargetCars: object expected");
                        message.stampTargetCars[i] = $root.wm.protobuf.StampTargetCar.fromObject(object.stampTargetCars[i]);
                    }
                }
                if (object.previousVersionStampTargetCars) {
                    if (!Array.isArray(object.previousVersionStampTargetCars))
                        throw TypeError(".wm.protobuf.LoadGhostBattleInfoResponse.previousVersionStampTargetCars: array expected");
                    message.previousVersionStampTargetCars = [];
                    for (let i = 0; i < object.previousVersionStampTargetCars.length; ++i) {
                        if (typeof object.previousVersionStampTargetCars[i] !== "object")
                            throw TypeError(".wm.protobuf.LoadGhostBattleInfoResponse.previousVersionStampTargetCars: object expected");
                        message.previousVersionStampTargetCars[i] = $root.wm.protobuf.PreviousVersionStampTargetCar.fromObject(object.previousVersionStampTargetCars[i]);
                    }
                }
                if (object.bookmarkedCars) {
                    if (!Array.isArray(object.bookmarkedCars))
                        throw TypeError(".wm.protobuf.LoadGhostBattleInfoResponse.bookmarkedCars: array expected");
                    message.bookmarkedCars = [];
                    for (let i = 0; i < object.bookmarkedCars.length; ++i) {
                        if (typeof object.bookmarkedCars[i] !== "object")
                            throw TypeError(".wm.protobuf.LoadGhostBattleInfoResponse.bookmarkedCars: object expected");
                        message.bookmarkedCars[i] = $root.wm.protobuf.BookmarkedCar.fromObject(object.bookmarkedCars[i]);
                    }
                }
                if (object.promotedToBuddy != null)
                    message.promotedToBuddy = Boolean(object.promotedToBuddy);
                if (object.history) {
                    if (!Array.isArray(object.history))
                        throw TypeError(".wm.protobuf.LoadGhostBattleInfoResponse.history: array expected");
                    message.history = [];
                    for (let i = 0; i < object.history.length; ++i) {
                        if (typeof object.history[i] !== "object")
                            throw TypeError(".wm.protobuf.LoadGhostBattleInfoResponse.history: object expected");
                        message.history[i] = $root.wm.protobuf.Car.fromObject(object.history[i]);
                    }
                }
                if (object.weakenedCars) {
                    if (!Array.isArray(object.weakenedCars))
                        throw TypeError(".wm.protobuf.LoadGhostBattleInfoResponse.weakenedCars: array expected");
                    message.weakenedCars = [];
                    for (let i = 0; i < object.weakenedCars.length; ++i) {
                        if (typeof object.weakenedCars[i] !== "object")
                            throw TypeError(".wm.protobuf.LoadGhostBattleInfoResponse.weakenedCars: object expected");
                        message.weakenedCars[i] = $root.wm.protobuf.LoadGhostBattleInfoResponse.WeakenedCar.fromObject(object.weakenedCars[i]);
                    }
                }
                if (object.stampSheetCount != null)
                    message.stampSheetCount = object.stampSheetCount >>> 0;
                if (object.stampSheet) {
                    if (!Array.isArray(object.stampSheet))
                        throw TypeError(".wm.protobuf.LoadGhostBattleInfoResponse.stampSheet: array expected");
                    message.stampSheet = [];
                    for (let i = 0; i < object.stampSheet.length; ++i)
                        message.stampSheet[i] = object.stampSheet[i] >>> 0;
                }
                if (object.stampReturnStats) {
                    if (!Array.isArray(object.stampReturnStats))
                        throw TypeError(".wm.protobuf.LoadGhostBattleInfoResponse.stampReturnStats: array expected");
                    message.stampReturnStats = [];
                    for (let i = 0; i < object.stampReturnStats.length; ++i)
                        message.stampReturnStats[i] = object.stampReturnStats[i] >>> 0;
                }
                if (object.acquiredBingoNumbers) {
                    if (!Array.isArray(object.acquiredBingoNumbers))
                        throw TypeError(".wm.protobuf.LoadGhostBattleInfoResponse.acquiredBingoNumbers: array expected");
                    message.acquiredBingoNumbers = [];
                    for (let i = 0; i < object.acquiredBingoNumbers.length; ++i)
                        message.acquiredBingoNumbers[i] = object.acquiredBingoNumbers[i] >>> 0;
                }
                return message;
            };

            /**
             * Creates a plain object from a LoadGhostBattleInfoResponse message. Also converts values to other types if specified.
             * @function toObject
             * @memberof wm.protobuf.LoadGhostBattleInfoResponse
             * @static
             * @param {wm.protobuf.LoadGhostBattleInfoResponse} message LoadGhostBattleInfoResponse
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            LoadGhostBattleInfoResponse.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults) {
                    object.friendCars = [];
                    object.challengers = [];
                    object.stampTargetCars = [];
                    object.history = [];
                    object.stampSheet = [];
                    object.stampReturnStats = [];
                    object.weakenedCars = [];
                    object.bookmarkedCars = [];
                    object.previousVersionStampTargetCars = [];
                    object.acquiredBingoNumbers = [];
                }
                if (options.defaults) {
                    object.error = options.enums === String ? "ERR_SUCCESS" : 0;
                    object.stampSheetCount = 0;
                    object.promotedToBuddy = false;
                }
                if (message.error != null && message.hasOwnProperty("error"))
                    object.error = options.enums === String ? $root.wm.protobuf.ErrorCode[message.error] === undefined ? message.error : $root.wm.protobuf.ErrorCode[message.error] : message.error;
                if (message.friendCars && message.friendCars.length) {
                    object.friendCars = [];
                    for (let j = 0; j < message.friendCars.length; ++j)
                        object.friendCars[j] = $root.wm.protobuf.FriendCar.toObject(message.friendCars[j], options);
                }
                if (message.challengers && message.challengers.length) {
                    object.challengers = [];
                    for (let j = 0; j < message.challengers.length; ++j)
                        object.challengers[j] = $root.wm.protobuf.ChallengerCar.toObject(message.challengers[j], options);
                }
                if (message.stampTargetCars && message.stampTargetCars.length) {
                    object.stampTargetCars = [];
                    for (let j = 0; j < message.stampTargetCars.length; ++j)
                        object.stampTargetCars[j] = $root.wm.protobuf.StampTargetCar.toObject(message.stampTargetCars[j], options);
                }
                if (message.history && message.history.length) {
                    object.history = [];
                    for (let j = 0; j < message.history.length; ++j)
                        object.history[j] = $root.wm.protobuf.Car.toObject(message.history[j], options);
                }
                if (message.stampSheetCount != null && message.hasOwnProperty("stampSheetCount"))
                    object.stampSheetCount = message.stampSheetCount;
                if (message.stampSheet && message.stampSheet.length) {
                    object.stampSheet = [];
                    for (let j = 0; j < message.stampSheet.length; ++j)
                        object.stampSheet[j] = message.stampSheet[j];
                }
                if (message.stampReturnStats && message.stampReturnStats.length) {
                    object.stampReturnStats = [];
                    for (let j = 0; j < message.stampReturnStats.length; ++j)
                        object.stampReturnStats[j] = message.stampReturnStats[j];
                }
                if (message.weakenedCars && message.weakenedCars.length) {
                    object.weakenedCars = [];
                    for (let j = 0; j < message.weakenedCars.length; ++j)
                        object.weakenedCars[j] = $root.wm.protobuf.LoadGhostBattleInfoResponse.WeakenedCar.toObject(message.weakenedCars[j], options);
                }
                if (message.bookmarkedCars && message.bookmarkedCars.length) {
                    object.bookmarkedCars = [];
                    for (let j = 0; j < message.bookmarkedCars.length; ++j)
                        object.bookmarkedCars[j] = $root.wm.protobuf.BookmarkedCar.toObject(message.bookmarkedCars[j], options);
                }
                if (message.previousVersionStampTargetCars && message.previousVersionStampTargetCars.length) {
                    object.previousVersionStampTargetCars = [];
                    for (let j = 0; j < message.previousVersionStampTargetCars.length; ++j)
                        object.previousVersionStampTargetCars[j] = $root.wm.protobuf.PreviousVersionStampTargetCar.toObject(message.previousVersionStampTargetCars[j], options);
                }
                if (message.promotedToBuddy != null && message.hasOwnProperty("promotedToBuddy"))
                    object.promotedToBuddy = message.promotedToBuddy;
                if (message.acquiredBingoNumbers && message.acquiredBingoNumbers.length) {
                    object.acquiredBingoNumbers = [];
                    for (let j = 0; j < message.acquiredBingoNumbers.length; ++j)
                        object.acquiredBingoNumbers[j] = message.acquiredBingoNumbers[j];
                }
                return object;
            };

            /**
             * Converts this LoadGhostBattleInfoResponse to JSON.
             * @function toJSON
             * @memberof wm.protobuf.LoadGhostBattleInfoResponse
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            LoadGhostBattleInfoResponse.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for LoadGhostBattleInfoResponse
             * @function getTypeUrl
             * @memberof wm.protobuf.LoadGhostBattleInfoResponse
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            LoadGhostBattleInfoResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/wm.protobuf.LoadGhostBattleInfoResponse";
            };

            LoadGhostBattleInfoResponse.WeakenedCar = (function() {

                /**
                 * Properties of a WeakenedCar.
                 * @memberof wm.protobuf.LoadGhostBattleInfoResponse
                 * @interface IWeakenedCar
                 * @property {number} carId WeakenedCar carId
                 * @property {number} consecutiveLosses WeakenedCar consecutiveLosses
                 */

                /**
                 * Constructs a new WeakenedCar.
                 * @memberof wm.protobuf.LoadGhostBattleInfoResponse
                 * @classdesc Represents a WeakenedCar.
                 * @implements IWeakenedCar
                 * @constructor
                 * @param {wm.protobuf.LoadGhostBattleInfoResponse.IWeakenedCar=} [properties] Properties to set
                 */
                function WeakenedCar(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * WeakenedCar carId.
                 * @member {number} carId
                 * @memberof wm.protobuf.LoadGhostBattleInfoResponse.WeakenedCar
                 * @instance
                 */
                WeakenedCar.prototype.carId = 0;

                /**
                 * WeakenedCar consecutiveLosses.
                 * @member {number} consecutiveLosses
                 * @memberof wm.protobuf.LoadGhostBattleInfoResponse.WeakenedCar
                 * @instance
                 */
                WeakenedCar.prototype.consecutiveLosses = 0;

                /**
                 * Creates a new WeakenedCar instance using the specified properties.
                 * @function create
                 * @memberof wm.protobuf.LoadGhostBattleInfoResponse.WeakenedCar
                 * @static
                 * @param {wm.protobuf.LoadGhostBattleInfoResponse.IWeakenedCar=} [properties] Properties to set
                 * @returns {wm.protobuf.LoadGhostBattleInfoResponse.WeakenedCar} WeakenedCar instance
                 */
                WeakenedCar.create = function create(properties) {
                    return new WeakenedCar(properties);
                };

                /**
                 * Encodes the specified WeakenedCar message. Does not implicitly {@link wm.protobuf.LoadGhostBattleInfoResponse.WeakenedCar.verify|verify} messages.
                 * @function encode
                 * @memberof wm.protobuf.LoadGhostBattleInfoResponse.WeakenedCar
                 * @static
                 * @param {wm.protobuf.LoadGhostBattleInfoResponse.IWeakenedCar} message WeakenedCar message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                WeakenedCar.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.carId);
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.consecutiveLosses);
                    return writer;
                };

                /**
                 * Encodes the specified WeakenedCar message, length delimited. Does not implicitly {@link wm.protobuf.LoadGhostBattleInfoResponse.WeakenedCar.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof wm.protobuf.LoadGhostBattleInfoResponse.WeakenedCar
                 * @static
                 * @param {wm.protobuf.LoadGhostBattleInfoResponse.IWeakenedCar} message WeakenedCar message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                WeakenedCar.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a WeakenedCar message from the specified reader or buffer.
                 * @function decode
                 * @memberof wm.protobuf.LoadGhostBattleInfoResponse.WeakenedCar
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {wm.protobuf.LoadGhostBattleInfoResponse.WeakenedCar} WeakenedCar
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                WeakenedCar.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.wm.protobuf.LoadGhostBattleInfoResponse.WeakenedCar();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.carId = reader.uint32();
                                break;
                            }
                        case 2: {
                                message.consecutiveLosses = reader.uint32();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    if (!message.hasOwnProperty("carId"))
                        throw $util.ProtocolError("missing required 'carId'", { instance: message });
                    if (!message.hasOwnProperty("consecutiveLosses"))
                        throw $util.ProtocolError("missing required 'consecutiveLosses'", { instance: message });
                    return message;
                };

                /**
                 * Decodes a WeakenedCar message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof wm.protobuf.LoadGhostBattleInfoResponse.WeakenedCar
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {wm.protobuf.LoadGhostBattleInfoResponse.WeakenedCar} WeakenedCar
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                WeakenedCar.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a WeakenedCar message.
                 * @function verify
                 * @memberof wm.protobuf.LoadGhostBattleInfoResponse.WeakenedCar
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                WeakenedCar.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (!$util.isInteger(message.carId))
                        return "carId: integer expected";
                    if (!$util.isInteger(message.consecutiveLosses))
                        return "consecutiveLosses: integer expected";
                    return null;
                };

                /**
                 * Creates a WeakenedCar message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof wm.protobuf.LoadGhostBattleInfoResponse.WeakenedCar
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {wm.protobuf.LoadGhostBattleInfoResponse.WeakenedCar} WeakenedCar
                 */
                WeakenedCar.fromObject = function fromObject(object) {
                    if (object instanceof $root.wm.protobuf.LoadGhostBattleInfoResponse.WeakenedCar)
                        return object;
                    let message = new $root.wm.protobuf.LoadGhostBattleInfoResponse.WeakenedCar();
                    if (object.carId != null)
                        message.carId = object.carId >>> 0;
                    if (object.consecutiveLosses != null)
                        message.consecutiveLosses = object.consecutiveLosses >>> 0;
                    return message;
                };

                /**
                 * Creates a plain object from a WeakenedCar message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof wm.protobuf.LoadGhostBattleInfoResponse.WeakenedCar
                 * @static
                 * @param {wm.protobuf.LoadGhostBattleInfoResponse.WeakenedCar} message WeakenedCar
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                WeakenedCar.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        object.carId = 0;
                        object.consecutiveLosses = 0;
                    }
                    if (message.carId != null && message.hasOwnProperty("carId"))
                        object.carId = message.carId;
                    if (message.consecutiveLosses != null && message.hasOwnProperty("consecutiveLosses"))
                        object.consecutiveLosses = message.consecutiveLosses;
                    return object;
                };

                /**
                 * Converts this WeakenedCar to JSON.
                 * @function toJSON
                 * @memberof wm.protobuf.LoadGhostBattleInfoResponse.WeakenedCar
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                WeakenedCar.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                /**
                 * Gets the default type url for WeakenedCar
                 * @function getTypeUrl
                 * @memberof wm.protobuf.LoadGhostBattleInfoResponse.WeakenedCar
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                WeakenedCar.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/wm.protobuf.LoadGhostBattleInfoResponse.WeakenedCar";
                };

                return WeakenedCar;
            })();

            return LoadGhostBattleInfoResponse;
        })();

        protobuf.LoadStampTargetRequest = (function() {

            /**
             * Properties of a LoadStampTargetRequest.
             * @memberof wm.protobuf
             * @interface ILoadStampTargetRequest
             * @property {number} carId LoadStampTargetRequest carId
             * @property {boolean} needToPromote LoadStampTargetRequest needToPromote
             */

            /**
             * Constructs a new LoadStampTargetRequest.
             * @memberof wm.protobuf
             * @classdesc Represents a LoadStampTargetRequest.
             * @implements ILoadStampTargetRequest
             * @constructor
             * @param {wm.protobuf.ILoadStampTargetRequest=} [properties] Properties to set
             */
            function LoadStampTargetRequest(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * LoadStampTargetRequest carId.
             * @member {number} carId
             * @memberof wm.protobuf.LoadStampTargetRequest
             * @instance
             */
            LoadStampTargetRequest.prototype.carId = 0;

            /**
             * LoadStampTargetRequest needToPromote.
             * @member {boolean} needToPromote
             * @memberof wm.protobuf.LoadStampTargetRequest
             * @instance
             */
            LoadStampTargetRequest.prototype.needToPromote = false;

            /**
             * Creates a new LoadStampTargetRequest instance using the specified properties.
             * @function create
             * @memberof wm.protobuf.LoadStampTargetRequest
             * @static
             * @param {wm.protobuf.ILoadStampTargetRequest=} [properties] Properties to set
             * @returns {wm.protobuf.LoadStampTargetRequest} LoadStampTargetRequest instance
             */
            LoadStampTargetRequest.create = function create(properties) {
                return new LoadStampTargetRequest(properties);
            };

            /**
             * Encodes the specified LoadStampTargetRequest message. Does not implicitly {@link wm.protobuf.LoadStampTargetRequest.verify|verify} messages.
             * @function encode
             * @memberof wm.protobuf.LoadStampTargetRequest
             * @static
             * @param {wm.protobuf.ILoadStampTargetRequest} message LoadStampTargetRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LoadStampTargetRequest.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.carId);
                writer.uint32(/* id 2, wireType 0 =*/16).bool(message.needToPromote);
                return writer;
            };

            /**
             * Encodes the specified LoadStampTargetRequest message, length delimited. Does not implicitly {@link wm.protobuf.LoadStampTargetRequest.verify|verify} messages.
             * @function encodeDelimited
             * @memberof wm.protobuf.LoadStampTargetRequest
             * @static
             * @param {wm.protobuf.ILoadStampTargetRequest} message LoadStampTargetRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LoadStampTargetRequest.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a LoadStampTargetRequest message from the specified reader or buffer.
             * @function decode
             * @memberof wm.protobuf.LoadStampTargetRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {wm.protobuf.LoadStampTargetRequest} LoadStampTargetRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LoadStampTargetRequest.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.wm.protobuf.LoadStampTargetRequest();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.carId = reader.uint32();
                            break;
                        }
                    case 2: {
                            message.needToPromote = reader.bool();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("carId"))
                    throw $util.ProtocolError("missing required 'carId'", { instance: message });
                if (!message.hasOwnProperty("needToPromote"))
                    throw $util.ProtocolError("missing required 'needToPromote'", { instance: message });
                return message;
            };

            /**
             * Decodes a LoadStampTargetRequest message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof wm.protobuf.LoadStampTargetRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {wm.protobuf.LoadStampTargetRequest} LoadStampTargetRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LoadStampTargetRequest.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a LoadStampTargetRequest message.
             * @function verify
             * @memberof wm.protobuf.LoadStampTargetRequest
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            LoadStampTargetRequest.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (!$util.isInteger(message.carId))
                    return "carId: integer expected";
                if (typeof message.needToPromote !== "boolean")
                    return "needToPromote: boolean expected";
                return null;
            };

            /**
             * Creates a LoadStampTargetRequest message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof wm.protobuf.LoadStampTargetRequest
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {wm.protobuf.LoadStampTargetRequest} LoadStampTargetRequest
             */
            LoadStampTargetRequest.fromObject = function fromObject(object) {
                if (object instanceof $root.wm.protobuf.LoadStampTargetRequest)
                    return object;
                let message = new $root.wm.protobuf.LoadStampTargetRequest();
                if (object.carId != null)
                    message.carId = object.carId >>> 0;
                if (object.needToPromote != null)
                    message.needToPromote = Boolean(object.needToPromote);
                return message;
            };

            /**
             * Creates a plain object from a LoadStampTargetRequest message. Also converts values to other types if specified.
             * @function toObject
             * @memberof wm.protobuf.LoadStampTargetRequest
             * @static
             * @param {wm.protobuf.LoadStampTargetRequest} message LoadStampTargetRequest
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            LoadStampTargetRequest.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.carId = 0;
                    object.needToPromote = false;
                }
                if (message.carId != null && message.hasOwnProperty("carId"))
                    object.carId = message.carId;
                if (message.needToPromote != null && message.hasOwnProperty("needToPromote"))
                    object.needToPromote = message.needToPromote;
                return object;
            };

            /**
             * Converts this LoadStampTargetRequest to JSON.
             * @function toJSON
             * @memberof wm.protobuf.LoadStampTargetRequest
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            LoadStampTargetRequest.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for LoadStampTargetRequest
             * @function getTypeUrl
             * @memberof wm.protobuf.LoadStampTargetRequest
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            LoadStampTargetRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/wm.protobuf.LoadStampTargetRequest";
            };

            return LoadStampTargetRequest;
        })();

        protobuf.LoadStampTargetResponse = (function() {

            /**
             * Properties of a LoadStampTargetResponse.
             * @memberof wm.protobuf
             * @interface ILoadStampTargetResponse
             * @property {wm.protobuf.ErrorCode} error LoadStampTargetResponse error
             * @property {Array.<wm.protobuf.IStampTargetCar>|null} [cars] LoadStampTargetResponse cars
             * @property {Array.<wm.protobuf.IChallengerCar>|null} [challengers] LoadStampTargetResponse challengers
             */

            /**
             * Constructs a new LoadStampTargetResponse.
             * @memberof wm.protobuf
             * @classdesc Represents a LoadStampTargetResponse.
             * @implements ILoadStampTargetResponse
             * @constructor
             * @param {wm.protobuf.ILoadStampTargetResponse=} [properties] Properties to set
             */
            function LoadStampTargetResponse(properties) {
                this.cars = [];
                this.challengers = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * LoadStampTargetResponse error.
             * @member {wm.protobuf.ErrorCode} error
             * @memberof wm.protobuf.LoadStampTargetResponse
             * @instance
             */
            LoadStampTargetResponse.prototype.error = 0;

            /**
             * LoadStampTargetResponse cars.
             * @member {Array.<wm.protobuf.IStampTargetCar>} cars
             * @memberof wm.protobuf.LoadStampTargetResponse
             * @instance
             */
            LoadStampTargetResponse.prototype.cars = $util.emptyArray;

            /**
             * LoadStampTargetResponse challengers.
             * @member {Array.<wm.protobuf.IChallengerCar>} challengers
             * @memberof wm.protobuf.LoadStampTargetResponse
             * @instance
             */
            LoadStampTargetResponse.prototype.challengers = $util.emptyArray;

            /**
             * Creates a new LoadStampTargetResponse instance using the specified properties.
             * @function create
             * @memberof wm.protobuf.LoadStampTargetResponse
             * @static
             * @param {wm.protobuf.ILoadStampTargetResponse=} [properties] Properties to set
             * @returns {wm.protobuf.LoadStampTargetResponse} LoadStampTargetResponse instance
             */
            LoadStampTargetResponse.create = function create(properties) {
                return new LoadStampTargetResponse(properties);
            };

            /**
             * Encodes the specified LoadStampTargetResponse message. Does not implicitly {@link wm.protobuf.LoadStampTargetResponse.verify|verify} messages.
             * @function encode
             * @memberof wm.protobuf.LoadStampTargetResponse
             * @static
             * @param {wm.protobuf.ILoadStampTargetResponse} message LoadStampTargetResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LoadStampTargetResponse.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
                if (message.cars != null && message.cars.length)
                    for (let i = 0; i < message.cars.length; ++i)
                        $root.wm.protobuf.StampTargetCar.encode(message.cars[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                if (message.challengers != null && message.challengers.length)
                    for (let i = 0; i < message.challengers.length; ++i)
                        $root.wm.protobuf.ChallengerCar.encode(message.challengers[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified LoadStampTargetResponse message, length delimited. Does not implicitly {@link wm.protobuf.LoadStampTargetResponse.verify|verify} messages.
             * @function encodeDelimited
             * @memberof wm.protobuf.LoadStampTargetResponse
             * @static
             * @param {wm.protobuf.ILoadStampTargetResponse} message LoadStampTargetResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LoadStampTargetResponse.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a LoadStampTargetResponse message from the specified reader or buffer.
             * @function decode
             * @memberof wm.protobuf.LoadStampTargetResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {wm.protobuf.LoadStampTargetResponse} LoadStampTargetResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LoadStampTargetResponse.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.wm.protobuf.LoadStampTargetResponse();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.error = reader.int32();
                            break;
                        }
                    case 2: {
                            if (!(message.cars && message.cars.length))
                                message.cars = [];
                            message.cars.push($root.wm.protobuf.StampTargetCar.decode(reader, reader.uint32()));
                            break;
                        }
                    case 3: {
                            if (!(message.challengers && message.challengers.length))
                                message.challengers = [];
                            message.challengers.push($root.wm.protobuf.ChallengerCar.decode(reader, reader.uint32()));
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("error"))
                    throw $util.ProtocolError("missing required 'error'", { instance: message });
                return message;
            };

            /**
             * Decodes a LoadStampTargetResponse message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof wm.protobuf.LoadStampTargetResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {wm.protobuf.LoadStampTargetResponse} LoadStampTargetResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LoadStampTargetResponse.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a LoadStampTargetResponse message.
             * @function verify
             * @memberof wm.protobuf.LoadStampTargetResponse
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            LoadStampTargetResponse.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                switch (message.error) {
                default:
                    return "error: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 7:
                case 9:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 16:
                case 17:
                case 18:
                case 19:
                    break;
                }
                if (message.cars != null && message.hasOwnProperty("cars")) {
                    if (!Array.isArray(message.cars))
                        return "cars: array expected";
                    for (let i = 0; i < message.cars.length; ++i) {
                        let error = $root.wm.protobuf.StampTargetCar.verify(message.cars[i]);
                        if (error)
                            return "cars." + error;
                    }
                }
                if (message.challengers != null && message.hasOwnProperty("challengers")) {
                    if (!Array.isArray(message.challengers))
                        return "challengers: array expected";
                    for (let i = 0; i < message.challengers.length; ++i) {
                        let error = $root.wm.protobuf.ChallengerCar.verify(message.challengers[i]);
                        if (error)
                            return "challengers." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a LoadStampTargetResponse message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof wm.protobuf.LoadStampTargetResponse
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {wm.protobuf.LoadStampTargetResponse} LoadStampTargetResponse
             */
            LoadStampTargetResponse.fromObject = function fromObject(object) {
                if (object instanceof $root.wm.protobuf.LoadStampTargetResponse)
                    return object;
                let message = new $root.wm.protobuf.LoadStampTargetResponse();
                switch (object.error) {
                default:
                    if (typeof object.error === "number") {
                        message.error = object.error;
                        break;
                    }
                    break;
                case "ERR_SUCCESS":
                case 0:
                    message.error = 0;
                    break;
                case "ERR_REQUEST":
                case 1:
                    message.error = 1;
                    break;
                case "ERR_NOT_FOUND":
                case 2:
                    message.error = 2;
                    break;
                case "ERR_ID_SERVER":
                case 3:
                    message.error = 3;
                    break;
                case "ERR_ID_BANNED":
                case 4:
                    message.error = 4;
                    break;
                case "ERR_USER_LOCKED":
                case 5:
                    message.error = 5;
                    break;
                case "ERR_USER_VERSION":
                case 6:
                    message.error = 6;
                    break;
                case "ERR_NAME_CONFLICTED":
                case 7:
                    message.error = 7;
                    break;
                case "ERR_FORBIDDEN":
                case 9:
                    message.error = 9;
                    break;
                case "ERR_USER_SUCCEEDED":
                case 11:
                    message.error = 11;
                    break;
                case "ERR_BEING_TRANSFERRED":
                case 12:
                    message.error = 12;
                    break;
                case "ERR_SCRATCH_LOCKED":
                case 13:
                    message.error = 13;
                    break;
                case "ERR_BINGO_REVENGE_LOCKED":
                case 14:
                    message.error = 14;
                    break;
                case "ERR_BINGO_ALREDY_LINKED":
                case 15:
                    message.error = 15;
                    break;
                case "ERR_BINGO_FINISHED":
                case 16:
                    message.error = 16;
                    break;
                case "ERR_BINGO_REACHED_MAX_USER":
                case 17:
                    message.error = 17;
                    break;
                case "ERR_CAR_NOT_FOUND":
                case 18:
                    message.error = 18;
                    break;
                case "ERR_BINGO_CARD_NOT_FOUND":
                case 19:
                    message.error = 19;
                    break;
                }
                if (object.cars) {
                    if (!Array.isArray(object.cars))
                        throw TypeError(".wm.protobuf.LoadStampTargetResponse.cars: array expected");
                    message.cars = [];
                    for (let i = 0; i < object.cars.length; ++i) {
                        if (typeof object.cars[i] !== "object")
                            throw TypeError(".wm.protobuf.LoadStampTargetResponse.cars: object expected");
                        message.cars[i] = $root.wm.protobuf.StampTargetCar.fromObject(object.cars[i]);
                    }
                }
                if (object.challengers) {
                    if (!Array.isArray(object.challengers))
                        throw TypeError(".wm.protobuf.LoadStampTargetResponse.challengers: array expected");
                    message.challengers = [];
                    for (let i = 0; i < object.challengers.length; ++i) {
                        if (typeof object.challengers[i] !== "object")
                            throw TypeError(".wm.protobuf.LoadStampTargetResponse.challengers: object expected");
                        message.challengers[i] = $root.wm.protobuf.ChallengerCar.fromObject(object.challengers[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from a LoadStampTargetResponse message. Also converts values to other types if specified.
             * @function toObject
             * @memberof wm.protobuf.LoadStampTargetResponse
             * @static
             * @param {wm.protobuf.LoadStampTargetResponse} message LoadStampTargetResponse
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            LoadStampTargetResponse.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults) {
                    object.cars = [];
                    object.challengers = [];
                }
                if (options.defaults)
                    object.error = options.enums === String ? "ERR_SUCCESS" : 0;
                if (message.error != null && message.hasOwnProperty("error"))
                    object.error = options.enums === String ? $root.wm.protobuf.ErrorCode[message.error] === undefined ? message.error : $root.wm.protobuf.ErrorCode[message.error] : message.error;
                if (message.cars && message.cars.length) {
                    object.cars = [];
                    for (let j = 0; j < message.cars.length; ++j)
                        object.cars[j] = $root.wm.protobuf.StampTargetCar.toObject(message.cars[j], options);
                }
                if (message.challengers && message.challengers.length) {
                    object.challengers = [];
                    for (let j = 0; j < message.challengers.length; ++j)
                        object.challengers[j] = $root.wm.protobuf.ChallengerCar.toObject(message.challengers[j], options);
                }
                return object;
            };

            /**
             * Converts this LoadStampTargetResponse to JSON.
             * @function toJSON
             * @memberof wm.protobuf.LoadStampTargetResponse
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            LoadStampTargetResponse.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for LoadStampTargetResponse
             * @function getTypeUrl
             * @memberof wm.protobuf.LoadStampTargetResponse
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            LoadStampTargetResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/wm.protobuf.LoadStampTargetResponse";
            };

            return LoadStampTargetResponse;
        })();

        protobuf.LockStampTargetRequest = (function() {

            /**
             * Properties of a LockStampTargetRequest.
             * @memberof wm.protobuf
             * @interface ILockStampTargetRequest
             * @property {number} carId LockStampTargetRequest carId
             * @property {Array.<number>|null} [targetCars] LockStampTargetRequest targetCars
             */

            /**
             * Constructs a new LockStampTargetRequest.
             * @memberof wm.protobuf
             * @classdesc Represents a LockStampTargetRequest.
             * @implements ILockStampTargetRequest
             * @constructor
             * @param {wm.protobuf.ILockStampTargetRequest=} [properties] Properties to set
             */
            function LockStampTargetRequest(properties) {
                this.targetCars = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * LockStampTargetRequest carId.
             * @member {number} carId
             * @memberof wm.protobuf.LockStampTargetRequest
             * @instance
             */
            LockStampTargetRequest.prototype.carId = 0;

            /**
             * LockStampTargetRequest targetCars.
             * @member {Array.<number>} targetCars
             * @memberof wm.protobuf.LockStampTargetRequest
             * @instance
             */
            LockStampTargetRequest.prototype.targetCars = $util.emptyArray;

            /**
             * Creates a new LockStampTargetRequest instance using the specified properties.
             * @function create
             * @memberof wm.protobuf.LockStampTargetRequest
             * @static
             * @param {wm.protobuf.ILockStampTargetRequest=} [properties] Properties to set
             * @returns {wm.protobuf.LockStampTargetRequest} LockStampTargetRequest instance
             */
            LockStampTargetRequest.create = function create(properties) {
                return new LockStampTargetRequest(properties);
            };

            /**
             * Encodes the specified LockStampTargetRequest message. Does not implicitly {@link wm.protobuf.LockStampTargetRequest.verify|verify} messages.
             * @function encode
             * @memberof wm.protobuf.LockStampTargetRequest
             * @static
             * @param {wm.protobuf.ILockStampTargetRequest} message LockStampTargetRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LockStampTargetRequest.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.carId);
                if (message.targetCars != null && message.targetCars.length)
                    for (let i = 0; i < message.targetCars.length; ++i)
                        writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.targetCars[i]);
                return writer;
            };

            /**
             * Encodes the specified LockStampTargetRequest message, length delimited. Does not implicitly {@link wm.protobuf.LockStampTargetRequest.verify|verify} messages.
             * @function encodeDelimited
             * @memberof wm.protobuf.LockStampTargetRequest
             * @static
             * @param {wm.protobuf.ILockStampTargetRequest} message LockStampTargetRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LockStampTargetRequest.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a LockStampTargetRequest message from the specified reader or buffer.
             * @function decode
             * @memberof wm.protobuf.LockStampTargetRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {wm.protobuf.LockStampTargetRequest} LockStampTargetRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LockStampTargetRequest.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.wm.protobuf.LockStampTargetRequest();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.carId = reader.uint32();
                            break;
                        }
                    case 2: {
                            if (!(message.targetCars && message.targetCars.length))
                                message.targetCars = [];
                            if ((tag & 7) === 2) {
                                let end2 = reader.uint32() + reader.pos;
                                while (reader.pos < end2)
                                    message.targetCars.push(reader.uint32());
                            } else
                                message.targetCars.push(reader.uint32());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("carId"))
                    throw $util.ProtocolError("missing required 'carId'", { instance: message });
                return message;
            };

            /**
             * Decodes a LockStampTargetRequest message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof wm.protobuf.LockStampTargetRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {wm.protobuf.LockStampTargetRequest} LockStampTargetRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LockStampTargetRequest.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a LockStampTargetRequest message.
             * @function verify
             * @memberof wm.protobuf.LockStampTargetRequest
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            LockStampTargetRequest.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (!$util.isInteger(message.carId))
                    return "carId: integer expected";
                if (message.targetCars != null && message.hasOwnProperty("targetCars")) {
                    if (!Array.isArray(message.targetCars))
                        return "targetCars: array expected";
                    for (let i = 0; i < message.targetCars.length; ++i)
                        if (!$util.isInteger(message.targetCars[i]))
                            return "targetCars: integer[] expected";
                }
                return null;
            };

            /**
             * Creates a LockStampTargetRequest message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof wm.protobuf.LockStampTargetRequest
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {wm.protobuf.LockStampTargetRequest} LockStampTargetRequest
             */
            LockStampTargetRequest.fromObject = function fromObject(object) {
                if (object instanceof $root.wm.protobuf.LockStampTargetRequest)
                    return object;
                let message = new $root.wm.protobuf.LockStampTargetRequest();
                if (object.carId != null)
                    message.carId = object.carId >>> 0;
                if (object.targetCars) {
                    if (!Array.isArray(object.targetCars))
                        throw TypeError(".wm.protobuf.LockStampTargetRequest.targetCars: array expected");
                    message.targetCars = [];
                    for (let i = 0; i < object.targetCars.length; ++i)
                        message.targetCars[i] = object.targetCars[i] >>> 0;
                }
                return message;
            };

            /**
             * Creates a plain object from a LockStampTargetRequest message. Also converts values to other types if specified.
             * @function toObject
             * @memberof wm.protobuf.LockStampTargetRequest
             * @static
             * @param {wm.protobuf.LockStampTargetRequest} message LockStampTargetRequest
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            LockStampTargetRequest.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.targetCars = [];
                if (options.defaults)
                    object.carId = 0;
                if (message.carId != null && message.hasOwnProperty("carId"))
                    object.carId = message.carId;
                if (message.targetCars && message.targetCars.length) {
                    object.targetCars = [];
                    for (let j = 0; j < message.targetCars.length; ++j)
                        object.targetCars[j] = message.targetCars[j];
                }
                return object;
            };

            /**
             * Converts this LockStampTargetRequest to JSON.
             * @function toJSON
             * @memberof wm.protobuf.LockStampTargetRequest
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            LockStampTargetRequest.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for LockStampTargetRequest
             * @function getTypeUrl
             * @memberof wm.protobuf.LockStampTargetRequest
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            LockStampTargetRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/wm.protobuf.LockStampTargetRequest";
            };

            return LockStampTargetRequest;
        })();

        protobuf.LockStampTargetResponse = (function() {

            /**
             * Properties of a LockStampTargetResponse.
             * @memberof wm.protobuf
             * @interface ILockStampTargetResponse
             * @property {wm.protobuf.ErrorCode} error LockStampTargetResponse error
             */

            /**
             * Constructs a new LockStampTargetResponse.
             * @memberof wm.protobuf
             * @classdesc Represents a LockStampTargetResponse.
             * @implements ILockStampTargetResponse
             * @constructor
             * @param {wm.protobuf.ILockStampTargetResponse=} [properties] Properties to set
             */
            function LockStampTargetResponse(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * LockStampTargetResponse error.
             * @member {wm.protobuf.ErrorCode} error
             * @memberof wm.protobuf.LockStampTargetResponse
             * @instance
             */
            LockStampTargetResponse.prototype.error = 0;

            /**
             * Creates a new LockStampTargetResponse instance using the specified properties.
             * @function create
             * @memberof wm.protobuf.LockStampTargetResponse
             * @static
             * @param {wm.protobuf.ILockStampTargetResponse=} [properties] Properties to set
             * @returns {wm.protobuf.LockStampTargetResponse} LockStampTargetResponse instance
             */
            LockStampTargetResponse.create = function create(properties) {
                return new LockStampTargetResponse(properties);
            };

            /**
             * Encodes the specified LockStampTargetResponse message. Does not implicitly {@link wm.protobuf.LockStampTargetResponse.verify|verify} messages.
             * @function encode
             * @memberof wm.protobuf.LockStampTargetResponse
             * @static
             * @param {wm.protobuf.ILockStampTargetResponse} message LockStampTargetResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LockStampTargetResponse.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
                return writer;
            };

            /**
             * Encodes the specified LockStampTargetResponse message, length delimited. Does not implicitly {@link wm.protobuf.LockStampTargetResponse.verify|verify} messages.
             * @function encodeDelimited
             * @memberof wm.protobuf.LockStampTargetResponse
             * @static
             * @param {wm.protobuf.ILockStampTargetResponse} message LockStampTargetResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LockStampTargetResponse.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a LockStampTargetResponse message from the specified reader or buffer.
             * @function decode
             * @memberof wm.protobuf.LockStampTargetResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {wm.protobuf.LockStampTargetResponse} LockStampTargetResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LockStampTargetResponse.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.wm.protobuf.LockStampTargetResponse();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.error = reader.int32();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("error"))
                    throw $util.ProtocolError("missing required 'error'", { instance: message });
                return message;
            };

            /**
             * Decodes a LockStampTargetResponse message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof wm.protobuf.LockStampTargetResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {wm.protobuf.LockStampTargetResponse} LockStampTargetResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LockStampTargetResponse.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a LockStampTargetResponse message.
             * @function verify
             * @memberof wm.protobuf.LockStampTargetResponse
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            LockStampTargetResponse.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                switch (message.error) {
                default:
                    return "error: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 7:
                case 9:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 16:
                case 17:
                case 18:
                case 19:
                    break;
                }
                return null;
            };

            /**
             * Creates a LockStampTargetResponse message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof wm.protobuf.LockStampTargetResponse
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {wm.protobuf.LockStampTargetResponse} LockStampTargetResponse
             */
            LockStampTargetResponse.fromObject = function fromObject(object) {
                if (object instanceof $root.wm.protobuf.LockStampTargetResponse)
                    return object;
                let message = new $root.wm.protobuf.LockStampTargetResponse();
                switch (object.error) {
                default:
                    if (typeof object.error === "number") {
                        message.error = object.error;
                        break;
                    }
                    break;
                case "ERR_SUCCESS":
                case 0:
                    message.error = 0;
                    break;
                case "ERR_REQUEST":
                case 1:
                    message.error = 1;
                    break;
                case "ERR_NOT_FOUND":
                case 2:
                    message.error = 2;
                    break;
                case "ERR_ID_SERVER":
                case 3:
                    message.error = 3;
                    break;
                case "ERR_ID_BANNED":
                case 4:
                    message.error = 4;
                    break;
                case "ERR_USER_LOCKED":
                case 5:
                    message.error = 5;
                    break;
                case "ERR_USER_VERSION":
                case 6:
                    message.error = 6;
                    break;
                case "ERR_NAME_CONFLICTED":
                case 7:
                    message.error = 7;
                    break;
                case "ERR_FORBIDDEN":
                case 9:
                    message.error = 9;
                    break;
                case "ERR_USER_SUCCEEDED":
                case 11:
                    message.error = 11;
                    break;
                case "ERR_BEING_TRANSFERRED":
                case 12:
                    message.error = 12;
                    break;
                case "ERR_SCRATCH_LOCKED":
                case 13:
                    message.error = 13;
                    break;
                case "ERR_BINGO_REVENGE_LOCKED":
                case 14:
                    message.error = 14;
                    break;
                case "ERR_BINGO_ALREDY_LINKED":
                case 15:
                    message.error = 15;
                    break;
                case "ERR_BINGO_FINISHED":
                case 16:
                    message.error = 16;
                    break;
                case "ERR_BINGO_REACHED_MAX_USER":
                case 17:
                    message.error = 17;
                    break;
                case "ERR_CAR_NOT_FOUND":
                case 18:
                    message.error = 18;
                    break;
                case "ERR_BINGO_CARD_NOT_FOUND":
                case 19:
                    message.error = 19;
                    break;
                }
                return message;
            };

            /**
             * Creates a plain object from a LockStampTargetResponse message. Also converts values to other types if specified.
             * @function toObject
             * @memberof wm.protobuf.LockStampTargetResponse
             * @static
             * @param {wm.protobuf.LockStampTargetResponse} message LockStampTargetResponse
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            LockStampTargetResponse.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults)
                    object.error = options.enums === String ? "ERR_SUCCESS" : 0;
                if (message.error != null && message.hasOwnProperty("error"))
                    object.error = options.enums === String ? $root.wm.protobuf.ErrorCode[message.error] === undefined ? message.error : $root.wm.protobuf.ErrorCode[message.error] : message.error;
                return object;
            };

            /**
             * Converts this LockStampTargetResponse to JSON.
             * @function toJSON
             * @memberof wm.protobuf.LockStampTargetResponse
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            LockStampTargetResponse.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for LockStampTargetResponse
             * @function getTypeUrl
             * @memberof wm.protobuf.LockStampTargetResponse
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            LockStampTargetResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/wm.protobuf.LockStampTargetResponse";
            };

            return LockStampTargetResponse;
        })();

        protobuf.LoadGhostCompetitionInfoRequest = (function() {

            /**
             * Properties of a LoadGhostCompetitionInfoRequest.
             * @memberof wm.protobuf
             * @interface ILoadGhostCompetitionInfoRequest
             * @property {number} carId LoadGhostCompetitionInfoRequest carId
             * @property {number} competitionId LoadGhostCompetitionInfoRequest competitionId
             */

            /**
             * Constructs a new LoadGhostCompetitionInfoRequest.
             * @memberof wm.protobuf
             * @classdesc Represents a LoadGhostCompetitionInfoRequest.
             * @implements ILoadGhostCompetitionInfoRequest
             * @constructor
             * @param {wm.protobuf.ILoadGhostCompetitionInfoRequest=} [properties] Properties to set
             */
            function LoadGhostCompetitionInfoRequest(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * LoadGhostCompetitionInfoRequest carId.
             * @member {number} carId
             * @memberof wm.protobuf.LoadGhostCompetitionInfoRequest
             * @instance
             */
            LoadGhostCompetitionInfoRequest.prototype.carId = 0;

            /**
             * LoadGhostCompetitionInfoRequest competitionId.
             * @member {number} competitionId
             * @memberof wm.protobuf.LoadGhostCompetitionInfoRequest
             * @instance
             */
            LoadGhostCompetitionInfoRequest.prototype.competitionId = 0;

            /**
             * Creates a new LoadGhostCompetitionInfoRequest instance using the specified properties.
             * @function create
             * @memberof wm.protobuf.LoadGhostCompetitionInfoRequest
             * @static
             * @param {wm.protobuf.ILoadGhostCompetitionInfoRequest=} [properties] Properties to set
             * @returns {wm.protobuf.LoadGhostCompetitionInfoRequest} LoadGhostCompetitionInfoRequest instance
             */
            LoadGhostCompetitionInfoRequest.create = function create(properties) {
                return new LoadGhostCompetitionInfoRequest(properties);
            };

            /**
             * Encodes the specified LoadGhostCompetitionInfoRequest message. Does not implicitly {@link wm.protobuf.LoadGhostCompetitionInfoRequest.verify|verify} messages.
             * @function encode
             * @memberof wm.protobuf.LoadGhostCompetitionInfoRequest
             * @static
             * @param {wm.protobuf.ILoadGhostCompetitionInfoRequest} message LoadGhostCompetitionInfoRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LoadGhostCompetitionInfoRequest.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.carId);
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.competitionId);
                return writer;
            };

            /**
             * Encodes the specified LoadGhostCompetitionInfoRequest message, length delimited. Does not implicitly {@link wm.protobuf.LoadGhostCompetitionInfoRequest.verify|verify} messages.
             * @function encodeDelimited
             * @memberof wm.protobuf.LoadGhostCompetitionInfoRequest
             * @static
             * @param {wm.protobuf.ILoadGhostCompetitionInfoRequest} message LoadGhostCompetitionInfoRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LoadGhostCompetitionInfoRequest.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a LoadGhostCompetitionInfoRequest message from the specified reader or buffer.
             * @function decode
             * @memberof wm.protobuf.LoadGhostCompetitionInfoRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {wm.protobuf.LoadGhostCompetitionInfoRequest} LoadGhostCompetitionInfoRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LoadGhostCompetitionInfoRequest.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.wm.protobuf.LoadGhostCompetitionInfoRequest();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.carId = reader.uint32();
                            break;
                        }
                    case 2: {
                            message.competitionId = reader.uint32();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("carId"))
                    throw $util.ProtocolError("missing required 'carId'", { instance: message });
                if (!message.hasOwnProperty("competitionId"))
                    throw $util.ProtocolError("missing required 'competitionId'", { instance: message });
                return message;
            };

            /**
             * Decodes a LoadGhostCompetitionInfoRequest message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof wm.protobuf.LoadGhostCompetitionInfoRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {wm.protobuf.LoadGhostCompetitionInfoRequest} LoadGhostCompetitionInfoRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LoadGhostCompetitionInfoRequest.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a LoadGhostCompetitionInfoRequest message.
             * @function verify
             * @memberof wm.protobuf.LoadGhostCompetitionInfoRequest
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            LoadGhostCompetitionInfoRequest.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (!$util.isInteger(message.carId))
                    return "carId: integer expected";
                if (!$util.isInteger(message.competitionId))
                    return "competitionId: integer expected";
                return null;
            };

            /**
             * Creates a LoadGhostCompetitionInfoRequest message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof wm.protobuf.LoadGhostCompetitionInfoRequest
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {wm.protobuf.LoadGhostCompetitionInfoRequest} LoadGhostCompetitionInfoRequest
             */
            LoadGhostCompetitionInfoRequest.fromObject = function fromObject(object) {
                if (object instanceof $root.wm.protobuf.LoadGhostCompetitionInfoRequest)
                    return object;
                let message = new $root.wm.protobuf.LoadGhostCompetitionInfoRequest();
                if (object.carId != null)
                    message.carId = object.carId >>> 0;
                if (object.competitionId != null)
                    message.competitionId = object.competitionId >>> 0;
                return message;
            };

            /**
             * Creates a plain object from a LoadGhostCompetitionInfoRequest message. Also converts values to other types if specified.
             * @function toObject
             * @memberof wm.protobuf.LoadGhostCompetitionInfoRequest
             * @static
             * @param {wm.protobuf.LoadGhostCompetitionInfoRequest} message LoadGhostCompetitionInfoRequest
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            LoadGhostCompetitionInfoRequest.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.carId = 0;
                    object.competitionId = 0;
                }
                if (message.carId != null && message.hasOwnProperty("carId"))
                    object.carId = message.carId;
                if (message.competitionId != null && message.hasOwnProperty("competitionId"))
                    object.competitionId = message.competitionId;
                return object;
            };

            /**
             * Converts this LoadGhostCompetitionInfoRequest to JSON.
             * @function toJSON
             * @memberof wm.protobuf.LoadGhostCompetitionInfoRequest
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            LoadGhostCompetitionInfoRequest.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for LoadGhostCompetitionInfoRequest
             * @function getTypeUrl
             * @memberof wm.protobuf.LoadGhostCompetitionInfoRequest
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            LoadGhostCompetitionInfoRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/wm.protobuf.LoadGhostCompetitionInfoRequest";
            };

            return LoadGhostCompetitionInfoRequest;
        })();

        protobuf.LoadGhostCompetitionInfoResponse = (function() {

            /**
             * Properties of a LoadGhostCompetitionInfoResponse.
             * @memberof wm.protobuf
             * @interface ILoadGhostCompetitionInfoResponse
             * @property {wm.protobuf.ErrorCode} error LoadGhostCompetitionInfoResponse error
             * @property {number|null} [periodId] LoadGhostCompetitionInfoResponse periodId
             * @property {boolean} closed LoadGhostCompetitionInfoResponse closed
             * @property {number|null} [brakingPoint] LoadGhostCompetitionInfoResponse brakingPoint
             * @property {boolean|null} [qualified] LoadGhostCompetitionInfoResponse qualified
             * @property {Array.<number>|null} [topResults] LoadGhostCompetitionInfoResponse topResults
             * @property {number|null} [result] LoadGhostCompetitionInfoResponse result
             * @property {number|null} [rank] LoadGhostCompetitionInfoResponse rank
             * @property {Array.<number>|null} [parameters1] LoadGhostCompetitionInfoResponse parameters1
             * @property {boolean|null} [parameters2] LoadGhostCompetitionInfoResponse parameters2
             */

            /**
             * Constructs a new LoadGhostCompetitionInfoResponse.
             * @memberof wm.protobuf
             * @classdesc Represents a LoadGhostCompetitionInfoResponse.
             * @implements ILoadGhostCompetitionInfoResponse
             * @constructor
             * @param {wm.protobuf.ILoadGhostCompetitionInfoResponse=} [properties] Properties to set
             */
            function LoadGhostCompetitionInfoResponse(properties) {
                this.topResults = [];
                this.parameters1 = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * LoadGhostCompetitionInfoResponse error.
             * @member {wm.protobuf.ErrorCode} error
             * @memberof wm.protobuf.LoadGhostCompetitionInfoResponse
             * @instance
             */
            LoadGhostCompetitionInfoResponse.prototype.error = 0;

            /**
             * LoadGhostCompetitionInfoResponse periodId.
             * @member {number} periodId
             * @memberof wm.protobuf.LoadGhostCompetitionInfoResponse
             * @instance
             */
            LoadGhostCompetitionInfoResponse.prototype.periodId = 0;

            /**
             * LoadGhostCompetitionInfoResponse closed.
             * @member {boolean} closed
             * @memberof wm.protobuf.LoadGhostCompetitionInfoResponse
             * @instance
             */
            LoadGhostCompetitionInfoResponse.prototype.closed = false;

            /**
             * LoadGhostCompetitionInfoResponse brakingPoint.
             * @member {number} brakingPoint
             * @memberof wm.protobuf.LoadGhostCompetitionInfoResponse
             * @instance
             */
            LoadGhostCompetitionInfoResponse.prototype.brakingPoint = 0;

            /**
             * LoadGhostCompetitionInfoResponse qualified.
             * @member {boolean} qualified
             * @memberof wm.protobuf.LoadGhostCompetitionInfoResponse
             * @instance
             */
            LoadGhostCompetitionInfoResponse.prototype.qualified = false;

            /**
             * LoadGhostCompetitionInfoResponse topResults.
             * @member {Array.<number>} topResults
             * @memberof wm.protobuf.LoadGhostCompetitionInfoResponse
             * @instance
             */
            LoadGhostCompetitionInfoResponse.prototype.topResults = $util.emptyArray;

            /**
             * LoadGhostCompetitionInfoResponse result.
             * @member {number} result
             * @memberof wm.protobuf.LoadGhostCompetitionInfoResponse
             * @instance
             */
            LoadGhostCompetitionInfoResponse.prototype.result = 0;

            /**
             * LoadGhostCompetitionInfoResponse rank.
             * @member {number} rank
             * @memberof wm.protobuf.LoadGhostCompetitionInfoResponse
             * @instance
             */
            LoadGhostCompetitionInfoResponse.prototype.rank = 0;

            /**
             * LoadGhostCompetitionInfoResponse parameters1.
             * @member {Array.<number>} parameters1
             * @memberof wm.protobuf.LoadGhostCompetitionInfoResponse
             * @instance
             */
            LoadGhostCompetitionInfoResponse.prototype.parameters1 = $util.emptyArray;

            /**
             * LoadGhostCompetitionInfoResponse parameters2.
             * @member {boolean} parameters2
             * @memberof wm.protobuf.LoadGhostCompetitionInfoResponse
             * @instance
             */
            LoadGhostCompetitionInfoResponse.prototype.parameters2 = false;

            /**
             * Creates a new LoadGhostCompetitionInfoResponse instance using the specified properties.
             * @function create
             * @memberof wm.protobuf.LoadGhostCompetitionInfoResponse
             * @static
             * @param {wm.protobuf.ILoadGhostCompetitionInfoResponse=} [properties] Properties to set
             * @returns {wm.protobuf.LoadGhostCompetitionInfoResponse} LoadGhostCompetitionInfoResponse instance
             */
            LoadGhostCompetitionInfoResponse.create = function create(properties) {
                return new LoadGhostCompetitionInfoResponse(properties);
            };

            /**
             * Encodes the specified LoadGhostCompetitionInfoResponse message. Does not implicitly {@link wm.protobuf.LoadGhostCompetitionInfoResponse.verify|verify} messages.
             * @function encode
             * @memberof wm.protobuf.LoadGhostCompetitionInfoResponse
             * @static
             * @param {wm.protobuf.ILoadGhostCompetitionInfoResponse} message LoadGhostCompetitionInfoResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LoadGhostCompetitionInfoResponse.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
                if (message.periodId != null && Object.hasOwnProperty.call(message, "periodId"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.periodId);
                writer.uint32(/* id 3, wireType 0 =*/24).bool(message.closed);
                if (message.brakingPoint != null && Object.hasOwnProperty.call(message, "brakingPoint"))
                    writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.brakingPoint);
                if (message.qualified != null && Object.hasOwnProperty.call(message, "qualified"))
                    writer.uint32(/* id 5, wireType 0 =*/40).bool(message.qualified);
                if (message.topResults != null && message.topResults.length)
                    for (let i = 0; i < message.topResults.length; ++i)
                        writer.uint32(/* id 6, wireType 0 =*/48).sint32(message.topResults[i]);
                if (message.result != null && Object.hasOwnProperty.call(message, "result"))
                    writer.uint32(/* id 7, wireType 0 =*/56).sint32(message.result);
                if (message.rank != null && Object.hasOwnProperty.call(message, "rank"))
                    writer.uint32(/* id 8, wireType 0 =*/64).uint32(message.rank);
                if (message.parameters1 != null && message.parameters1.length)
                    for (let i = 0; i < message.parameters1.length; ++i)
                        writer.uint32(/* id 9, wireType 5 =*/77).float(message.parameters1[i]);
                if (message.parameters2 != null && Object.hasOwnProperty.call(message, "parameters2"))
                    writer.uint32(/* id 10, wireType 0 =*/80).bool(message.parameters2);
                return writer;
            };

            /**
             * Encodes the specified LoadGhostCompetitionInfoResponse message, length delimited. Does not implicitly {@link wm.protobuf.LoadGhostCompetitionInfoResponse.verify|verify} messages.
             * @function encodeDelimited
             * @memberof wm.protobuf.LoadGhostCompetitionInfoResponse
             * @static
             * @param {wm.protobuf.ILoadGhostCompetitionInfoResponse} message LoadGhostCompetitionInfoResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LoadGhostCompetitionInfoResponse.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a LoadGhostCompetitionInfoResponse message from the specified reader or buffer.
             * @function decode
             * @memberof wm.protobuf.LoadGhostCompetitionInfoResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {wm.protobuf.LoadGhostCompetitionInfoResponse} LoadGhostCompetitionInfoResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LoadGhostCompetitionInfoResponse.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.wm.protobuf.LoadGhostCompetitionInfoResponse();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.error = reader.int32();
                            break;
                        }
                    case 2: {
                            message.periodId = reader.uint32();
                            break;
                        }
                    case 3: {
                            message.closed = reader.bool();
                            break;
                        }
                    case 4: {
                            message.brakingPoint = reader.uint32();
                            break;
                        }
                    case 5: {
                            message.qualified = reader.bool();
                            break;
                        }
                    case 6: {
                            if (!(message.topResults && message.topResults.length))
                                message.topResults = [];
                            if ((tag & 7) === 2) {
                                let end2 = reader.uint32() + reader.pos;
                                while (reader.pos < end2)
                                    message.topResults.push(reader.sint32());
                            } else
                                message.topResults.push(reader.sint32());
                            break;
                        }
                    case 7: {
                            message.result = reader.sint32();
                            break;
                        }
                    case 8: {
                            message.rank = reader.uint32();
                            break;
                        }
                    case 9: {
                            if (!(message.parameters1 && message.parameters1.length))
                                message.parameters1 = [];
                            if ((tag & 7) === 2) {
                                let end2 = reader.uint32() + reader.pos;
                                while (reader.pos < end2)
                                    message.parameters1.push(reader.float());
                            } else
                                message.parameters1.push(reader.float());
                            break;
                        }
                    case 10: {
                            message.parameters2 = reader.bool();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("error"))
                    throw $util.ProtocolError("missing required 'error'", { instance: message });
                if (!message.hasOwnProperty("closed"))
                    throw $util.ProtocolError("missing required 'closed'", { instance: message });
                return message;
            };

            /**
             * Decodes a LoadGhostCompetitionInfoResponse message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof wm.protobuf.LoadGhostCompetitionInfoResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {wm.protobuf.LoadGhostCompetitionInfoResponse} LoadGhostCompetitionInfoResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LoadGhostCompetitionInfoResponse.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a LoadGhostCompetitionInfoResponse message.
             * @function verify
             * @memberof wm.protobuf.LoadGhostCompetitionInfoResponse
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            LoadGhostCompetitionInfoResponse.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                switch (message.error) {
                default:
                    return "error: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 7:
                case 9:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 16:
                case 17:
                case 18:
                case 19:
                    break;
                }
                if (message.periodId != null && message.hasOwnProperty("periodId"))
                    if (!$util.isInteger(message.periodId))
                        return "periodId: integer expected";
                if (typeof message.closed !== "boolean")
                    return "closed: boolean expected";
                if (message.brakingPoint != null && message.hasOwnProperty("brakingPoint"))
                    if (!$util.isInteger(message.brakingPoint))
                        return "brakingPoint: integer expected";
                if (message.qualified != null && message.hasOwnProperty("qualified"))
                    if (typeof message.qualified !== "boolean")
                        return "qualified: boolean expected";
                if (message.topResults != null && message.hasOwnProperty("topResults")) {
                    if (!Array.isArray(message.topResults))
                        return "topResults: array expected";
                    for (let i = 0; i < message.topResults.length; ++i)
                        if (!$util.isInteger(message.topResults[i]))
                            return "topResults: integer[] expected";
                }
                if (message.result != null && message.hasOwnProperty("result"))
                    if (!$util.isInteger(message.result))
                        return "result: integer expected";
                if (message.rank != null && message.hasOwnProperty("rank"))
                    if (!$util.isInteger(message.rank))
                        return "rank: integer expected";
                if (message.parameters1 != null && message.hasOwnProperty("parameters1")) {
                    if (!Array.isArray(message.parameters1))
                        return "parameters1: array expected";
                    for (let i = 0; i < message.parameters1.length; ++i)
                        if (typeof message.parameters1[i] !== "number")
                            return "parameters1: number[] expected";
                }
                if (message.parameters2 != null && message.hasOwnProperty("parameters2"))
                    if (typeof message.parameters2 !== "boolean")
                        return "parameters2: boolean expected";
                return null;
            };

            /**
             * Creates a LoadGhostCompetitionInfoResponse message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof wm.protobuf.LoadGhostCompetitionInfoResponse
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {wm.protobuf.LoadGhostCompetitionInfoResponse} LoadGhostCompetitionInfoResponse
             */
            LoadGhostCompetitionInfoResponse.fromObject = function fromObject(object) {
                if (object instanceof $root.wm.protobuf.LoadGhostCompetitionInfoResponse)
                    return object;
                let message = new $root.wm.protobuf.LoadGhostCompetitionInfoResponse();
                switch (object.error) {
                default:
                    if (typeof object.error === "number") {
                        message.error = object.error;
                        break;
                    }
                    break;
                case "ERR_SUCCESS":
                case 0:
                    message.error = 0;
                    break;
                case "ERR_REQUEST":
                case 1:
                    message.error = 1;
                    break;
                case "ERR_NOT_FOUND":
                case 2:
                    message.error = 2;
                    break;
                case "ERR_ID_SERVER":
                case 3:
                    message.error = 3;
                    break;
                case "ERR_ID_BANNED":
                case 4:
                    message.error = 4;
                    break;
                case "ERR_USER_LOCKED":
                case 5:
                    message.error = 5;
                    break;
                case "ERR_USER_VERSION":
                case 6:
                    message.error = 6;
                    break;
                case "ERR_NAME_CONFLICTED":
                case 7:
                    message.error = 7;
                    break;
                case "ERR_FORBIDDEN":
                case 9:
                    message.error = 9;
                    break;
                case "ERR_USER_SUCCEEDED":
                case 11:
                    message.error = 11;
                    break;
                case "ERR_BEING_TRANSFERRED":
                case 12:
                    message.error = 12;
                    break;
                case "ERR_SCRATCH_LOCKED":
                case 13:
                    message.error = 13;
                    break;
                case "ERR_BINGO_REVENGE_LOCKED":
                case 14:
                    message.error = 14;
                    break;
                case "ERR_BINGO_ALREDY_LINKED":
                case 15:
                    message.error = 15;
                    break;
                case "ERR_BINGO_FINISHED":
                case 16:
                    message.error = 16;
                    break;
                case "ERR_BINGO_REACHED_MAX_USER":
                case 17:
                    message.error = 17;
                    break;
                case "ERR_CAR_NOT_FOUND":
                case 18:
                    message.error = 18;
                    break;
                case "ERR_BINGO_CARD_NOT_FOUND":
                case 19:
                    message.error = 19;
                    break;
                }
                if (object.periodId != null)
                    message.periodId = object.periodId >>> 0;
                if (object.closed != null)
                    message.closed = Boolean(object.closed);
                if (object.brakingPoint != null)
                    message.brakingPoint = object.brakingPoint >>> 0;
                if (object.qualified != null)
                    message.qualified = Boolean(object.qualified);
                if (object.topResults) {
                    if (!Array.isArray(object.topResults))
                        throw TypeError(".wm.protobuf.LoadGhostCompetitionInfoResponse.topResults: array expected");
                    message.topResults = [];
                    for (let i = 0; i < object.topResults.length; ++i)
                        message.topResults[i] = object.topResults[i] | 0;
                }
                if (object.result != null)
                    message.result = object.result | 0;
                if (object.rank != null)
                    message.rank = object.rank >>> 0;
                if (object.parameters1) {
                    if (!Array.isArray(object.parameters1))
                        throw TypeError(".wm.protobuf.LoadGhostCompetitionInfoResponse.parameters1: array expected");
                    message.parameters1 = [];
                    for (let i = 0; i < object.parameters1.length; ++i)
                        message.parameters1[i] = Number(object.parameters1[i]);
                }
                if (object.parameters2 != null)
                    message.parameters2 = Boolean(object.parameters2);
                return message;
            };

            /**
             * Creates a plain object from a LoadGhostCompetitionInfoResponse message. Also converts values to other types if specified.
             * @function toObject
             * @memberof wm.protobuf.LoadGhostCompetitionInfoResponse
             * @static
             * @param {wm.protobuf.LoadGhostCompetitionInfoResponse} message LoadGhostCompetitionInfoResponse
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            LoadGhostCompetitionInfoResponse.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults) {
                    object.topResults = [];
                    object.parameters1 = [];
                }
                if (options.defaults) {
                    object.error = options.enums === String ? "ERR_SUCCESS" : 0;
                    object.periodId = 0;
                    object.closed = false;
                    object.brakingPoint = 0;
                    object.qualified = false;
                    object.result = 0;
                    object.rank = 0;
                    object.parameters2 = false;
                }
                if (message.error != null && message.hasOwnProperty("error"))
                    object.error = options.enums === String ? $root.wm.protobuf.ErrorCode[message.error] === undefined ? message.error : $root.wm.protobuf.ErrorCode[message.error] : message.error;
                if (message.periodId != null && message.hasOwnProperty("periodId"))
                    object.periodId = message.periodId;
                if (message.closed != null && message.hasOwnProperty("closed"))
                    object.closed = message.closed;
                if (message.brakingPoint != null && message.hasOwnProperty("brakingPoint"))
                    object.brakingPoint = message.brakingPoint;
                if (message.qualified != null && message.hasOwnProperty("qualified"))
                    object.qualified = message.qualified;
                if (message.topResults && message.topResults.length) {
                    object.topResults = [];
                    for (let j = 0; j < message.topResults.length; ++j)
                        object.topResults[j] = message.topResults[j];
                }
                if (message.result != null && message.hasOwnProperty("result"))
                    object.result = message.result;
                if (message.rank != null && message.hasOwnProperty("rank"))
                    object.rank = message.rank;
                if (message.parameters1 && message.parameters1.length) {
                    object.parameters1 = [];
                    for (let j = 0; j < message.parameters1.length; ++j)
                        object.parameters1[j] = options.json && !isFinite(message.parameters1[j]) ? String(message.parameters1[j]) : message.parameters1[j];
                }
                if (message.parameters2 != null && message.hasOwnProperty("parameters2"))
                    object.parameters2 = message.parameters2;
                return object;
            };

            /**
             * Converts this LoadGhostCompetitionInfoResponse to JSON.
             * @function toJSON
             * @memberof wm.protobuf.LoadGhostCompetitionInfoResponse
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            LoadGhostCompetitionInfoResponse.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for LoadGhostCompetitionInfoResponse
             * @function getTypeUrl
             * @memberof wm.protobuf.LoadGhostCompetitionInfoResponse
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            LoadGhostCompetitionInfoResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/wm.protobuf.LoadGhostCompetitionInfoResponse";
            };

            return LoadGhostCompetitionInfoResponse;
        })();

        protobuf.LoadGhostKoshienInfoRequest = (function() {

            /**
             * Properties of a LoadGhostKoshienInfoRequest.
             * @memberof wm.protobuf
             * @interface ILoadGhostKoshienInfoRequest
             * @property {number} carId LoadGhostKoshienInfoRequest carId
             * @property {number} koshienId LoadGhostKoshienInfoRequest koshienId
             * @property {string} placeId LoadGhostKoshienInfoRequest placeId
             */

            /**
             * Constructs a new LoadGhostKoshienInfoRequest.
             * @memberof wm.protobuf
             * @classdesc Represents a LoadGhostKoshienInfoRequest.
             * @implements ILoadGhostKoshienInfoRequest
             * @constructor
             * @param {wm.protobuf.ILoadGhostKoshienInfoRequest=} [properties] Properties to set
             */
            function LoadGhostKoshienInfoRequest(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * LoadGhostKoshienInfoRequest carId.
             * @member {number} carId
             * @memberof wm.protobuf.LoadGhostKoshienInfoRequest
             * @instance
             */
            LoadGhostKoshienInfoRequest.prototype.carId = 0;

            /**
             * LoadGhostKoshienInfoRequest koshienId.
             * @member {number} koshienId
             * @memberof wm.protobuf.LoadGhostKoshienInfoRequest
             * @instance
             */
            LoadGhostKoshienInfoRequest.prototype.koshienId = 0;

            /**
             * LoadGhostKoshienInfoRequest placeId.
             * @member {string} placeId
             * @memberof wm.protobuf.LoadGhostKoshienInfoRequest
             * @instance
             */
            LoadGhostKoshienInfoRequest.prototype.placeId = "";

            /**
             * Creates a new LoadGhostKoshienInfoRequest instance using the specified properties.
             * @function create
             * @memberof wm.protobuf.LoadGhostKoshienInfoRequest
             * @static
             * @param {wm.protobuf.ILoadGhostKoshienInfoRequest=} [properties] Properties to set
             * @returns {wm.protobuf.LoadGhostKoshienInfoRequest} LoadGhostKoshienInfoRequest instance
             */
            LoadGhostKoshienInfoRequest.create = function create(properties) {
                return new LoadGhostKoshienInfoRequest(properties);
            };

            /**
             * Encodes the specified LoadGhostKoshienInfoRequest message. Does not implicitly {@link wm.protobuf.LoadGhostKoshienInfoRequest.verify|verify} messages.
             * @function encode
             * @memberof wm.protobuf.LoadGhostKoshienInfoRequest
             * @static
             * @param {wm.protobuf.ILoadGhostKoshienInfoRequest} message LoadGhostKoshienInfoRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LoadGhostKoshienInfoRequest.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.carId);
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.koshienId);
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.placeId);
                return writer;
            };

            /**
             * Encodes the specified LoadGhostKoshienInfoRequest message, length delimited. Does not implicitly {@link wm.protobuf.LoadGhostKoshienInfoRequest.verify|verify} messages.
             * @function encodeDelimited
             * @memberof wm.protobuf.LoadGhostKoshienInfoRequest
             * @static
             * @param {wm.protobuf.ILoadGhostKoshienInfoRequest} message LoadGhostKoshienInfoRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LoadGhostKoshienInfoRequest.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a LoadGhostKoshienInfoRequest message from the specified reader or buffer.
             * @function decode
             * @memberof wm.protobuf.LoadGhostKoshienInfoRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {wm.protobuf.LoadGhostKoshienInfoRequest} LoadGhostKoshienInfoRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LoadGhostKoshienInfoRequest.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.wm.protobuf.LoadGhostKoshienInfoRequest();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.carId = reader.uint32();
                            break;
                        }
                    case 2: {
                            message.koshienId = reader.uint32();
                            break;
                        }
                    case 3: {
                            message.placeId = reader.string();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("carId"))
                    throw $util.ProtocolError("missing required 'carId'", { instance: message });
                if (!message.hasOwnProperty("koshienId"))
                    throw $util.ProtocolError("missing required 'koshienId'", { instance: message });
                if (!message.hasOwnProperty("placeId"))
                    throw $util.ProtocolError("missing required 'placeId'", { instance: message });
                return message;
            };

            /**
             * Decodes a LoadGhostKoshienInfoRequest message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof wm.protobuf.LoadGhostKoshienInfoRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {wm.protobuf.LoadGhostKoshienInfoRequest} LoadGhostKoshienInfoRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LoadGhostKoshienInfoRequest.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a LoadGhostKoshienInfoRequest message.
             * @function verify
             * @memberof wm.protobuf.LoadGhostKoshienInfoRequest
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            LoadGhostKoshienInfoRequest.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (!$util.isInteger(message.carId))
                    return "carId: integer expected";
                if (!$util.isInteger(message.koshienId))
                    return "koshienId: integer expected";
                if (!$util.isString(message.placeId))
                    return "placeId: string expected";
                return null;
            };

            /**
             * Creates a LoadGhostKoshienInfoRequest message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof wm.protobuf.LoadGhostKoshienInfoRequest
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {wm.protobuf.LoadGhostKoshienInfoRequest} LoadGhostKoshienInfoRequest
             */
            LoadGhostKoshienInfoRequest.fromObject = function fromObject(object) {
                if (object instanceof $root.wm.protobuf.LoadGhostKoshienInfoRequest)
                    return object;
                let message = new $root.wm.protobuf.LoadGhostKoshienInfoRequest();
                if (object.carId != null)
                    message.carId = object.carId >>> 0;
                if (object.koshienId != null)
                    message.koshienId = object.koshienId >>> 0;
                if (object.placeId != null)
                    message.placeId = String(object.placeId);
                return message;
            };

            /**
             * Creates a plain object from a LoadGhostKoshienInfoRequest message. Also converts values to other types if specified.
             * @function toObject
             * @memberof wm.protobuf.LoadGhostKoshienInfoRequest
             * @static
             * @param {wm.protobuf.LoadGhostKoshienInfoRequest} message LoadGhostKoshienInfoRequest
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            LoadGhostKoshienInfoRequest.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.carId = 0;
                    object.koshienId = 0;
                    object.placeId = "";
                }
                if (message.carId != null && message.hasOwnProperty("carId"))
                    object.carId = message.carId;
                if (message.koshienId != null && message.hasOwnProperty("koshienId"))
                    object.koshienId = message.koshienId;
                if (message.placeId != null && message.hasOwnProperty("placeId"))
                    object.placeId = message.placeId;
                return object;
            };

            /**
             * Converts this LoadGhostKoshienInfoRequest to JSON.
             * @function toJSON
             * @memberof wm.protobuf.LoadGhostKoshienInfoRequest
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            LoadGhostKoshienInfoRequest.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for LoadGhostKoshienInfoRequest
             * @function getTypeUrl
             * @memberof wm.protobuf.LoadGhostKoshienInfoRequest
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            LoadGhostKoshienInfoRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/wm.protobuf.LoadGhostKoshienInfoRequest";
            };

            return LoadGhostKoshienInfoRequest;
        })();

        protobuf.LoadGhostKoshienInfoResponse = (function() {

            /**
             * Properties of a LoadGhostKoshienInfoResponse.
             * @memberof wm.protobuf
             * @interface ILoadGhostKoshienInfoResponse
             * @property {wm.protobuf.ErrorCode} error LoadGhostKoshienInfoResponse error
             * @property {number|null} [koshienPeriodId] LoadGhostKoshienInfoResponse koshienPeriodId
             * @property {boolean} closed LoadGhostKoshienInfoResponse closed
             * @property {number|null} [result] LoadGhostKoshienInfoResponse result
             * @property {number|null} [rank] LoadGhostKoshienInfoResponse rank
             * @property {Array.<wm.protobuf.IPlace>|null} [topShop] LoadGhostKoshienInfoResponse topShop
             * @property {Array.<number>|null} [parameters] LoadGhostKoshienInfoResponse parameters
             * @property {boolean} isGhostControl LoadGhostKoshienInfoResponse isGhostControl
             * @property {Array.<number>|null} [topResults] LoadGhostKoshienInfoResponse topResults
             */

            /**
             * Constructs a new LoadGhostKoshienInfoResponse.
             * @memberof wm.protobuf
             * @classdesc Represents a LoadGhostKoshienInfoResponse.
             * @implements ILoadGhostKoshienInfoResponse
             * @constructor
             * @param {wm.protobuf.ILoadGhostKoshienInfoResponse=} [properties] Properties to set
             */
            function LoadGhostKoshienInfoResponse(properties) {
                this.topShop = [];
                this.parameters = [];
                this.topResults = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * LoadGhostKoshienInfoResponse error.
             * @member {wm.protobuf.ErrorCode} error
             * @memberof wm.protobuf.LoadGhostKoshienInfoResponse
             * @instance
             */
            LoadGhostKoshienInfoResponse.prototype.error = 0;

            /**
             * LoadGhostKoshienInfoResponse koshienPeriodId.
             * @member {number} koshienPeriodId
             * @memberof wm.protobuf.LoadGhostKoshienInfoResponse
             * @instance
             */
            LoadGhostKoshienInfoResponse.prototype.koshienPeriodId = 0;

            /**
             * LoadGhostKoshienInfoResponse closed.
             * @member {boolean} closed
             * @memberof wm.protobuf.LoadGhostKoshienInfoResponse
             * @instance
             */
            LoadGhostKoshienInfoResponse.prototype.closed = false;

            /**
             * LoadGhostKoshienInfoResponse result.
             * @member {number} result
             * @memberof wm.protobuf.LoadGhostKoshienInfoResponse
             * @instance
             */
            LoadGhostKoshienInfoResponse.prototype.result = 0;

            /**
             * LoadGhostKoshienInfoResponse rank.
             * @member {number} rank
             * @memberof wm.protobuf.LoadGhostKoshienInfoResponse
             * @instance
             */
            LoadGhostKoshienInfoResponse.prototype.rank = 0;

            /**
             * LoadGhostKoshienInfoResponse topShop.
             * @member {Array.<wm.protobuf.IPlace>} topShop
             * @memberof wm.protobuf.LoadGhostKoshienInfoResponse
             * @instance
             */
            LoadGhostKoshienInfoResponse.prototype.topShop = $util.emptyArray;

            /**
             * LoadGhostKoshienInfoResponse parameters.
             * @member {Array.<number>} parameters
             * @memberof wm.protobuf.LoadGhostKoshienInfoResponse
             * @instance
             */
            LoadGhostKoshienInfoResponse.prototype.parameters = $util.emptyArray;

            /**
             * LoadGhostKoshienInfoResponse isGhostControl.
             * @member {boolean} isGhostControl
             * @memberof wm.protobuf.LoadGhostKoshienInfoResponse
             * @instance
             */
            LoadGhostKoshienInfoResponse.prototype.isGhostControl = false;

            /**
             * LoadGhostKoshienInfoResponse topResults.
             * @member {Array.<number>} topResults
             * @memberof wm.protobuf.LoadGhostKoshienInfoResponse
             * @instance
             */
            LoadGhostKoshienInfoResponse.prototype.topResults = $util.emptyArray;

            /**
             * Creates a new LoadGhostKoshienInfoResponse instance using the specified properties.
             * @function create
             * @memberof wm.protobuf.LoadGhostKoshienInfoResponse
             * @static
             * @param {wm.protobuf.ILoadGhostKoshienInfoResponse=} [properties] Properties to set
             * @returns {wm.protobuf.LoadGhostKoshienInfoResponse} LoadGhostKoshienInfoResponse instance
             */
            LoadGhostKoshienInfoResponse.create = function create(properties) {
                return new LoadGhostKoshienInfoResponse(properties);
            };

            /**
             * Encodes the specified LoadGhostKoshienInfoResponse message. Does not implicitly {@link wm.protobuf.LoadGhostKoshienInfoResponse.verify|verify} messages.
             * @function encode
             * @memberof wm.protobuf.LoadGhostKoshienInfoResponse
             * @static
             * @param {wm.protobuf.ILoadGhostKoshienInfoResponse} message LoadGhostKoshienInfoResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LoadGhostKoshienInfoResponse.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
                if (message.koshienPeriodId != null && Object.hasOwnProperty.call(message, "koshienPeriodId"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.koshienPeriodId);
                writer.uint32(/* id 3, wireType 0 =*/24).bool(message.closed);
                if (message.result != null && Object.hasOwnProperty.call(message, "result"))
                    writer.uint32(/* id 5, wireType 0 =*/40).sint32(message.result);
                if (message.rank != null && Object.hasOwnProperty.call(message, "rank"))
                    writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.rank);
                if (message.topShop != null && message.topShop.length)
                    for (let i = 0; i < message.topShop.length; ++i)
                        $root.wm.protobuf.Place.encode(message.topShop[i], writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                if (message.parameters != null && message.parameters.length)
                    for (let i = 0; i < message.parameters.length; ++i)
                        writer.uint32(/* id 9, wireType 5 =*/77).float(message.parameters[i]);
                writer.uint32(/* id 10, wireType 0 =*/80).bool(message.isGhostControl);
                if (message.topResults != null && message.topResults.length)
                    for (let i = 0; i < message.topResults.length; ++i)
                        writer.uint32(/* id 12, wireType 0 =*/96).sint32(message.topResults[i]);
                return writer;
            };

            /**
             * Encodes the specified LoadGhostKoshienInfoResponse message, length delimited. Does not implicitly {@link wm.protobuf.LoadGhostKoshienInfoResponse.verify|verify} messages.
             * @function encodeDelimited
             * @memberof wm.protobuf.LoadGhostKoshienInfoResponse
             * @static
             * @param {wm.protobuf.ILoadGhostKoshienInfoResponse} message LoadGhostKoshienInfoResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LoadGhostKoshienInfoResponse.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a LoadGhostKoshienInfoResponse message from the specified reader or buffer.
             * @function decode
             * @memberof wm.protobuf.LoadGhostKoshienInfoResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {wm.protobuf.LoadGhostKoshienInfoResponse} LoadGhostKoshienInfoResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LoadGhostKoshienInfoResponse.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.wm.protobuf.LoadGhostKoshienInfoResponse();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.error = reader.int32();
                            break;
                        }
                    case 2: {
                            message.koshienPeriodId = reader.uint32();
                            break;
                        }
                    case 3: {
                            message.closed = reader.bool();
                            break;
                        }
                    case 5: {
                            message.result = reader.sint32();
                            break;
                        }
                    case 6: {
                            message.rank = reader.uint32();
                            break;
                        }
                    case 7: {
                            if (!(message.topShop && message.topShop.length))
                                message.topShop = [];
                            message.topShop.push($root.wm.protobuf.Place.decode(reader, reader.uint32()));
                            break;
                        }
                    case 9: {
                            if (!(message.parameters && message.parameters.length))
                                message.parameters = [];
                            if ((tag & 7) === 2) {
                                let end2 = reader.uint32() + reader.pos;
                                while (reader.pos < end2)
                                    message.parameters.push(reader.float());
                            } else
                                message.parameters.push(reader.float());
                            break;
                        }
                    case 10: {
                            message.isGhostControl = reader.bool();
                            break;
                        }
                    case 12: {
                            if (!(message.topResults && message.topResults.length))
                                message.topResults = [];
                            if ((tag & 7) === 2) {
                                let end2 = reader.uint32() + reader.pos;
                                while (reader.pos < end2)
                                    message.topResults.push(reader.sint32());
                            } else
                                message.topResults.push(reader.sint32());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("error"))
                    throw $util.ProtocolError("missing required 'error'", { instance: message });
                if (!message.hasOwnProperty("closed"))
                    throw $util.ProtocolError("missing required 'closed'", { instance: message });
                if (!message.hasOwnProperty("isGhostControl"))
                    throw $util.ProtocolError("missing required 'isGhostControl'", { instance: message });
                return message;
            };

            /**
             * Decodes a LoadGhostKoshienInfoResponse message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof wm.protobuf.LoadGhostKoshienInfoResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {wm.protobuf.LoadGhostKoshienInfoResponse} LoadGhostKoshienInfoResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LoadGhostKoshienInfoResponse.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a LoadGhostKoshienInfoResponse message.
             * @function verify
             * @memberof wm.protobuf.LoadGhostKoshienInfoResponse
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            LoadGhostKoshienInfoResponse.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                switch (message.error) {
                default:
                    return "error: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 7:
                case 9:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 16:
                case 17:
                case 18:
                case 19:
                    break;
                }
                if (message.koshienPeriodId != null && message.hasOwnProperty("koshienPeriodId"))
                    if (!$util.isInteger(message.koshienPeriodId))
                        return "koshienPeriodId: integer expected";
                if (typeof message.closed !== "boolean")
                    return "closed: boolean expected";
                if (message.result != null && message.hasOwnProperty("result"))
                    if (!$util.isInteger(message.result))
                        return "result: integer expected";
                if (message.rank != null && message.hasOwnProperty("rank"))
                    if (!$util.isInteger(message.rank))
                        return "rank: integer expected";
                if (message.topShop != null && message.hasOwnProperty("topShop")) {
                    if (!Array.isArray(message.topShop))
                        return "topShop: array expected";
                    for (let i = 0; i < message.topShop.length; ++i) {
                        let error = $root.wm.protobuf.Place.verify(message.topShop[i]);
                        if (error)
                            return "topShop." + error;
                    }
                }
                if (message.parameters != null && message.hasOwnProperty("parameters")) {
                    if (!Array.isArray(message.parameters))
                        return "parameters: array expected";
                    for (let i = 0; i < message.parameters.length; ++i)
                        if (typeof message.parameters[i] !== "number")
                            return "parameters: number[] expected";
                }
                if (typeof message.isGhostControl !== "boolean")
                    return "isGhostControl: boolean expected";
                if (message.topResults != null && message.hasOwnProperty("topResults")) {
                    if (!Array.isArray(message.topResults))
                        return "topResults: array expected";
                    for (let i = 0; i < message.topResults.length; ++i)
                        if (!$util.isInteger(message.topResults[i]))
                            return "topResults: integer[] expected";
                }
                return null;
            };

            /**
             * Creates a LoadGhostKoshienInfoResponse message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof wm.protobuf.LoadGhostKoshienInfoResponse
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {wm.protobuf.LoadGhostKoshienInfoResponse} LoadGhostKoshienInfoResponse
             */
            LoadGhostKoshienInfoResponse.fromObject = function fromObject(object) {
                if (object instanceof $root.wm.protobuf.LoadGhostKoshienInfoResponse)
                    return object;
                let message = new $root.wm.protobuf.LoadGhostKoshienInfoResponse();
                switch (object.error) {
                default:
                    if (typeof object.error === "number") {
                        message.error = object.error;
                        break;
                    }
                    break;
                case "ERR_SUCCESS":
                case 0:
                    message.error = 0;
                    break;
                case "ERR_REQUEST":
                case 1:
                    message.error = 1;
                    break;
                case "ERR_NOT_FOUND":
                case 2:
                    message.error = 2;
                    break;
                case "ERR_ID_SERVER":
                case 3:
                    message.error = 3;
                    break;
                case "ERR_ID_BANNED":
                case 4:
                    message.error = 4;
                    break;
                case "ERR_USER_LOCKED":
                case 5:
                    message.error = 5;
                    break;
                case "ERR_USER_VERSION":
                case 6:
                    message.error = 6;
                    break;
                case "ERR_NAME_CONFLICTED":
                case 7:
                    message.error = 7;
                    break;
                case "ERR_FORBIDDEN":
                case 9:
                    message.error = 9;
                    break;
                case "ERR_USER_SUCCEEDED":
                case 11:
                    message.error = 11;
                    break;
                case "ERR_BEING_TRANSFERRED":
                case 12:
                    message.error = 12;
                    break;
                case "ERR_SCRATCH_LOCKED":
                case 13:
                    message.error = 13;
                    break;
                case "ERR_BINGO_REVENGE_LOCKED":
                case 14:
                    message.error = 14;
                    break;
                case "ERR_BINGO_ALREDY_LINKED":
                case 15:
                    message.error = 15;
                    break;
                case "ERR_BINGO_FINISHED":
                case 16:
                    message.error = 16;
                    break;
                case "ERR_BINGO_REACHED_MAX_USER":
                case 17:
                    message.error = 17;
                    break;
                case "ERR_CAR_NOT_FOUND":
                case 18:
                    message.error = 18;
                    break;
                case "ERR_BINGO_CARD_NOT_FOUND":
                case 19:
                    message.error = 19;
                    break;
                }
                if (object.koshienPeriodId != null)
                    message.koshienPeriodId = object.koshienPeriodId >>> 0;
                if (object.closed != null)
                    message.closed = Boolean(object.closed);
                if (object.result != null)
                    message.result = object.result | 0;
                if (object.rank != null)
                    message.rank = object.rank >>> 0;
                if (object.topShop) {
                    if (!Array.isArray(object.topShop))
                        throw TypeError(".wm.protobuf.LoadGhostKoshienInfoResponse.topShop: array expected");
                    message.topShop = [];
                    for (let i = 0; i < object.topShop.length; ++i) {
                        if (typeof object.topShop[i] !== "object")
                            throw TypeError(".wm.protobuf.LoadGhostKoshienInfoResponse.topShop: object expected");
                        message.topShop[i] = $root.wm.protobuf.Place.fromObject(object.topShop[i]);
                    }
                }
                if (object.parameters) {
                    if (!Array.isArray(object.parameters))
                        throw TypeError(".wm.protobuf.LoadGhostKoshienInfoResponse.parameters: array expected");
                    message.parameters = [];
                    for (let i = 0; i < object.parameters.length; ++i)
                        message.parameters[i] = Number(object.parameters[i]);
                }
                if (object.isGhostControl != null)
                    message.isGhostControl = Boolean(object.isGhostControl);
                if (object.topResults) {
                    if (!Array.isArray(object.topResults))
                        throw TypeError(".wm.protobuf.LoadGhostKoshienInfoResponse.topResults: array expected");
                    message.topResults = [];
                    for (let i = 0; i < object.topResults.length; ++i)
                        message.topResults[i] = object.topResults[i] | 0;
                }
                return message;
            };

            /**
             * Creates a plain object from a LoadGhostKoshienInfoResponse message. Also converts values to other types if specified.
             * @function toObject
             * @memberof wm.protobuf.LoadGhostKoshienInfoResponse
             * @static
             * @param {wm.protobuf.LoadGhostKoshienInfoResponse} message LoadGhostKoshienInfoResponse
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            LoadGhostKoshienInfoResponse.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults) {
                    object.topShop = [];
                    object.parameters = [];
                    object.topResults = [];
                }
                if (options.defaults) {
                    object.error = options.enums === String ? "ERR_SUCCESS" : 0;
                    object.koshienPeriodId = 0;
                    object.closed = false;
                    object.result = 0;
                    object.rank = 0;
                    object.isGhostControl = false;
                }
                if (message.error != null && message.hasOwnProperty("error"))
                    object.error = options.enums === String ? $root.wm.protobuf.ErrorCode[message.error] === undefined ? message.error : $root.wm.protobuf.ErrorCode[message.error] : message.error;
                if (message.koshienPeriodId != null && message.hasOwnProperty("koshienPeriodId"))
                    object.koshienPeriodId = message.koshienPeriodId;
                if (message.closed != null && message.hasOwnProperty("closed"))
                    object.closed = message.closed;
                if (message.result != null && message.hasOwnProperty("result"))
                    object.result = message.result;
                if (message.rank != null && message.hasOwnProperty("rank"))
                    object.rank = message.rank;
                if (message.topShop && message.topShop.length) {
                    object.topShop = [];
                    for (let j = 0; j < message.topShop.length; ++j)
                        object.topShop[j] = $root.wm.protobuf.Place.toObject(message.topShop[j], options);
                }
                if (message.parameters && message.parameters.length) {
                    object.parameters = [];
                    for (let j = 0; j < message.parameters.length; ++j)
                        object.parameters[j] = options.json && !isFinite(message.parameters[j]) ? String(message.parameters[j]) : message.parameters[j];
                }
                if (message.isGhostControl != null && message.hasOwnProperty("isGhostControl"))
                    object.isGhostControl = message.isGhostControl;
                if (message.topResults && message.topResults.length) {
                    object.topResults = [];
                    for (let j = 0; j < message.topResults.length; ++j)
                        object.topResults[j] = message.topResults[j];
                }
                return object;
            };

            /**
             * Converts this LoadGhostKoshienInfoResponse to JSON.
             * @function toJSON
             * @memberof wm.protobuf.LoadGhostKoshienInfoResponse
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            LoadGhostKoshienInfoResponse.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for LoadGhostKoshienInfoResponse
             * @function getTypeUrl
             * @memberof wm.protobuf.LoadGhostKoshienInfoResponse
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            LoadGhostKoshienInfoResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/wm.protobuf.LoadGhostKoshienInfoResponse";
            };

            return LoadGhostKoshienInfoResponse;
        })();

        protobuf.LoadTimeAttackRecordRequest = (function() {

            /**
             * Properties of a LoadTimeAttackRecordRequest.
             * @memberof wm.protobuf
             * @interface ILoadTimeAttackRecordRequest
             * @property {number|null} [carId] LoadTimeAttackRecordRequest carId
             * @property {number} model LoadTimeAttackRecordRequest model
             * @property {number} course LoadTimeAttackRecordRequest course
             */

            /**
             * Constructs a new LoadTimeAttackRecordRequest.
             * @memberof wm.protobuf
             * @classdesc Represents a LoadTimeAttackRecordRequest.
             * @implements ILoadTimeAttackRecordRequest
             * @constructor
             * @param {wm.protobuf.ILoadTimeAttackRecordRequest=} [properties] Properties to set
             */
            function LoadTimeAttackRecordRequest(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * LoadTimeAttackRecordRequest carId.
             * @member {number} carId
             * @memberof wm.protobuf.LoadTimeAttackRecordRequest
             * @instance
             */
            LoadTimeAttackRecordRequest.prototype.carId = 0;

            /**
             * LoadTimeAttackRecordRequest model.
             * @member {number} model
             * @memberof wm.protobuf.LoadTimeAttackRecordRequest
             * @instance
             */
            LoadTimeAttackRecordRequest.prototype.model = 0;

            /**
             * LoadTimeAttackRecordRequest course.
             * @member {number} course
             * @memberof wm.protobuf.LoadTimeAttackRecordRequest
             * @instance
             */
            LoadTimeAttackRecordRequest.prototype.course = 0;

            /**
             * Creates a new LoadTimeAttackRecordRequest instance using the specified properties.
             * @function create
             * @memberof wm.protobuf.LoadTimeAttackRecordRequest
             * @static
             * @param {wm.protobuf.ILoadTimeAttackRecordRequest=} [properties] Properties to set
             * @returns {wm.protobuf.LoadTimeAttackRecordRequest} LoadTimeAttackRecordRequest instance
             */
            LoadTimeAttackRecordRequest.create = function create(properties) {
                return new LoadTimeAttackRecordRequest(properties);
            };

            /**
             * Encodes the specified LoadTimeAttackRecordRequest message. Does not implicitly {@link wm.protobuf.LoadTimeAttackRecordRequest.verify|verify} messages.
             * @function encode
             * @memberof wm.protobuf.LoadTimeAttackRecordRequest
             * @static
             * @param {wm.protobuf.ILoadTimeAttackRecordRequest} message LoadTimeAttackRecordRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LoadTimeAttackRecordRequest.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.carId != null && Object.hasOwnProperty.call(message, "carId"))
                    writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.carId);
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.model);
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.course);
                return writer;
            };

            /**
             * Encodes the specified LoadTimeAttackRecordRequest message, length delimited. Does not implicitly {@link wm.protobuf.LoadTimeAttackRecordRequest.verify|verify} messages.
             * @function encodeDelimited
             * @memberof wm.protobuf.LoadTimeAttackRecordRequest
             * @static
             * @param {wm.protobuf.ILoadTimeAttackRecordRequest} message LoadTimeAttackRecordRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LoadTimeAttackRecordRequest.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a LoadTimeAttackRecordRequest message from the specified reader or buffer.
             * @function decode
             * @memberof wm.protobuf.LoadTimeAttackRecordRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {wm.protobuf.LoadTimeAttackRecordRequest} LoadTimeAttackRecordRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LoadTimeAttackRecordRequest.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.wm.protobuf.LoadTimeAttackRecordRequest();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.carId = reader.uint32();
                            break;
                        }
                    case 2: {
                            message.model = reader.uint32();
                            break;
                        }
                    case 3: {
                            message.course = reader.uint32();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("model"))
                    throw $util.ProtocolError("missing required 'model'", { instance: message });
                if (!message.hasOwnProperty("course"))
                    throw $util.ProtocolError("missing required 'course'", { instance: message });
                return message;
            };

            /**
             * Decodes a LoadTimeAttackRecordRequest message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof wm.protobuf.LoadTimeAttackRecordRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {wm.protobuf.LoadTimeAttackRecordRequest} LoadTimeAttackRecordRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LoadTimeAttackRecordRequest.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a LoadTimeAttackRecordRequest message.
             * @function verify
             * @memberof wm.protobuf.LoadTimeAttackRecordRequest
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            LoadTimeAttackRecordRequest.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.carId != null && message.hasOwnProperty("carId"))
                    if (!$util.isInteger(message.carId))
                        return "carId: integer expected";
                if (!$util.isInteger(message.model))
                    return "model: integer expected";
                if (!$util.isInteger(message.course))
                    return "course: integer expected";
                return null;
            };

            /**
             * Creates a LoadTimeAttackRecordRequest message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof wm.protobuf.LoadTimeAttackRecordRequest
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {wm.protobuf.LoadTimeAttackRecordRequest} LoadTimeAttackRecordRequest
             */
            LoadTimeAttackRecordRequest.fromObject = function fromObject(object) {
                if (object instanceof $root.wm.protobuf.LoadTimeAttackRecordRequest)
                    return object;
                let message = new $root.wm.protobuf.LoadTimeAttackRecordRequest();
                if (object.carId != null)
                    message.carId = object.carId >>> 0;
                if (object.model != null)
                    message.model = object.model >>> 0;
                if (object.course != null)
                    message.course = object.course >>> 0;
                return message;
            };

            /**
             * Creates a plain object from a LoadTimeAttackRecordRequest message. Also converts values to other types if specified.
             * @function toObject
             * @memberof wm.protobuf.LoadTimeAttackRecordRequest
             * @static
             * @param {wm.protobuf.LoadTimeAttackRecordRequest} message LoadTimeAttackRecordRequest
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            LoadTimeAttackRecordRequest.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.carId = 0;
                    object.model = 0;
                    object.course = 0;
                }
                if (message.carId != null && message.hasOwnProperty("carId"))
                    object.carId = message.carId;
                if (message.model != null && message.hasOwnProperty("model"))
                    object.model = message.model;
                if (message.course != null && message.hasOwnProperty("course"))
                    object.course = message.course;
                return object;
            };

            /**
             * Converts this LoadTimeAttackRecordRequest to JSON.
             * @function toJSON
             * @memberof wm.protobuf.LoadTimeAttackRecordRequest
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            LoadTimeAttackRecordRequest.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for LoadTimeAttackRecordRequest
             * @function getTypeUrl
             * @memberof wm.protobuf.LoadTimeAttackRecordRequest
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            LoadTimeAttackRecordRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/wm.protobuf.LoadTimeAttackRecordRequest";
            };

            return LoadTimeAttackRecordRequest;
        })();

        protobuf.LoadTimeAttackRecordResponse = (function() {

            /**
             * Properties of a LoadTimeAttackRecordResponse.
             * @memberof wm.protobuf
             * @interface ILoadTimeAttackRecordResponse
             * @property {wm.protobuf.ErrorCode} error LoadTimeAttackRecordResponse error
             * @property {Array.<number>|null} [wholeRanking] LoadTimeAttackRecordResponse wholeRanking
             * @property {Array.<number>|null} [modelRanking] LoadTimeAttackRecordResponse modelRanking
             * @property {number|null} [personalBestTime] LoadTimeAttackRecordResponse personalBestTime
             * @property {number|null} [pbSection_1Time] LoadTimeAttackRecordResponse pbSection_1Time
             * @property {number|null} [pbSection_2Time] LoadTimeAttackRecordResponse pbSection_2Time
             * @property {number|null} [pbSection_3Time] LoadTimeAttackRecordResponse pbSection_3Time
             * @property {number|null} [pbSection_4Time] LoadTimeAttackRecordResponse pbSection_4Time
             * @property {number|null} [pbSection_5Time] LoadTimeAttackRecordResponse pbSection_5Time
             * @property {number|null} [pbSection_6Time] LoadTimeAttackRecordResponse pbSection_6Time
             * @property {number|null} [pbSection_7Time] LoadTimeAttackRecordResponse pbSection_7Time
             */

            /**
             * Constructs a new LoadTimeAttackRecordResponse.
             * @memberof wm.protobuf
             * @classdesc Represents a LoadTimeAttackRecordResponse.
             * @implements ILoadTimeAttackRecordResponse
             * @constructor
             * @param {wm.protobuf.ILoadTimeAttackRecordResponse=} [properties] Properties to set
             */
            function LoadTimeAttackRecordResponse(properties) {
                this.wholeRanking = [];
                this.modelRanking = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * LoadTimeAttackRecordResponse error.
             * @member {wm.protobuf.ErrorCode} error
             * @memberof wm.protobuf.LoadTimeAttackRecordResponse
             * @instance
             */
            LoadTimeAttackRecordResponse.prototype.error = 0;

            /**
             * LoadTimeAttackRecordResponse wholeRanking.
             * @member {Array.<number>} wholeRanking
             * @memberof wm.protobuf.LoadTimeAttackRecordResponse
             * @instance
             */
            LoadTimeAttackRecordResponse.prototype.wholeRanking = $util.emptyArray;

            /**
             * LoadTimeAttackRecordResponse modelRanking.
             * @member {Array.<number>} modelRanking
             * @memberof wm.protobuf.LoadTimeAttackRecordResponse
             * @instance
             */
            LoadTimeAttackRecordResponse.prototype.modelRanking = $util.emptyArray;

            /**
             * LoadTimeAttackRecordResponse personalBestTime.
             * @member {number} personalBestTime
             * @memberof wm.protobuf.LoadTimeAttackRecordResponse
             * @instance
             */
            LoadTimeAttackRecordResponse.prototype.personalBestTime = 0;

            /**
             * LoadTimeAttackRecordResponse pbSection_1Time.
             * @member {number} pbSection_1Time
             * @memberof wm.protobuf.LoadTimeAttackRecordResponse
             * @instance
             */
            LoadTimeAttackRecordResponse.prototype.pbSection_1Time = 0;

            /**
             * LoadTimeAttackRecordResponse pbSection_2Time.
             * @member {number} pbSection_2Time
             * @memberof wm.protobuf.LoadTimeAttackRecordResponse
             * @instance
             */
            LoadTimeAttackRecordResponse.prototype.pbSection_2Time = 0;

            /**
             * LoadTimeAttackRecordResponse pbSection_3Time.
             * @member {number} pbSection_3Time
             * @memberof wm.protobuf.LoadTimeAttackRecordResponse
             * @instance
             */
            LoadTimeAttackRecordResponse.prototype.pbSection_3Time = 0;

            /**
             * LoadTimeAttackRecordResponse pbSection_4Time.
             * @member {number} pbSection_4Time
             * @memberof wm.protobuf.LoadTimeAttackRecordResponse
             * @instance
             */
            LoadTimeAttackRecordResponse.prototype.pbSection_4Time = 0;

            /**
             * LoadTimeAttackRecordResponse pbSection_5Time.
             * @member {number} pbSection_5Time
             * @memberof wm.protobuf.LoadTimeAttackRecordResponse
             * @instance
             */
            LoadTimeAttackRecordResponse.prototype.pbSection_5Time = 0;

            /**
             * LoadTimeAttackRecordResponse pbSection_6Time.
             * @member {number} pbSection_6Time
             * @memberof wm.protobuf.LoadTimeAttackRecordResponse
             * @instance
             */
            LoadTimeAttackRecordResponse.prototype.pbSection_6Time = 0;

            /**
             * LoadTimeAttackRecordResponse pbSection_7Time.
             * @member {number} pbSection_7Time
             * @memberof wm.protobuf.LoadTimeAttackRecordResponse
             * @instance
             */
            LoadTimeAttackRecordResponse.prototype.pbSection_7Time = 0;

            /**
             * Creates a new LoadTimeAttackRecordResponse instance using the specified properties.
             * @function create
             * @memberof wm.protobuf.LoadTimeAttackRecordResponse
             * @static
             * @param {wm.protobuf.ILoadTimeAttackRecordResponse=} [properties] Properties to set
             * @returns {wm.protobuf.LoadTimeAttackRecordResponse} LoadTimeAttackRecordResponse instance
             */
            LoadTimeAttackRecordResponse.create = function create(properties) {
                return new LoadTimeAttackRecordResponse(properties);
            };

            /**
             * Encodes the specified LoadTimeAttackRecordResponse message. Does not implicitly {@link wm.protobuf.LoadTimeAttackRecordResponse.verify|verify} messages.
             * @function encode
             * @memberof wm.protobuf.LoadTimeAttackRecordResponse
             * @static
             * @param {wm.protobuf.ILoadTimeAttackRecordResponse} message LoadTimeAttackRecordResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LoadTimeAttackRecordResponse.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
                if (message.wholeRanking != null && message.wholeRanking.length)
                    for (let i = 0; i < message.wholeRanking.length; ++i)
                        writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.wholeRanking[i]);
                if (message.modelRanking != null && message.modelRanking.length)
                    for (let i = 0; i < message.modelRanking.length; ++i)
                        writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.modelRanking[i]);
                if (message.personalBestTime != null && Object.hasOwnProperty.call(message, "personalBestTime"))
                    writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.personalBestTime);
                if (message.pbSection_1Time != null && Object.hasOwnProperty.call(message, "pbSection_1Time"))
                    writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.pbSection_1Time);
                if (message.pbSection_2Time != null && Object.hasOwnProperty.call(message, "pbSection_2Time"))
                    writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.pbSection_2Time);
                if (message.pbSection_3Time != null && Object.hasOwnProperty.call(message, "pbSection_3Time"))
                    writer.uint32(/* id 7, wireType 0 =*/56).uint32(message.pbSection_3Time);
                if (message.pbSection_4Time != null && Object.hasOwnProperty.call(message, "pbSection_4Time"))
                    writer.uint32(/* id 8, wireType 0 =*/64).uint32(message.pbSection_4Time);
                if (message.pbSection_5Time != null && Object.hasOwnProperty.call(message, "pbSection_5Time"))
                    writer.uint32(/* id 9, wireType 0 =*/72).uint32(message.pbSection_5Time);
                if (message.pbSection_6Time != null && Object.hasOwnProperty.call(message, "pbSection_6Time"))
                    writer.uint32(/* id 10, wireType 0 =*/80).uint32(message.pbSection_6Time);
                if (message.pbSection_7Time != null && Object.hasOwnProperty.call(message, "pbSection_7Time"))
                    writer.uint32(/* id 11, wireType 0 =*/88).uint32(message.pbSection_7Time);
                return writer;
            };

            /**
             * Encodes the specified LoadTimeAttackRecordResponse message, length delimited. Does not implicitly {@link wm.protobuf.LoadTimeAttackRecordResponse.verify|verify} messages.
             * @function encodeDelimited
             * @memberof wm.protobuf.LoadTimeAttackRecordResponse
             * @static
             * @param {wm.protobuf.ILoadTimeAttackRecordResponse} message LoadTimeAttackRecordResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LoadTimeAttackRecordResponse.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a LoadTimeAttackRecordResponse message from the specified reader or buffer.
             * @function decode
             * @memberof wm.protobuf.LoadTimeAttackRecordResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {wm.protobuf.LoadTimeAttackRecordResponse} LoadTimeAttackRecordResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LoadTimeAttackRecordResponse.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.wm.protobuf.LoadTimeAttackRecordResponse();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.error = reader.int32();
                            break;
                        }
                    case 2: {
                            if (!(message.wholeRanking && message.wholeRanking.length))
                                message.wholeRanking = [];
                            if ((tag & 7) === 2) {
                                let end2 = reader.uint32() + reader.pos;
                                while (reader.pos < end2)
                                    message.wholeRanking.push(reader.uint32());
                            } else
                                message.wholeRanking.push(reader.uint32());
                            break;
                        }
                    case 3: {
                            if (!(message.modelRanking && message.modelRanking.length))
                                message.modelRanking = [];
                            if ((tag & 7) === 2) {
                                let end2 = reader.uint32() + reader.pos;
                                while (reader.pos < end2)
                                    message.modelRanking.push(reader.uint32());
                            } else
                                message.modelRanking.push(reader.uint32());
                            break;
                        }
                    case 4: {
                            message.personalBestTime = reader.uint32();
                            break;
                        }
                    case 5: {
                            message.pbSection_1Time = reader.uint32();
                            break;
                        }
                    case 6: {
                            message.pbSection_2Time = reader.uint32();
                            break;
                        }
                    case 7: {
                            message.pbSection_3Time = reader.uint32();
                            break;
                        }
                    case 8: {
                            message.pbSection_4Time = reader.uint32();
                            break;
                        }
                    case 9: {
                            message.pbSection_5Time = reader.uint32();
                            break;
                        }
                    case 10: {
                            message.pbSection_6Time = reader.uint32();
                            break;
                        }
                    case 11: {
                            message.pbSection_7Time = reader.uint32();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("error"))
                    throw $util.ProtocolError("missing required 'error'", { instance: message });
                return message;
            };

            /**
             * Decodes a LoadTimeAttackRecordResponse message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof wm.protobuf.LoadTimeAttackRecordResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {wm.protobuf.LoadTimeAttackRecordResponse} LoadTimeAttackRecordResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LoadTimeAttackRecordResponse.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a LoadTimeAttackRecordResponse message.
             * @function verify
             * @memberof wm.protobuf.LoadTimeAttackRecordResponse
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            LoadTimeAttackRecordResponse.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                switch (message.error) {
                default:
                    return "error: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 7:
                case 9:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 16:
                case 17:
                case 18:
                case 19:
                    break;
                }
                if (message.wholeRanking != null && message.hasOwnProperty("wholeRanking")) {
                    if (!Array.isArray(message.wholeRanking))
                        return "wholeRanking: array expected";
                    for (let i = 0; i < message.wholeRanking.length; ++i)
                        if (!$util.isInteger(message.wholeRanking[i]))
                            return "wholeRanking: integer[] expected";
                }
                if (message.modelRanking != null && message.hasOwnProperty("modelRanking")) {
                    if (!Array.isArray(message.modelRanking))
                        return "modelRanking: array expected";
                    for (let i = 0; i < message.modelRanking.length; ++i)
                        if (!$util.isInteger(message.modelRanking[i]))
                            return "modelRanking: integer[] expected";
                }
                if (message.personalBestTime != null && message.hasOwnProperty("personalBestTime"))
                    if (!$util.isInteger(message.personalBestTime))
                        return "personalBestTime: integer expected";
                if (message.pbSection_1Time != null && message.hasOwnProperty("pbSection_1Time"))
                    if (!$util.isInteger(message.pbSection_1Time))
                        return "pbSection_1Time: integer expected";
                if (message.pbSection_2Time != null && message.hasOwnProperty("pbSection_2Time"))
                    if (!$util.isInteger(message.pbSection_2Time))
                        return "pbSection_2Time: integer expected";
                if (message.pbSection_3Time != null && message.hasOwnProperty("pbSection_3Time"))
                    if (!$util.isInteger(message.pbSection_3Time))
                        return "pbSection_3Time: integer expected";
                if (message.pbSection_4Time != null && message.hasOwnProperty("pbSection_4Time"))
                    if (!$util.isInteger(message.pbSection_4Time))
                        return "pbSection_4Time: integer expected";
                if (message.pbSection_5Time != null && message.hasOwnProperty("pbSection_5Time"))
                    if (!$util.isInteger(message.pbSection_5Time))
                        return "pbSection_5Time: integer expected";
                if (message.pbSection_6Time != null && message.hasOwnProperty("pbSection_6Time"))
                    if (!$util.isInteger(message.pbSection_6Time))
                        return "pbSection_6Time: integer expected";
                if (message.pbSection_7Time != null && message.hasOwnProperty("pbSection_7Time"))
                    if (!$util.isInteger(message.pbSection_7Time))
                        return "pbSection_7Time: integer expected";
                return null;
            };

            /**
             * Creates a LoadTimeAttackRecordResponse message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof wm.protobuf.LoadTimeAttackRecordResponse
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {wm.protobuf.LoadTimeAttackRecordResponse} LoadTimeAttackRecordResponse
             */
            LoadTimeAttackRecordResponse.fromObject = function fromObject(object) {
                if (object instanceof $root.wm.protobuf.LoadTimeAttackRecordResponse)
                    return object;
                let message = new $root.wm.protobuf.LoadTimeAttackRecordResponse();
                switch (object.error) {
                default:
                    if (typeof object.error === "number") {
                        message.error = object.error;
                        break;
                    }
                    break;
                case "ERR_SUCCESS":
                case 0:
                    message.error = 0;
                    break;
                case "ERR_REQUEST":
                case 1:
                    message.error = 1;
                    break;
                case "ERR_NOT_FOUND":
                case 2:
                    message.error = 2;
                    break;
                case "ERR_ID_SERVER":
                case 3:
                    message.error = 3;
                    break;
                case "ERR_ID_BANNED":
                case 4:
                    message.error = 4;
                    break;
                case "ERR_USER_LOCKED":
                case 5:
                    message.error = 5;
                    break;
                case "ERR_USER_VERSION":
                case 6:
                    message.error = 6;
                    break;
                case "ERR_NAME_CONFLICTED":
                case 7:
                    message.error = 7;
                    break;
                case "ERR_FORBIDDEN":
                case 9:
                    message.error = 9;
                    break;
                case "ERR_USER_SUCCEEDED":
                case 11:
                    message.error = 11;
                    break;
                case "ERR_BEING_TRANSFERRED":
                case 12:
                    message.error = 12;
                    break;
                case "ERR_SCRATCH_LOCKED":
                case 13:
                    message.error = 13;
                    break;
                case "ERR_BINGO_REVENGE_LOCKED":
                case 14:
                    message.error = 14;
                    break;
                case "ERR_BINGO_ALREDY_LINKED":
                case 15:
                    message.error = 15;
                    break;
                case "ERR_BINGO_FINISHED":
                case 16:
                    message.error = 16;
                    break;
                case "ERR_BINGO_REACHED_MAX_USER":
                case 17:
                    message.error = 17;
                    break;
                case "ERR_CAR_NOT_FOUND":
                case 18:
                    message.error = 18;
                    break;
                case "ERR_BINGO_CARD_NOT_FOUND":
                case 19:
                    message.error = 19;
                    break;
                }
                if (object.wholeRanking) {
                    if (!Array.isArray(object.wholeRanking))
                        throw TypeError(".wm.protobuf.LoadTimeAttackRecordResponse.wholeRanking: array expected");
                    message.wholeRanking = [];
                    for (let i = 0; i < object.wholeRanking.length; ++i)
                        message.wholeRanking[i] = object.wholeRanking[i] >>> 0;
                }
                if (object.modelRanking) {
                    if (!Array.isArray(object.modelRanking))
                        throw TypeError(".wm.protobuf.LoadTimeAttackRecordResponse.modelRanking: array expected");
                    message.modelRanking = [];
                    for (let i = 0; i < object.modelRanking.length; ++i)
                        message.modelRanking[i] = object.modelRanking[i] >>> 0;
                }
                if (object.personalBestTime != null)
                    message.personalBestTime = object.personalBestTime >>> 0;
                if (object.pbSection_1Time != null)
                    message.pbSection_1Time = object.pbSection_1Time >>> 0;
                if (object.pbSection_2Time != null)
                    message.pbSection_2Time = object.pbSection_2Time >>> 0;
                if (object.pbSection_3Time != null)
                    message.pbSection_3Time = object.pbSection_3Time >>> 0;
                if (object.pbSection_4Time != null)
                    message.pbSection_4Time = object.pbSection_4Time >>> 0;
                if (object.pbSection_5Time != null)
                    message.pbSection_5Time = object.pbSection_5Time >>> 0;
                if (object.pbSection_6Time != null)
                    message.pbSection_6Time = object.pbSection_6Time >>> 0;
                if (object.pbSection_7Time != null)
                    message.pbSection_7Time = object.pbSection_7Time >>> 0;
                return message;
            };

            /**
             * Creates a plain object from a LoadTimeAttackRecordResponse message. Also converts values to other types if specified.
             * @function toObject
             * @memberof wm.protobuf.LoadTimeAttackRecordResponse
             * @static
             * @param {wm.protobuf.LoadTimeAttackRecordResponse} message LoadTimeAttackRecordResponse
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            LoadTimeAttackRecordResponse.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults) {
                    object.wholeRanking = [];
                    object.modelRanking = [];
                }
                if (options.defaults) {
                    object.error = options.enums === String ? "ERR_SUCCESS" : 0;
                    object.personalBestTime = 0;
                    object.pbSection_1Time = 0;
                    object.pbSection_2Time = 0;
                    object.pbSection_3Time = 0;
                    object.pbSection_4Time = 0;
                    object.pbSection_5Time = 0;
                    object.pbSection_6Time = 0;
                    object.pbSection_7Time = 0;
                }
                if (message.error != null && message.hasOwnProperty("error"))
                    object.error = options.enums === String ? $root.wm.protobuf.ErrorCode[message.error] === undefined ? message.error : $root.wm.protobuf.ErrorCode[message.error] : message.error;
                if (message.wholeRanking && message.wholeRanking.length) {
                    object.wholeRanking = [];
                    for (let j = 0; j < message.wholeRanking.length; ++j)
                        object.wholeRanking[j] = message.wholeRanking[j];
                }
                if (message.modelRanking && message.modelRanking.length) {
                    object.modelRanking = [];
                    for (let j = 0; j < message.modelRanking.length; ++j)
                        object.modelRanking[j] = message.modelRanking[j];
                }
                if (message.personalBestTime != null && message.hasOwnProperty("personalBestTime"))
                    object.personalBestTime = message.personalBestTime;
                if (message.pbSection_1Time != null && message.hasOwnProperty("pbSection_1Time"))
                    object.pbSection_1Time = message.pbSection_1Time;
                if (message.pbSection_2Time != null && message.hasOwnProperty("pbSection_2Time"))
                    object.pbSection_2Time = message.pbSection_2Time;
                if (message.pbSection_3Time != null && message.hasOwnProperty("pbSection_3Time"))
                    object.pbSection_3Time = message.pbSection_3Time;
                if (message.pbSection_4Time != null && message.hasOwnProperty("pbSection_4Time"))
                    object.pbSection_4Time = message.pbSection_4Time;
                if (message.pbSection_5Time != null && message.hasOwnProperty("pbSection_5Time"))
                    object.pbSection_5Time = message.pbSection_5Time;
                if (message.pbSection_6Time != null && message.hasOwnProperty("pbSection_6Time"))
                    object.pbSection_6Time = message.pbSection_6Time;
                if (message.pbSection_7Time != null && message.hasOwnProperty("pbSection_7Time"))
                    object.pbSection_7Time = message.pbSection_7Time;
                return object;
            };

            /**
             * Converts this LoadTimeAttackRecordResponse to JSON.
             * @function toJSON
             * @memberof wm.protobuf.LoadTimeAttackRecordResponse
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            LoadTimeAttackRecordResponse.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for LoadTimeAttackRecordResponse
             * @function getTypeUrl
             * @memberof wm.protobuf.LoadTimeAttackRecordResponse
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            LoadTimeAttackRecordResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/wm.protobuf.LoadTimeAttackRecordResponse";
            };

            return LoadTimeAttackRecordResponse;
        })();

        protobuf.SaveTerminalResultRequest = (function() {

            /**
             * Properties of a SaveTerminalResultRequest.
             * @memberof wm.protobuf
             * @interface ISaveTerminalResultRequest
             * @property {number} userId SaveTerminalResultRequest userId
             * @property {number} timestamp SaveTerminalResultRequest timestamp
             * @property {Array.<number>|null} [carOrder] SaveTerminalResultRequest carOrder
             * @property {Array.<wm.protobuf.TutorialType>|null} [confirmedTutorials] SaveTerminalResultRequest confirmedTutorials
             * @property {boolean|null} [garageMenuEntered] SaveTerminalResultRequest garageMenuEntered
             */

            /**
             * Constructs a new SaveTerminalResultRequest.
             * @memberof wm.protobuf
             * @classdesc Represents a SaveTerminalResultRequest.
             * @implements ISaveTerminalResultRequest
             * @constructor
             * @param {wm.protobuf.ISaveTerminalResultRequest=} [properties] Properties to set
             */
            function SaveTerminalResultRequest(properties) {
                this.carOrder = [];
                this.confirmedTutorials = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * SaveTerminalResultRequest userId.
             * @member {number} userId
             * @memberof wm.protobuf.SaveTerminalResultRequest
             * @instance
             */
            SaveTerminalResultRequest.prototype.userId = 0;

            /**
             * SaveTerminalResultRequest timestamp.
             * @member {number} timestamp
             * @memberof wm.protobuf.SaveTerminalResultRequest
             * @instance
             */
            SaveTerminalResultRequest.prototype.timestamp = 0;

            /**
             * SaveTerminalResultRequest carOrder.
             * @member {Array.<number>} carOrder
             * @memberof wm.protobuf.SaveTerminalResultRequest
             * @instance
             */
            SaveTerminalResultRequest.prototype.carOrder = $util.emptyArray;

            /**
             * SaveTerminalResultRequest confirmedTutorials.
             * @member {Array.<wm.protobuf.TutorialType>} confirmedTutorials
             * @memberof wm.protobuf.SaveTerminalResultRequest
             * @instance
             */
            SaveTerminalResultRequest.prototype.confirmedTutorials = $util.emptyArray;

            /**
             * SaveTerminalResultRequest garageMenuEntered.
             * @member {boolean} garageMenuEntered
             * @memberof wm.protobuf.SaveTerminalResultRequest
             * @instance
             */
            SaveTerminalResultRequest.prototype.garageMenuEntered = false;

            /**
             * Creates a new SaveTerminalResultRequest instance using the specified properties.
             * @function create
             * @memberof wm.protobuf.SaveTerminalResultRequest
             * @static
             * @param {wm.protobuf.ISaveTerminalResultRequest=} [properties] Properties to set
             * @returns {wm.protobuf.SaveTerminalResultRequest} SaveTerminalResultRequest instance
             */
            SaveTerminalResultRequest.create = function create(properties) {
                return new SaveTerminalResultRequest(properties);
            };

            /**
             * Encodes the specified SaveTerminalResultRequest message. Does not implicitly {@link wm.protobuf.SaveTerminalResultRequest.verify|verify} messages.
             * @function encode
             * @memberof wm.protobuf.SaveTerminalResultRequest
             * @static
             * @param {wm.protobuf.ISaveTerminalResultRequest} message SaveTerminalResultRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SaveTerminalResultRequest.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.userId);
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.timestamp);
                if (message.carOrder != null && message.carOrder.length)
                    for (let i = 0; i < message.carOrder.length; ++i)
                        writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.carOrder[i]);
                if (message.confirmedTutorials != null && message.confirmedTutorials.length)
                    for (let i = 0; i < message.confirmedTutorials.length; ++i)
                        writer.uint32(/* id 5, wireType 0 =*/40).int32(message.confirmedTutorials[i]);
                if (message.garageMenuEntered != null && Object.hasOwnProperty.call(message, "garageMenuEntered"))
                    writer.uint32(/* id 8, wireType 0 =*/64).bool(message.garageMenuEntered);
                return writer;
            };

            /**
             * Encodes the specified SaveTerminalResultRequest message, length delimited. Does not implicitly {@link wm.protobuf.SaveTerminalResultRequest.verify|verify} messages.
             * @function encodeDelimited
             * @memberof wm.protobuf.SaveTerminalResultRequest
             * @static
             * @param {wm.protobuf.ISaveTerminalResultRequest} message SaveTerminalResultRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SaveTerminalResultRequest.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a SaveTerminalResultRequest message from the specified reader or buffer.
             * @function decode
             * @memberof wm.protobuf.SaveTerminalResultRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {wm.protobuf.SaveTerminalResultRequest} SaveTerminalResultRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SaveTerminalResultRequest.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.wm.protobuf.SaveTerminalResultRequest();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.userId = reader.uint32();
                            break;
                        }
                    case 2: {
                            message.timestamp = reader.uint32();
                            break;
                        }
                    case 3: {
                            if (!(message.carOrder && message.carOrder.length))
                                message.carOrder = [];
                            if ((tag & 7) === 2) {
                                let end2 = reader.uint32() + reader.pos;
                                while (reader.pos < end2)
                                    message.carOrder.push(reader.uint32());
                            } else
                                message.carOrder.push(reader.uint32());
                            break;
                        }
                    case 5: {
                            if (!(message.confirmedTutorials && message.confirmedTutorials.length))
                                message.confirmedTutorials = [];
                            if ((tag & 7) === 2) {
                                let end2 = reader.uint32() + reader.pos;
                                while (reader.pos < end2)
                                    message.confirmedTutorials.push(reader.int32());
                            } else
                                message.confirmedTutorials.push(reader.int32());
                            break;
                        }
                    case 8: {
                            message.garageMenuEntered = reader.bool();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("userId"))
                    throw $util.ProtocolError("missing required 'userId'", { instance: message });
                if (!message.hasOwnProperty("timestamp"))
                    throw $util.ProtocolError("missing required 'timestamp'", { instance: message });
                return message;
            };

            /**
             * Decodes a SaveTerminalResultRequest message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof wm.protobuf.SaveTerminalResultRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {wm.protobuf.SaveTerminalResultRequest} SaveTerminalResultRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SaveTerminalResultRequest.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a SaveTerminalResultRequest message.
             * @function verify
             * @memberof wm.protobuf.SaveTerminalResultRequest
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            SaveTerminalResultRequest.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (!$util.isInteger(message.userId))
                    return "userId: integer expected";
                if (!$util.isInteger(message.timestamp))
                    return "timestamp: integer expected";
                if (message.carOrder != null && message.hasOwnProperty("carOrder")) {
                    if (!Array.isArray(message.carOrder))
                        return "carOrder: array expected";
                    for (let i = 0; i < message.carOrder.length; ++i)
                        if (!$util.isInteger(message.carOrder[i]))
                            return "carOrder: integer[] expected";
                }
                if (message.confirmedTutorials != null && message.hasOwnProperty("confirmedTutorials")) {
                    if (!Array.isArray(message.confirmedTutorials))
                        return "confirmedTutorials: array expected";
                    for (let i = 0; i < message.confirmedTutorials.length; ++i)
                        switch (message.confirmedTutorials[i]) {
                        default:
                            return "confirmedTutorials: enum value[] expected";
                        case 0:
                        case 1:
                        case 2:
                        case 3:
                        case 4:
                        case 5:
                        case 6:
                        case 7:
                        case 8:
                        case 9:
                        case 10:
                        case 11:
                        case 12:
                        case 13:
                        case 14:
                        case 15:
                        case 16:
                        case 17:
                        case 18:
                        case 19:
                        case 20:
                        case 21:
                        case 22:
                        case 23:
                        case 24:
                        case 25:
                        case 26:
                        case 27:
                        case 28:
                        case 29:
                        case 30:
                        case 31:
                        case 32:
                        case 33:
                        case 34:
                        case 35:
                        case 36:
                        case 37:
                        case 38:
                        case 39:
                        case 40:
                        case 41:
                        case 42:
                        case 43:
                        case 44:
                        case 45:
                        case 46:
                        case 47:
                        case 48:
                        case 49:
                        case 50:
                        case 51:
                        case 52:
                        case 53:
                        case 54:
                        case 55:
                        case 56:
                        case 57:
                        case 58:
                        case 59:
                        case 60:
                        case 61:
                            break;
                        }
                }
                if (message.garageMenuEntered != null && message.hasOwnProperty("garageMenuEntered"))
                    if (typeof message.garageMenuEntered !== "boolean")
                        return "garageMenuEntered: boolean expected";
                return null;
            };

            /**
             * Creates a SaveTerminalResultRequest message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof wm.protobuf.SaveTerminalResultRequest
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {wm.protobuf.SaveTerminalResultRequest} SaveTerminalResultRequest
             */
            SaveTerminalResultRequest.fromObject = function fromObject(object) {
                if (object instanceof $root.wm.protobuf.SaveTerminalResultRequest)
                    return object;
                let message = new $root.wm.protobuf.SaveTerminalResultRequest();
                if (object.userId != null)
                    message.userId = object.userId >>> 0;
                if (object.timestamp != null)
                    message.timestamp = object.timestamp >>> 0;
                if (object.carOrder) {
                    if (!Array.isArray(object.carOrder))
                        throw TypeError(".wm.protobuf.SaveTerminalResultRequest.carOrder: array expected");
                    message.carOrder = [];
                    for (let i = 0; i < object.carOrder.length; ++i)
                        message.carOrder[i] = object.carOrder[i] >>> 0;
                }
                if (object.confirmedTutorials) {
                    if (!Array.isArray(object.confirmedTutorials))
                        throw TypeError(".wm.protobuf.SaveTerminalResultRequest.confirmedTutorials: array expected");
                    message.confirmedTutorials = [];
                    for (let i = 0; i < object.confirmedTutorials.length; ++i)
                        switch (object.confirmedTutorials[i]) {
                        default:
                            if (typeof object.confirmedTutorials[i] === "number") {
                                message.confirmedTutorials[i] = object.confirmedTutorials[i];
                                break;
                            }
                        case "TUTORIAL_ID_STORY":
                        case 0:
                            message.confirmedTutorials[i] = 0;
                            break;
                        case "TUTORIAL_ID_TIME_ATTACK":
                        case 1:
                            message.confirmedTutorials[i] = 1;
                            break;
                        case "TUTORIAL_ID_GHOST":
                        case 2:
                            message.confirmedTutorials[i] = 2;
                            break;
                        case "TUTORIAL_ID_GHOST_CHALLENGE":
                        case 3:
                            message.confirmedTutorials[i] = 3;
                            break;
                        case "TUTORIAL_ID_UNUSED_4":
                        case 4:
                            message.confirmedTutorials[i] = 4;
                            break;
                        case "TUTORIAL_ID_UNUSED_5":
                        case 5:
                            message.confirmedTutorials[i] = 5;
                            break;
                        case "TUTORIAL_ID_GHOST_SEARCH":
                        case 6:
                            message.confirmedTutorials[i] = 6;
                            break;
                        case "TUTORIAL_ID_GHOST_COMPETITION":
                        case 7:
                            message.confirmedTutorials[i] = 7;
                            break;
                        case "TUTORIAL_ID_HP600_CARD":
                        case 8:
                            message.confirmedTutorials[i] = 8;
                            break;
                        case "TUTORIAL_ID_UNUSED_9":
                        case 9:
                            message.confirmedTutorials[i] = 9;
                            break;
                        case "TUTORIAL_ID_COMPETITION_QUALIFIED":
                        case 10:
                            message.confirmedTutorials[i] = 10;
                            break;
                        case "TUTORIAL_ID_COMPETITION_TERMINAL":
                        case 11:
                            message.confirmedTutorials[i] = 11;
                            break;
                        case "TUTORIAL_ID_COMPETITION_NOTICE":
                        case 12:
                            message.confirmedTutorials[i] = 12;
                            break;
                        case "TUTORIAL_ID_COMPETITION_FINISHED":
                        case 13:
                            message.confirmedTutorials[i] = 13;
                            break;
                        case "TUTORIAL_ID_UNUSED_14":
                        case 14:
                            message.confirmedTutorials[i] = 14;
                            break;
                        case "TUTORIAL_ID_UNUSED_15":
                        case 15:
                            message.confirmedTutorials[i] = 15;
                            break;
                        case "TUTORIAL_ID_UNUSED_16":
                        case 16:
                            message.confirmedTutorials[i] = 16;
                            break;
                        case "TUTORIAL_ID_UNUSED_17":
                        case 17:
                            message.confirmedTutorials[i] = 17;
                            break;
                        case "TUTORIAL_ID_UNUSED_18":
                        case 18:
                            message.confirmedTutorials[i] = 18;
                            break;
                        case "TUTORIAL_ID_UNUSED_19":
                        case 19:
                            message.confirmedTutorials[i] = 19;
                            break;
                        case "TUTORIAL_ID_GHOST_STAMP":
                        case 20:
                            message.confirmedTutorials[i] = 20;
                            break;
                        case "TUTORIAL_ID_GHOST_STAMP_DECLINED":
                        case 21:
                            message.confirmedTutorials[i] = 21;
                            break;
                        case "TUTORIAL_ID_GHOST_STAMP_FRIENDS":
                        case 22:
                            message.confirmedTutorials[i] = 22;
                            break;
                        case "TUTORIAL_ID_TERMINAL_SCRATCH":
                        case 23:
                            message.confirmedTutorials[i] = 23;
                            break;
                        case "TUTORIAL_ID_TURN_SCRATCH_SHEET":
                        case 24:
                            message.confirmedTutorials[i] = 24;
                            break;
                        case "TUTORIAL_ID_INVITE_FRIEND_CAMPAIGN":
                        case 25:
                            message.confirmedTutorials[i] = 25;
                            break;
                        case "TUTORIAL_ID_CAR_COUPON_FULL_TUNED_RECEIVABLE":
                        case 26:
                            message.confirmedTutorials[i] = 26;
                            break;
                        case "TUTORIAL_ID_VS_CONTINUE_TICKET":
                        case 27:
                            message.confirmedTutorials[i] = 27;
                            break;
                        case "TUTORIAL_ID_UNUSED_28":
                        case 28:
                            message.confirmedTutorials[i] = 28;
                            break;
                        case "TUTORIAL_ID_UNUSED_29":
                        case 29:
                            message.confirmedTutorials[i] = 29;
                            break;
                        case "TUTORIAL_ID_UNUSED_30":
                        case 30:
                            message.confirmedTutorials[i] = 30;
                            break;
                        case "TUTORIAL_ID_DRESS_UP":
                        case 31:
                            message.confirmedTutorials[i] = 31;
                            break;
                        case "TUTORIAL_ID_UNUSED_32":
                        case 32:
                            message.confirmedTutorials[i] = 32;
                            break;
                        case "TUTORIAL_ID_STORY_NEW_FEATURE":
                        case 33:
                            message.confirmedTutorials[i] = 33;
                            break;
                        case "TUTORIAL_ID_GHOST_NEW_FEATURE":
                        case 34:
                            message.confirmedTutorials[i] = 34;
                            break;
                        case "TUTORIAL_ID_UNUSED_35":
                        case 35:
                            message.confirmedTutorials[i] = 35;
                            break;
                        case "TUTORIAL_ID_GHOST_EXPEDITION_NEW":
                        case 36:
                            message.confirmedTutorials[i] = 36;
                            break;
                        case "TUTORIAL_ID_GHOST_EXPEDITION_WANTED":
                        case 37:
                            message.confirmedTutorials[i] = 37;
                            break;
                        case "TUTORIAL_ID_GHOST_EXPEDITION_WANTED2":
                        case 38:
                            message.confirmedTutorials[i] = 38;
                            break;
                        case "TUTORIAL_ID_GHOST_EXPEDITION_REWARD":
                        case 39:
                            message.confirmedTutorials[i] = 39;
                            break;
                        case "TUTORIAL_ID_MULTI_GHOST_VS_2":
                        case 40:
                            message.confirmedTutorials[i] = 40;
                            break;
                        case "TUTORIAL_ID_MULTI_GHOST_VS_3":
                        case 41:
                            message.confirmedTutorials[i] = 41;
                            break;
                        case "TUTORIAL_ID_GHOST_SELECT_BY_OTHER_PLACE":
                        case 42:
                            message.confirmedTutorials[i] = 42;
                            break;
                        case "TUTORIAL_ID_GHOST_SELECT_BY_MANUFACTURER":
                        case 43:
                            message.confirmedTutorials[i] = 43;
                            break;
                        case "TUTORIAL_ID_GHOST_SELECT_BY_OTHER_MANUFACTURER":
                        case 44:
                            message.confirmedTutorials[i] = 44;
                            break;
                        case "TUTORIAL_ID_GHOST_SELECT_BY_PLAYED":
                        case 45:
                            message.confirmedTutorials[i] = 45;
                            break;
                        case "TUTORIAL_ID_GHOST_HIGHWAY_NEW":
                        case 46:
                            message.confirmedTutorials[i] = 46;
                            break;
                        case "TUTORIAL_ID_GHOST_HIGHWAY_STATION":
                        case 47:
                            message.confirmedTutorials[i] = 47;
                            break;
                        case "TUTORIAL_ID_GHOST_HIGHWAY_BOSS":
                        case 48:
                            message.confirmedTutorials[i] = 48;
                            break;
                        case "TUTORIAL_ID_GHOST_TROPHY":
                        case 49:
                            message.confirmedTutorials[i] = 49;
                            break;
                        case "TUTORIAL_ID_GHOST_SELECT":
                        case 50:
                            message.confirmedTutorials[i] = 50;
                            break;
                        case "TUTORIAL_ID_GHOST_SELECT_BY_SAME_PLACE":
                        case 51:
                            message.confirmedTutorials[i] = 51;
                            break;
                        case "TUTORIAL_ID_GHOST_BINGO_NEW":
                        case 52:
                            message.confirmedTutorials[i] = 52;
                            break;
                        case "TUTORIAL_ID_UNUSED_53":
                        case 53:
                            message.confirmedTutorials[i] = 53;
                            break;
                        case "TUTORIAL_ID_GHOST_BINGO_LINK":
                        case 54:
                            message.confirmedTutorials[i] = 54;
                            break;
                        case "TUTORIAL_ID_GHOST_KOSHIEN_NEW":
                        case 55:
                            message.confirmedTutorials[i] = 55;
                            break;
                        case "TUTORIAL_ID_GHOST_KOSHIEN_NOTICE":
                        case 56:
                            message.confirmedTutorials[i] = 56;
                            break;
                        case "TUTORIAL_ID_GHOST_KOSHIEN_MVP_UPDATE":
                        case 57:
                            message.confirmedTutorials[i] = 57;
                            break;
                        case "TUTORIAL_ID_BINGO_LUCKY_CHANCE":
                        case 58:
                            message.confirmedTutorials[i] = 58;
                            break;
                        case "TUTORIAL_ID_GHOST_KOSHIEN_FINISHED":
                        case 59:
                            message.confirmedTutorials[i] = 59;
                            break;
                        case "TUTORIAL_ID_GHOST_KOSHIEN_AFTEREVENT":
                        case 60:
                            message.confirmedTutorials[i] = 60;
                            break;
                        case "TUTORIAL_ID_GHOST_BINGO_AREA":
                        case 61:
                            message.confirmedTutorials[i] = 61;
                            break;
                        }
                }
                if (object.garageMenuEntered != null)
                    message.garageMenuEntered = Boolean(object.garageMenuEntered);
                return message;
            };

            /**
             * Creates a plain object from a SaveTerminalResultRequest message. Also converts values to other types if specified.
             * @function toObject
             * @memberof wm.protobuf.SaveTerminalResultRequest
             * @static
             * @param {wm.protobuf.SaveTerminalResultRequest} message SaveTerminalResultRequest
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            SaveTerminalResultRequest.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults) {
                    object.carOrder = [];
                    object.confirmedTutorials = [];
                }
                if (options.defaults) {
                    object.userId = 0;
                    object.timestamp = 0;
                    object.garageMenuEntered = false;
                }
                if (message.userId != null && message.hasOwnProperty("userId"))
                    object.userId = message.userId;
                if (message.timestamp != null && message.hasOwnProperty("timestamp"))
                    object.timestamp = message.timestamp;
                if (message.carOrder && message.carOrder.length) {
                    object.carOrder = [];
                    for (let j = 0; j < message.carOrder.length; ++j)
                        object.carOrder[j] = message.carOrder[j];
                }
                if (message.confirmedTutorials && message.confirmedTutorials.length) {
                    object.confirmedTutorials = [];
                    for (let j = 0; j < message.confirmedTutorials.length; ++j)
                        object.confirmedTutorials[j] = options.enums === String ? $root.wm.protobuf.TutorialType[message.confirmedTutorials[j]] === undefined ? message.confirmedTutorials[j] : $root.wm.protobuf.TutorialType[message.confirmedTutorials[j]] : message.confirmedTutorials[j];
                }
                if (message.garageMenuEntered != null && message.hasOwnProperty("garageMenuEntered"))
                    object.garageMenuEntered = message.garageMenuEntered;
                return object;
            };

            /**
             * Converts this SaveTerminalResultRequest to JSON.
             * @function toJSON
             * @memberof wm.protobuf.SaveTerminalResultRequest
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            SaveTerminalResultRequest.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for SaveTerminalResultRequest
             * @function getTypeUrl
             * @memberof wm.protobuf.SaveTerminalResultRequest
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            SaveTerminalResultRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/wm.protobuf.SaveTerminalResultRequest";
            };

            return SaveTerminalResultRequest;
        })();

        protobuf.SaveTerminalResultResponse = (function() {

            /**
             * Properties of a SaveTerminalResultResponse.
             * @memberof wm.protobuf
             * @interface ISaveTerminalResultResponse
             * @property {wm.protobuf.ErrorCode} error SaveTerminalResultResponse error
             */

            /**
             * Constructs a new SaveTerminalResultResponse.
             * @memberof wm.protobuf
             * @classdesc Represents a SaveTerminalResultResponse.
             * @implements ISaveTerminalResultResponse
             * @constructor
             * @param {wm.protobuf.ISaveTerminalResultResponse=} [properties] Properties to set
             */
            function SaveTerminalResultResponse(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * SaveTerminalResultResponse error.
             * @member {wm.protobuf.ErrorCode} error
             * @memberof wm.protobuf.SaveTerminalResultResponse
             * @instance
             */
            SaveTerminalResultResponse.prototype.error = 0;

            /**
             * Creates a new SaveTerminalResultResponse instance using the specified properties.
             * @function create
             * @memberof wm.protobuf.SaveTerminalResultResponse
             * @static
             * @param {wm.protobuf.ISaveTerminalResultResponse=} [properties] Properties to set
             * @returns {wm.protobuf.SaveTerminalResultResponse} SaveTerminalResultResponse instance
             */
            SaveTerminalResultResponse.create = function create(properties) {
                return new SaveTerminalResultResponse(properties);
            };

            /**
             * Encodes the specified SaveTerminalResultResponse message. Does not implicitly {@link wm.protobuf.SaveTerminalResultResponse.verify|verify} messages.
             * @function encode
             * @memberof wm.protobuf.SaveTerminalResultResponse
             * @static
             * @param {wm.protobuf.ISaveTerminalResultResponse} message SaveTerminalResultResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SaveTerminalResultResponse.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
                return writer;
            };

            /**
             * Encodes the specified SaveTerminalResultResponse message, length delimited. Does not implicitly {@link wm.protobuf.SaveTerminalResultResponse.verify|verify} messages.
             * @function encodeDelimited
             * @memberof wm.protobuf.SaveTerminalResultResponse
             * @static
             * @param {wm.protobuf.ISaveTerminalResultResponse} message SaveTerminalResultResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SaveTerminalResultResponse.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a SaveTerminalResultResponse message from the specified reader or buffer.
             * @function decode
             * @memberof wm.protobuf.SaveTerminalResultResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {wm.protobuf.SaveTerminalResultResponse} SaveTerminalResultResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SaveTerminalResultResponse.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.wm.protobuf.SaveTerminalResultResponse();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.error = reader.int32();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("error"))
                    throw $util.ProtocolError("missing required 'error'", { instance: message });
                return message;
            };

            /**
             * Decodes a SaveTerminalResultResponse message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof wm.protobuf.SaveTerminalResultResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {wm.protobuf.SaveTerminalResultResponse} SaveTerminalResultResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SaveTerminalResultResponse.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a SaveTerminalResultResponse message.
             * @function verify
             * @memberof wm.protobuf.SaveTerminalResultResponse
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            SaveTerminalResultResponse.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                switch (message.error) {
                default:
                    return "error: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 7:
                case 9:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 16:
                case 17:
                case 18:
                case 19:
                    break;
                }
                return null;
            };

            /**
             * Creates a SaveTerminalResultResponse message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof wm.protobuf.SaveTerminalResultResponse
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {wm.protobuf.SaveTerminalResultResponse} SaveTerminalResultResponse
             */
            SaveTerminalResultResponse.fromObject = function fromObject(object) {
                if (object instanceof $root.wm.protobuf.SaveTerminalResultResponse)
                    return object;
                let message = new $root.wm.protobuf.SaveTerminalResultResponse();
                switch (object.error) {
                default:
                    if (typeof object.error === "number") {
                        message.error = object.error;
                        break;
                    }
                    break;
                case "ERR_SUCCESS":
                case 0:
                    message.error = 0;
                    break;
                case "ERR_REQUEST":
                case 1:
                    message.error = 1;
                    break;
                case "ERR_NOT_FOUND":
                case 2:
                    message.error = 2;
                    break;
                case "ERR_ID_SERVER":
                case 3:
                    message.error = 3;
                    break;
                case "ERR_ID_BANNED":
                case 4:
                    message.error = 4;
                    break;
                case "ERR_USER_LOCKED":
                case 5:
                    message.error = 5;
                    break;
                case "ERR_USER_VERSION":
                case 6:
                    message.error = 6;
                    break;
                case "ERR_NAME_CONFLICTED":
                case 7:
                    message.error = 7;
                    break;
                case "ERR_FORBIDDEN":
                case 9:
                    message.error = 9;
                    break;
                case "ERR_USER_SUCCEEDED":
                case 11:
                    message.error = 11;
                    break;
                case "ERR_BEING_TRANSFERRED":
                case 12:
                    message.error = 12;
                    break;
                case "ERR_SCRATCH_LOCKED":
                case 13:
                    message.error = 13;
                    break;
                case "ERR_BINGO_REVENGE_LOCKED":
                case 14:
                    message.error = 14;
                    break;
                case "ERR_BINGO_ALREDY_LINKED":
                case 15:
                    message.error = 15;
                    break;
                case "ERR_BINGO_FINISHED":
                case 16:
                    message.error = 16;
                    break;
                case "ERR_BINGO_REACHED_MAX_USER":
                case 17:
                    message.error = 17;
                    break;
                case "ERR_CAR_NOT_FOUND":
                case 18:
                    message.error = 18;
                    break;
                case "ERR_BINGO_CARD_NOT_FOUND":
                case 19:
                    message.error = 19;
                    break;
                }
                return message;
            };

            /**
             * Creates a plain object from a SaveTerminalResultResponse message. Also converts values to other types if specified.
             * @function toObject
             * @memberof wm.protobuf.SaveTerminalResultResponse
             * @static
             * @param {wm.protobuf.SaveTerminalResultResponse} message SaveTerminalResultResponse
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            SaveTerminalResultResponse.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults)
                    object.error = options.enums === String ? "ERR_SUCCESS" : 0;
                if (message.error != null && message.hasOwnProperty("error"))
                    object.error = options.enums === String ? $root.wm.protobuf.ErrorCode[message.error] === undefined ? message.error : $root.wm.protobuf.ErrorCode[message.error] : message.error;
                return object;
            };

            /**
             * Converts this SaveTerminalResultResponse to JSON.
             * @function toJSON
             * @memberof wm.protobuf.SaveTerminalResultResponse
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            SaveTerminalResultResponse.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for SaveTerminalResultResponse
             * @function getTypeUrl
             * @memberof wm.protobuf.SaveTerminalResultResponse
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            SaveTerminalResultResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/wm.protobuf.SaveTerminalResultResponse";
            };

            return SaveTerminalResultResponse;
        })();

        protobuf.PingRequest = (function() {

            /**
             * Properties of a PingRequest.
             * @memberof wm.protobuf
             * @interface IPingRequest
             * @property {number|null} [ping] PingRequest ping
             */

            /**
             * Constructs a new PingRequest.
             * @memberof wm.protobuf
             * @classdesc Represents a PingRequest.
             * @implements IPingRequest
             * @constructor
             * @param {wm.protobuf.IPingRequest=} [properties] Properties to set
             */
            function PingRequest(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * PingRequest ping.
             * @member {number} ping
             * @memberof wm.protobuf.PingRequest
             * @instance
             */
            PingRequest.prototype.ping = 0;

            /**
             * Creates a new PingRequest instance using the specified properties.
             * @function create
             * @memberof wm.protobuf.PingRequest
             * @static
             * @param {wm.protobuf.IPingRequest=} [properties] Properties to set
             * @returns {wm.protobuf.PingRequest} PingRequest instance
             */
            PingRequest.create = function create(properties) {
                return new PingRequest(properties);
            };

            /**
             * Encodes the specified PingRequest message. Does not implicitly {@link wm.protobuf.PingRequest.verify|verify} messages.
             * @function encode
             * @memberof wm.protobuf.PingRequest
             * @static
             * @param {wm.protobuf.IPingRequest} message PingRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PingRequest.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.ping != null && Object.hasOwnProperty.call(message, "ping"))
                    writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.ping);
                return writer;
            };

            /**
             * Encodes the specified PingRequest message, length delimited. Does not implicitly {@link wm.protobuf.PingRequest.verify|verify} messages.
             * @function encodeDelimited
             * @memberof wm.protobuf.PingRequest
             * @static
             * @param {wm.protobuf.IPingRequest} message PingRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PingRequest.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a PingRequest message from the specified reader or buffer.
             * @function decode
             * @memberof wm.protobuf.PingRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {wm.protobuf.PingRequest} PingRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PingRequest.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.wm.protobuf.PingRequest();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.ping = reader.uint32();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a PingRequest message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof wm.protobuf.PingRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {wm.protobuf.PingRequest} PingRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PingRequest.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a PingRequest message.
             * @function verify
             * @memberof wm.protobuf.PingRequest
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            PingRequest.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.ping != null && message.hasOwnProperty("ping"))
                    if (!$util.isInteger(message.ping))
                        return "ping: integer expected";
                return null;
            };

            /**
             * Creates a PingRequest message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof wm.protobuf.PingRequest
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {wm.protobuf.PingRequest} PingRequest
             */
            PingRequest.fromObject = function fromObject(object) {
                if (object instanceof $root.wm.protobuf.PingRequest)
                    return object;
                let message = new $root.wm.protobuf.PingRequest();
                if (object.ping != null)
                    message.ping = object.ping >>> 0;
                return message;
            };

            /**
             * Creates a plain object from a PingRequest message. Also converts values to other types if specified.
             * @function toObject
             * @memberof wm.protobuf.PingRequest
             * @static
             * @param {wm.protobuf.PingRequest} message PingRequest
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            PingRequest.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults)
                    object.ping = 0;
                if (message.ping != null && message.hasOwnProperty("ping"))
                    object.ping = message.ping;
                return object;
            };

            /**
             * Converts this PingRequest to JSON.
             * @function toJSON
             * @memberof wm.protobuf.PingRequest
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            PingRequest.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for PingRequest
             * @function getTypeUrl
             * @memberof wm.protobuf.PingRequest
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            PingRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/wm.protobuf.PingRequest";
            };

            return PingRequest;
        })();

        protobuf.PingResponse = (function() {

            /**
             * Properties of a PingResponse.
             * @memberof wm.protobuf
             * @interface IPingResponse
             * @property {wm.protobuf.ErrorCode} error PingResponse error
             * @property {number} pong PingResponse pong
             */

            /**
             * Constructs a new PingResponse.
             * @memberof wm.protobuf
             * @classdesc Represents a PingResponse.
             * @implements IPingResponse
             * @constructor
             * @param {wm.protobuf.IPingResponse=} [properties] Properties to set
             */
            function PingResponse(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * PingResponse error.
             * @member {wm.protobuf.ErrorCode} error
             * @memberof wm.protobuf.PingResponse
             * @instance
             */
            PingResponse.prototype.error = 0;

            /**
             * PingResponse pong.
             * @member {number} pong
             * @memberof wm.protobuf.PingResponse
             * @instance
             */
            PingResponse.prototype.pong = 0;

            /**
             * Creates a new PingResponse instance using the specified properties.
             * @function create
             * @memberof wm.protobuf.PingResponse
             * @static
             * @param {wm.protobuf.IPingResponse=} [properties] Properties to set
             * @returns {wm.protobuf.PingResponse} PingResponse instance
             */
            PingResponse.create = function create(properties) {
                return new PingResponse(properties);
            };

            /**
             * Encodes the specified PingResponse message. Does not implicitly {@link wm.protobuf.PingResponse.verify|verify} messages.
             * @function encode
             * @memberof wm.protobuf.PingResponse
             * @static
             * @param {wm.protobuf.IPingResponse} message PingResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PingResponse.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.pong);
                return writer;
            };

            /**
             * Encodes the specified PingResponse message, length delimited. Does not implicitly {@link wm.protobuf.PingResponse.verify|verify} messages.
             * @function encodeDelimited
             * @memberof wm.protobuf.PingResponse
             * @static
             * @param {wm.protobuf.IPingResponse} message PingResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PingResponse.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a PingResponse message from the specified reader or buffer.
             * @function decode
             * @memberof wm.protobuf.PingResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {wm.protobuf.PingResponse} PingResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PingResponse.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.wm.protobuf.PingResponse();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.error = reader.int32();
                            break;
                        }
                    case 2: {
                            message.pong = reader.uint32();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("error"))
                    throw $util.ProtocolError("missing required 'error'", { instance: message });
                if (!message.hasOwnProperty("pong"))
                    throw $util.ProtocolError("missing required 'pong'", { instance: message });
                return message;
            };

            /**
             * Decodes a PingResponse message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof wm.protobuf.PingResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {wm.protobuf.PingResponse} PingResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PingResponse.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a PingResponse message.
             * @function verify
             * @memberof wm.protobuf.PingResponse
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            PingResponse.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                switch (message.error) {
                default:
                    return "error: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 7:
                case 9:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 16:
                case 17:
                case 18:
                case 19:
                    break;
                }
                if (!$util.isInteger(message.pong))
                    return "pong: integer expected";
                return null;
            };

            /**
             * Creates a PingResponse message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof wm.protobuf.PingResponse
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {wm.protobuf.PingResponse} PingResponse
             */
            PingResponse.fromObject = function fromObject(object) {
                if (object instanceof $root.wm.protobuf.PingResponse)
                    return object;
                let message = new $root.wm.protobuf.PingResponse();
                switch (object.error) {
                default:
                    if (typeof object.error === "number") {
                        message.error = object.error;
                        break;
                    }
                    break;
                case "ERR_SUCCESS":
                case 0:
                    message.error = 0;
                    break;
                case "ERR_REQUEST":
                case 1:
                    message.error = 1;
                    break;
                case "ERR_NOT_FOUND":
                case 2:
                    message.error = 2;
                    break;
                case "ERR_ID_SERVER":
                case 3:
                    message.error = 3;
                    break;
                case "ERR_ID_BANNED":
                case 4:
                    message.error = 4;
                    break;
                case "ERR_USER_LOCKED":
                case 5:
                    message.error = 5;
                    break;
                case "ERR_USER_VERSION":
                case 6:
                    message.error = 6;
                    break;
                case "ERR_NAME_CONFLICTED":
                case 7:
                    message.error = 7;
                    break;
                case "ERR_FORBIDDEN":
                case 9:
                    message.error = 9;
                    break;
                case "ERR_USER_SUCCEEDED":
                case 11:
                    message.error = 11;
                    break;
                case "ERR_BEING_TRANSFERRED":
                case 12:
                    message.error = 12;
                    break;
                case "ERR_SCRATCH_LOCKED":
                case 13:
                    message.error = 13;
                    break;
                case "ERR_BINGO_REVENGE_LOCKED":
                case 14:
                    message.error = 14;
                    break;
                case "ERR_BINGO_ALREDY_LINKED":
                case 15:
                    message.error = 15;
                    break;
                case "ERR_BINGO_FINISHED":
                case 16:
                    message.error = 16;
                    break;
                case "ERR_BINGO_REACHED_MAX_USER":
                case 17:
                    message.error = 17;
                    break;
                case "ERR_CAR_NOT_FOUND":
                case 18:
                    message.error = 18;
                    break;
                case "ERR_BINGO_CARD_NOT_FOUND":
                case 19:
                    message.error = 19;
                    break;
                }
                if (object.pong != null)
                    message.pong = object.pong >>> 0;
                return message;
            };

            /**
             * Creates a plain object from a PingResponse message. Also converts values to other types if specified.
             * @function toObject
             * @memberof wm.protobuf.PingResponse
             * @static
             * @param {wm.protobuf.PingResponse} message PingResponse
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            PingResponse.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.error = options.enums === String ? "ERR_SUCCESS" : 0;
                    object.pong = 0;
                }
                if (message.error != null && message.hasOwnProperty("error"))
                    object.error = options.enums === String ? $root.wm.protobuf.ErrorCode[message.error] === undefined ? message.error : $root.wm.protobuf.ErrorCode[message.error] : message.error;
                if (message.pong != null && message.hasOwnProperty("pong"))
                    object.pong = message.pong;
                return object;
            };

            /**
             * Converts this PingResponse to JSON.
             * @function toJSON
             * @memberof wm.protobuf.PingResponse
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            PingResponse.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for PingResponse
             * @function getTypeUrl
             * @memberof wm.protobuf.PingResponse
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            PingResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/wm.protobuf.PingResponse";
            };

            return PingResponse;
        })();

        protobuf.LoadTerminalInformationRequest = (function() {

            /**
             * Properties of a LoadTerminalInformationRequest.
             * @memberof wm.protobuf
             * @interface ILoadTerminalInformationRequest
             * @property {number} userId LoadTerminalInformationRequest userId
             */

            /**
             * Constructs a new LoadTerminalInformationRequest.
             * @memberof wm.protobuf
             * @classdesc Represents a LoadTerminalInformationRequest.
             * @implements ILoadTerminalInformationRequest
             * @constructor
             * @param {wm.protobuf.ILoadTerminalInformationRequest=} [properties] Properties to set
             */
            function LoadTerminalInformationRequest(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * LoadTerminalInformationRequest userId.
             * @member {number} userId
             * @memberof wm.protobuf.LoadTerminalInformationRequest
             * @instance
             */
            LoadTerminalInformationRequest.prototype.userId = 0;

            /**
             * Creates a new LoadTerminalInformationRequest instance using the specified properties.
             * @function create
             * @memberof wm.protobuf.LoadTerminalInformationRequest
             * @static
             * @param {wm.protobuf.ILoadTerminalInformationRequest=} [properties] Properties to set
             * @returns {wm.protobuf.LoadTerminalInformationRequest} LoadTerminalInformationRequest instance
             */
            LoadTerminalInformationRequest.create = function create(properties) {
                return new LoadTerminalInformationRequest(properties);
            };

            /**
             * Encodes the specified LoadTerminalInformationRequest message. Does not implicitly {@link wm.protobuf.LoadTerminalInformationRequest.verify|verify} messages.
             * @function encode
             * @memberof wm.protobuf.LoadTerminalInformationRequest
             * @static
             * @param {wm.protobuf.ILoadTerminalInformationRequest} message LoadTerminalInformationRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LoadTerminalInformationRequest.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.userId);
                return writer;
            };

            /**
             * Encodes the specified LoadTerminalInformationRequest message, length delimited. Does not implicitly {@link wm.protobuf.LoadTerminalInformationRequest.verify|verify} messages.
             * @function encodeDelimited
             * @memberof wm.protobuf.LoadTerminalInformationRequest
             * @static
             * @param {wm.protobuf.ILoadTerminalInformationRequest} message LoadTerminalInformationRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LoadTerminalInformationRequest.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a LoadTerminalInformationRequest message from the specified reader or buffer.
             * @function decode
             * @memberof wm.protobuf.LoadTerminalInformationRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {wm.protobuf.LoadTerminalInformationRequest} LoadTerminalInformationRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LoadTerminalInformationRequest.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.wm.protobuf.LoadTerminalInformationRequest();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.userId = reader.uint32();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("userId"))
                    throw $util.ProtocolError("missing required 'userId'", { instance: message });
                return message;
            };

            /**
             * Decodes a LoadTerminalInformationRequest message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof wm.protobuf.LoadTerminalInformationRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {wm.protobuf.LoadTerminalInformationRequest} LoadTerminalInformationRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LoadTerminalInformationRequest.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a LoadTerminalInformationRequest message.
             * @function verify
             * @memberof wm.protobuf.LoadTerminalInformationRequest
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            LoadTerminalInformationRequest.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (!$util.isInteger(message.userId))
                    return "userId: integer expected";
                return null;
            };

            /**
             * Creates a LoadTerminalInformationRequest message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof wm.protobuf.LoadTerminalInformationRequest
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {wm.protobuf.LoadTerminalInformationRequest} LoadTerminalInformationRequest
             */
            LoadTerminalInformationRequest.fromObject = function fromObject(object) {
                if (object instanceof $root.wm.protobuf.LoadTerminalInformationRequest)
                    return object;
                let message = new $root.wm.protobuf.LoadTerminalInformationRequest();
                if (object.userId != null)
                    message.userId = object.userId >>> 0;
                return message;
            };

            /**
             * Creates a plain object from a LoadTerminalInformationRequest message. Also converts values to other types if specified.
             * @function toObject
             * @memberof wm.protobuf.LoadTerminalInformationRequest
             * @static
             * @param {wm.protobuf.LoadTerminalInformationRequest} message LoadTerminalInformationRequest
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            LoadTerminalInformationRequest.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults)
                    object.userId = 0;
                if (message.userId != null && message.hasOwnProperty("userId"))
                    object.userId = message.userId;
                return object;
            };

            /**
             * Converts this LoadTerminalInformationRequest to JSON.
             * @function toJSON
             * @memberof wm.protobuf.LoadTerminalInformationRequest
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            LoadTerminalInformationRequest.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for LoadTerminalInformationRequest
             * @function getTypeUrl
             * @memberof wm.protobuf.LoadTerminalInformationRequest
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            LoadTerminalInformationRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/wm.protobuf.LoadTerminalInformationRequest";
            };

            return LoadTerminalInformationRequest;
        })();

        protobuf.LoadTerminalInformationResponse = (function() {

            /**
             * Properties of a LoadTerminalInformationResponse.
             * @memberof wm.protobuf
             * @interface ILoadTerminalInformationResponse
             * @property {wm.protobuf.ErrorCode} error LoadTerminalInformationResponse error
             * @property {boolean} prizeReceivable LoadTerminalInformationResponse prizeReceivable
             * @property {Array.<wm.protobuf.LoadTerminalInformationResponse.ITerminalNotice>|null} [noticeEntries] LoadTerminalInformationResponse noticeEntries
             * @property {Array.<string>|null} [noticeMessage] LoadTerminalInformationResponse noticeMessage
             * @property {Array.<wm.protobuf.NoticeEntry>|null} [noticeWindow] LoadTerminalInformationResponse noticeWindow
             * @property {Array.<string>|null} [noticeWindowMessage] LoadTerminalInformationResponse noticeWindowMessage
             * @property {wm.protobuf.ITransferNotice} transferNotice LoadTerminalInformationResponse transferNotice
             * @property {boolean} announceFeature LoadTerminalInformationResponse announceFeature
             * @property {boolean} freeScratched LoadTerminalInformationResponse freeScratched
             * @property {Array.<number>|null} [restrictedModels] LoadTerminalInformationResponse restrictedModels
             * @property {Array.<wm.protobuf.IUserItem>|null} [availableTickets] LoadTerminalInformationResponse availableTickets
             */

            /**
             * Constructs a new LoadTerminalInformationResponse.
             * @memberof wm.protobuf
             * @classdesc Represents a LoadTerminalInformationResponse.
             * @implements ILoadTerminalInformationResponse
             * @constructor
             * @param {wm.protobuf.ILoadTerminalInformationResponse=} [properties] Properties to set
             */
            function LoadTerminalInformationResponse(properties) {
                this.noticeEntries = [];
                this.noticeMessage = [];
                this.noticeWindow = [];
                this.noticeWindowMessage = [];
                this.restrictedModels = [];
                this.availableTickets = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * LoadTerminalInformationResponse error.
             * @member {wm.protobuf.ErrorCode} error
             * @memberof wm.protobuf.LoadTerminalInformationResponse
             * @instance
             */
            LoadTerminalInformationResponse.prototype.error = 0;

            /**
             * LoadTerminalInformationResponse prizeReceivable.
             * @member {boolean} prizeReceivable
             * @memberof wm.protobuf.LoadTerminalInformationResponse
             * @instance
             */
            LoadTerminalInformationResponse.prototype.prizeReceivable = false;

            /**
             * LoadTerminalInformationResponse noticeEntries.
             * @member {Array.<wm.protobuf.LoadTerminalInformationResponse.ITerminalNotice>} noticeEntries
             * @memberof wm.protobuf.LoadTerminalInformationResponse
             * @instance
             */
            LoadTerminalInformationResponse.prototype.noticeEntries = $util.emptyArray;

            /**
             * LoadTerminalInformationResponse noticeMessage.
             * @member {Array.<string>} noticeMessage
             * @memberof wm.protobuf.LoadTerminalInformationResponse
             * @instance
             */
            LoadTerminalInformationResponse.prototype.noticeMessage = $util.emptyArray;

            /**
             * LoadTerminalInformationResponse noticeWindow.
             * @member {Array.<wm.protobuf.NoticeEntry>} noticeWindow
             * @memberof wm.protobuf.LoadTerminalInformationResponse
             * @instance
             */
            LoadTerminalInformationResponse.prototype.noticeWindow = $util.emptyArray;

            /**
             * LoadTerminalInformationResponse noticeWindowMessage.
             * @member {Array.<string>} noticeWindowMessage
             * @memberof wm.protobuf.LoadTerminalInformationResponse
             * @instance
             */
            LoadTerminalInformationResponse.prototype.noticeWindowMessage = $util.emptyArray;

            /**
             * LoadTerminalInformationResponse transferNotice.
             * @member {wm.protobuf.ITransferNotice} transferNotice
             * @memberof wm.protobuf.LoadTerminalInformationResponse
             * @instance
             */
            LoadTerminalInformationResponse.prototype.transferNotice = null;

            /**
             * LoadTerminalInformationResponse announceFeature.
             * @member {boolean} announceFeature
             * @memberof wm.protobuf.LoadTerminalInformationResponse
             * @instance
             */
            LoadTerminalInformationResponse.prototype.announceFeature = false;

            /**
             * LoadTerminalInformationResponse freeScratched.
             * @member {boolean} freeScratched
             * @memberof wm.protobuf.LoadTerminalInformationResponse
             * @instance
             */
            LoadTerminalInformationResponse.prototype.freeScratched = false;

            /**
             * LoadTerminalInformationResponse restrictedModels.
             * @member {Array.<number>} restrictedModels
             * @memberof wm.protobuf.LoadTerminalInformationResponse
             * @instance
             */
            LoadTerminalInformationResponse.prototype.restrictedModels = $util.emptyArray;

            /**
             * LoadTerminalInformationResponse availableTickets.
             * @member {Array.<wm.protobuf.IUserItem>} availableTickets
             * @memberof wm.protobuf.LoadTerminalInformationResponse
             * @instance
             */
            LoadTerminalInformationResponse.prototype.availableTickets = $util.emptyArray;

            /**
             * Creates a new LoadTerminalInformationResponse instance using the specified properties.
             * @function create
             * @memberof wm.protobuf.LoadTerminalInformationResponse
             * @static
             * @param {wm.protobuf.ILoadTerminalInformationResponse=} [properties] Properties to set
             * @returns {wm.protobuf.LoadTerminalInformationResponse} LoadTerminalInformationResponse instance
             */
            LoadTerminalInformationResponse.create = function create(properties) {
                return new LoadTerminalInformationResponse(properties);
            };

            /**
             * Encodes the specified LoadTerminalInformationResponse message. Does not implicitly {@link wm.protobuf.LoadTerminalInformationResponse.verify|verify} messages.
             * @function encode
             * @memberof wm.protobuf.LoadTerminalInformationResponse
             * @static
             * @param {wm.protobuf.ILoadTerminalInformationResponse} message LoadTerminalInformationResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LoadTerminalInformationResponse.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
                if (message.restrictedModels != null && message.restrictedModels.length)
                    for (let i = 0; i < message.restrictedModels.length; ++i)
                        writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.restrictedModels[i]);
                if (message.noticeEntries != null && message.noticeEntries.length)
                    for (let i = 0; i < message.noticeEntries.length; ++i)
                        $root.wm.protobuf.LoadTerminalInformationResponse.TerminalNotice.encode(message.noticeEntries[i], writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();
                if (message.noticeMessage != null && message.noticeMessage.length)
                    for (let i = 0; i < message.noticeMessage.length; ++i)
                        writer.uint32(/* id 11, wireType 2 =*/90).string(message.noticeMessage[i]);
                if (message.noticeWindow != null && message.noticeWindow.length)
                    for (let i = 0; i < message.noticeWindow.length; ++i)
                        writer.uint32(/* id 12, wireType 0 =*/96).int32(message.noticeWindow[i]);
                if (message.noticeWindowMessage != null && message.noticeWindowMessage.length)
                    for (let i = 0; i < message.noticeWindowMessage.length; ++i)
                        writer.uint32(/* id 13, wireType 2 =*/106).string(message.noticeWindowMessage[i]);
                $root.wm.protobuf.TransferNotice.encode(message.transferNotice, writer.uint32(/* id 14, wireType 2 =*/114).fork()).ldelim();
                writer.uint32(/* id 16, wireType 0 =*/128).bool(message.announceFeature);
                writer.uint32(/* id 17, wireType 0 =*/136).bool(message.prizeReceivable);
                writer.uint32(/* id 18, wireType 0 =*/144).bool(message.freeScratched);
                if (message.availableTickets != null && message.availableTickets.length)
                    for (let i = 0; i < message.availableTickets.length; ++i)
                        $root.wm.protobuf.UserItem.encode(message.availableTickets[i], writer.uint32(/* id 19, wireType 2 =*/154).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified LoadTerminalInformationResponse message, length delimited. Does not implicitly {@link wm.protobuf.LoadTerminalInformationResponse.verify|verify} messages.
             * @function encodeDelimited
             * @memberof wm.protobuf.LoadTerminalInformationResponse
             * @static
             * @param {wm.protobuf.ILoadTerminalInformationResponse} message LoadTerminalInformationResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LoadTerminalInformationResponse.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a LoadTerminalInformationResponse message from the specified reader or buffer.
             * @function decode
             * @memberof wm.protobuf.LoadTerminalInformationResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {wm.protobuf.LoadTerminalInformationResponse} LoadTerminalInformationResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LoadTerminalInformationResponse.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.wm.protobuf.LoadTerminalInformationResponse();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.error = reader.int32();
                            break;
                        }
                    case 17: {
                            message.prizeReceivable = reader.bool();
                            break;
                        }
                    case 10: {
                            if (!(message.noticeEntries && message.noticeEntries.length))
                                message.noticeEntries = [];
                            message.noticeEntries.push($root.wm.protobuf.LoadTerminalInformationResponse.TerminalNotice.decode(reader, reader.uint32()));
                            break;
                        }
                    case 11: {
                            if (!(message.noticeMessage && message.noticeMessage.length))
                                message.noticeMessage = [];
                            message.noticeMessage.push(reader.string());
                            break;
                        }
                    case 12: {
                            if (!(message.noticeWindow && message.noticeWindow.length))
                                message.noticeWindow = [];
                            if ((tag & 7) === 2) {
                                let end2 = reader.uint32() + reader.pos;
                                while (reader.pos < end2)
                                    message.noticeWindow.push(reader.int32());
                            } else
                                message.noticeWindow.push(reader.int32());
                            break;
                        }
                    case 13: {
                            if (!(message.noticeWindowMessage && message.noticeWindowMessage.length))
                                message.noticeWindowMessage = [];
                            message.noticeWindowMessage.push(reader.string());
                            break;
                        }
                    case 14: {
                            message.transferNotice = $root.wm.protobuf.TransferNotice.decode(reader, reader.uint32());
                            break;
                        }
                    case 16: {
                            message.announceFeature = reader.bool();
                            break;
                        }
                    case 18: {
                            message.freeScratched = reader.bool();
                            break;
                        }
                    case 2: {
                            if (!(message.restrictedModels && message.restrictedModels.length))
                                message.restrictedModels = [];
                            if ((tag & 7) === 2) {
                                let end2 = reader.uint32() + reader.pos;
                                while (reader.pos < end2)
                                    message.restrictedModels.push(reader.uint32());
                            } else
                                message.restrictedModels.push(reader.uint32());
                            break;
                        }
                    case 19: {
                            if (!(message.availableTickets && message.availableTickets.length))
                                message.availableTickets = [];
                            message.availableTickets.push($root.wm.protobuf.UserItem.decode(reader, reader.uint32()));
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("error"))
                    throw $util.ProtocolError("missing required 'error'", { instance: message });
                if (!message.hasOwnProperty("prizeReceivable"))
                    throw $util.ProtocolError("missing required 'prizeReceivable'", { instance: message });
                if (!message.hasOwnProperty("transferNotice"))
                    throw $util.ProtocolError("missing required 'transferNotice'", { instance: message });
                if (!message.hasOwnProperty("announceFeature"))
                    throw $util.ProtocolError("missing required 'announceFeature'", { instance: message });
                if (!message.hasOwnProperty("freeScratched"))
                    throw $util.ProtocolError("missing required 'freeScratched'", { instance: message });
                return message;
            };

            /**
             * Decodes a LoadTerminalInformationResponse message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof wm.protobuf.LoadTerminalInformationResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {wm.protobuf.LoadTerminalInformationResponse} LoadTerminalInformationResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LoadTerminalInformationResponse.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a LoadTerminalInformationResponse message.
             * @function verify
             * @memberof wm.protobuf.LoadTerminalInformationResponse
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            LoadTerminalInformationResponse.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                switch (message.error) {
                default:
                    return "error: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 7:
                case 9:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 16:
                case 17:
                case 18:
                case 19:
                    break;
                }
                if (typeof message.prizeReceivable !== "boolean")
                    return "prizeReceivable: boolean expected";
                if (message.noticeEntries != null && message.hasOwnProperty("noticeEntries")) {
                    if (!Array.isArray(message.noticeEntries))
                        return "noticeEntries: array expected";
                    for (let i = 0; i < message.noticeEntries.length; ++i) {
                        let error = $root.wm.protobuf.LoadTerminalInformationResponse.TerminalNotice.verify(message.noticeEntries[i]);
                        if (error)
                            return "noticeEntries." + error;
                    }
                }
                if (message.noticeMessage != null && message.hasOwnProperty("noticeMessage")) {
                    if (!Array.isArray(message.noticeMessage))
                        return "noticeMessage: array expected";
                    for (let i = 0; i < message.noticeMessage.length; ++i)
                        if (!$util.isString(message.noticeMessage[i]))
                            return "noticeMessage: string[] expected";
                }
                if (message.noticeWindow != null && message.hasOwnProperty("noticeWindow")) {
                    if (!Array.isArray(message.noticeWindow))
                        return "noticeWindow: array expected";
                    for (let i = 0; i < message.noticeWindow.length; ++i)
                        switch (message.noticeWindow[i]) {
                        default:
                            return "noticeWindow: enum value[] expected";
                        case 1:
                        case 2:
                        case 3:
                        case 4:
                        case 5:
                        case 6:
                        case 7:
                        case 8:
                        case 9:
                        case 10:
                        case 11:
                        case 12:
                            break;
                        }
                }
                if (message.noticeWindowMessage != null && message.hasOwnProperty("noticeWindowMessage")) {
                    if (!Array.isArray(message.noticeWindowMessage))
                        return "noticeWindowMessage: array expected";
                    for (let i = 0; i < message.noticeWindowMessage.length; ++i)
                        if (!$util.isString(message.noticeWindowMessage[i]))
                            return "noticeWindowMessage: string[] expected";
                }
                {
                    let error = $root.wm.protobuf.TransferNotice.verify(message.transferNotice);
                    if (error)
                        return "transferNotice." + error;
                }
                if (typeof message.announceFeature !== "boolean")
                    return "announceFeature: boolean expected";
                if (typeof message.freeScratched !== "boolean")
                    return "freeScratched: boolean expected";
                if (message.restrictedModels != null && message.hasOwnProperty("restrictedModels")) {
                    if (!Array.isArray(message.restrictedModels))
                        return "restrictedModels: array expected";
                    for (let i = 0; i < message.restrictedModels.length; ++i)
                        if (!$util.isInteger(message.restrictedModels[i]))
                            return "restrictedModels: integer[] expected";
                }
                if (message.availableTickets != null && message.hasOwnProperty("availableTickets")) {
                    if (!Array.isArray(message.availableTickets))
                        return "availableTickets: array expected";
                    for (let i = 0; i < message.availableTickets.length; ++i) {
                        let error = $root.wm.protobuf.UserItem.verify(message.availableTickets[i]);
                        if (error)
                            return "availableTickets." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a LoadTerminalInformationResponse message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof wm.protobuf.LoadTerminalInformationResponse
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {wm.protobuf.LoadTerminalInformationResponse} LoadTerminalInformationResponse
             */
            LoadTerminalInformationResponse.fromObject = function fromObject(object) {
                if (object instanceof $root.wm.protobuf.LoadTerminalInformationResponse)
                    return object;
                let message = new $root.wm.protobuf.LoadTerminalInformationResponse();
                switch (object.error) {
                default:
                    if (typeof object.error === "number") {
                        message.error = object.error;
                        break;
                    }
                    break;
                case "ERR_SUCCESS":
                case 0:
                    message.error = 0;
                    break;
                case "ERR_REQUEST":
                case 1:
                    message.error = 1;
                    break;
                case "ERR_NOT_FOUND":
                case 2:
                    message.error = 2;
                    break;
                case "ERR_ID_SERVER":
                case 3:
                    message.error = 3;
                    break;
                case "ERR_ID_BANNED":
                case 4:
                    message.error = 4;
                    break;
                case "ERR_USER_LOCKED":
                case 5:
                    message.error = 5;
                    break;
                case "ERR_USER_VERSION":
                case 6:
                    message.error = 6;
                    break;
                case "ERR_NAME_CONFLICTED":
                case 7:
                    message.error = 7;
                    break;
                case "ERR_FORBIDDEN":
                case 9:
                    message.error = 9;
                    break;
                case "ERR_USER_SUCCEEDED":
                case 11:
                    message.error = 11;
                    break;
                case "ERR_BEING_TRANSFERRED":
                case 12:
                    message.error = 12;
                    break;
                case "ERR_SCRATCH_LOCKED":
                case 13:
                    message.error = 13;
                    break;
                case "ERR_BINGO_REVENGE_LOCKED":
                case 14:
                    message.error = 14;
                    break;
                case "ERR_BINGO_ALREDY_LINKED":
                case 15:
                    message.error = 15;
                    break;
                case "ERR_BINGO_FINISHED":
                case 16:
                    message.error = 16;
                    break;
                case "ERR_BINGO_REACHED_MAX_USER":
                case 17:
                    message.error = 17;
                    break;
                case "ERR_CAR_NOT_FOUND":
                case 18:
                    message.error = 18;
                    break;
                case "ERR_BINGO_CARD_NOT_FOUND":
                case 19:
                    message.error = 19;
                    break;
                }
                if (object.prizeReceivable != null)
                    message.prizeReceivable = Boolean(object.prizeReceivable);
                if (object.noticeEntries) {
                    if (!Array.isArray(object.noticeEntries))
                        throw TypeError(".wm.protobuf.LoadTerminalInformationResponse.noticeEntries: array expected");
                    message.noticeEntries = [];
                    for (let i = 0; i < object.noticeEntries.length; ++i) {
                        if (typeof object.noticeEntries[i] !== "object")
                            throw TypeError(".wm.protobuf.LoadTerminalInformationResponse.noticeEntries: object expected");
                        message.noticeEntries[i] = $root.wm.protobuf.LoadTerminalInformationResponse.TerminalNotice.fromObject(object.noticeEntries[i]);
                    }
                }
                if (object.noticeMessage) {
                    if (!Array.isArray(object.noticeMessage))
                        throw TypeError(".wm.protobuf.LoadTerminalInformationResponse.noticeMessage: array expected");
                    message.noticeMessage = [];
                    for (let i = 0; i < object.noticeMessage.length; ++i)
                        message.noticeMessage[i] = String(object.noticeMessage[i]);
                }
                if (object.noticeWindow) {
                    if (!Array.isArray(object.noticeWindow))
                        throw TypeError(".wm.protobuf.LoadTerminalInformationResponse.noticeWindow: array expected");
                    message.noticeWindow = [];
                    for (let i = 0; i < object.noticeWindow.length; ++i)
                        switch (object.noticeWindow[i]) {
                        default:
                            if (typeof object.noticeWindow[i] === "number") {
                                message.noticeWindow[i] = object.noticeWindow[i];
                                break;
                            }
                        case "NOTICE_UNUSED_1":
                        case 1:
                            message.noticeWindow[i] = 1;
                            break;
                        case "NOTICE_UNUSED_2":
                        case 2:
                            message.noticeWindow[i] = 2;
                            break;
                        case "NOTICE_UNUSED_3":
                        case 3:
                            message.noticeWindow[i] = 3;
                            break;
                        case "NOTICE_UNUSED_4":
                        case 4:
                            message.noticeWindow[i] = 4;
                            break;
                        case "NOTICE_UNUSED_5":
                        case 5:
                            message.noticeWindow[i] = 5;
                            break;
                        case "NOTICE_UNUSED_6":
                        case 6:
                            message.noticeWindow[i] = 6;
                            break;
                        case "NOTICE_UNUSED_7":
                        case 7:
                            message.noticeWindow[i] = 7;
                            break;
                        case "NOTICE_UNUSED_8":
                        case 8:
                            message.noticeWindow[i] = 8;
                            break;
                        case "NOTICE_UNUSED_9":
                        case 9:
                            message.noticeWindow[i] = 9;
                            break;
                        case "NOTICE_UNUSED_10":
                        case 10:
                            message.noticeWindow[i] = 10;
                            break;
                        case "NOTICE_UNUSED_11":
                        case 11:
                            message.noticeWindow[i] = 11;
                            break;
                        case "NOTICE_UNUSED_12":
                        case 12:
                            message.noticeWindow[i] = 12;
                            break;
                        }
                }
                if (object.noticeWindowMessage) {
                    if (!Array.isArray(object.noticeWindowMessage))
                        throw TypeError(".wm.protobuf.LoadTerminalInformationResponse.noticeWindowMessage: array expected");
                    message.noticeWindowMessage = [];
                    for (let i = 0; i < object.noticeWindowMessage.length; ++i)
                        message.noticeWindowMessage[i] = String(object.noticeWindowMessage[i]);
                }
                if (object.transferNotice != null) {
                    if (typeof object.transferNotice !== "object")
                        throw TypeError(".wm.protobuf.LoadTerminalInformationResponse.transferNotice: object expected");
                    message.transferNotice = $root.wm.protobuf.TransferNotice.fromObject(object.transferNotice);
                }
                if (object.announceFeature != null)
                    message.announceFeature = Boolean(object.announceFeature);
                if (object.freeScratched != null)
                    message.freeScratched = Boolean(object.freeScratched);
                if (object.restrictedModels) {
                    if (!Array.isArray(object.restrictedModels))
                        throw TypeError(".wm.protobuf.LoadTerminalInformationResponse.restrictedModels: array expected");
                    message.restrictedModels = [];
                    for (let i = 0; i < object.restrictedModels.length; ++i)
                        message.restrictedModels[i] = object.restrictedModels[i] >>> 0;
                }
                if (object.availableTickets) {
                    if (!Array.isArray(object.availableTickets))
                        throw TypeError(".wm.protobuf.LoadTerminalInformationResponse.availableTickets: array expected");
                    message.availableTickets = [];
                    for (let i = 0; i < object.availableTickets.length; ++i) {
                        if (typeof object.availableTickets[i] !== "object")
                            throw TypeError(".wm.protobuf.LoadTerminalInformationResponse.availableTickets: object expected");
                        message.availableTickets[i] = $root.wm.protobuf.UserItem.fromObject(object.availableTickets[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from a LoadTerminalInformationResponse message. Also converts values to other types if specified.
             * @function toObject
             * @memberof wm.protobuf.LoadTerminalInformationResponse
             * @static
             * @param {wm.protobuf.LoadTerminalInformationResponse} message LoadTerminalInformationResponse
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            LoadTerminalInformationResponse.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults) {
                    object.restrictedModels = [];
                    object.noticeEntries = [];
                    object.noticeMessage = [];
                    object.noticeWindow = [];
                    object.noticeWindowMessage = [];
                    object.availableTickets = [];
                }
                if (options.defaults) {
                    object.error = options.enums === String ? "ERR_SUCCESS" : 0;
                    object.transferNotice = null;
                    object.announceFeature = false;
                    object.prizeReceivable = false;
                    object.freeScratched = false;
                }
                if (message.error != null && message.hasOwnProperty("error"))
                    object.error = options.enums === String ? $root.wm.protobuf.ErrorCode[message.error] === undefined ? message.error : $root.wm.protobuf.ErrorCode[message.error] : message.error;
                if (message.restrictedModels && message.restrictedModels.length) {
                    object.restrictedModels = [];
                    for (let j = 0; j < message.restrictedModels.length; ++j)
                        object.restrictedModels[j] = message.restrictedModels[j];
                }
                if (message.noticeEntries && message.noticeEntries.length) {
                    object.noticeEntries = [];
                    for (let j = 0; j < message.noticeEntries.length; ++j)
                        object.noticeEntries[j] = $root.wm.protobuf.LoadTerminalInformationResponse.TerminalNotice.toObject(message.noticeEntries[j], options);
                }
                if (message.noticeMessage && message.noticeMessage.length) {
                    object.noticeMessage = [];
                    for (let j = 0; j < message.noticeMessage.length; ++j)
                        object.noticeMessage[j] = message.noticeMessage[j];
                }
                if (message.noticeWindow && message.noticeWindow.length) {
                    object.noticeWindow = [];
                    for (let j = 0; j < message.noticeWindow.length; ++j)
                        object.noticeWindow[j] = options.enums === String ? $root.wm.protobuf.NoticeEntry[message.noticeWindow[j]] === undefined ? message.noticeWindow[j] : $root.wm.protobuf.NoticeEntry[message.noticeWindow[j]] : message.noticeWindow[j];
                }
                if (message.noticeWindowMessage && message.noticeWindowMessage.length) {
                    object.noticeWindowMessage = [];
                    for (let j = 0; j < message.noticeWindowMessage.length; ++j)
                        object.noticeWindowMessage[j] = message.noticeWindowMessage[j];
                }
                if (message.transferNotice != null && message.hasOwnProperty("transferNotice"))
                    object.transferNotice = $root.wm.protobuf.TransferNotice.toObject(message.transferNotice, options);
                if (message.announceFeature != null && message.hasOwnProperty("announceFeature"))
                    object.announceFeature = message.announceFeature;
                if (message.prizeReceivable != null && message.hasOwnProperty("prizeReceivable"))
                    object.prizeReceivable = message.prizeReceivable;
                if (message.freeScratched != null && message.hasOwnProperty("freeScratched"))
                    object.freeScratched = message.freeScratched;
                if (message.availableTickets && message.availableTickets.length) {
                    object.availableTickets = [];
                    for (let j = 0; j < message.availableTickets.length; ++j)
                        object.availableTickets[j] = $root.wm.protobuf.UserItem.toObject(message.availableTickets[j], options);
                }
                return object;
            };

            /**
             * Converts this LoadTerminalInformationResponse to JSON.
             * @function toJSON
             * @memberof wm.protobuf.LoadTerminalInformationResponse
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            LoadTerminalInformationResponse.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for LoadTerminalInformationResponse
             * @function getTypeUrl
             * @memberof wm.protobuf.LoadTerminalInformationResponse
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            LoadTerminalInformationResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/wm.protobuf.LoadTerminalInformationResponse";
            };

            LoadTerminalInformationResponse.TerminalNotice = (function() {

                /**
                 * Properties of a TerminalNotice.
                 * @memberof wm.protobuf.LoadTerminalInformationResponse
                 * @interface ITerminalNotice
                 * @property {wm.protobuf.NoticeEntry} noticeType TerminalNotice noticeType
                 * @property {string|null} [field_1] TerminalNotice field_1
                 * @property {number|null} [field_2] TerminalNotice field_2
                 * @property {number|null} [field_3] TerminalNotice field_3
                 */

                /**
                 * Constructs a new TerminalNotice.
                 * @memberof wm.protobuf.LoadTerminalInformationResponse
                 * @classdesc Represents a TerminalNotice.
                 * @implements ITerminalNotice
                 * @constructor
                 * @param {wm.protobuf.LoadTerminalInformationResponse.ITerminalNotice=} [properties] Properties to set
                 */
                function TerminalNotice(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * TerminalNotice noticeType.
                 * @member {wm.protobuf.NoticeEntry} noticeType
                 * @memberof wm.protobuf.LoadTerminalInformationResponse.TerminalNotice
                 * @instance
                 */
                TerminalNotice.prototype.noticeType = 1;

                /**
                 * TerminalNotice field_1.
                 * @member {string} field_1
                 * @memberof wm.protobuf.LoadTerminalInformationResponse.TerminalNotice
                 * @instance
                 */
                TerminalNotice.prototype.field_1 = "";

                /**
                 * TerminalNotice field_2.
                 * @member {number} field_2
                 * @memberof wm.protobuf.LoadTerminalInformationResponse.TerminalNotice
                 * @instance
                 */
                TerminalNotice.prototype.field_2 = 0;

                /**
                 * TerminalNotice field_3.
                 * @member {number} field_3
                 * @memberof wm.protobuf.LoadTerminalInformationResponse.TerminalNotice
                 * @instance
                 */
                TerminalNotice.prototype.field_3 = 0;

                /**
                 * Creates a new TerminalNotice instance using the specified properties.
                 * @function create
                 * @memberof wm.protobuf.LoadTerminalInformationResponse.TerminalNotice
                 * @static
                 * @param {wm.protobuf.LoadTerminalInformationResponse.ITerminalNotice=} [properties] Properties to set
                 * @returns {wm.protobuf.LoadTerminalInformationResponse.TerminalNotice} TerminalNotice instance
                 */
                TerminalNotice.create = function create(properties) {
                    return new TerminalNotice(properties);
                };

                /**
                 * Encodes the specified TerminalNotice message. Does not implicitly {@link wm.protobuf.LoadTerminalInformationResponse.TerminalNotice.verify|verify} messages.
                 * @function encode
                 * @memberof wm.protobuf.LoadTerminalInformationResponse.TerminalNotice
                 * @static
                 * @param {wm.protobuf.LoadTerminalInformationResponse.ITerminalNotice} message TerminalNotice message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                TerminalNotice.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.noticeType);
                    if (message.field_1 != null && Object.hasOwnProperty.call(message, "field_1"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.field_1);
                    if (message.field_2 != null && Object.hasOwnProperty.call(message, "field_2"))
                        writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.field_2);
                    if (message.field_3 != null && Object.hasOwnProperty.call(message, "field_3"))
                        writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.field_3);
                    return writer;
                };

                /**
                 * Encodes the specified TerminalNotice message, length delimited. Does not implicitly {@link wm.protobuf.LoadTerminalInformationResponse.TerminalNotice.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof wm.protobuf.LoadTerminalInformationResponse.TerminalNotice
                 * @static
                 * @param {wm.protobuf.LoadTerminalInformationResponse.ITerminalNotice} message TerminalNotice message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                TerminalNotice.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a TerminalNotice message from the specified reader or buffer.
                 * @function decode
                 * @memberof wm.protobuf.LoadTerminalInformationResponse.TerminalNotice
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {wm.protobuf.LoadTerminalInformationResponse.TerminalNotice} TerminalNotice
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                TerminalNotice.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.wm.protobuf.LoadTerminalInformationResponse.TerminalNotice();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.noticeType = reader.int32();
                                break;
                            }
                        case 2: {
                                message.field_1 = reader.string();
                                break;
                            }
                        case 3: {
                                message.field_2 = reader.uint32();
                                break;
                            }
                        case 4: {
                                message.field_3 = reader.uint32();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    if (!message.hasOwnProperty("noticeType"))
                        throw $util.ProtocolError("missing required 'noticeType'", { instance: message });
                    return message;
                };

                /**
                 * Decodes a TerminalNotice message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof wm.protobuf.LoadTerminalInformationResponse.TerminalNotice
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {wm.protobuf.LoadTerminalInformationResponse.TerminalNotice} TerminalNotice
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                TerminalNotice.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a TerminalNotice message.
                 * @function verify
                 * @memberof wm.protobuf.LoadTerminalInformationResponse.TerminalNotice
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                TerminalNotice.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    switch (message.noticeType) {
                    default:
                        return "noticeType: enum value expected";
                    case 1:
                    case 2:
                    case 3:
                    case 4:
                    case 5:
                    case 6:
                    case 7:
                    case 8:
                    case 9:
                    case 10:
                    case 11:
                    case 12:
                        break;
                    }
                    if (message.field_1 != null && message.hasOwnProperty("field_1"))
                        if (!$util.isString(message.field_1))
                            return "field_1: string expected";
                    if (message.field_2 != null && message.hasOwnProperty("field_2"))
                        if (!$util.isInteger(message.field_2))
                            return "field_2: integer expected";
                    if (message.field_3 != null && message.hasOwnProperty("field_3"))
                        if (!$util.isInteger(message.field_3))
                            return "field_3: integer expected";
                    return null;
                };

                /**
                 * Creates a TerminalNotice message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof wm.protobuf.LoadTerminalInformationResponse.TerminalNotice
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {wm.protobuf.LoadTerminalInformationResponse.TerminalNotice} TerminalNotice
                 */
                TerminalNotice.fromObject = function fromObject(object) {
                    if (object instanceof $root.wm.protobuf.LoadTerminalInformationResponse.TerminalNotice)
                        return object;
                    let message = new $root.wm.protobuf.LoadTerminalInformationResponse.TerminalNotice();
                    switch (object.noticeType) {
                    default:
                        if (typeof object.noticeType === "number") {
                            message.noticeType = object.noticeType;
                            break;
                        }
                        break;
                    case "NOTICE_UNUSED_1":
                    case 1:
                        message.noticeType = 1;
                        break;
                    case "NOTICE_UNUSED_2":
                    case 2:
                        message.noticeType = 2;
                        break;
                    case "NOTICE_UNUSED_3":
                    case 3:
                        message.noticeType = 3;
                        break;
                    case "NOTICE_UNUSED_4":
                    case 4:
                        message.noticeType = 4;
                        break;
                    case "NOTICE_UNUSED_5":
                    case 5:
                        message.noticeType = 5;
                        break;
                    case "NOTICE_UNUSED_6":
                    case 6:
                        message.noticeType = 6;
                        break;
                    case "NOTICE_UNUSED_7":
                    case 7:
                        message.noticeType = 7;
                        break;
                    case "NOTICE_UNUSED_8":
                    case 8:
                        message.noticeType = 8;
                        break;
                    case "NOTICE_UNUSED_9":
                    case 9:
                        message.noticeType = 9;
                        break;
                    case "NOTICE_UNUSED_10":
                    case 10:
                        message.noticeType = 10;
                        break;
                    case "NOTICE_UNUSED_11":
                    case 11:
                        message.noticeType = 11;
                        break;
                    case "NOTICE_UNUSED_12":
                    case 12:
                        message.noticeType = 12;
                        break;
                    }
                    if (object.field_1 != null)
                        message.field_1 = String(object.field_1);
                    if (object.field_2 != null)
                        message.field_2 = object.field_2 >>> 0;
                    if (object.field_3 != null)
                        message.field_3 = object.field_3 >>> 0;
                    return message;
                };

                /**
                 * Creates a plain object from a TerminalNotice message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof wm.protobuf.LoadTerminalInformationResponse.TerminalNotice
                 * @static
                 * @param {wm.protobuf.LoadTerminalInformationResponse.TerminalNotice} message TerminalNotice
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                TerminalNotice.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        object.noticeType = options.enums === String ? "NOTICE_UNUSED_1" : 1;
                        object.field_1 = "";
                        object.field_2 = 0;
                        object.field_3 = 0;
                    }
                    if (message.noticeType != null && message.hasOwnProperty("noticeType"))
                        object.noticeType = options.enums === String ? $root.wm.protobuf.NoticeEntry[message.noticeType] === undefined ? message.noticeType : $root.wm.protobuf.NoticeEntry[message.noticeType] : message.noticeType;
                    if (message.field_1 != null && message.hasOwnProperty("field_1"))
                        object.field_1 = message.field_1;
                    if (message.field_2 != null && message.hasOwnProperty("field_2"))
                        object.field_2 = message.field_2;
                    if (message.field_3 != null && message.hasOwnProperty("field_3"))
                        object.field_3 = message.field_3;
                    return object;
                };

                /**
                 * Converts this TerminalNotice to JSON.
                 * @function toJSON
                 * @memberof wm.protobuf.LoadTerminalInformationResponse.TerminalNotice
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                TerminalNotice.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                /**
                 * Gets the default type url for TerminalNotice
                 * @function getTypeUrl
                 * @memberof wm.protobuf.LoadTerminalInformationResponse.TerminalNotice
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                TerminalNotice.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/wm.protobuf.LoadTerminalInformationResponse.TerminalNotice";
                };

                return TerminalNotice;
            })();

            return LoadTerminalInformationResponse;
        })();

        protobuf.CreateUserRequest = (function() {

            /**
             * Properties of a CreateUserRequest.
             * @memberof wm.protobuf
             * @interface ICreateUserRequest
             * @property {number|null} [banapassportAmId] CreateUserRequest banapassportAmId
             * @property {string|null} [cardChipId] CreateUserRequest cardChipId
             * @property {string|null} [accessCode] CreateUserRequest accessCode
             * @property {number|null} [cardTypeCode] CreateUserRequest cardTypeCode
             * @property {number|null} [cardRegionCode] CreateUserRequest cardRegionCode
             * @property {wm.protobuf.DeviceType|null} [device] CreateUserRequest device
             * @property {number} timestamp CreateUserRequest timestamp
             */

            /**
             * Constructs a new CreateUserRequest.
             * @memberof wm.protobuf
             * @classdesc Represents a CreateUserRequest.
             * @implements ICreateUserRequest
             * @constructor
             * @param {wm.protobuf.ICreateUserRequest=} [properties] Properties to set
             */
            function CreateUserRequest(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * CreateUserRequest banapassportAmId.
             * @member {number} banapassportAmId
             * @memberof wm.protobuf.CreateUserRequest
             * @instance
             */
            CreateUserRequest.prototype.banapassportAmId = 0;

            /**
             * CreateUserRequest cardChipId.
             * @member {string} cardChipId
             * @memberof wm.protobuf.CreateUserRequest
             * @instance
             */
            CreateUserRequest.prototype.cardChipId = "";

            /**
             * CreateUserRequest accessCode.
             * @member {string} accessCode
             * @memberof wm.protobuf.CreateUserRequest
             * @instance
             */
            CreateUserRequest.prototype.accessCode = "";

            /**
             * CreateUserRequest cardTypeCode.
             * @member {number} cardTypeCode
             * @memberof wm.protobuf.CreateUserRequest
             * @instance
             */
            CreateUserRequest.prototype.cardTypeCode = 0;

            /**
             * CreateUserRequest cardRegionCode.
             * @member {number} cardRegionCode
             * @memberof wm.protobuf.CreateUserRequest
             * @instance
             */
            CreateUserRequest.prototype.cardRegionCode = 0;

            /**
             * CreateUserRequest device.
             * @member {wm.protobuf.DeviceType} device
             * @memberof wm.protobuf.CreateUserRequest
             * @instance
             */
            CreateUserRequest.prototype.device = 0;

            /**
             * CreateUserRequest timestamp.
             * @member {number} timestamp
             * @memberof wm.protobuf.CreateUserRequest
             * @instance
             */
            CreateUserRequest.prototype.timestamp = 0;

            /**
             * Creates a new CreateUserRequest instance using the specified properties.
             * @function create
             * @memberof wm.protobuf.CreateUserRequest
             * @static
             * @param {wm.protobuf.ICreateUserRequest=} [properties] Properties to set
             * @returns {wm.protobuf.CreateUserRequest} CreateUserRequest instance
             */
            CreateUserRequest.create = function create(properties) {
                return new CreateUserRequest(properties);
            };

            /**
             * Encodes the specified CreateUserRequest message. Does not implicitly {@link wm.protobuf.CreateUserRequest.verify|verify} messages.
             * @function encode
             * @memberof wm.protobuf.CreateUserRequest
             * @static
             * @param {wm.protobuf.ICreateUserRequest} message CreateUserRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            CreateUserRequest.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.banapassportAmId != null && Object.hasOwnProperty.call(message, "banapassportAmId"))
                    writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.banapassportAmId);
                if (message.cardChipId != null && Object.hasOwnProperty.call(message, "cardChipId"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.cardChipId);
                if (message.accessCode != null && Object.hasOwnProperty.call(message, "accessCode"))
                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.accessCode);
                if (message.cardTypeCode != null && Object.hasOwnProperty.call(message, "cardTypeCode"))
                    writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.cardTypeCode);
                if (message.cardRegionCode != null && Object.hasOwnProperty.call(message, "cardRegionCode"))
                    writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.cardRegionCode);
                if (message.device != null && Object.hasOwnProperty.call(message, "device"))
                    writer.uint32(/* id 6, wireType 0 =*/48).int32(message.device);
                writer.uint32(/* id 7, wireType 0 =*/56).uint32(message.timestamp);
                return writer;
            };

            /**
             * Encodes the specified CreateUserRequest message, length delimited. Does not implicitly {@link wm.protobuf.CreateUserRequest.verify|verify} messages.
             * @function encodeDelimited
             * @memberof wm.protobuf.CreateUserRequest
             * @static
             * @param {wm.protobuf.ICreateUserRequest} message CreateUserRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            CreateUserRequest.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a CreateUserRequest message from the specified reader or buffer.
             * @function decode
             * @memberof wm.protobuf.CreateUserRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {wm.protobuf.CreateUserRequest} CreateUserRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            CreateUserRequest.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.wm.protobuf.CreateUserRequest();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.banapassportAmId = reader.uint32();
                            break;
                        }
                    case 2: {
                            message.cardChipId = reader.string();
                            break;
                        }
                    case 3: {
                            message.accessCode = reader.string();
                            break;
                        }
                    case 4: {
                            message.cardTypeCode = reader.uint32();
                            break;
                        }
                    case 5: {
                            message.cardRegionCode = reader.uint32();
                            break;
                        }
                    case 6: {
                            message.device = reader.int32();
                            break;
                        }
                    case 7: {
                            message.timestamp = reader.uint32();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("timestamp"))
                    throw $util.ProtocolError("missing required 'timestamp'", { instance: message });
                return message;
            };

            /**
             * Decodes a CreateUserRequest message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof wm.protobuf.CreateUserRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {wm.protobuf.CreateUserRequest} CreateUserRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            CreateUserRequest.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a CreateUserRequest message.
             * @function verify
             * @memberof wm.protobuf.CreateUserRequest
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            CreateUserRequest.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.banapassportAmId != null && message.hasOwnProperty("banapassportAmId"))
                    if (!$util.isInteger(message.banapassportAmId))
                        return "banapassportAmId: integer expected";
                if (message.cardChipId != null && message.hasOwnProperty("cardChipId"))
                    if (!$util.isString(message.cardChipId))
                        return "cardChipId: string expected";
                if (message.accessCode != null && message.hasOwnProperty("accessCode"))
                    if (!$util.isString(message.accessCode))
                        return "accessCode: string expected";
                if (message.cardTypeCode != null && message.hasOwnProperty("cardTypeCode"))
                    if (!$util.isInteger(message.cardTypeCode))
                        return "cardTypeCode: integer expected";
                if (message.cardRegionCode != null && message.hasOwnProperty("cardRegionCode"))
                    if (!$util.isInteger(message.cardRegionCode))
                        return "cardRegionCode: integer expected";
                if (message.device != null && message.hasOwnProperty("device"))
                    switch (message.device) {
                    default:
                        return "device: enum value expected";
                    case 0:
                    case 1:
                        break;
                    }
                if (!$util.isInteger(message.timestamp))
                    return "timestamp: integer expected";
                return null;
            };

            /**
             * Creates a CreateUserRequest message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof wm.protobuf.CreateUserRequest
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {wm.protobuf.CreateUserRequest} CreateUserRequest
             */
            CreateUserRequest.fromObject = function fromObject(object) {
                if (object instanceof $root.wm.protobuf.CreateUserRequest)
                    return object;
                let message = new $root.wm.protobuf.CreateUserRequest();
                if (object.banapassportAmId != null)
                    message.banapassportAmId = object.banapassportAmId >>> 0;
                if (object.cardChipId != null)
                    message.cardChipId = String(object.cardChipId);
                if (object.accessCode != null)
                    message.accessCode = String(object.accessCode);
                if (object.cardTypeCode != null)
                    message.cardTypeCode = object.cardTypeCode >>> 0;
                if (object.cardRegionCode != null)
                    message.cardRegionCode = object.cardRegionCode >>> 0;
                switch (object.device) {
                default:
                    if (typeof object.device === "number") {
                        message.device = object.device;
                        break;
                    }
                    break;
                case "DEVICE_CARD":
                case 0:
                    message.device = 0;
                    break;
                case "DEVICE_PHONE":
                case 1:
                    message.device = 1;
                    break;
                }
                if (object.timestamp != null)
                    message.timestamp = object.timestamp >>> 0;
                return message;
            };

            /**
             * Creates a plain object from a CreateUserRequest message. Also converts values to other types if specified.
             * @function toObject
             * @memberof wm.protobuf.CreateUserRequest
             * @static
             * @param {wm.protobuf.CreateUserRequest} message CreateUserRequest
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            CreateUserRequest.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.banapassportAmId = 0;
                    object.cardChipId = "";
                    object.accessCode = "";
                    object.cardTypeCode = 0;
                    object.cardRegionCode = 0;
                    object.device = options.enums === String ? "DEVICE_CARD" : 0;
                    object.timestamp = 0;
                }
                if (message.banapassportAmId != null && message.hasOwnProperty("banapassportAmId"))
                    object.banapassportAmId = message.banapassportAmId;
                if (message.cardChipId != null && message.hasOwnProperty("cardChipId"))
                    object.cardChipId = message.cardChipId;
                if (message.accessCode != null && message.hasOwnProperty("accessCode"))
                    object.accessCode = message.accessCode;
                if (message.cardTypeCode != null && message.hasOwnProperty("cardTypeCode"))
                    object.cardTypeCode = message.cardTypeCode;
                if (message.cardRegionCode != null && message.hasOwnProperty("cardRegionCode"))
                    object.cardRegionCode = message.cardRegionCode;
                if (message.device != null && message.hasOwnProperty("device"))
                    object.device = options.enums === String ? $root.wm.protobuf.DeviceType[message.device] === undefined ? message.device : $root.wm.protobuf.DeviceType[message.device] : message.device;
                if (message.timestamp != null && message.hasOwnProperty("timestamp"))
                    object.timestamp = message.timestamp;
                return object;
            };

            /**
             * Converts this CreateUserRequest to JSON.
             * @function toJSON
             * @memberof wm.protobuf.CreateUserRequest
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            CreateUserRequest.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for CreateUserRequest
             * @function getTypeUrl
             * @memberof wm.protobuf.CreateUserRequest
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            CreateUserRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/wm.protobuf.CreateUserRequest";
            };

            return CreateUserRequest;
        })();

        protobuf.CreateUserResponse = (function() {

            /**
             * Properties of a CreateUserResponse.
             * @memberof wm.protobuf
             * @interface ICreateUserResponse
             * @property {wm.protobuf.ErrorCode} error CreateUserResponse error
             * @property {string|null} [accessCode] CreateUserResponse accessCode
             * @property {number|null} [banapassportAmId] CreateUserResponse banapassportAmId
             * @property {number|null} [mbid] CreateUserResponse mbid
             * @property {number} userId CreateUserResponse userId
             */

            /**
             * Constructs a new CreateUserResponse.
             * @memberof wm.protobuf
             * @classdesc Represents a CreateUserResponse.
             * @implements ICreateUserResponse
             * @constructor
             * @param {wm.protobuf.ICreateUserResponse=} [properties] Properties to set
             */
            function CreateUserResponse(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * CreateUserResponse error.
             * @member {wm.protobuf.ErrorCode} error
             * @memberof wm.protobuf.CreateUserResponse
             * @instance
             */
            CreateUserResponse.prototype.error = 0;

            /**
             * CreateUserResponse accessCode.
             * @member {string} accessCode
             * @memberof wm.protobuf.CreateUserResponse
             * @instance
             */
            CreateUserResponse.prototype.accessCode = "";

            /**
             * CreateUserResponse banapassportAmId.
             * @member {number} banapassportAmId
             * @memberof wm.protobuf.CreateUserResponse
             * @instance
             */
            CreateUserResponse.prototype.banapassportAmId = 0;

            /**
             * CreateUserResponse mbid.
             * @member {number} mbid
             * @memberof wm.protobuf.CreateUserResponse
             * @instance
             */
            CreateUserResponse.prototype.mbid = 0;

            /**
             * CreateUserResponse userId.
             * @member {number} userId
             * @memberof wm.protobuf.CreateUserResponse
             * @instance
             */
            CreateUserResponse.prototype.userId = 0;

            /**
             * Creates a new CreateUserResponse instance using the specified properties.
             * @function create
             * @memberof wm.protobuf.CreateUserResponse
             * @static
             * @param {wm.protobuf.ICreateUserResponse=} [properties] Properties to set
             * @returns {wm.protobuf.CreateUserResponse} CreateUserResponse instance
             */
            CreateUserResponse.create = function create(properties) {
                return new CreateUserResponse(properties);
            };

            /**
             * Encodes the specified CreateUserResponse message. Does not implicitly {@link wm.protobuf.CreateUserResponse.verify|verify} messages.
             * @function encode
             * @memberof wm.protobuf.CreateUserResponse
             * @static
             * @param {wm.protobuf.ICreateUserResponse} message CreateUserResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            CreateUserResponse.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
                if (message.accessCode != null && Object.hasOwnProperty.call(message, "accessCode"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.accessCode);
                if (message.banapassportAmId != null && Object.hasOwnProperty.call(message, "banapassportAmId"))
                    writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.banapassportAmId);
                if (message.mbid != null && Object.hasOwnProperty.call(message, "mbid"))
                    writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.mbid);
                writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.userId);
                return writer;
            };

            /**
             * Encodes the specified CreateUserResponse message, length delimited. Does not implicitly {@link wm.protobuf.CreateUserResponse.verify|verify} messages.
             * @function encodeDelimited
             * @memberof wm.protobuf.CreateUserResponse
             * @static
             * @param {wm.protobuf.ICreateUserResponse} message CreateUserResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            CreateUserResponse.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a CreateUserResponse message from the specified reader or buffer.
             * @function decode
             * @memberof wm.protobuf.CreateUserResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {wm.protobuf.CreateUserResponse} CreateUserResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            CreateUserResponse.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.wm.protobuf.CreateUserResponse();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.error = reader.int32();
                            break;
                        }
                    case 2: {
                            message.accessCode = reader.string();
                            break;
                        }
                    case 3: {
                            message.banapassportAmId = reader.uint32();
                            break;
                        }
                    case 4: {
                            message.mbid = reader.uint32();
                            break;
                        }
                    case 5: {
                            message.userId = reader.uint32();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("error"))
                    throw $util.ProtocolError("missing required 'error'", { instance: message });
                if (!message.hasOwnProperty("userId"))
                    throw $util.ProtocolError("missing required 'userId'", { instance: message });
                return message;
            };

            /**
             * Decodes a CreateUserResponse message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof wm.protobuf.CreateUserResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {wm.protobuf.CreateUserResponse} CreateUserResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            CreateUserResponse.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a CreateUserResponse message.
             * @function verify
             * @memberof wm.protobuf.CreateUserResponse
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            CreateUserResponse.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                switch (message.error) {
                default:
                    return "error: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 7:
                case 9:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 16:
                case 17:
                case 18:
                case 19:
                    break;
                }
                if (message.accessCode != null && message.hasOwnProperty("accessCode"))
                    if (!$util.isString(message.accessCode))
                        return "accessCode: string expected";
                if (message.banapassportAmId != null && message.hasOwnProperty("banapassportAmId"))
                    if (!$util.isInteger(message.banapassportAmId))
                        return "banapassportAmId: integer expected";
                if (message.mbid != null && message.hasOwnProperty("mbid"))
                    if (!$util.isInteger(message.mbid))
                        return "mbid: integer expected";
                if (!$util.isInteger(message.userId))
                    return "userId: integer expected";
                return null;
            };

            /**
             * Creates a CreateUserResponse message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof wm.protobuf.CreateUserResponse
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {wm.protobuf.CreateUserResponse} CreateUserResponse
             */
            CreateUserResponse.fromObject = function fromObject(object) {
                if (object instanceof $root.wm.protobuf.CreateUserResponse)
                    return object;
                let message = new $root.wm.protobuf.CreateUserResponse();
                switch (object.error) {
                default:
                    if (typeof object.error === "number") {
                        message.error = object.error;
                        break;
                    }
                    break;
                case "ERR_SUCCESS":
                case 0:
                    message.error = 0;
                    break;
                case "ERR_REQUEST":
                case 1:
                    message.error = 1;
                    break;
                case "ERR_NOT_FOUND":
                case 2:
                    message.error = 2;
                    break;
                case "ERR_ID_SERVER":
                case 3:
                    message.error = 3;
                    break;
                case "ERR_ID_BANNED":
                case 4:
                    message.error = 4;
                    break;
                case "ERR_USER_LOCKED":
                case 5:
                    message.error = 5;
                    break;
                case "ERR_USER_VERSION":
                case 6:
                    message.error = 6;
                    break;
                case "ERR_NAME_CONFLICTED":
                case 7:
                    message.error = 7;
                    break;
                case "ERR_FORBIDDEN":
                case 9:
                    message.error = 9;
                    break;
                case "ERR_USER_SUCCEEDED":
                case 11:
                    message.error = 11;
                    break;
                case "ERR_BEING_TRANSFERRED":
                case 12:
                    message.error = 12;
                    break;
                case "ERR_SCRATCH_LOCKED":
                case 13:
                    message.error = 13;
                    break;
                case "ERR_BINGO_REVENGE_LOCKED":
                case 14:
                    message.error = 14;
                    break;
                case "ERR_BINGO_ALREDY_LINKED":
                case 15:
                    message.error = 15;
                    break;
                case "ERR_BINGO_FINISHED":
                case 16:
                    message.error = 16;
                    break;
                case "ERR_BINGO_REACHED_MAX_USER":
                case 17:
                    message.error = 17;
                    break;
                case "ERR_CAR_NOT_FOUND":
                case 18:
                    message.error = 18;
                    break;
                case "ERR_BINGO_CARD_NOT_FOUND":
                case 19:
                    message.error = 19;
                    break;
                }
                if (object.accessCode != null)
                    message.accessCode = String(object.accessCode);
                if (object.banapassportAmId != null)
                    message.banapassportAmId = object.banapassportAmId >>> 0;
                if (object.mbid != null)
                    message.mbid = object.mbid >>> 0;
                if (object.userId != null)
                    message.userId = object.userId >>> 0;
                return message;
            };

            /**
             * Creates a plain object from a CreateUserResponse message. Also converts values to other types if specified.
             * @function toObject
             * @memberof wm.protobuf.CreateUserResponse
             * @static
             * @param {wm.protobuf.CreateUserResponse} message CreateUserResponse
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            CreateUserResponse.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.error = options.enums === String ? "ERR_SUCCESS" : 0;
                    object.accessCode = "";
                    object.banapassportAmId = 0;
                    object.mbid = 0;
                    object.userId = 0;
                }
                if (message.error != null && message.hasOwnProperty("error"))
                    object.error = options.enums === String ? $root.wm.protobuf.ErrorCode[message.error] === undefined ? message.error : $root.wm.protobuf.ErrorCode[message.error] : message.error;
                if (message.accessCode != null && message.hasOwnProperty("accessCode"))
                    object.accessCode = message.accessCode;
                if (message.banapassportAmId != null && message.hasOwnProperty("banapassportAmId"))
                    object.banapassportAmId = message.banapassportAmId;
                if (message.mbid != null && message.hasOwnProperty("mbid"))
                    object.mbid = message.mbid;
                if (message.userId != null && message.hasOwnProperty("userId"))
                    object.userId = message.userId;
                return object;
            };

            /**
             * Converts this CreateUserResponse to JSON.
             * @function toJSON
             * @memberof wm.protobuf.CreateUserResponse
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            CreateUserResponse.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for CreateUserResponse
             * @function getTypeUrl
             * @memberof wm.protobuf.CreateUserResponse
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            CreateUserResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/wm.protobuf.CreateUserResponse";
            };

            return CreateUserResponse;
        })();

        protobuf.AskAccessCodeRequest = (function() {

            /**
             * Properties of an AskAccessCodeRequest.
             * @memberof wm.protobuf
             * @interface IAskAccessCodeRequest
             * @property {string} cardChipId AskAccessCodeRequest cardChipId
             */

            /**
             * Constructs a new AskAccessCodeRequest.
             * @memberof wm.protobuf
             * @classdesc Represents an AskAccessCodeRequest.
             * @implements IAskAccessCodeRequest
             * @constructor
             * @param {wm.protobuf.IAskAccessCodeRequest=} [properties] Properties to set
             */
            function AskAccessCodeRequest(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * AskAccessCodeRequest cardChipId.
             * @member {string} cardChipId
             * @memberof wm.protobuf.AskAccessCodeRequest
             * @instance
             */
            AskAccessCodeRequest.prototype.cardChipId = "";

            /**
             * Creates a new AskAccessCodeRequest instance using the specified properties.
             * @function create
             * @memberof wm.protobuf.AskAccessCodeRequest
             * @static
             * @param {wm.protobuf.IAskAccessCodeRequest=} [properties] Properties to set
             * @returns {wm.protobuf.AskAccessCodeRequest} AskAccessCodeRequest instance
             */
            AskAccessCodeRequest.create = function create(properties) {
                return new AskAccessCodeRequest(properties);
            };

            /**
             * Encodes the specified AskAccessCodeRequest message. Does not implicitly {@link wm.protobuf.AskAccessCodeRequest.verify|verify} messages.
             * @function encode
             * @memberof wm.protobuf.AskAccessCodeRequest
             * @static
             * @param {wm.protobuf.IAskAccessCodeRequest} message AskAccessCodeRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            AskAccessCodeRequest.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.cardChipId);
                return writer;
            };

            /**
             * Encodes the specified AskAccessCodeRequest message, length delimited. Does not implicitly {@link wm.protobuf.AskAccessCodeRequest.verify|verify} messages.
             * @function encodeDelimited
             * @memberof wm.protobuf.AskAccessCodeRequest
             * @static
             * @param {wm.protobuf.IAskAccessCodeRequest} message AskAccessCodeRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            AskAccessCodeRequest.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an AskAccessCodeRequest message from the specified reader or buffer.
             * @function decode
             * @memberof wm.protobuf.AskAccessCodeRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {wm.protobuf.AskAccessCodeRequest} AskAccessCodeRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            AskAccessCodeRequest.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.wm.protobuf.AskAccessCodeRequest();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.cardChipId = reader.string();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("cardChipId"))
                    throw $util.ProtocolError("missing required 'cardChipId'", { instance: message });
                return message;
            };

            /**
             * Decodes an AskAccessCodeRequest message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof wm.protobuf.AskAccessCodeRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {wm.protobuf.AskAccessCodeRequest} AskAccessCodeRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            AskAccessCodeRequest.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an AskAccessCodeRequest message.
             * @function verify
             * @memberof wm.protobuf.AskAccessCodeRequest
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            AskAccessCodeRequest.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (!$util.isString(message.cardChipId))
                    return "cardChipId: string expected";
                return null;
            };

            /**
             * Creates an AskAccessCodeRequest message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof wm.protobuf.AskAccessCodeRequest
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {wm.protobuf.AskAccessCodeRequest} AskAccessCodeRequest
             */
            AskAccessCodeRequest.fromObject = function fromObject(object) {
                if (object instanceof $root.wm.protobuf.AskAccessCodeRequest)
                    return object;
                let message = new $root.wm.protobuf.AskAccessCodeRequest();
                if (object.cardChipId != null)
                    message.cardChipId = String(object.cardChipId);
                return message;
            };

            /**
             * Creates a plain object from an AskAccessCodeRequest message. Also converts values to other types if specified.
             * @function toObject
             * @memberof wm.protobuf.AskAccessCodeRequest
             * @static
             * @param {wm.protobuf.AskAccessCodeRequest} message AskAccessCodeRequest
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            AskAccessCodeRequest.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults)
                    object.cardChipId = "";
                if (message.cardChipId != null && message.hasOwnProperty("cardChipId"))
                    object.cardChipId = message.cardChipId;
                return object;
            };

            /**
             * Converts this AskAccessCodeRequest to JSON.
             * @function toJSON
             * @memberof wm.protobuf.AskAccessCodeRequest
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            AskAccessCodeRequest.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for AskAccessCodeRequest
             * @function getTypeUrl
             * @memberof wm.protobuf.AskAccessCodeRequest
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            AskAccessCodeRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/wm.protobuf.AskAccessCodeRequest";
            };

            return AskAccessCodeRequest;
        })();

        protobuf.AskAccessCodeResponse = (function() {

            /**
             * Properties of an AskAccessCodeResponse.
             * @memberof wm.protobuf
             * @interface IAskAccessCodeResponse
             * @property {wm.protobuf.ErrorCode} error AskAccessCodeResponse error
             * @property {string} accessCode AskAccessCodeResponse accessCode
             */

            /**
             * Constructs a new AskAccessCodeResponse.
             * @memberof wm.protobuf
             * @classdesc Represents an AskAccessCodeResponse.
             * @implements IAskAccessCodeResponse
             * @constructor
             * @param {wm.protobuf.IAskAccessCodeResponse=} [properties] Properties to set
             */
            function AskAccessCodeResponse(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * AskAccessCodeResponse error.
             * @member {wm.protobuf.ErrorCode} error
             * @memberof wm.protobuf.AskAccessCodeResponse
             * @instance
             */
            AskAccessCodeResponse.prototype.error = 0;

            /**
             * AskAccessCodeResponse accessCode.
             * @member {string} accessCode
             * @memberof wm.protobuf.AskAccessCodeResponse
             * @instance
             */
            AskAccessCodeResponse.prototype.accessCode = "";

            /**
             * Creates a new AskAccessCodeResponse instance using the specified properties.
             * @function create
             * @memberof wm.protobuf.AskAccessCodeResponse
             * @static
             * @param {wm.protobuf.IAskAccessCodeResponse=} [properties] Properties to set
             * @returns {wm.protobuf.AskAccessCodeResponse} AskAccessCodeResponse instance
             */
            AskAccessCodeResponse.create = function create(properties) {
                return new AskAccessCodeResponse(properties);
            };

            /**
             * Encodes the specified AskAccessCodeResponse message. Does not implicitly {@link wm.protobuf.AskAccessCodeResponse.verify|verify} messages.
             * @function encode
             * @memberof wm.protobuf.AskAccessCodeResponse
             * @static
             * @param {wm.protobuf.IAskAccessCodeResponse} message AskAccessCodeResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            AskAccessCodeResponse.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.accessCode);
                return writer;
            };

            /**
             * Encodes the specified AskAccessCodeResponse message, length delimited. Does not implicitly {@link wm.protobuf.AskAccessCodeResponse.verify|verify} messages.
             * @function encodeDelimited
             * @memberof wm.protobuf.AskAccessCodeResponse
             * @static
             * @param {wm.protobuf.IAskAccessCodeResponse} message AskAccessCodeResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            AskAccessCodeResponse.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an AskAccessCodeResponse message from the specified reader or buffer.
             * @function decode
             * @memberof wm.protobuf.AskAccessCodeResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {wm.protobuf.AskAccessCodeResponse} AskAccessCodeResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            AskAccessCodeResponse.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.wm.protobuf.AskAccessCodeResponse();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.error = reader.int32();
                            break;
                        }
                    case 2: {
                            message.accessCode = reader.string();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("error"))
                    throw $util.ProtocolError("missing required 'error'", { instance: message });
                if (!message.hasOwnProperty("accessCode"))
                    throw $util.ProtocolError("missing required 'accessCode'", { instance: message });
                return message;
            };

            /**
             * Decodes an AskAccessCodeResponse message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof wm.protobuf.AskAccessCodeResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {wm.protobuf.AskAccessCodeResponse} AskAccessCodeResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            AskAccessCodeResponse.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an AskAccessCodeResponse message.
             * @function verify
             * @memberof wm.protobuf.AskAccessCodeResponse
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            AskAccessCodeResponse.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                switch (message.error) {
                default:
                    return "error: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 7:
                case 9:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 16:
                case 17:
                case 18:
                case 19:
                    break;
                }
                if (!$util.isString(message.accessCode))
                    return "accessCode: string expected";
                return null;
            };

            /**
             * Creates an AskAccessCodeResponse message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof wm.protobuf.AskAccessCodeResponse
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {wm.protobuf.AskAccessCodeResponse} AskAccessCodeResponse
             */
            AskAccessCodeResponse.fromObject = function fromObject(object) {
                if (object instanceof $root.wm.protobuf.AskAccessCodeResponse)
                    return object;
                let message = new $root.wm.protobuf.AskAccessCodeResponse();
                switch (object.error) {
                default:
                    if (typeof object.error === "number") {
                        message.error = object.error;
                        break;
                    }
                    break;
                case "ERR_SUCCESS":
                case 0:
                    message.error = 0;
                    break;
                case "ERR_REQUEST":
                case 1:
                    message.error = 1;
                    break;
                case "ERR_NOT_FOUND":
                case 2:
                    message.error = 2;
                    break;
                case "ERR_ID_SERVER":
                case 3:
                    message.error = 3;
                    break;
                case "ERR_ID_BANNED":
                case 4:
                    message.error = 4;
                    break;
                case "ERR_USER_LOCKED":
                case 5:
                    message.error = 5;
                    break;
                case "ERR_USER_VERSION":
                case 6:
                    message.error = 6;
                    break;
                case "ERR_NAME_CONFLICTED":
                case 7:
                    message.error = 7;
                    break;
                case "ERR_FORBIDDEN":
                case 9:
                    message.error = 9;
                    break;
                case "ERR_USER_SUCCEEDED":
                case 11:
                    message.error = 11;
                    break;
                case "ERR_BEING_TRANSFERRED":
                case 12:
                    message.error = 12;
                    break;
                case "ERR_SCRATCH_LOCKED":
                case 13:
                    message.error = 13;
                    break;
                case "ERR_BINGO_REVENGE_LOCKED":
                case 14:
                    message.error = 14;
                    break;
                case "ERR_BINGO_ALREDY_LINKED":
                case 15:
                    message.error = 15;
                    break;
                case "ERR_BINGO_FINISHED":
                case 16:
                    message.error = 16;
                    break;
                case "ERR_BINGO_REACHED_MAX_USER":
                case 17:
                    message.error = 17;
                    break;
                case "ERR_CAR_NOT_FOUND":
                case 18:
                    message.error = 18;
                    break;
                case "ERR_BINGO_CARD_NOT_FOUND":
                case 19:
                    message.error = 19;
                    break;
                }
                if (object.accessCode != null)
                    message.accessCode = String(object.accessCode);
                return message;
            };

            /**
             * Creates a plain object from an AskAccessCodeResponse message. Also converts values to other types if specified.
             * @function toObject
             * @memberof wm.protobuf.AskAccessCodeResponse
             * @static
             * @param {wm.protobuf.AskAccessCodeResponse} message AskAccessCodeResponse
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            AskAccessCodeResponse.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.error = options.enums === String ? "ERR_SUCCESS" : 0;
                    object.accessCode = "";
                }
                if (message.error != null && message.hasOwnProperty("error"))
                    object.error = options.enums === String ? $root.wm.protobuf.ErrorCode[message.error] === undefined ? message.error : $root.wm.protobuf.ErrorCode[message.error] : message.error;
                if (message.accessCode != null && message.hasOwnProperty("accessCode"))
                    object.accessCode = message.accessCode;
                return object;
            };

            /**
             * Converts this AskAccessCodeResponse to JSON.
             * @function toJSON
             * @memberof wm.protobuf.AskAccessCodeResponse
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            AskAccessCodeResponse.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for AskAccessCodeResponse
             * @function getTypeUrl
             * @memberof wm.protobuf.AskAccessCodeResponse
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            AskAccessCodeResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/wm.protobuf.AskAccessCodeResponse";
            };

            return AskAccessCodeResponse;
        })();

        protobuf.RegisterOpponentGhostRequest = (function() {

            /**
             * Properties of a RegisterOpponentGhostRequest.
             * @memberof wm.protobuf
             * @interface IRegisterOpponentGhostRequest
             * @property {number} carId RegisterOpponentGhostRequest carId
             * @property {number} specialGhostId RegisterOpponentGhostRequest specialGhostId
             */

            /**
             * Constructs a new RegisterOpponentGhostRequest.
             * @memberof wm.protobuf
             * @classdesc Represents a RegisterOpponentGhostRequest.
             * @implements IRegisterOpponentGhostRequest
             * @constructor
             * @param {wm.protobuf.IRegisterOpponentGhostRequest=} [properties] Properties to set
             */
            function RegisterOpponentGhostRequest(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * RegisterOpponentGhostRequest carId.
             * @member {number} carId
             * @memberof wm.protobuf.RegisterOpponentGhostRequest
             * @instance
             */
            RegisterOpponentGhostRequest.prototype.carId = 0;

            /**
             * RegisterOpponentGhostRequest specialGhostId.
             * @member {number} specialGhostId
             * @memberof wm.protobuf.RegisterOpponentGhostRequest
             * @instance
             */
            RegisterOpponentGhostRequest.prototype.specialGhostId = 0;

            /**
             * Creates a new RegisterOpponentGhostRequest instance using the specified properties.
             * @function create
             * @memberof wm.protobuf.RegisterOpponentGhostRequest
             * @static
             * @param {wm.protobuf.IRegisterOpponentGhostRequest=} [properties] Properties to set
             * @returns {wm.protobuf.RegisterOpponentGhostRequest} RegisterOpponentGhostRequest instance
             */
            RegisterOpponentGhostRequest.create = function create(properties) {
                return new RegisterOpponentGhostRequest(properties);
            };

            /**
             * Encodes the specified RegisterOpponentGhostRequest message. Does not implicitly {@link wm.protobuf.RegisterOpponentGhostRequest.verify|verify} messages.
             * @function encode
             * @memberof wm.protobuf.RegisterOpponentGhostRequest
             * @static
             * @param {wm.protobuf.IRegisterOpponentGhostRequest} message RegisterOpponentGhostRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RegisterOpponentGhostRequest.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.carId);
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.specialGhostId);
                return writer;
            };

            /**
             * Encodes the specified RegisterOpponentGhostRequest message, length delimited. Does not implicitly {@link wm.protobuf.RegisterOpponentGhostRequest.verify|verify} messages.
             * @function encodeDelimited
             * @memberof wm.protobuf.RegisterOpponentGhostRequest
             * @static
             * @param {wm.protobuf.IRegisterOpponentGhostRequest} message RegisterOpponentGhostRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RegisterOpponentGhostRequest.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a RegisterOpponentGhostRequest message from the specified reader or buffer.
             * @function decode
             * @memberof wm.protobuf.RegisterOpponentGhostRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {wm.protobuf.RegisterOpponentGhostRequest} RegisterOpponentGhostRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RegisterOpponentGhostRequest.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.wm.protobuf.RegisterOpponentGhostRequest();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.carId = reader.uint32();
                            break;
                        }
                    case 2: {
                            message.specialGhostId = reader.uint32();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("carId"))
                    throw $util.ProtocolError("missing required 'carId'", { instance: message });
                if (!message.hasOwnProperty("specialGhostId"))
                    throw $util.ProtocolError("missing required 'specialGhostId'", { instance: message });
                return message;
            };

            /**
             * Decodes a RegisterOpponentGhostRequest message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof wm.protobuf.RegisterOpponentGhostRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {wm.protobuf.RegisterOpponentGhostRequest} RegisterOpponentGhostRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RegisterOpponentGhostRequest.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a RegisterOpponentGhostRequest message.
             * @function verify
             * @memberof wm.protobuf.RegisterOpponentGhostRequest
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            RegisterOpponentGhostRequest.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (!$util.isInteger(message.carId))
                    return "carId: integer expected";
                if (!$util.isInteger(message.specialGhostId))
                    return "specialGhostId: integer expected";
                return null;
            };

            /**
             * Creates a RegisterOpponentGhostRequest message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof wm.protobuf.RegisterOpponentGhostRequest
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {wm.protobuf.RegisterOpponentGhostRequest} RegisterOpponentGhostRequest
             */
            RegisterOpponentGhostRequest.fromObject = function fromObject(object) {
                if (object instanceof $root.wm.protobuf.RegisterOpponentGhostRequest)
                    return object;
                let message = new $root.wm.protobuf.RegisterOpponentGhostRequest();
                if (object.carId != null)
                    message.carId = object.carId >>> 0;
                if (object.specialGhostId != null)
                    message.specialGhostId = object.specialGhostId >>> 0;
                return message;
            };

            /**
             * Creates a plain object from a RegisterOpponentGhostRequest message. Also converts values to other types if specified.
             * @function toObject
             * @memberof wm.protobuf.RegisterOpponentGhostRequest
             * @static
             * @param {wm.protobuf.RegisterOpponentGhostRequest} message RegisterOpponentGhostRequest
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            RegisterOpponentGhostRequest.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.carId = 0;
                    object.specialGhostId = 0;
                }
                if (message.carId != null && message.hasOwnProperty("carId"))
                    object.carId = message.carId;
                if (message.specialGhostId != null && message.hasOwnProperty("specialGhostId"))
                    object.specialGhostId = message.specialGhostId;
                return object;
            };

            /**
             * Converts this RegisterOpponentGhostRequest to JSON.
             * @function toJSON
             * @memberof wm.protobuf.RegisterOpponentGhostRequest
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            RegisterOpponentGhostRequest.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for RegisterOpponentGhostRequest
             * @function getTypeUrl
             * @memberof wm.protobuf.RegisterOpponentGhostRequest
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            RegisterOpponentGhostRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/wm.protobuf.RegisterOpponentGhostRequest";
            };

            return RegisterOpponentGhostRequest;
        })();

        protobuf.RegisterOpponentGhostResponse = (function() {

            /**
             * Properties of a RegisterOpponentGhostResponse.
             * @memberof wm.protobuf
             * @interface IRegisterOpponentGhostResponse
             * @property {wm.protobuf.ErrorCode} error RegisterOpponentGhostResponse error
             */

            /**
             * Constructs a new RegisterOpponentGhostResponse.
             * @memberof wm.protobuf
             * @classdesc Represents a RegisterOpponentGhostResponse.
             * @implements IRegisterOpponentGhostResponse
             * @constructor
             * @param {wm.protobuf.IRegisterOpponentGhostResponse=} [properties] Properties to set
             */
            function RegisterOpponentGhostResponse(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * RegisterOpponentGhostResponse error.
             * @member {wm.protobuf.ErrorCode} error
             * @memberof wm.protobuf.RegisterOpponentGhostResponse
             * @instance
             */
            RegisterOpponentGhostResponse.prototype.error = 0;

            /**
             * Creates a new RegisterOpponentGhostResponse instance using the specified properties.
             * @function create
             * @memberof wm.protobuf.RegisterOpponentGhostResponse
             * @static
             * @param {wm.protobuf.IRegisterOpponentGhostResponse=} [properties] Properties to set
             * @returns {wm.protobuf.RegisterOpponentGhostResponse} RegisterOpponentGhostResponse instance
             */
            RegisterOpponentGhostResponse.create = function create(properties) {
                return new RegisterOpponentGhostResponse(properties);
            };

            /**
             * Encodes the specified RegisterOpponentGhostResponse message. Does not implicitly {@link wm.protobuf.RegisterOpponentGhostResponse.verify|verify} messages.
             * @function encode
             * @memberof wm.protobuf.RegisterOpponentGhostResponse
             * @static
             * @param {wm.protobuf.IRegisterOpponentGhostResponse} message RegisterOpponentGhostResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RegisterOpponentGhostResponse.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
                return writer;
            };

            /**
             * Encodes the specified RegisterOpponentGhostResponse message, length delimited. Does not implicitly {@link wm.protobuf.RegisterOpponentGhostResponse.verify|verify} messages.
             * @function encodeDelimited
             * @memberof wm.protobuf.RegisterOpponentGhostResponse
             * @static
             * @param {wm.protobuf.IRegisterOpponentGhostResponse} message RegisterOpponentGhostResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RegisterOpponentGhostResponse.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a RegisterOpponentGhostResponse message from the specified reader or buffer.
             * @function decode
             * @memberof wm.protobuf.RegisterOpponentGhostResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {wm.protobuf.RegisterOpponentGhostResponse} RegisterOpponentGhostResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RegisterOpponentGhostResponse.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.wm.protobuf.RegisterOpponentGhostResponse();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.error = reader.int32();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("error"))
                    throw $util.ProtocolError("missing required 'error'", { instance: message });
                return message;
            };

            /**
             * Decodes a RegisterOpponentGhostResponse message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof wm.protobuf.RegisterOpponentGhostResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {wm.protobuf.RegisterOpponentGhostResponse} RegisterOpponentGhostResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RegisterOpponentGhostResponse.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a RegisterOpponentGhostResponse message.
             * @function verify
             * @memberof wm.protobuf.RegisterOpponentGhostResponse
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            RegisterOpponentGhostResponse.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                switch (message.error) {
                default:
                    return "error: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 7:
                case 9:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 16:
                case 17:
                case 18:
                case 19:
                    break;
                }
                return null;
            };

            /**
             * Creates a RegisterOpponentGhostResponse message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof wm.protobuf.RegisterOpponentGhostResponse
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {wm.protobuf.RegisterOpponentGhostResponse} RegisterOpponentGhostResponse
             */
            RegisterOpponentGhostResponse.fromObject = function fromObject(object) {
                if (object instanceof $root.wm.protobuf.RegisterOpponentGhostResponse)
                    return object;
                let message = new $root.wm.protobuf.RegisterOpponentGhostResponse();
                switch (object.error) {
                default:
                    if (typeof object.error === "number") {
                        message.error = object.error;
                        break;
                    }
                    break;
                case "ERR_SUCCESS":
                case 0:
                    message.error = 0;
                    break;
                case "ERR_REQUEST":
                case 1:
                    message.error = 1;
                    break;
                case "ERR_NOT_FOUND":
                case 2:
                    message.error = 2;
                    break;
                case "ERR_ID_SERVER":
                case 3:
                    message.error = 3;
                    break;
                case "ERR_ID_BANNED":
                case 4:
                    message.error = 4;
                    break;
                case "ERR_USER_LOCKED":
                case 5:
                    message.error = 5;
                    break;
                case "ERR_USER_VERSION":
                case 6:
                    message.error = 6;
                    break;
                case "ERR_NAME_CONFLICTED":
                case 7:
                    message.error = 7;
                    break;
                case "ERR_FORBIDDEN":
                case 9:
                    message.error = 9;
                    break;
                case "ERR_USER_SUCCEEDED":
                case 11:
                    message.error = 11;
                    break;
                case "ERR_BEING_TRANSFERRED":
                case 12:
                    message.error = 12;
                    break;
                case "ERR_SCRATCH_LOCKED":
                case 13:
                    message.error = 13;
                    break;
                case "ERR_BINGO_REVENGE_LOCKED":
                case 14:
                    message.error = 14;
                    break;
                case "ERR_BINGO_ALREDY_LINKED":
                case 15:
                    message.error = 15;
                    break;
                case "ERR_BINGO_FINISHED":
                case 16:
                    message.error = 16;
                    break;
                case "ERR_BINGO_REACHED_MAX_USER":
                case 17:
                    message.error = 17;
                    break;
                case "ERR_CAR_NOT_FOUND":
                case 18:
                    message.error = 18;
                    break;
                case "ERR_BINGO_CARD_NOT_FOUND":
                case 19:
                    message.error = 19;
                    break;
                }
                return message;
            };

            /**
             * Creates a plain object from a RegisterOpponentGhostResponse message. Also converts values to other types if specified.
             * @function toObject
             * @memberof wm.protobuf.RegisterOpponentGhostResponse
             * @static
             * @param {wm.protobuf.RegisterOpponentGhostResponse} message RegisterOpponentGhostResponse
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            RegisterOpponentGhostResponse.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults)
                    object.error = options.enums === String ? "ERR_SUCCESS" : 0;
                if (message.error != null && message.hasOwnProperty("error"))
                    object.error = options.enums === String ? $root.wm.protobuf.ErrorCode[message.error] === undefined ? message.error : $root.wm.protobuf.ErrorCode[message.error] : message.error;
                return object;
            };

            /**
             * Converts this RegisterOpponentGhostResponse to JSON.
             * @function toJSON
             * @memberof wm.protobuf.RegisterOpponentGhostResponse
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            RegisterOpponentGhostResponse.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for RegisterOpponentGhostResponse
             * @function getTypeUrl
             * @memberof wm.protobuf.RegisterOpponentGhostResponse
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            RegisterOpponentGhostResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/wm.protobuf.RegisterOpponentGhostResponse";
            };

            return RegisterOpponentGhostResponse;
        })();

        protobuf.GrantCarRightRequest = (function() {

            /**
             * Properties of a GrantCarRightRequest.
             * @memberof wm.protobuf
             * @interface IGrantCarRightRequest
             * @property {number} userId GrantCarRightRequest userId
             * @property {number} targetUserId GrantCarRightRequest targetUserId
             * @property {number} timestamp GrantCarRightRequest timestamp
             */

            /**
             * Constructs a new GrantCarRightRequest.
             * @memberof wm.protobuf
             * @classdesc Represents a GrantCarRightRequest.
             * @implements IGrantCarRightRequest
             * @constructor
             * @param {wm.protobuf.IGrantCarRightRequest=} [properties] Properties to set
             */
            function GrantCarRightRequest(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * GrantCarRightRequest userId.
             * @member {number} userId
             * @memberof wm.protobuf.GrantCarRightRequest
             * @instance
             */
            GrantCarRightRequest.prototype.userId = 0;

            /**
             * GrantCarRightRequest targetUserId.
             * @member {number} targetUserId
             * @memberof wm.protobuf.GrantCarRightRequest
             * @instance
             */
            GrantCarRightRequest.prototype.targetUserId = 0;

            /**
             * GrantCarRightRequest timestamp.
             * @member {number} timestamp
             * @memberof wm.protobuf.GrantCarRightRequest
             * @instance
             */
            GrantCarRightRequest.prototype.timestamp = 0;

            /**
             * Creates a new GrantCarRightRequest instance using the specified properties.
             * @function create
             * @memberof wm.protobuf.GrantCarRightRequest
             * @static
             * @param {wm.protobuf.IGrantCarRightRequest=} [properties] Properties to set
             * @returns {wm.protobuf.GrantCarRightRequest} GrantCarRightRequest instance
             */
            GrantCarRightRequest.create = function create(properties) {
                return new GrantCarRightRequest(properties);
            };

            /**
             * Encodes the specified GrantCarRightRequest message. Does not implicitly {@link wm.protobuf.GrantCarRightRequest.verify|verify} messages.
             * @function encode
             * @memberof wm.protobuf.GrantCarRightRequest
             * @static
             * @param {wm.protobuf.IGrantCarRightRequest} message GrantCarRightRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GrantCarRightRequest.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.userId);
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.targetUserId);
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.timestamp);
                return writer;
            };

            /**
             * Encodes the specified GrantCarRightRequest message, length delimited. Does not implicitly {@link wm.protobuf.GrantCarRightRequest.verify|verify} messages.
             * @function encodeDelimited
             * @memberof wm.protobuf.GrantCarRightRequest
             * @static
             * @param {wm.protobuf.IGrantCarRightRequest} message GrantCarRightRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GrantCarRightRequest.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a GrantCarRightRequest message from the specified reader or buffer.
             * @function decode
             * @memberof wm.protobuf.GrantCarRightRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {wm.protobuf.GrantCarRightRequest} GrantCarRightRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GrantCarRightRequest.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.wm.protobuf.GrantCarRightRequest();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.userId = reader.uint32();
                            break;
                        }
                    case 2: {
                            message.targetUserId = reader.uint32();
                            break;
                        }
                    case 3: {
                            message.timestamp = reader.uint32();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("userId"))
                    throw $util.ProtocolError("missing required 'userId'", { instance: message });
                if (!message.hasOwnProperty("targetUserId"))
                    throw $util.ProtocolError("missing required 'targetUserId'", { instance: message });
                if (!message.hasOwnProperty("timestamp"))
                    throw $util.ProtocolError("missing required 'timestamp'", { instance: message });
                return message;
            };

            /**
             * Decodes a GrantCarRightRequest message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof wm.protobuf.GrantCarRightRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {wm.protobuf.GrantCarRightRequest} GrantCarRightRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GrantCarRightRequest.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a GrantCarRightRequest message.
             * @function verify
             * @memberof wm.protobuf.GrantCarRightRequest
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            GrantCarRightRequest.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (!$util.isInteger(message.userId))
                    return "userId: integer expected";
                if (!$util.isInteger(message.targetUserId))
                    return "targetUserId: integer expected";
                if (!$util.isInteger(message.timestamp))
                    return "timestamp: integer expected";
                return null;
            };

            /**
             * Creates a GrantCarRightRequest message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof wm.protobuf.GrantCarRightRequest
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {wm.protobuf.GrantCarRightRequest} GrantCarRightRequest
             */
            GrantCarRightRequest.fromObject = function fromObject(object) {
                if (object instanceof $root.wm.protobuf.GrantCarRightRequest)
                    return object;
                let message = new $root.wm.protobuf.GrantCarRightRequest();
                if (object.userId != null)
                    message.userId = object.userId >>> 0;
                if (object.targetUserId != null)
                    message.targetUserId = object.targetUserId >>> 0;
                if (object.timestamp != null)
                    message.timestamp = object.timestamp >>> 0;
                return message;
            };

            /**
             * Creates a plain object from a GrantCarRightRequest message. Also converts values to other types if specified.
             * @function toObject
             * @memberof wm.protobuf.GrantCarRightRequest
             * @static
             * @param {wm.protobuf.GrantCarRightRequest} message GrantCarRightRequest
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            GrantCarRightRequest.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.userId = 0;
                    object.targetUserId = 0;
                    object.timestamp = 0;
                }
                if (message.userId != null && message.hasOwnProperty("userId"))
                    object.userId = message.userId;
                if (message.targetUserId != null && message.hasOwnProperty("targetUserId"))
                    object.targetUserId = message.targetUserId;
                if (message.timestamp != null && message.hasOwnProperty("timestamp"))
                    object.timestamp = message.timestamp;
                return object;
            };

            /**
             * Converts this GrantCarRightRequest to JSON.
             * @function toJSON
             * @memberof wm.protobuf.GrantCarRightRequest
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            GrantCarRightRequest.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for GrantCarRightRequest
             * @function getTypeUrl
             * @memberof wm.protobuf.GrantCarRightRequest
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            GrantCarRightRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/wm.protobuf.GrantCarRightRequest";
            };

            return GrantCarRightRequest;
        })();

        protobuf.GrantCarRightResponse = (function() {

            /**
             * Properties of a GrantCarRightResponse.
             * @memberof wm.protobuf
             * @interface IGrantCarRightResponse
             * @property {wm.protobuf.ErrorCode} error GrantCarRightResponse error
             */

            /**
             * Constructs a new GrantCarRightResponse.
             * @memberof wm.protobuf
             * @classdesc Represents a GrantCarRightResponse.
             * @implements IGrantCarRightResponse
             * @constructor
             * @param {wm.protobuf.IGrantCarRightResponse=} [properties] Properties to set
             */
            function GrantCarRightResponse(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * GrantCarRightResponse error.
             * @member {wm.protobuf.ErrorCode} error
             * @memberof wm.protobuf.GrantCarRightResponse
             * @instance
             */
            GrantCarRightResponse.prototype.error = 0;

            /**
             * Creates a new GrantCarRightResponse instance using the specified properties.
             * @function create
             * @memberof wm.protobuf.GrantCarRightResponse
             * @static
             * @param {wm.protobuf.IGrantCarRightResponse=} [properties] Properties to set
             * @returns {wm.protobuf.GrantCarRightResponse} GrantCarRightResponse instance
             */
            GrantCarRightResponse.create = function create(properties) {
                return new GrantCarRightResponse(properties);
            };

            /**
             * Encodes the specified GrantCarRightResponse message. Does not implicitly {@link wm.protobuf.GrantCarRightResponse.verify|verify} messages.
             * @function encode
             * @memberof wm.protobuf.GrantCarRightResponse
             * @static
             * @param {wm.protobuf.IGrantCarRightResponse} message GrantCarRightResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GrantCarRightResponse.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
                return writer;
            };

            /**
             * Encodes the specified GrantCarRightResponse message, length delimited. Does not implicitly {@link wm.protobuf.GrantCarRightResponse.verify|verify} messages.
             * @function encodeDelimited
             * @memberof wm.protobuf.GrantCarRightResponse
             * @static
             * @param {wm.protobuf.IGrantCarRightResponse} message GrantCarRightResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GrantCarRightResponse.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a GrantCarRightResponse message from the specified reader or buffer.
             * @function decode
             * @memberof wm.protobuf.GrantCarRightResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {wm.protobuf.GrantCarRightResponse} GrantCarRightResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GrantCarRightResponse.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.wm.protobuf.GrantCarRightResponse();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.error = reader.int32();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("error"))
                    throw $util.ProtocolError("missing required 'error'", { instance: message });
                return message;
            };

            /**
             * Decodes a GrantCarRightResponse message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof wm.protobuf.GrantCarRightResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {wm.protobuf.GrantCarRightResponse} GrantCarRightResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GrantCarRightResponse.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a GrantCarRightResponse message.
             * @function verify
             * @memberof wm.protobuf.GrantCarRightResponse
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            GrantCarRightResponse.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                switch (message.error) {
                default:
                    return "error: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 7:
                case 9:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 16:
                case 17:
                case 18:
                case 19:
                    break;
                }
                return null;
            };

            /**
             * Creates a GrantCarRightResponse message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof wm.protobuf.GrantCarRightResponse
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {wm.protobuf.GrantCarRightResponse} GrantCarRightResponse
             */
            GrantCarRightResponse.fromObject = function fromObject(object) {
                if (object instanceof $root.wm.protobuf.GrantCarRightResponse)
                    return object;
                let message = new $root.wm.protobuf.GrantCarRightResponse();
                switch (object.error) {
                default:
                    if (typeof object.error === "number") {
                        message.error = object.error;
                        break;
                    }
                    break;
                case "ERR_SUCCESS":
                case 0:
                    message.error = 0;
                    break;
                case "ERR_REQUEST":
                case 1:
                    message.error = 1;
                    break;
                case "ERR_NOT_FOUND":
                case 2:
                    message.error = 2;
                    break;
                case "ERR_ID_SERVER":
                case 3:
                    message.error = 3;
                    break;
                case "ERR_ID_BANNED":
                case 4:
                    message.error = 4;
                    break;
                case "ERR_USER_LOCKED":
                case 5:
                    message.error = 5;
                    break;
                case "ERR_USER_VERSION":
                case 6:
                    message.error = 6;
                    break;
                case "ERR_NAME_CONFLICTED":
                case 7:
                    message.error = 7;
                    break;
                case "ERR_FORBIDDEN":
                case 9:
                    message.error = 9;
                    break;
                case "ERR_USER_SUCCEEDED":
                case 11:
                    message.error = 11;
                    break;
                case "ERR_BEING_TRANSFERRED":
                case 12:
                    message.error = 12;
                    break;
                case "ERR_SCRATCH_LOCKED":
                case 13:
                    message.error = 13;
                    break;
                case "ERR_BINGO_REVENGE_LOCKED":
                case 14:
                    message.error = 14;
                    break;
                case "ERR_BINGO_ALREDY_LINKED":
                case 15:
                    message.error = 15;
                    break;
                case "ERR_BINGO_FINISHED":
                case 16:
                    message.error = 16;
                    break;
                case "ERR_BINGO_REACHED_MAX_USER":
                case 17:
                    message.error = 17;
                    break;
                case "ERR_CAR_NOT_FOUND":
                case 18:
                    message.error = 18;
                    break;
                case "ERR_BINGO_CARD_NOT_FOUND":
                case 19:
                    message.error = 19;
                    break;
                }
                return message;
            };

            /**
             * Creates a plain object from a GrantCarRightResponse message. Also converts values to other types if specified.
             * @function toObject
             * @memberof wm.protobuf.GrantCarRightResponse
             * @static
             * @param {wm.protobuf.GrantCarRightResponse} message GrantCarRightResponse
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            GrantCarRightResponse.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults)
                    object.error = options.enums === String ? "ERR_SUCCESS" : 0;
                if (message.error != null && message.hasOwnProperty("error"))
                    object.error = options.enums === String ? $root.wm.protobuf.ErrorCode[message.error] === undefined ? message.error : $root.wm.protobuf.ErrorCode[message.error] : message.error;
                return object;
            };

            /**
             * Converts this GrantCarRightResponse to JSON.
             * @function toJSON
             * @memberof wm.protobuf.GrantCarRightResponse
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            GrantCarRightResponse.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for GrantCarRightResponse
             * @function getTypeUrl
             * @memberof wm.protobuf.GrantCarRightResponse
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            GrantCarRightResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/wm.protobuf.GrantCarRightResponse";
            };

            return GrantCarRightResponse;
        })();

        protobuf.LoadGhostCompetitionRankingRequest = (function() {

            /**
             * Properties of a LoadGhostCompetitionRankingRequest.
             * @memberof wm.protobuf
             * @interface ILoadGhostCompetitionRankingRequest
             * @property {number} carId LoadGhostCompetitionRankingRequest carId
             * @property {number} competitionId LoadGhostCompetitionRankingRequest competitionId
             */

            /**
             * Constructs a new LoadGhostCompetitionRankingRequest.
             * @memberof wm.protobuf
             * @classdesc Represents a LoadGhostCompetitionRankingRequest.
             * @implements ILoadGhostCompetitionRankingRequest
             * @constructor
             * @param {wm.protobuf.ILoadGhostCompetitionRankingRequest=} [properties] Properties to set
             */
            function LoadGhostCompetitionRankingRequest(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * LoadGhostCompetitionRankingRequest carId.
             * @member {number} carId
             * @memberof wm.protobuf.LoadGhostCompetitionRankingRequest
             * @instance
             */
            LoadGhostCompetitionRankingRequest.prototype.carId = 0;

            /**
             * LoadGhostCompetitionRankingRequest competitionId.
             * @member {number} competitionId
             * @memberof wm.protobuf.LoadGhostCompetitionRankingRequest
             * @instance
             */
            LoadGhostCompetitionRankingRequest.prototype.competitionId = 0;

            /**
             * Creates a new LoadGhostCompetitionRankingRequest instance using the specified properties.
             * @function create
             * @memberof wm.protobuf.LoadGhostCompetitionRankingRequest
             * @static
             * @param {wm.protobuf.ILoadGhostCompetitionRankingRequest=} [properties] Properties to set
             * @returns {wm.protobuf.LoadGhostCompetitionRankingRequest} LoadGhostCompetitionRankingRequest instance
             */
            LoadGhostCompetitionRankingRequest.create = function create(properties) {
                return new LoadGhostCompetitionRankingRequest(properties);
            };

            /**
             * Encodes the specified LoadGhostCompetitionRankingRequest message. Does not implicitly {@link wm.protobuf.LoadGhostCompetitionRankingRequest.verify|verify} messages.
             * @function encode
             * @memberof wm.protobuf.LoadGhostCompetitionRankingRequest
             * @static
             * @param {wm.protobuf.ILoadGhostCompetitionRankingRequest} message LoadGhostCompetitionRankingRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LoadGhostCompetitionRankingRequest.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.carId);
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.competitionId);
                return writer;
            };

            /**
             * Encodes the specified LoadGhostCompetitionRankingRequest message, length delimited. Does not implicitly {@link wm.protobuf.LoadGhostCompetitionRankingRequest.verify|verify} messages.
             * @function encodeDelimited
             * @memberof wm.protobuf.LoadGhostCompetitionRankingRequest
             * @static
             * @param {wm.protobuf.ILoadGhostCompetitionRankingRequest} message LoadGhostCompetitionRankingRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LoadGhostCompetitionRankingRequest.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a LoadGhostCompetitionRankingRequest message from the specified reader or buffer.
             * @function decode
             * @memberof wm.protobuf.LoadGhostCompetitionRankingRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {wm.protobuf.LoadGhostCompetitionRankingRequest} LoadGhostCompetitionRankingRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LoadGhostCompetitionRankingRequest.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.wm.protobuf.LoadGhostCompetitionRankingRequest();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.carId = reader.uint32();
                            break;
                        }
                    case 2: {
                            message.competitionId = reader.uint32();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("carId"))
                    throw $util.ProtocolError("missing required 'carId'", { instance: message });
                if (!message.hasOwnProperty("competitionId"))
                    throw $util.ProtocolError("missing required 'competitionId'", { instance: message });
                return message;
            };

            /**
             * Decodes a LoadGhostCompetitionRankingRequest message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof wm.protobuf.LoadGhostCompetitionRankingRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {wm.protobuf.LoadGhostCompetitionRankingRequest} LoadGhostCompetitionRankingRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LoadGhostCompetitionRankingRequest.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a LoadGhostCompetitionRankingRequest message.
             * @function verify
             * @memberof wm.protobuf.LoadGhostCompetitionRankingRequest
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            LoadGhostCompetitionRankingRequest.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (!$util.isInteger(message.carId))
                    return "carId: integer expected";
                if (!$util.isInteger(message.competitionId))
                    return "competitionId: integer expected";
                return null;
            };

            /**
             * Creates a LoadGhostCompetitionRankingRequest message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof wm.protobuf.LoadGhostCompetitionRankingRequest
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {wm.protobuf.LoadGhostCompetitionRankingRequest} LoadGhostCompetitionRankingRequest
             */
            LoadGhostCompetitionRankingRequest.fromObject = function fromObject(object) {
                if (object instanceof $root.wm.protobuf.LoadGhostCompetitionRankingRequest)
                    return object;
                let message = new $root.wm.protobuf.LoadGhostCompetitionRankingRequest();
                if (object.carId != null)
                    message.carId = object.carId >>> 0;
                if (object.competitionId != null)
                    message.competitionId = object.competitionId >>> 0;
                return message;
            };

            /**
             * Creates a plain object from a LoadGhostCompetitionRankingRequest message. Also converts values to other types if specified.
             * @function toObject
             * @memberof wm.protobuf.LoadGhostCompetitionRankingRequest
             * @static
             * @param {wm.protobuf.LoadGhostCompetitionRankingRequest} message LoadGhostCompetitionRankingRequest
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            LoadGhostCompetitionRankingRequest.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.carId = 0;
                    object.competitionId = 0;
                }
                if (message.carId != null && message.hasOwnProperty("carId"))
                    object.carId = message.carId;
                if (message.competitionId != null && message.hasOwnProperty("competitionId"))
                    object.competitionId = message.competitionId;
                return object;
            };

            /**
             * Converts this LoadGhostCompetitionRankingRequest to JSON.
             * @function toJSON
             * @memberof wm.protobuf.LoadGhostCompetitionRankingRequest
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            LoadGhostCompetitionRankingRequest.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for LoadGhostCompetitionRankingRequest
             * @function getTypeUrl
             * @memberof wm.protobuf.LoadGhostCompetitionRankingRequest
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            LoadGhostCompetitionRankingRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/wm.protobuf.LoadGhostCompetitionRankingRequest";
            };

            return LoadGhostCompetitionRankingRequest;
        })();

        protobuf.LoadGhostCompetitionRankingResponse = (function() {

            /**
             * Properties of a LoadGhostCompetitionRankingResponse.
             * @memberof wm.protobuf
             * @interface ILoadGhostCompetitionRankingResponse
             * @property {wm.protobuf.ErrorCode} error LoadGhostCompetitionRankingResponse error
             * @property {number|null} [periodId] LoadGhostCompetitionRankingResponse periodId
             * @property {number} numOfParticipants LoadGhostCompetitionRankingResponse numOfParticipants
             * @property {wm.protobuf.IGhostCompetitionSchedule|null} [competitionSchedule] LoadGhostCompetitionRankingResponse competitionSchedule
             * @property {wm.protobuf.LoadGhostCompetitionRankingResponse.IEntry|null} [ownRecord] LoadGhostCompetitionRankingResponse ownRecord
             * @property {Array.<wm.protobuf.LoadGhostCompetitionRankingResponse.IEntry>|null} [topRecords] LoadGhostCompetitionRankingResponse topRecords
             */

            /**
             * Constructs a new LoadGhostCompetitionRankingResponse.
             * @memberof wm.protobuf
             * @classdesc Represents a LoadGhostCompetitionRankingResponse.
             * @implements ILoadGhostCompetitionRankingResponse
             * @constructor
             * @param {wm.protobuf.ILoadGhostCompetitionRankingResponse=} [properties] Properties to set
             */
            function LoadGhostCompetitionRankingResponse(properties) {
                this.topRecords = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * LoadGhostCompetitionRankingResponse error.
             * @member {wm.protobuf.ErrorCode} error
             * @memberof wm.protobuf.LoadGhostCompetitionRankingResponse
             * @instance
             */
            LoadGhostCompetitionRankingResponse.prototype.error = 0;

            /**
             * LoadGhostCompetitionRankingResponse periodId.
             * @member {number} periodId
             * @memberof wm.protobuf.LoadGhostCompetitionRankingResponse
             * @instance
             */
            LoadGhostCompetitionRankingResponse.prototype.periodId = 0;

            /**
             * LoadGhostCompetitionRankingResponse numOfParticipants.
             * @member {number} numOfParticipants
             * @memberof wm.protobuf.LoadGhostCompetitionRankingResponse
             * @instance
             */
            LoadGhostCompetitionRankingResponse.prototype.numOfParticipants = 0;

            /**
             * LoadGhostCompetitionRankingResponse competitionSchedule.
             * @member {wm.protobuf.IGhostCompetitionSchedule|null|undefined} competitionSchedule
             * @memberof wm.protobuf.LoadGhostCompetitionRankingResponse
             * @instance
             */
            LoadGhostCompetitionRankingResponse.prototype.competitionSchedule = null;

            /**
             * LoadGhostCompetitionRankingResponse ownRecord.
             * @member {wm.protobuf.LoadGhostCompetitionRankingResponse.IEntry|null|undefined} ownRecord
             * @memberof wm.protobuf.LoadGhostCompetitionRankingResponse
             * @instance
             */
            LoadGhostCompetitionRankingResponse.prototype.ownRecord = null;

            /**
             * LoadGhostCompetitionRankingResponse topRecords.
             * @member {Array.<wm.protobuf.LoadGhostCompetitionRankingResponse.IEntry>} topRecords
             * @memberof wm.protobuf.LoadGhostCompetitionRankingResponse
             * @instance
             */
            LoadGhostCompetitionRankingResponse.prototype.topRecords = $util.emptyArray;

            /**
             * Creates a new LoadGhostCompetitionRankingResponse instance using the specified properties.
             * @function create
             * @memberof wm.protobuf.LoadGhostCompetitionRankingResponse
             * @static
             * @param {wm.protobuf.ILoadGhostCompetitionRankingResponse=} [properties] Properties to set
             * @returns {wm.protobuf.LoadGhostCompetitionRankingResponse} LoadGhostCompetitionRankingResponse instance
             */
            LoadGhostCompetitionRankingResponse.create = function create(properties) {
                return new LoadGhostCompetitionRankingResponse(properties);
            };

            /**
             * Encodes the specified LoadGhostCompetitionRankingResponse message. Does not implicitly {@link wm.protobuf.LoadGhostCompetitionRankingResponse.verify|verify} messages.
             * @function encode
             * @memberof wm.protobuf.LoadGhostCompetitionRankingResponse
             * @static
             * @param {wm.protobuf.ILoadGhostCompetitionRankingResponse} message LoadGhostCompetitionRankingResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LoadGhostCompetitionRankingResponse.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
                if (message.periodId != null && Object.hasOwnProperty.call(message, "periodId"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.periodId);
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.numOfParticipants);
                if (message.competitionSchedule != null && Object.hasOwnProperty.call(message, "competitionSchedule"))
                    $root.wm.protobuf.GhostCompetitionSchedule.encode(message.competitionSchedule, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                if (message.ownRecord != null && Object.hasOwnProperty.call(message, "ownRecord"))
                    $root.wm.protobuf.LoadGhostCompetitionRankingResponse.Entry.encode(message.ownRecord, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                if (message.topRecords != null && message.topRecords.length)
                    for (let i = 0; i < message.topRecords.length; ++i)
                        $root.wm.protobuf.LoadGhostCompetitionRankingResponse.Entry.encode(message.topRecords[i], writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified LoadGhostCompetitionRankingResponse message, length delimited. Does not implicitly {@link wm.protobuf.LoadGhostCompetitionRankingResponse.verify|verify} messages.
             * @function encodeDelimited
             * @memberof wm.protobuf.LoadGhostCompetitionRankingResponse
             * @static
             * @param {wm.protobuf.ILoadGhostCompetitionRankingResponse} message LoadGhostCompetitionRankingResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LoadGhostCompetitionRankingResponse.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a LoadGhostCompetitionRankingResponse message from the specified reader or buffer.
             * @function decode
             * @memberof wm.protobuf.LoadGhostCompetitionRankingResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {wm.protobuf.LoadGhostCompetitionRankingResponse} LoadGhostCompetitionRankingResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LoadGhostCompetitionRankingResponse.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.wm.protobuf.LoadGhostCompetitionRankingResponse();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.error = reader.int32();
                            break;
                        }
                    case 2: {
                            message.periodId = reader.uint32();
                            break;
                        }
                    case 3: {
                            message.numOfParticipants = reader.uint32();
                            break;
                        }
                    case 4: {
                            message.competitionSchedule = $root.wm.protobuf.GhostCompetitionSchedule.decode(reader, reader.uint32());
                            break;
                        }
                    case 5: {
                            message.ownRecord = $root.wm.protobuf.LoadGhostCompetitionRankingResponse.Entry.decode(reader, reader.uint32());
                            break;
                        }
                    case 6: {
                            if (!(message.topRecords && message.topRecords.length))
                                message.topRecords = [];
                            message.topRecords.push($root.wm.protobuf.LoadGhostCompetitionRankingResponse.Entry.decode(reader, reader.uint32()));
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("error"))
                    throw $util.ProtocolError("missing required 'error'", { instance: message });
                if (!message.hasOwnProperty("numOfParticipants"))
                    throw $util.ProtocolError("missing required 'numOfParticipants'", { instance: message });
                return message;
            };

            /**
             * Decodes a LoadGhostCompetitionRankingResponse message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof wm.protobuf.LoadGhostCompetitionRankingResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {wm.protobuf.LoadGhostCompetitionRankingResponse} LoadGhostCompetitionRankingResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LoadGhostCompetitionRankingResponse.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a LoadGhostCompetitionRankingResponse message.
             * @function verify
             * @memberof wm.protobuf.LoadGhostCompetitionRankingResponse
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            LoadGhostCompetitionRankingResponse.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                switch (message.error) {
                default:
                    return "error: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 7:
                case 9:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 16:
                case 17:
                case 18:
                case 19:
                    break;
                }
                if (message.periodId != null && message.hasOwnProperty("periodId"))
                    if (!$util.isInteger(message.periodId))
                        return "periodId: integer expected";
                if (!$util.isInteger(message.numOfParticipants))
                    return "numOfParticipants: integer expected";
                if (message.competitionSchedule != null && message.hasOwnProperty("competitionSchedule")) {
                    let error = $root.wm.protobuf.GhostCompetitionSchedule.verify(message.competitionSchedule);
                    if (error)
                        return "competitionSchedule." + error;
                }
                if (message.ownRecord != null && message.hasOwnProperty("ownRecord")) {
                    let error = $root.wm.protobuf.LoadGhostCompetitionRankingResponse.Entry.verify(message.ownRecord);
                    if (error)
                        return "ownRecord." + error;
                }
                if (message.topRecords != null && message.hasOwnProperty("topRecords")) {
                    if (!Array.isArray(message.topRecords))
                        return "topRecords: array expected";
                    for (let i = 0; i < message.topRecords.length; ++i) {
                        let error = $root.wm.protobuf.LoadGhostCompetitionRankingResponse.Entry.verify(message.topRecords[i]);
                        if (error)
                            return "topRecords." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a LoadGhostCompetitionRankingResponse message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof wm.protobuf.LoadGhostCompetitionRankingResponse
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {wm.protobuf.LoadGhostCompetitionRankingResponse} LoadGhostCompetitionRankingResponse
             */
            LoadGhostCompetitionRankingResponse.fromObject = function fromObject(object) {
                if (object instanceof $root.wm.protobuf.LoadGhostCompetitionRankingResponse)
                    return object;
                let message = new $root.wm.protobuf.LoadGhostCompetitionRankingResponse();
                switch (object.error) {
                default:
                    if (typeof object.error === "number") {
                        message.error = object.error;
                        break;
                    }
                    break;
                case "ERR_SUCCESS":
                case 0:
                    message.error = 0;
                    break;
                case "ERR_REQUEST":
                case 1:
                    message.error = 1;
                    break;
                case "ERR_NOT_FOUND":
                case 2:
                    message.error = 2;
                    break;
                case "ERR_ID_SERVER":
                case 3:
                    message.error = 3;
                    break;
                case "ERR_ID_BANNED":
                case 4:
                    message.error = 4;
                    break;
                case "ERR_USER_LOCKED":
                case 5:
                    message.error = 5;
                    break;
                case "ERR_USER_VERSION":
                case 6:
                    message.error = 6;
                    break;
                case "ERR_NAME_CONFLICTED":
                case 7:
                    message.error = 7;
                    break;
                case "ERR_FORBIDDEN":
                case 9:
                    message.error = 9;
                    break;
                case "ERR_USER_SUCCEEDED":
                case 11:
                    message.error = 11;
                    break;
                case "ERR_BEING_TRANSFERRED":
                case 12:
                    message.error = 12;
                    break;
                case "ERR_SCRATCH_LOCKED":
                case 13:
                    message.error = 13;
                    break;
                case "ERR_BINGO_REVENGE_LOCKED":
                case 14:
                    message.error = 14;
                    break;
                case "ERR_BINGO_ALREDY_LINKED":
                case 15:
                    message.error = 15;
                    break;
                case "ERR_BINGO_FINISHED":
                case 16:
                    message.error = 16;
                    break;
                case "ERR_BINGO_REACHED_MAX_USER":
                case 17:
                    message.error = 17;
                    break;
                case "ERR_CAR_NOT_FOUND":
                case 18:
                    message.error = 18;
                    break;
                case "ERR_BINGO_CARD_NOT_FOUND":
                case 19:
                    message.error = 19;
                    break;
                }
                if (object.periodId != null)
                    message.periodId = object.periodId >>> 0;
                if (object.numOfParticipants != null)
                    message.numOfParticipants = object.numOfParticipants >>> 0;
                if (object.competitionSchedule != null) {
                    if (typeof object.competitionSchedule !== "object")
                        throw TypeError(".wm.protobuf.LoadGhostCompetitionRankingResponse.competitionSchedule: object expected");
                    message.competitionSchedule = $root.wm.protobuf.GhostCompetitionSchedule.fromObject(object.competitionSchedule);
                }
                if (object.ownRecord != null) {
                    if (typeof object.ownRecord !== "object")
                        throw TypeError(".wm.protobuf.LoadGhostCompetitionRankingResponse.ownRecord: object expected");
                    message.ownRecord = $root.wm.protobuf.LoadGhostCompetitionRankingResponse.Entry.fromObject(object.ownRecord);
                }
                if (object.topRecords) {
                    if (!Array.isArray(object.topRecords))
                        throw TypeError(".wm.protobuf.LoadGhostCompetitionRankingResponse.topRecords: array expected");
                    message.topRecords = [];
                    for (let i = 0; i < object.topRecords.length; ++i) {
                        if (typeof object.topRecords[i] !== "object")
                            throw TypeError(".wm.protobuf.LoadGhostCompetitionRankingResponse.topRecords: object expected");
                        message.topRecords[i] = $root.wm.protobuf.LoadGhostCompetitionRankingResponse.Entry.fromObject(object.topRecords[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from a LoadGhostCompetitionRankingResponse message. Also converts values to other types if specified.
             * @function toObject
             * @memberof wm.protobuf.LoadGhostCompetitionRankingResponse
             * @static
             * @param {wm.protobuf.LoadGhostCompetitionRankingResponse} message LoadGhostCompetitionRankingResponse
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            LoadGhostCompetitionRankingResponse.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.topRecords = [];
                if (options.defaults) {
                    object.error = options.enums === String ? "ERR_SUCCESS" : 0;
                    object.periodId = 0;
                    object.numOfParticipants = 0;
                    object.competitionSchedule = null;
                    object.ownRecord = null;
                }
                if (message.error != null && message.hasOwnProperty("error"))
                    object.error = options.enums === String ? $root.wm.protobuf.ErrorCode[message.error] === undefined ? message.error : $root.wm.protobuf.ErrorCode[message.error] : message.error;
                if (message.periodId != null && message.hasOwnProperty("periodId"))
                    object.periodId = message.periodId;
                if (message.numOfParticipants != null && message.hasOwnProperty("numOfParticipants"))
                    object.numOfParticipants = message.numOfParticipants;
                if (message.competitionSchedule != null && message.hasOwnProperty("competitionSchedule"))
                    object.competitionSchedule = $root.wm.protobuf.GhostCompetitionSchedule.toObject(message.competitionSchedule, options);
                if (message.ownRecord != null && message.hasOwnProperty("ownRecord"))
                    object.ownRecord = $root.wm.protobuf.LoadGhostCompetitionRankingResponse.Entry.toObject(message.ownRecord, options);
                if (message.topRecords && message.topRecords.length) {
                    object.topRecords = [];
                    for (let j = 0; j < message.topRecords.length; ++j)
                        object.topRecords[j] = $root.wm.protobuf.LoadGhostCompetitionRankingResponse.Entry.toObject(message.topRecords[j], options);
                }
                return object;
            };

            /**
             * Converts this LoadGhostCompetitionRankingResponse to JSON.
             * @function toJSON
             * @memberof wm.protobuf.LoadGhostCompetitionRankingResponse
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            LoadGhostCompetitionRankingResponse.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for LoadGhostCompetitionRankingResponse
             * @function getTypeUrl
             * @memberof wm.protobuf.LoadGhostCompetitionRankingResponse
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            LoadGhostCompetitionRankingResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/wm.protobuf.LoadGhostCompetitionRankingResponse";
            };

            LoadGhostCompetitionRankingResponse.Entry = (function() {

                /**
                 * Properties of an Entry.
                 * @memberof wm.protobuf.LoadGhostCompetitionRankingResponse
                 * @interface IEntry
                 * @property {number} rank Entry rank
                 * @property {number} result Entry result
                 * @property {number} carId Entry carId
                 * @property {string} name Entry name
                 * @property {number} regionId Entry regionId
                 * @property {number} model Entry model
                 * @property {number} visualModel Entry visualModel
                 * @property {number} defaultColor Entry defaultColor
                 * @property {string} title Entry title
                 * @property {number} level Entry level
                 * @property {string|null} [windowStickerString] Entry windowStickerString
                 * @property {string} playedShopName Entry playedShopName
                 * @property {number} playedAt Entry playedAt
                 */

                /**
                 * Constructs a new Entry.
                 * @memberof wm.protobuf.LoadGhostCompetitionRankingResponse
                 * @classdesc Represents an Entry.
                 * @implements IEntry
                 * @constructor
                 * @param {wm.protobuf.LoadGhostCompetitionRankingResponse.IEntry=} [properties] Properties to set
                 */
                function Entry(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * Entry rank.
                 * @member {number} rank
                 * @memberof wm.protobuf.LoadGhostCompetitionRankingResponse.Entry
                 * @instance
                 */
                Entry.prototype.rank = 0;

                /**
                 * Entry result.
                 * @member {number} result
                 * @memberof wm.protobuf.LoadGhostCompetitionRankingResponse.Entry
                 * @instance
                 */
                Entry.prototype.result = 0;

                /**
                 * Entry carId.
                 * @member {number} carId
                 * @memberof wm.protobuf.LoadGhostCompetitionRankingResponse.Entry
                 * @instance
                 */
                Entry.prototype.carId = 0;

                /**
                 * Entry name.
                 * @member {string} name
                 * @memberof wm.protobuf.LoadGhostCompetitionRankingResponse.Entry
                 * @instance
                 */
                Entry.prototype.name = "";

                /**
                 * Entry regionId.
                 * @member {number} regionId
                 * @memberof wm.protobuf.LoadGhostCompetitionRankingResponse.Entry
                 * @instance
                 */
                Entry.prototype.regionId = 0;

                /**
                 * Entry model.
                 * @member {number} model
                 * @memberof wm.protobuf.LoadGhostCompetitionRankingResponse.Entry
                 * @instance
                 */
                Entry.prototype.model = 0;

                /**
                 * Entry visualModel.
                 * @member {number} visualModel
                 * @memberof wm.protobuf.LoadGhostCompetitionRankingResponse.Entry
                 * @instance
                 */
                Entry.prototype.visualModel = 0;

                /**
                 * Entry defaultColor.
                 * @member {number} defaultColor
                 * @memberof wm.protobuf.LoadGhostCompetitionRankingResponse.Entry
                 * @instance
                 */
                Entry.prototype.defaultColor = 0;

                /**
                 * Entry title.
                 * @member {string} title
                 * @memberof wm.protobuf.LoadGhostCompetitionRankingResponse.Entry
                 * @instance
                 */
                Entry.prototype.title = "";

                /**
                 * Entry level.
                 * @member {number} level
                 * @memberof wm.protobuf.LoadGhostCompetitionRankingResponse.Entry
                 * @instance
                 */
                Entry.prototype.level = 0;

                /**
                 * Entry windowStickerString.
                 * @member {string} windowStickerString
                 * @memberof wm.protobuf.LoadGhostCompetitionRankingResponse.Entry
                 * @instance
                 */
                Entry.prototype.windowStickerString = "";

                /**
                 * Entry playedShopName.
                 * @member {string} playedShopName
                 * @memberof wm.protobuf.LoadGhostCompetitionRankingResponse.Entry
                 * @instance
                 */
                Entry.prototype.playedShopName = "";

                /**
                 * Entry playedAt.
                 * @member {number} playedAt
                 * @memberof wm.protobuf.LoadGhostCompetitionRankingResponse.Entry
                 * @instance
                 */
                Entry.prototype.playedAt = 0;

                /**
                 * Creates a new Entry instance using the specified properties.
                 * @function create
                 * @memberof wm.protobuf.LoadGhostCompetitionRankingResponse.Entry
                 * @static
                 * @param {wm.protobuf.LoadGhostCompetitionRankingResponse.IEntry=} [properties] Properties to set
                 * @returns {wm.protobuf.LoadGhostCompetitionRankingResponse.Entry} Entry instance
                 */
                Entry.create = function create(properties) {
                    return new Entry(properties);
                };

                /**
                 * Encodes the specified Entry message. Does not implicitly {@link wm.protobuf.LoadGhostCompetitionRankingResponse.Entry.verify|verify} messages.
                 * @function encode
                 * @memberof wm.protobuf.LoadGhostCompetitionRankingResponse.Entry
                 * @static
                 * @param {wm.protobuf.LoadGhostCompetitionRankingResponse.IEntry} message Entry message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Entry.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.rank);
                    writer.uint32(/* id 2, wireType 0 =*/16).sint32(message.result);
                    writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.carId);
                    writer.uint32(/* id 4, wireType 2 =*/34).string(message.name);
                    writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.regionId);
                    writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.model);
                    writer.uint32(/* id 7, wireType 0 =*/56).uint32(message.visualModel);
                    writer.uint32(/* id 8, wireType 0 =*/64).uint32(message.defaultColor);
                    writer.uint32(/* id 10, wireType 2 =*/82).string(message.title);
                    writer.uint32(/* id 11, wireType 0 =*/88).uint32(message.level);
                    if (message.windowStickerString != null && Object.hasOwnProperty.call(message, "windowStickerString"))
                        writer.uint32(/* id 12, wireType 2 =*/98).string(message.windowStickerString);
                    writer.uint32(/* id 13, wireType 2 =*/106).string(message.playedShopName);
                    writer.uint32(/* id 14, wireType 0 =*/112).uint32(message.playedAt);
                    return writer;
                };

                /**
                 * Encodes the specified Entry message, length delimited. Does not implicitly {@link wm.protobuf.LoadGhostCompetitionRankingResponse.Entry.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof wm.protobuf.LoadGhostCompetitionRankingResponse.Entry
                 * @static
                 * @param {wm.protobuf.LoadGhostCompetitionRankingResponse.IEntry} message Entry message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Entry.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes an Entry message from the specified reader or buffer.
                 * @function decode
                 * @memberof wm.protobuf.LoadGhostCompetitionRankingResponse.Entry
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {wm.protobuf.LoadGhostCompetitionRankingResponse.Entry} Entry
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Entry.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.wm.protobuf.LoadGhostCompetitionRankingResponse.Entry();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.rank = reader.uint32();
                                break;
                            }
                        case 2: {
                                message.result = reader.sint32();
                                break;
                            }
                        case 3: {
                                message.carId = reader.uint32();
                                break;
                            }
                        case 4: {
                                message.name = reader.string();
                                break;
                            }
                        case 5: {
                                message.regionId = reader.uint32();
                                break;
                            }
                        case 6: {
                                message.model = reader.uint32();
                                break;
                            }
                        case 7: {
                                message.visualModel = reader.uint32();
                                break;
                            }
                        case 8: {
                                message.defaultColor = reader.uint32();
                                break;
                            }
                        case 10: {
                                message.title = reader.string();
                                break;
                            }
                        case 11: {
                                message.level = reader.uint32();
                                break;
                            }
                        case 12: {
                                message.windowStickerString = reader.string();
                                break;
                            }
                        case 13: {
                                message.playedShopName = reader.string();
                                break;
                            }
                        case 14: {
                                message.playedAt = reader.uint32();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    if (!message.hasOwnProperty("rank"))
                        throw $util.ProtocolError("missing required 'rank'", { instance: message });
                    if (!message.hasOwnProperty("result"))
                        throw $util.ProtocolError("missing required 'result'", { instance: message });
                    if (!message.hasOwnProperty("carId"))
                        throw $util.ProtocolError("missing required 'carId'", { instance: message });
                    if (!message.hasOwnProperty("name"))
                        throw $util.ProtocolError("missing required 'name'", { instance: message });
                    if (!message.hasOwnProperty("regionId"))
                        throw $util.ProtocolError("missing required 'regionId'", { instance: message });
                    if (!message.hasOwnProperty("model"))
                        throw $util.ProtocolError("missing required 'model'", { instance: message });
                    if (!message.hasOwnProperty("visualModel"))
                        throw $util.ProtocolError("missing required 'visualModel'", { instance: message });
                    if (!message.hasOwnProperty("defaultColor"))
                        throw $util.ProtocolError("missing required 'defaultColor'", { instance: message });
                    if (!message.hasOwnProperty("title"))
                        throw $util.ProtocolError("missing required 'title'", { instance: message });
                    if (!message.hasOwnProperty("level"))
                        throw $util.ProtocolError("missing required 'level'", { instance: message });
                    if (!message.hasOwnProperty("playedShopName"))
                        throw $util.ProtocolError("missing required 'playedShopName'", { instance: message });
                    if (!message.hasOwnProperty("playedAt"))
                        throw $util.ProtocolError("missing required 'playedAt'", { instance: message });
                    return message;
                };

                /**
                 * Decodes an Entry message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof wm.protobuf.LoadGhostCompetitionRankingResponse.Entry
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {wm.protobuf.LoadGhostCompetitionRankingResponse.Entry} Entry
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Entry.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies an Entry message.
                 * @function verify
                 * @memberof wm.protobuf.LoadGhostCompetitionRankingResponse.Entry
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Entry.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (!$util.isInteger(message.rank))
                        return "rank: integer expected";
                    if (!$util.isInteger(message.result))
                        return "result: integer expected";
                    if (!$util.isInteger(message.carId))
                        return "carId: integer expected";
                    if (!$util.isString(message.name))
                        return "name: string expected";
                    if (!$util.isInteger(message.regionId))
                        return "regionId: integer expected";
                    if (!$util.isInteger(message.model))
                        return "model: integer expected";
                    if (!$util.isInteger(message.visualModel))
                        return "visualModel: integer expected";
                    if (!$util.isInteger(message.defaultColor))
                        return "defaultColor: integer expected";
                    if (!$util.isString(message.title))
                        return "title: string expected";
                    if (!$util.isInteger(message.level))
                        return "level: integer expected";
                    if (message.windowStickerString != null && message.hasOwnProperty("windowStickerString"))
                        if (!$util.isString(message.windowStickerString))
                            return "windowStickerString: string expected";
                    if (!$util.isString(message.playedShopName))
                        return "playedShopName: string expected";
                    if (!$util.isInteger(message.playedAt))
                        return "playedAt: integer expected";
                    return null;
                };

                /**
                 * Creates an Entry message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof wm.protobuf.LoadGhostCompetitionRankingResponse.Entry
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {wm.protobuf.LoadGhostCompetitionRankingResponse.Entry} Entry
                 */
                Entry.fromObject = function fromObject(object) {
                    if (object instanceof $root.wm.protobuf.LoadGhostCompetitionRankingResponse.Entry)
                        return object;
                    let message = new $root.wm.protobuf.LoadGhostCompetitionRankingResponse.Entry();
                    if (object.rank != null)
                        message.rank = object.rank >>> 0;
                    if (object.result != null)
                        message.result = object.result | 0;
                    if (object.carId != null)
                        message.carId = object.carId >>> 0;
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.regionId != null)
                        message.regionId = object.regionId >>> 0;
                    if (object.model != null)
                        message.model = object.model >>> 0;
                    if (object.visualModel != null)
                        message.visualModel = object.visualModel >>> 0;
                    if (object.defaultColor != null)
                        message.defaultColor = object.defaultColor >>> 0;
                    if (object.title != null)
                        message.title = String(object.title);
                    if (object.level != null)
                        message.level = object.level >>> 0;
                    if (object.windowStickerString != null)
                        message.windowStickerString = String(object.windowStickerString);
                    if (object.playedShopName != null)
                        message.playedShopName = String(object.playedShopName);
                    if (object.playedAt != null)
                        message.playedAt = object.playedAt >>> 0;
                    return message;
                };

                /**
                 * Creates a plain object from an Entry message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof wm.protobuf.LoadGhostCompetitionRankingResponse.Entry
                 * @static
                 * @param {wm.protobuf.LoadGhostCompetitionRankingResponse.Entry} message Entry
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Entry.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        object.rank = 0;
                        object.result = 0;
                        object.carId = 0;
                        object.name = "";
                        object.regionId = 0;
                        object.model = 0;
                        object.visualModel = 0;
                        object.defaultColor = 0;
                        object.title = "";
                        object.level = 0;
                        object.windowStickerString = "";
                        object.playedShopName = "";
                        object.playedAt = 0;
                    }
                    if (message.rank != null && message.hasOwnProperty("rank"))
                        object.rank = message.rank;
                    if (message.result != null && message.hasOwnProperty("result"))
                        object.result = message.result;
                    if (message.carId != null && message.hasOwnProperty("carId"))
                        object.carId = message.carId;
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message.regionId != null && message.hasOwnProperty("regionId"))
                        object.regionId = message.regionId;
                    if (message.model != null && message.hasOwnProperty("model"))
                        object.model = message.model;
                    if (message.visualModel != null && message.hasOwnProperty("visualModel"))
                        object.visualModel = message.visualModel;
                    if (message.defaultColor != null && message.hasOwnProperty("defaultColor"))
                        object.defaultColor = message.defaultColor;
                    if (message.title != null && message.hasOwnProperty("title"))
                        object.title = message.title;
                    if (message.level != null && message.hasOwnProperty("level"))
                        object.level = message.level;
                    if (message.windowStickerString != null && message.hasOwnProperty("windowStickerString"))
                        object.windowStickerString = message.windowStickerString;
                    if (message.playedShopName != null && message.hasOwnProperty("playedShopName"))
                        object.playedShopName = message.playedShopName;
                    if (message.playedAt != null && message.hasOwnProperty("playedAt"))
                        object.playedAt = message.playedAt;
                    return object;
                };

                /**
                 * Converts this Entry to JSON.
                 * @function toJSON
                 * @memberof wm.protobuf.LoadGhostCompetitionRankingResponse.Entry
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Entry.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                /**
                 * Gets the default type url for Entry
                 * @function getTypeUrl
                 * @memberof wm.protobuf.LoadGhostCompetitionRankingResponse.Entry
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                Entry.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/wm.protobuf.LoadGhostCompetitionRankingResponse.Entry";
                };

                return Entry;
            })();

            return LoadGhostCompetitionRankingResponse;
        })();

        protobuf.LoadGhostKoshienRankingRequest = (function() {

            /**
             * Properties of a LoadGhostKoshienRankingRequest.
             * @memberof wm.protobuf
             * @interface ILoadGhostKoshienRankingRequest
             * @property {number} carId LoadGhostKoshienRankingRequest carId
             * @property {number} koshienId LoadGhostKoshienRankingRequest koshienId
             * @property {string} placeId LoadGhostKoshienRankingRequest placeId
             * @property {number} roundId LoadGhostKoshienRankingRequest roundId
             */

            /**
             * Constructs a new LoadGhostKoshienRankingRequest.
             * @memberof wm.protobuf
             * @classdesc Represents a LoadGhostKoshienRankingRequest.
             * @implements ILoadGhostKoshienRankingRequest
             * @constructor
             * @param {wm.protobuf.ILoadGhostKoshienRankingRequest=} [properties] Properties to set
             */
            function LoadGhostKoshienRankingRequest(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * LoadGhostKoshienRankingRequest carId.
             * @member {number} carId
             * @memberof wm.protobuf.LoadGhostKoshienRankingRequest
             * @instance
             */
            LoadGhostKoshienRankingRequest.prototype.carId = 0;

            /**
             * LoadGhostKoshienRankingRequest koshienId.
             * @member {number} koshienId
             * @memberof wm.protobuf.LoadGhostKoshienRankingRequest
             * @instance
             */
            LoadGhostKoshienRankingRequest.prototype.koshienId = 0;

            /**
             * LoadGhostKoshienRankingRequest placeId.
             * @member {string} placeId
             * @memberof wm.protobuf.LoadGhostKoshienRankingRequest
             * @instance
             */
            LoadGhostKoshienRankingRequest.prototype.placeId = "";

            /**
             * LoadGhostKoshienRankingRequest roundId.
             * @member {number} roundId
             * @memberof wm.protobuf.LoadGhostKoshienRankingRequest
             * @instance
             */
            LoadGhostKoshienRankingRequest.prototype.roundId = 0;

            /**
             * Creates a new LoadGhostKoshienRankingRequest instance using the specified properties.
             * @function create
             * @memberof wm.protobuf.LoadGhostKoshienRankingRequest
             * @static
             * @param {wm.protobuf.ILoadGhostKoshienRankingRequest=} [properties] Properties to set
             * @returns {wm.protobuf.LoadGhostKoshienRankingRequest} LoadGhostKoshienRankingRequest instance
             */
            LoadGhostKoshienRankingRequest.create = function create(properties) {
                return new LoadGhostKoshienRankingRequest(properties);
            };

            /**
             * Encodes the specified LoadGhostKoshienRankingRequest message. Does not implicitly {@link wm.protobuf.LoadGhostKoshienRankingRequest.verify|verify} messages.
             * @function encode
             * @memberof wm.protobuf.LoadGhostKoshienRankingRequest
             * @static
             * @param {wm.protobuf.ILoadGhostKoshienRankingRequest} message LoadGhostKoshienRankingRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LoadGhostKoshienRankingRequest.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.carId);
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.koshienId);
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.placeId);
                writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.roundId);
                return writer;
            };

            /**
             * Encodes the specified LoadGhostKoshienRankingRequest message, length delimited. Does not implicitly {@link wm.protobuf.LoadGhostKoshienRankingRequest.verify|verify} messages.
             * @function encodeDelimited
             * @memberof wm.protobuf.LoadGhostKoshienRankingRequest
             * @static
             * @param {wm.protobuf.ILoadGhostKoshienRankingRequest} message LoadGhostKoshienRankingRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LoadGhostKoshienRankingRequest.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a LoadGhostKoshienRankingRequest message from the specified reader or buffer.
             * @function decode
             * @memberof wm.protobuf.LoadGhostKoshienRankingRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {wm.protobuf.LoadGhostKoshienRankingRequest} LoadGhostKoshienRankingRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LoadGhostKoshienRankingRequest.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.wm.protobuf.LoadGhostKoshienRankingRequest();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.carId = reader.uint32();
                            break;
                        }
                    case 2: {
                            message.koshienId = reader.uint32();
                            break;
                        }
                    case 3: {
                            message.placeId = reader.string();
                            break;
                        }
                    case 4: {
                            message.roundId = reader.uint32();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("carId"))
                    throw $util.ProtocolError("missing required 'carId'", { instance: message });
                if (!message.hasOwnProperty("koshienId"))
                    throw $util.ProtocolError("missing required 'koshienId'", { instance: message });
                if (!message.hasOwnProperty("placeId"))
                    throw $util.ProtocolError("missing required 'placeId'", { instance: message });
                if (!message.hasOwnProperty("roundId"))
                    throw $util.ProtocolError("missing required 'roundId'", { instance: message });
                return message;
            };

            /**
             * Decodes a LoadGhostKoshienRankingRequest message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof wm.protobuf.LoadGhostKoshienRankingRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {wm.protobuf.LoadGhostKoshienRankingRequest} LoadGhostKoshienRankingRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LoadGhostKoshienRankingRequest.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a LoadGhostKoshienRankingRequest message.
             * @function verify
             * @memberof wm.protobuf.LoadGhostKoshienRankingRequest
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            LoadGhostKoshienRankingRequest.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (!$util.isInteger(message.carId))
                    return "carId: integer expected";
                if (!$util.isInteger(message.koshienId))
                    return "koshienId: integer expected";
                if (!$util.isString(message.placeId))
                    return "placeId: string expected";
                if (!$util.isInteger(message.roundId))
                    return "roundId: integer expected";
                return null;
            };

            /**
             * Creates a LoadGhostKoshienRankingRequest message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof wm.protobuf.LoadGhostKoshienRankingRequest
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {wm.protobuf.LoadGhostKoshienRankingRequest} LoadGhostKoshienRankingRequest
             */
            LoadGhostKoshienRankingRequest.fromObject = function fromObject(object) {
                if (object instanceof $root.wm.protobuf.LoadGhostKoshienRankingRequest)
                    return object;
                let message = new $root.wm.protobuf.LoadGhostKoshienRankingRequest();
                if (object.carId != null)
                    message.carId = object.carId >>> 0;
                if (object.koshienId != null)
                    message.koshienId = object.koshienId >>> 0;
                if (object.placeId != null)
                    message.placeId = String(object.placeId);
                if (object.roundId != null)
                    message.roundId = object.roundId >>> 0;
                return message;
            };

            /**
             * Creates a plain object from a LoadGhostKoshienRankingRequest message. Also converts values to other types if specified.
             * @function toObject
             * @memberof wm.protobuf.LoadGhostKoshienRankingRequest
             * @static
             * @param {wm.protobuf.LoadGhostKoshienRankingRequest} message LoadGhostKoshienRankingRequest
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            LoadGhostKoshienRankingRequest.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.carId = 0;
                    object.koshienId = 0;
                    object.placeId = "";
                    object.roundId = 0;
                }
                if (message.carId != null && message.hasOwnProperty("carId"))
                    object.carId = message.carId;
                if (message.koshienId != null && message.hasOwnProperty("koshienId"))
                    object.koshienId = message.koshienId;
                if (message.placeId != null && message.hasOwnProperty("placeId"))
                    object.placeId = message.placeId;
                if (message.roundId != null && message.hasOwnProperty("roundId"))
                    object.roundId = message.roundId;
                return object;
            };

            /**
             * Converts this LoadGhostKoshienRankingRequest to JSON.
             * @function toJSON
             * @memberof wm.protobuf.LoadGhostKoshienRankingRequest
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            LoadGhostKoshienRankingRequest.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for LoadGhostKoshienRankingRequest
             * @function getTypeUrl
             * @memberof wm.protobuf.LoadGhostKoshienRankingRequest
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            LoadGhostKoshienRankingRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/wm.protobuf.LoadGhostKoshienRankingRequest";
            };

            return LoadGhostKoshienRankingRequest;
        })();

        protobuf.LoadGhostKoshienRankingResponse = (function() {

            /**
             * Properties of a LoadGhostKoshienRankingResponse.
             * @memberof wm.protobuf
             * @interface ILoadGhostKoshienRankingResponse
             * @property {wm.protobuf.ErrorCode} error LoadGhostKoshienRankingResponse error
             * @property {Array.<boolean>|null} [roundQualified] LoadGhostKoshienRankingResponse roundQualified
             * @property {wm.protobuf.IGhostKoshienSchedule|null} [koshienSchedule] LoadGhostKoshienRankingResponse koshienSchedule
             * @property {wm.protobuf.LoadGhostKoshienRankingResponse.IUserInfo|null} [ownRankingEntry] LoadGhostKoshienRankingResponse ownRankingEntry
             * @property {Array.<wm.protobuf.LoadGhostKoshienRankingResponse.IEntry>|null} [rankingEntries] LoadGhostKoshienRankingResponse rankingEntries
             * @property {number|null} [rankingUpdatedAt] LoadGhostKoshienRankingResponse rankingUpdatedAt
             * @property {wm.protobuf.LoadGhostKoshienRankingResponse.IRecord|null} [ownRecord] LoadGhostKoshienRankingResponse ownRecord
             * @property {wm.protobuf.LoadGhostKoshienRankingResponse.IPlaceRecord|null} [placeRecord] LoadGhostKoshienRankingResponse placeRecord
             */

            /**
             * Constructs a new LoadGhostKoshienRankingResponse.
             * @memberof wm.protobuf
             * @classdesc Represents a LoadGhostKoshienRankingResponse.
             * @implements ILoadGhostKoshienRankingResponse
             * @constructor
             * @param {wm.protobuf.ILoadGhostKoshienRankingResponse=} [properties] Properties to set
             */
            function LoadGhostKoshienRankingResponse(properties) {
                this.roundQualified = [];
                this.rankingEntries = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * LoadGhostKoshienRankingResponse error.
             * @member {wm.protobuf.ErrorCode} error
             * @memberof wm.protobuf.LoadGhostKoshienRankingResponse
             * @instance
             */
            LoadGhostKoshienRankingResponse.prototype.error = 0;

            /**
             * LoadGhostKoshienRankingResponse roundQualified.
             * @member {Array.<boolean>} roundQualified
             * @memberof wm.protobuf.LoadGhostKoshienRankingResponse
             * @instance
             */
            LoadGhostKoshienRankingResponse.prototype.roundQualified = $util.emptyArray;

            /**
             * LoadGhostKoshienRankingResponse koshienSchedule.
             * @member {wm.protobuf.IGhostKoshienSchedule|null|undefined} koshienSchedule
             * @memberof wm.protobuf.LoadGhostKoshienRankingResponse
             * @instance
             */
            LoadGhostKoshienRankingResponse.prototype.koshienSchedule = null;

            /**
             * LoadGhostKoshienRankingResponse ownRankingEntry.
             * @member {wm.protobuf.LoadGhostKoshienRankingResponse.IUserInfo|null|undefined} ownRankingEntry
             * @memberof wm.protobuf.LoadGhostKoshienRankingResponse
             * @instance
             */
            LoadGhostKoshienRankingResponse.prototype.ownRankingEntry = null;

            /**
             * LoadGhostKoshienRankingResponse rankingEntries.
             * @member {Array.<wm.protobuf.LoadGhostKoshienRankingResponse.IEntry>} rankingEntries
             * @memberof wm.protobuf.LoadGhostKoshienRankingResponse
             * @instance
             */
            LoadGhostKoshienRankingResponse.prototype.rankingEntries = $util.emptyArray;

            /**
             * LoadGhostKoshienRankingResponse rankingUpdatedAt.
             * @member {number} rankingUpdatedAt
             * @memberof wm.protobuf.LoadGhostKoshienRankingResponse
             * @instance
             */
            LoadGhostKoshienRankingResponse.prototype.rankingUpdatedAt = 0;

            /**
             * LoadGhostKoshienRankingResponse ownRecord.
             * @member {wm.protobuf.LoadGhostKoshienRankingResponse.IRecord|null|undefined} ownRecord
             * @memberof wm.protobuf.LoadGhostKoshienRankingResponse
             * @instance
             */
            LoadGhostKoshienRankingResponse.prototype.ownRecord = null;

            /**
             * LoadGhostKoshienRankingResponse placeRecord.
             * @member {wm.protobuf.LoadGhostKoshienRankingResponse.IPlaceRecord|null|undefined} placeRecord
             * @memberof wm.protobuf.LoadGhostKoshienRankingResponse
             * @instance
             */
            LoadGhostKoshienRankingResponse.prototype.placeRecord = null;

            /**
             * Creates a new LoadGhostKoshienRankingResponse instance using the specified properties.
             * @function create
             * @memberof wm.protobuf.LoadGhostKoshienRankingResponse
             * @static
             * @param {wm.protobuf.ILoadGhostKoshienRankingResponse=} [properties] Properties to set
             * @returns {wm.protobuf.LoadGhostKoshienRankingResponse} LoadGhostKoshienRankingResponse instance
             */
            LoadGhostKoshienRankingResponse.create = function create(properties) {
                return new LoadGhostKoshienRankingResponse(properties);
            };

            /**
             * Encodes the specified LoadGhostKoshienRankingResponse message. Does not implicitly {@link wm.protobuf.LoadGhostKoshienRankingResponse.verify|verify} messages.
             * @function encode
             * @memberof wm.protobuf.LoadGhostKoshienRankingResponse
             * @static
             * @param {wm.protobuf.ILoadGhostKoshienRankingResponse} message LoadGhostKoshienRankingResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LoadGhostKoshienRankingResponse.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
                if (message.koshienSchedule != null && Object.hasOwnProperty.call(message, "koshienSchedule"))
                    $root.wm.protobuf.GhostKoshienSchedule.encode(message.koshienSchedule, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                if (message.ownRankingEntry != null && Object.hasOwnProperty.call(message, "ownRankingEntry"))
                    $root.wm.protobuf.LoadGhostKoshienRankingResponse.UserInfo.encode(message.ownRankingEntry, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                if (message.rankingEntries != null && message.rankingEntries.length)
                    for (let i = 0; i < message.rankingEntries.length; ++i)
                        $root.wm.protobuf.LoadGhostKoshienRankingResponse.Entry.encode(message.rankingEntries[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                if (message.ownRecord != null && Object.hasOwnProperty.call(message, "ownRecord"))
                    $root.wm.protobuf.LoadGhostKoshienRankingResponse.Record.encode(message.ownRecord, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                if (message.roundQualified != null && message.roundQualified.length)
                    for (let i = 0; i < message.roundQualified.length; ++i)
                        writer.uint32(/* id 8, wireType 0 =*/64).bool(message.roundQualified[i]);
                if (message.placeRecord != null && Object.hasOwnProperty.call(message, "placeRecord"))
                    $root.wm.protobuf.LoadGhostKoshienRankingResponse.PlaceRecord.encode(message.placeRecord, writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();
                if (message.rankingUpdatedAt != null && Object.hasOwnProperty.call(message, "rankingUpdatedAt"))
                    writer.uint32(/* id 10, wireType 0 =*/80).uint32(message.rankingUpdatedAt);
                return writer;
            };

            /**
             * Encodes the specified LoadGhostKoshienRankingResponse message, length delimited. Does not implicitly {@link wm.protobuf.LoadGhostKoshienRankingResponse.verify|verify} messages.
             * @function encodeDelimited
             * @memberof wm.protobuf.LoadGhostKoshienRankingResponse
             * @static
             * @param {wm.protobuf.ILoadGhostKoshienRankingResponse} message LoadGhostKoshienRankingResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LoadGhostKoshienRankingResponse.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a LoadGhostKoshienRankingResponse message from the specified reader or buffer.
             * @function decode
             * @memberof wm.protobuf.LoadGhostKoshienRankingResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {wm.protobuf.LoadGhostKoshienRankingResponse} LoadGhostKoshienRankingResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LoadGhostKoshienRankingResponse.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.wm.protobuf.LoadGhostKoshienRankingResponse();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.error = reader.int32();
                            break;
                        }
                    case 8: {
                            if (!(message.roundQualified && message.roundQualified.length))
                                message.roundQualified = [];
                            if ((tag & 7) === 2) {
                                let end2 = reader.uint32() + reader.pos;
                                while (reader.pos < end2)
                                    message.roundQualified.push(reader.bool());
                            } else
                                message.roundQualified.push(reader.bool());
                            break;
                        }
                    case 3: {
                            message.koshienSchedule = $root.wm.protobuf.GhostKoshienSchedule.decode(reader, reader.uint32());
                            break;
                        }
                    case 4: {
                            message.ownRankingEntry = $root.wm.protobuf.LoadGhostKoshienRankingResponse.UserInfo.decode(reader, reader.uint32());
                            break;
                        }
                    case 5: {
                            if (!(message.rankingEntries && message.rankingEntries.length))
                                message.rankingEntries = [];
                            message.rankingEntries.push($root.wm.protobuf.LoadGhostKoshienRankingResponse.Entry.decode(reader, reader.uint32()));
                            break;
                        }
                    case 10: {
                            message.rankingUpdatedAt = reader.uint32();
                            break;
                        }
                    case 6: {
                            message.ownRecord = $root.wm.protobuf.LoadGhostKoshienRankingResponse.Record.decode(reader, reader.uint32());
                            break;
                        }
                    case 9: {
                            message.placeRecord = $root.wm.protobuf.LoadGhostKoshienRankingResponse.PlaceRecord.decode(reader, reader.uint32());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("error"))
                    throw $util.ProtocolError("missing required 'error'", { instance: message });
                return message;
            };

            /**
             * Decodes a LoadGhostKoshienRankingResponse message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof wm.protobuf.LoadGhostKoshienRankingResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {wm.protobuf.LoadGhostKoshienRankingResponse} LoadGhostKoshienRankingResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LoadGhostKoshienRankingResponse.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a LoadGhostKoshienRankingResponse message.
             * @function verify
             * @memberof wm.protobuf.LoadGhostKoshienRankingResponse
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            LoadGhostKoshienRankingResponse.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                switch (message.error) {
                default:
                    return "error: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 7:
                case 9:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 16:
                case 17:
                case 18:
                case 19:
                    break;
                }
                if (message.roundQualified != null && message.hasOwnProperty("roundQualified")) {
                    if (!Array.isArray(message.roundQualified))
                        return "roundQualified: array expected";
                    for (let i = 0; i < message.roundQualified.length; ++i)
                        if (typeof message.roundQualified[i] !== "boolean")
                            return "roundQualified: boolean[] expected";
                }
                if (message.koshienSchedule != null && message.hasOwnProperty("koshienSchedule")) {
                    let error = $root.wm.protobuf.GhostKoshienSchedule.verify(message.koshienSchedule);
                    if (error)
                        return "koshienSchedule." + error;
                }
                if (message.ownRankingEntry != null && message.hasOwnProperty("ownRankingEntry")) {
                    let error = $root.wm.protobuf.LoadGhostKoshienRankingResponse.UserInfo.verify(message.ownRankingEntry);
                    if (error)
                        return "ownRankingEntry." + error;
                }
                if (message.rankingEntries != null && message.hasOwnProperty("rankingEntries")) {
                    if (!Array.isArray(message.rankingEntries))
                        return "rankingEntries: array expected";
                    for (let i = 0; i < message.rankingEntries.length; ++i) {
                        let error = $root.wm.protobuf.LoadGhostKoshienRankingResponse.Entry.verify(message.rankingEntries[i]);
                        if (error)
                            return "rankingEntries." + error;
                    }
                }
                if (message.rankingUpdatedAt != null && message.hasOwnProperty("rankingUpdatedAt"))
                    if (!$util.isInteger(message.rankingUpdatedAt))
                        return "rankingUpdatedAt: integer expected";
                if (message.ownRecord != null && message.hasOwnProperty("ownRecord")) {
                    let error = $root.wm.protobuf.LoadGhostKoshienRankingResponse.Record.verify(message.ownRecord);
                    if (error)
                        return "ownRecord." + error;
                }
                if (message.placeRecord != null && message.hasOwnProperty("placeRecord")) {
                    let error = $root.wm.protobuf.LoadGhostKoshienRankingResponse.PlaceRecord.verify(message.placeRecord);
                    if (error)
                        return "placeRecord." + error;
                }
                return null;
            };

            /**
             * Creates a LoadGhostKoshienRankingResponse message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof wm.protobuf.LoadGhostKoshienRankingResponse
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {wm.protobuf.LoadGhostKoshienRankingResponse} LoadGhostKoshienRankingResponse
             */
            LoadGhostKoshienRankingResponse.fromObject = function fromObject(object) {
                if (object instanceof $root.wm.protobuf.LoadGhostKoshienRankingResponse)
                    return object;
                let message = new $root.wm.protobuf.LoadGhostKoshienRankingResponse();
                switch (object.error) {
                default:
                    if (typeof object.error === "number") {
                        message.error = object.error;
                        break;
                    }
                    break;
                case "ERR_SUCCESS":
                case 0:
                    message.error = 0;
                    break;
                case "ERR_REQUEST":
                case 1:
                    message.error = 1;
                    break;
                case "ERR_NOT_FOUND":
                case 2:
                    message.error = 2;
                    break;
                case "ERR_ID_SERVER":
                case 3:
                    message.error = 3;
                    break;
                case "ERR_ID_BANNED":
                case 4:
                    message.error = 4;
                    break;
                case "ERR_USER_LOCKED":
                case 5:
                    message.error = 5;
                    break;
                case "ERR_USER_VERSION":
                case 6:
                    message.error = 6;
                    break;
                case "ERR_NAME_CONFLICTED":
                case 7:
                    message.error = 7;
                    break;
                case "ERR_FORBIDDEN":
                case 9:
                    message.error = 9;
                    break;
                case "ERR_USER_SUCCEEDED":
                case 11:
                    message.error = 11;
                    break;
                case "ERR_BEING_TRANSFERRED":
                case 12:
                    message.error = 12;
                    break;
                case "ERR_SCRATCH_LOCKED":
                case 13:
                    message.error = 13;
                    break;
                case "ERR_BINGO_REVENGE_LOCKED":
                case 14:
                    message.error = 14;
                    break;
                case "ERR_BINGO_ALREDY_LINKED":
                case 15:
                    message.error = 15;
                    break;
                case "ERR_BINGO_FINISHED":
                case 16:
                    message.error = 16;
                    break;
                case "ERR_BINGO_REACHED_MAX_USER":
                case 17:
                    message.error = 17;
                    break;
                case "ERR_CAR_NOT_FOUND":
                case 18:
                    message.error = 18;
                    break;
                case "ERR_BINGO_CARD_NOT_FOUND":
                case 19:
                    message.error = 19;
                    break;
                }
                if (object.roundQualified) {
                    if (!Array.isArray(object.roundQualified))
                        throw TypeError(".wm.protobuf.LoadGhostKoshienRankingResponse.roundQualified: array expected");
                    message.roundQualified = [];
                    for (let i = 0; i < object.roundQualified.length; ++i)
                        message.roundQualified[i] = Boolean(object.roundQualified[i]);
                }
                if (object.koshienSchedule != null) {
                    if (typeof object.koshienSchedule !== "object")
                        throw TypeError(".wm.protobuf.LoadGhostKoshienRankingResponse.koshienSchedule: object expected");
                    message.koshienSchedule = $root.wm.protobuf.GhostKoshienSchedule.fromObject(object.koshienSchedule);
                }
                if (object.ownRankingEntry != null) {
                    if (typeof object.ownRankingEntry !== "object")
                        throw TypeError(".wm.protobuf.LoadGhostKoshienRankingResponse.ownRankingEntry: object expected");
                    message.ownRankingEntry = $root.wm.protobuf.LoadGhostKoshienRankingResponse.UserInfo.fromObject(object.ownRankingEntry);
                }
                if (object.rankingEntries) {
                    if (!Array.isArray(object.rankingEntries))
                        throw TypeError(".wm.protobuf.LoadGhostKoshienRankingResponse.rankingEntries: array expected");
                    message.rankingEntries = [];
                    for (let i = 0; i < object.rankingEntries.length; ++i) {
                        if (typeof object.rankingEntries[i] !== "object")
                            throw TypeError(".wm.protobuf.LoadGhostKoshienRankingResponse.rankingEntries: object expected");
                        message.rankingEntries[i] = $root.wm.protobuf.LoadGhostKoshienRankingResponse.Entry.fromObject(object.rankingEntries[i]);
                    }
                }
                if (object.rankingUpdatedAt != null)
                    message.rankingUpdatedAt = object.rankingUpdatedAt >>> 0;
                if (object.ownRecord != null) {
                    if (typeof object.ownRecord !== "object")
                        throw TypeError(".wm.protobuf.LoadGhostKoshienRankingResponse.ownRecord: object expected");
                    message.ownRecord = $root.wm.protobuf.LoadGhostKoshienRankingResponse.Record.fromObject(object.ownRecord);
                }
                if (object.placeRecord != null) {
                    if (typeof object.placeRecord !== "object")
                        throw TypeError(".wm.protobuf.LoadGhostKoshienRankingResponse.placeRecord: object expected");
                    message.placeRecord = $root.wm.protobuf.LoadGhostKoshienRankingResponse.PlaceRecord.fromObject(object.placeRecord);
                }
                return message;
            };

            /**
             * Creates a plain object from a LoadGhostKoshienRankingResponse message. Also converts values to other types if specified.
             * @function toObject
             * @memberof wm.protobuf.LoadGhostKoshienRankingResponse
             * @static
             * @param {wm.protobuf.LoadGhostKoshienRankingResponse} message LoadGhostKoshienRankingResponse
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            LoadGhostKoshienRankingResponse.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults) {
                    object.rankingEntries = [];
                    object.roundQualified = [];
                }
                if (options.defaults) {
                    object.error = options.enums === String ? "ERR_SUCCESS" : 0;
                    object.koshienSchedule = null;
                    object.ownRankingEntry = null;
                    object.ownRecord = null;
                    object.placeRecord = null;
                    object.rankingUpdatedAt = 0;
                }
                if (message.error != null && message.hasOwnProperty("error"))
                    object.error = options.enums === String ? $root.wm.protobuf.ErrorCode[message.error] === undefined ? message.error : $root.wm.protobuf.ErrorCode[message.error] : message.error;
                if (message.koshienSchedule != null && message.hasOwnProperty("koshienSchedule"))
                    object.koshienSchedule = $root.wm.protobuf.GhostKoshienSchedule.toObject(message.koshienSchedule, options);
                if (message.ownRankingEntry != null && message.hasOwnProperty("ownRankingEntry"))
                    object.ownRankingEntry = $root.wm.protobuf.LoadGhostKoshienRankingResponse.UserInfo.toObject(message.ownRankingEntry, options);
                if (message.rankingEntries && message.rankingEntries.length) {
                    object.rankingEntries = [];
                    for (let j = 0; j < message.rankingEntries.length; ++j)
                        object.rankingEntries[j] = $root.wm.protobuf.LoadGhostKoshienRankingResponse.Entry.toObject(message.rankingEntries[j], options);
                }
                if (message.ownRecord != null && message.hasOwnProperty("ownRecord"))
                    object.ownRecord = $root.wm.protobuf.LoadGhostKoshienRankingResponse.Record.toObject(message.ownRecord, options);
                if (message.roundQualified && message.roundQualified.length) {
                    object.roundQualified = [];
                    for (let j = 0; j < message.roundQualified.length; ++j)
                        object.roundQualified[j] = message.roundQualified[j];
                }
                if (message.placeRecord != null && message.hasOwnProperty("placeRecord"))
                    object.placeRecord = $root.wm.protobuf.LoadGhostKoshienRankingResponse.PlaceRecord.toObject(message.placeRecord, options);
                if (message.rankingUpdatedAt != null && message.hasOwnProperty("rankingUpdatedAt"))
                    object.rankingUpdatedAt = message.rankingUpdatedAt;
                return object;
            };

            /**
             * Converts this LoadGhostKoshienRankingResponse to JSON.
             * @function toJSON
             * @memberof wm.protobuf.LoadGhostKoshienRankingResponse
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            LoadGhostKoshienRankingResponse.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for LoadGhostKoshienRankingResponse
             * @function getTypeUrl
             * @memberof wm.protobuf.LoadGhostKoshienRankingResponse
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            LoadGhostKoshienRankingResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/wm.protobuf.LoadGhostKoshienRankingResponse";
            };

            LoadGhostKoshienRankingResponse.UserInfo = (function() {

                /**
                 * Properties of a UserInfo.
                 * @memberof wm.protobuf.LoadGhostKoshienRankingResponse
                 * @interface IUserInfo
                 * @property {number} result UserInfo result
                 * @property {number} regionId UserInfo regionId
                 * @property {string} placeId UserInfo placeId
                 * @property {string} name UserInfo name
                 * @property {number} model UserInfo model
                 * @property {Array.<wm.protobuf.IGhostKoshienRoundRank>|null} [roundRank] UserInfo roundRank
                 * @property {number} visualModel UserInfo visualModel
                 * @property {number} defaultColor UserInfo defaultColor
                 */

                /**
                 * Constructs a new UserInfo.
                 * @memberof wm.protobuf.LoadGhostKoshienRankingResponse
                 * @classdesc Represents a UserInfo.
                 * @implements IUserInfo
                 * @constructor
                 * @param {wm.protobuf.LoadGhostKoshienRankingResponse.IUserInfo=} [properties] Properties to set
                 */
                function UserInfo(properties) {
                    this.roundRank = [];
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * UserInfo result.
                 * @member {number} result
                 * @memberof wm.protobuf.LoadGhostKoshienRankingResponse.UserInfo
                 * @instance
                 */
                UserInfo.prototype.result = 0;

                /**
                 * UserInfo regionId.
                 * @member {number} regionId
                 * @memberof wm.protobuf.LoadGhostKoshienRankingResponse.UserInfo
                 * @instance
                 */
                UserInfo.prototype.regionId = 0;

                /**
                 * UserInfo placeId.
                 * @member {string} placeId
                 * @memberof wm.protobuf.LoadGhostKoshienRankingResponse.UserInfo
                 * @instance
                 */
                UserInfo.prototype.placeId = "";

                /**
                 * UserInfo name.
                 * @member {string} name
                 * @memberof wm.protobuf.LoadGhostKoshienRankingResponse.UserInfo
                 * @instance
                 */
                UserInfo.prototype.name = "";

                /**
                 * UserInfo model.
                 * @member {number} model
                 * @memberof wm.protobuf.LoadGhostKoshienRankingResponse.UserInfo
                 * @instance
                 */
                UserInfo.prototype.model = 0;

                /**
                 * UserInfo roundRank.
                 * @member {Array.<wm.protobuf.IGhostKoshienRoundRank>} roundRank
                 * @memberof wm.protobuf.LoadGhostKoshienRankingResponse.UserInfo
                 * @instance
                 */
                UserInfo.prototype.roundRank = $util.emptyArray;

                /**
                 * UserInfo visualModel.
                 * @member {number} visualModel
                 * @memberof wm.protobuf.LoadGhostKoshienRankingResponse.UserInfo
                 * @instance
                 */
                UserInfo.prototype.visualModel = 0;

                /**
                 * UserInfo defaultColor.
                 * @member {number} defaultColor
                 * @memberof wm.protobuf.LoadGhostKoshienRankingResponse.UserInfo
                 * @instance
                 */
                UserInfo.prototype.defaultColor = 0;

                /**
                 * Creates a new UserInfo instance using the specified properties.
                 * @function create
                 * @memberof wm.protobuf.LoadGhostKoshienRankingResponse.UserInfo
                 * @static
                 * @param {wm.protobuf.LoadGhostKoshienRankingResponse.IUserInfo=} [properties] Properties to set
                 * @returns {wm.protobuf.LoadGhostKoshienRankingResponse.UserInfo} UserInfo instance
                 */
                UserInfo.create = function create(properties) {
                    return new UserInfo(properties);
                };

                /**
                 * Encodes the specified UserInfo message. Does not implicitly {@link wm.protobuf.LoadGhostKoshienRankingResponse.UserInfo.verify|verify} messages.
                 * @function encode
                 * @memberof wm.protobuf.LoadGhostKoshienRankingResponse.UserInfo
                 * @static
                 * @param {wm.protobuf.LoadGhostKoshienRankingResponse.IUserInfo} message UserInfo message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                UserInfo.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    writer.uint32(/* id 1, wireType 0 =*/8).sint32(message.result);
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.regionId);
                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.placeId);
                    writer.uint32(/* id 4, wireType 2 =*/34).string(message.name);
                    writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.model);
                    if (message.roundRank != null && message.roundRank.length)
                        for (let i = 0; i < message.roundRank.length; ++i)
                            $root.wm.protobuf.GhostKoshienRoundRank.encode(message.roundRank[i], writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                    writer.uint32(/* id 7, wireType 0 =*/56).uint32(message.visualModel);
                    writer.uint32(/* id 8, wireType 0 =*/64).uint32(message.defaultColor);
                    return writer;
                };

                /**
                 * Encodes the specified UserInfo message, length delimited. Does not implicitly {@link wm.protobuf.LoadGhostKoshienRankingResponse.UserInfo.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof wm.protobuf.LoadGhostKoshienRankingResponse.UserInfo
                 * @static
                 * @param {wm.protobuf.LoadGhostKoshienRankingResponse.IUserInfo} message UserInfo message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                UserInfo.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a UserInfo message from the specified reader or buffer.
                 * @function decode
                 * @memberof wm.protobuf.LoadGhostKoshienRankingResponse.UserInfo
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {wm.protobuf.LoadGhostKoshienRankingResponse.UserInfo} UserInfo
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                UserInfo.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.wm.protobuf.LoadGhostKoshienRankingResponse.UserInfo();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.result = reader.sint32();
                                break;
                            }
                        case 2: {
                                message.regionId = reader.uint32();
                                break;
                            }
                        case 3: {
                                message.placeId = reader.string();
                                break;
                            }
                        case 4: {
                                message.name = reader.string();
                                break;
                            }
                        case 5: {
                                message.model = reader.uint32();
                                break;
                            }
                        case 6: {
                                if (!(message.roundRank && message.roundRank.length))
                                    message.roundRank = [];
                                message.roundRank.push($root.wm.protobuf.GhostKoshienRoundRank.decode(reader, reader.uint32()));
                                break;
                            }
                        case 7: {
                                message.visualModel = reader.uint32();
                                break;
                            }
                        case 8: {
                                message.defaultColor = reader.uint32();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    if (!message.hasOwnProperty("result"))
                        throw $util.ProtocolError("missing required 'result'", { instance: message });
                    if (!message.hasOwnProperty("regionId"))
                        throw $util.ProtocolError("missing required 'regionId'", { instance: message });
                    if (!message.hasOwnProperty("placeId"))
                        throw $util.ProtocolError("missing required 'placeId'", { instance: message });
                    if (!message.hasOwnProperty("name"))
                        throw $util.ProtocolError("missing required 'name'", { instance: message });
                    if (!message.hasOwnProperty("model"))
                        throw $util.ProtocolError("missing required 'model'", { instance: message });
                    if (!message.hasOwnProperty("visualModel"))
                        throw $util.ProtocolError("missing required 'visualModel'", { instance: message });
                    if (!message.hasOwnProperty("defaultColor"))
                        throw $util.ProtocolError("missing required 'defaultColor'", { instance: message });
                    return message;
                };

                /**
                 * Decodes a UserInfo message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof wm.protobuf.LoadGhostKoshienRankingResponse.UserInfo
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {wm.protobuf.LoadGhostKoshienRankingResponse.UserInfo} UserInfo
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                UserInfo.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a UserInfo message.
                 * @function verify
                 * @memberof wm.protobuf.LoadGhostKoshienRankingResponse.UserInfo
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                UserInfo.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (!$util.isInteger(message.result))
                        return "result: integer expected";
                    if (!$util.isInteger(message.regionId))
                        return "regionId: integer expected";
                    if (!$util.isString(message.placeId))
                        return "placeId: string expected";
                    if (!$util.isString(message.name))
                        return "name: string expected";
                    if (!$util.isInteger(message.model))
                        return "model: integer expected";
                    if (message.roundRank != null && message.hasOwnProperty("roundRank")) {
                        if (!Array.isArray(message.roundRank))
                            return "roundRank: array expected";
                        for (let i = 0; i < message.roundRank.length; ++i) {
                            let error = $root.wm.protobuf.GhostKoshienRoundRank.verify(message.roundRank[i]);
                            if (error)
                                return "roundRank." + error;
                        }
                    }
                    if (!$util.isInteger(message.visualModel))
                        return "visualModel: integer expected";
                    if (!$util.isInteger(message.defaultColor))
                        return "defaultColor: integer expected";
                    return null;
                };

                /**
                 * Creates a UserInfo message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof wm.protobuf.LoadGhostKoshienRankingResponse.UserInfo
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {wm.protobuf.LoadGhostKoshienRankingResponse.UserInfo} UserInfo
                 */
                UserInfo.fromObject = function fromObject(object) {
                    if (object instanceof $root.wm.protobuf.LoadGhostKoshienRankingResponse.UserInfo)
                        return object;
                    let message = new $root.wm.protobuf.LoadGhostKoshienRankingResponse.UserInfo();
                    if (object.result != null)
                        message.result = object.result | 0;
                    if (object.regionId != null)
                        message.regionId = object.regionId >>> 0;
                    if (object.placeId != null)
                        message.placeId = String(object.placeId);
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.model != null)
                        message.model = object.model >>> 0;
                    if (object.roundRank) {
                        if (!Array.isArray(object.roundRank))
                            throw TypeError(".wm.protobuf.LoadGhostKoshienRankingResponse.UserInfo.roundRank: array expected");
                        message.roundRank = [];
                        for (let i = 0; i < object.roundRank.length; ++i) {
                            if (typeof object.roundRank[i] !== "object")
                                throw TypeError(".wm.protobuf.LoadGhostKoshienRankingResponse.UserInfo.roundRank: object expected");
                            message.roundRank[i] = $root.wm.protobuf.GhostKoshienRoundRank.fromObject(object.roundRank[i]);
                        }
                    }
                    if (object.visualModel != null)
                        message.visualModel = object.visualModel >>> 0;
                    if (object.defaultColor != null)
                        message.defaultColor = object.defaultColor >>> 0;
                    return message;
                };

                /**
                 * Creates a plain object from a UserInfo message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof wm.protobuf.LoadGhostKoshienRankingResponse.UserInfo
                 * @static
                 * @param {wm.protobuf.LoadGhostKoshienRankingResponse.UserInfo} message UserInfo
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                UserInfo.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.arrays || options.defaults)
                        object.roundRank = [];
                    if (options.defaults) {
                        object.result = 0;
                        object.regionId = 0;
                        object.placeId = "";
                        object.name = "";
                        object.model = 0;
                        object.visualModel = 0;
                        object.defaultColor = 0;
                    }
                    if (message.result != null && message.hasOwnProperty("result"))
                        object.result = message.result;
                    if (message.regionId != null && message.hasOwnProperty("regionId"))
                        object.regionId = message.regionId;
                    if (message.placeId != null && message.hasOwnProperty("placeId"))
                        object.placeId = message.placeId;
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message.model != null && message.hasOwnProperty("model"))
                        object.model = message.model;
                    if (message.roundRank && message.roundRank.length) {
                        object.roundRank = [];
                        for (let j = 0; j < message.roundRank.length; ++j)
                            object.roundRank[j] = $root.wm.protobuf.GhostKoshienRoundRank.toObject(message.roundRank[j], options);
                    }
                    if (message.visualModel != null && message.hasOwnProperty("visualModel"))
                        object.visualModel = message.visualModel;
                    if (message.defaultColor != null && message.hasOwnProperty("defaultColor"))
                        object.defaultColor = message.defaultColor;
                    return object;
                };

                /**
                 * Converts this UserInfo to JSON.
                 * @function toJSON
                 * @memberof wm.protobuf.LoadGhostKoshienRankingResponse.UserInfo
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                UserInfo.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                /**
                 * Gets the default type url for UserInfo
                 * @function getTypeUrl
                 * @memberof wm.protobuf.LoadGhostKoshienRankingResponse.UserInfo
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                UserInfo.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/wm.protobuf.LoadGhostKoshienRankingResponse.UserInfo";
                };

                return UserInfo;
            })();

            LoadGhostKoshienRankingResponse.Entry = (function() {

                /**
                 * Properties of an Entry.
                 * @memberof wm.protobuf.LoadGhostKoshienRankingResponse
                 * @interface IEntry
                 * @property {number} rank Entry rank
                 * @property {number} result Entry result
                 * @property {number} regionId Entry regionId
                 * @property {string} placeId Entry placeId
                 * @property {number} model Entry model
                 * @property {string} shopName Entry shopName
                 * @property {number} playedAt Entry playedAt
                 * @property {number} visualModel Entry visualModel
                 * @property {number} defaultColor Entry defaultColor
                 */

                /**
                 * Constructs a new Entry.
                 * @memberof wm.protobuf.LoadGhostKoshienRankingResponse
                 * @classdesc Represents an Entry.
                 * @implements IEntry
                 * @constructor
                 * @param {wm.protobuf.LoadGhostKoshienRankingResponse.IEntry=} [properties] Properties to set
                 */
                function Entry(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * Entry rank.
                 * @member {number} rank
                 * @memberof wm.protobuf.LoadGhostKoshienRankingResponse.Entry
                 * @instance
                 */
                Entry.prototype.rank = 0;

                /**
                 * Entry result.
                 * @member {number} result
                 * @memberof wm.protobuf.LoadGhostKoshienRankingResponse.Entry
                 * @instance
                 */
                Entry.prototype.result = 0;

                /**
                 * Entry regionId.
                 * @member {number} regionId
                 * @memberof wm.protobuf.LoadGhostKoshienRankingResponse.Entry
                 * @instance
                 */
                Entry.prototype.regionId = 0;

                /**
                 * Entry placeId.
                 * @member {string} placeId
                 * @memberof wm.protobuf.LoadGhostKoshienRankingResponse.Entry
                 * @instance
                 */
                Entry.prototype.placeId = "";

                /**
                 * Entry model.
                 * @member {number} model
                 * @memberof wm.protobuf.LoadGhostKoshienRankingResponse.Entry
                 * @instance
                 */
                Entry.prototype.model = 0;

                /**
                 * Entry shopName.
                 * @member {string} shopName
                 * @memberof wm.protobuf.LoadGhostKoshienRankingResponse.Entry
                 * @instance
                 */
                Entry.prototype.shopName = "";

                /**
                 * Entry playedAt.
                 * @member {number} playedAt
                 * @memberof wm.protobuf.LoadGhostKoshienRankingResponse.Entry
                 * @instance
                 */
                Entry.prototype.playedAt = 0;

                /**
                 * Entry visualModel.
                 * @member {number} visualModel
                 * @memberof wm.protobuf.LoadGhostKoshienRankingResponse.Entry
                 * @instance
                 */
                Entry.prototype.visualModel = 0;

                /**
                 * Entry defaultColor.
                 * @member {number} defaultColor
                 * @memberof wm.protobuf.LoadGhostKoshienRankingResponse.Entry
                 * @instance
                 */
                Entry.prototype.defaultColor = 0;

                /**
                 * Creates a new Entry instance using the specified properties.
                 * @function create
                 * @memberof wm.protobuf.LoadGhostKoshienRankingResponse.Entry
                 * @static
                 * @param {wm.protobuf.LoadGhostKoshienRankingResponse.IEntry=} [properties] Properties to set
                 * @returns {wm.protobuf.LoadGhostKoshienRankingResponse.Entry} Entry instance
                 */
                Entry.create = function create(properties) {
                    return new Entry(properties);
                };

                /**
                 * Encodes the specified Entry message. Does not implicitly {@link wm.protobuf.LoadGhostKoshienRankingResponse.Entry.verify|verify} messages.
                 * @function encode
                 * @memberof wm.protobuf.LoadGhostKoshienRankingResponse.Entry
                 * @static
                 * @param {wm.protobuf.LoadGhostKoshienRankingResponse.IEntry} message Entry message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Entry.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.rank);
                    writer.uint32(/* id 2, wireType 0 =*/16).sint32(message.result);
                    writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.regionId);
                    writer.uint32(/* id 4, wireType 2 =*/34).string(message.placeId);
                    writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.model);
                    writer.uint32(/* id 6, wireType 2 =*/50).string(message.shopName);
                    writer.uint32(/* id 7, wireType 0 =*/56).uint32(message.playedAt);
                    writer.uint32(/* id 8, wireType 0 =*/64).uint32(message.visualModel);
                    writer.uint32(/* id 9, wireType 0 =*/72).uint32(message.defaultColor);
                    return writer;
                };

                /**
                 * Encodes the specified Entry message, length delimited. Does not implicitly {@link wm.protobuf.LoadGhostKoshienRankingResponse.Entry.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof wm.protobuf.LoadGhostKoshienRankingResponse.Entry
                 * @static
                 * @param {wm.protobuf.LoadGhostKoshienRankingResponse.IEntry} message Entry message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Entry.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes an Entry message from the specified reader or buffer.
                 * @function decode
                 * @memberof wm.protobuf.LoadGhostKoshienRankingResponse.Entry
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {wm.protobuf.LoadGhostKoshienRankingResponse.Entry} Entry
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Entry.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.wm.protobuf.LoadGhostKoshienRankingResponse.Entry();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.rank = reader.uint32();
                                break;
                            }
                        case 2: {
                                message.result = reader.sint32();
                                break;
                            }
                        case 3: {
                                message.regionId = reader.uint32();
                                break;
                            }
                        case 4: {
                                message.placeId = reader.string();
                                break;
                            }
                        case 5: {
                                message.model = reader.uint32();
                                break;
                            }
                        case 6: {
                                message.shopName = reader.string();
                                break;
                            }
                        case 7: {
                                message.playedAt = reader.uint32();
                                break;
                            }
                        case 8: {
                                message.visualModel = reader.uint32();
                                break;
                            }
                        case 9: {
                                message.defaultColor = reader.uint32();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    if (!message.hasOwnProperty("rank"))
                        throw $util.ProtocolError("missing required 'rank'", { instance: message });
                    if (!message.hasOwnProperty("result"))
                        throw $util.ProtocolError("missing required 'result'", { instance: message });
                    if (!message.hasOwnProperty("regionId"))
                        throw $util.ProtocolError("missing required 'regionId'", { instance: message });
                    if (!message.hasOwnProperty("placeId"))
                        throw $util.ProtocolError("missing required 'placeId'", { instance: message });
                    if (!message.hasOwnProperty("model"))
                        throw $util.ProtocolError("missing required 'model'", { instance: message });
                    if (!message.hasOwnProperty("shopName"))
                        throw $util.ProtocolError("missing required 'shopName'", { instance: message });
                    if (!message.hasOwnProperty("playedAt"))
                        throw $util.ProtocolError("missing required 'playedAt'", { instance: message });
                    if (!message.hasOwnProperty("visualModel"))
                        throw $util.ProtocolError("missing required 'visualModel'", { instance: message });
                    if (!message.hasOwnProperty("defaultColor"))
                        throw $util.ProtocolError("missing required 'defaultColor'", { instance: message });
                    return message;
                };

                /**
                 * Decodes an Entry message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof wm.protobuf.LoadGhostKoshienRankingResponse.Entry
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {wm.protobuf.LoadGhostKoshienRankingResponse.Entry} Entry
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Entry.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies an Entry message.
                 * @function verify
                 * @memberof wm.protobuf.LoadGhostKoshienRankingResponse.Entry
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Entry.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (!$util.isInteger(message.rank))
                        return "rank: integer expected";
                    if (!$util.isInteger(message.result))
                        return "result: integer expected";
                    if (!$util.isInteger(message.regionId))
                        return "regionId: integer expected";
                    if (!$util.isString(message.placeId))
                        return "placeId: string expected";
                    if (!$util.isInteger(message.model))
                        return "model: integer expected";
                    if (!$util.isString(message.shopName))
                        return "shopName: string expected";
                    if (!$util.isInteger(message.playedAt))
                        return "playedAt: integer expected";
                    if (!$util.isInteger(message.visualModel))
                        return "visualModel: integer expected";
                    if (!$util.isInteger(message.defaultColor))
                        return "defaultColor: integer expected";
                    return null;
                };

                /**
                 * Creates an Entry message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof wm.protobuf.LoadGhostKoshienRankingResponse.Entry
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {wm.protobuf.LoadGhostKoshienRankingResponse.Entry} Entry
                 */
                Entry.fromObject = function fromObject(object) {
                    if (object instanceof $root.wm.protobuf.LoadGhostKoshienRankingResponse.Entry)
                        return object;
                    let message = new $root.wm.protobuf.LoadGhostKoshienRankingResponse.Entry();
                    if (object.rank != null)
                        message.rank = object.rank >>> 0;
                    if (object.result != null)
                        message.result = object.result | 0;
                    if (object.regionId != null)
                        message.regionId = object.regionId >>> 0;
                    if (object.placeId != null)
                        message.placeId = String(object.placeId);
                    if (object.model != null)
                        message.model = object.model >>> 0;
                    if (object.shopName != null)
                        message.shopName = String(object.shopName);
                    if (object.playedAt != null)
                        message.playedAt = object.playedAt >>> 0;
                    if (object.visualModel != null)
                        message.visualModel = object.visualModel >>> 0;
                    if (object.defaultColor != null)
                        message.defaultColor = object.defaultColor >>> 0;
                    return message;
                };

                /**
                 * Creates a plain object from an Entry message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof wm.protobuf.LoadGhostKoshienRankingResponse.Entry
                 * @static
                 * @param {wm.protobuf.LoadGhostKoshienRankingResponse.Entry} message Entry
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Entry.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        object.rank = 0;
                        object.result = 0;
                        object.regionId = 0;
                        object.placeId = "";
                        object.model = 0;
                        object.shopName = "";
                        object.playedAt = 0;
                        object.visualModel = 0;
                        object.defaultColor = 0;
                    }
                    if (message.rank != null && message.hasOwnProperty("rank"))
                        object.rank = message.rank;
                    if (message.result != null && message.hasOwnProperty("result"))
                        object.result = message.result;
                    if (message.regionId != null && message.hasOwnProperty("regionId"))
                        object.regionId = message.regionId;
                    if (message.placeId != null && message.hasOwnProperty("placeId"))
                        object.placeId = message.placeId;
                    if (message.model != null && message.hasOwnProperty("model"))
                        object.model = message.model;
                    if (message.shopName != null && message.hasOwnProperty("shopName"))
                        object.shopName = message.shopName;
                    if (message.playedAt != null && message.hasOwnProperty("playedAt"))
                        object.playedAt = message.playedAt;
                    if (message.visualModel != null && message.hasOwnProperty("visualModel"))
                        object.visualModel = message.visualModel;
                    if (message.defaultColor != null && message.hasOwnProperty("defaultColor"))
                        object.defaultColor = message.defaultColor;
                    return object;
                };

                /**
                 * Converts this Entry to JSON.
                 * @function toJSON
                 * @memberof wm.protobuf.LoadGhostKoshienRankingResponse.Entry
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Entry.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                /**
                 * Gets the default type url for Entry
                 * @function getTypeUrl
                 * @memberof wm.protobuf.LoadGhostKoshienRankingResponse.Entry
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                Entry.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/wm.protobuf.LoadGhostKoshienRankingResponse.Entry";
                };

                return Entry;
            })();

            LoadGhostKoshienRankingResponse.Record = (function() {

                /**
                 * Properties of a Record.
                 * @memberof wm.protobuf.LoadGhostKoshienRankingResponse
                 * @interface IRecord
                 * @property {number} challengeCount Record challengeCount
                 * @property {number} updateCount Record updateCount
                 * @property {number} result Record result
                 */

                /**
                 * Constructs a new Record.
                 * @memberof wm.protobuf.LoadGhostKoshienRankingResponse
                 * @classdesc Represents a Record.
                 * @implements IRecord
                 * @constructor
                 * @param {wm.protobuf.LoadGhostKoshienRankingResponse.IRecord=} [properties] Properties to set
                 */
                function Record(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * Record challengeCount.
                 * @member {number} challengeCount
                 * @memberof wm.protobuf.LoadGhostKoshienRankingResponse.Record
                 * @instance
                 */
                Record.prototype.challengeCount = 0;

                /**
                 * Record updateCount.
                 * @member {number} updateCount
                 * @memberof wm.protobuf.LoadGhostKoshienRankingResponse.Record
                 * @instance
                 */
                Record.prototype.updateCount = 0;

                /**
                 * Record result.
                 * @member {number} result
                 * @memberof wm.protobuf.LoadGhostKoshienRankingResponse.Record
                 * @instance
                 */
                Record.prototype.result = 0;

                /**
                 * Creates a new Record instance using the specified properties.
                 * @function create
                 * @memberof wm.protobuf.LoadGhostKoshienRankingResponse.Record
                 * @static
                 * @param {wm.protobuf.LoadGhostKoshienRankingResponse.IRecord=} [properties] Properties to set
                 * @returns {wm.protobuf.LoadGhostKoshienRankingResponse.Record} Record instance
                 */
                Record.create = function create(properties) {
                    return new Record(properties);
                };

                /**
                 * Encodes the specified Record message. Does not implicitly {@link wm.protobuf.LoadGhostKoshienRankingResponse.Record.verify|verify} messages.
                 * @function encode
                 * @memberof wm.protobuf.LoadGhostKoshienRankingResponse.Record
                 * @static
                 * @param {wm.protobuf.LoadGhostKoshienRankingResponse.IRecord} message Record message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Record.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.challengeCount);
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.updateCount);
                    writer.uint32(/* id 3, wireType 0 =*/24).sint32(message.result);
                    return writer;
                };

                /**
                 * Encodes the specified Record message, length delimited. Does not implicitly {@link wm.protobuf.LoadGhostKoshienRankingResponse.Record.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof wm.protobuf.LoadGhostKoshienRankingResponse.Record
                 * @static
                 * @param {wm.protobuf.LoadGhostKoshienRankingResponse.IRecord} message Record message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Record.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a Record message from the specified reader or buffer.
                 * @function decode
                 * @memberof wm.protobuf.LoadGhostKoshienRankingResponse.Record
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {wm.protobuf.LoadGhostKoshienRankingResponse.Record} Record
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Record.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.wm.protobuf.LoadGhostKoshienRankingResponse.Record();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.challengeCount = reader.uint32();
                                break;
                            }
                        case 2: {
                                message.updateCount = reader.uint32();
                                break;
                            }
                        case 3: {
                                message.result = reader.sint32();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    if (!message.hasOwnProperty("challengeCount"))
                        throw $util.ProtocolError("missing required 'challengeCount'", { instance: message });
                    if (!message.hasOwnProperty("updateCount"))
                        throw $util.ProtocolError("missing required 'updateCount'", { instance: message });
                    if (!message.hasOwnProperty("result"))
                        throw $util.ProtocolError("missing required 'result'", { instance: message });
                    return message;
                };

                /**
                 * Decodes a Record message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof wm.protobuf.LoadGhostKoshienRankingResponse.Record
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {wm.protobuf.LoadGhostKoshienRankingResponse.Record} Record
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Record.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a Record message.
                 * @function verify
                 * @memberof wm.protobuf.LoadGhostKoshienRankingResponse.Record
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Record.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (!$util.isInteger(message.challengeCount))
                        return "challengeCount: integer expected";
                    if (!$util.isInteger(message.updateCount))
                        return "updateCount: integer expected";
                    if (!$util.isInteger(message.result))
                        return "result: integer expected";
                    return null;
                };

                /**
                 * Creates a Record message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof wm.protobuf.LoadGhostKoshienRankingResponse.Record
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {wm.protobuf.LoadGhostKoshienRankingResponse.Record} Record
                 */
                Record.fromObject = function fromObject(object) {
                    if (object instanceof $root.wm.protobuf.LoadGhostKoshienRankingResponse.Record)
                        return object;
                    let message = new $root.wm.protobuf.LoadGhostKoshienRankingResponse.Record();
                    if (object.challengeCount != null)
                        message.challengeCount = object.challengeCount >>> 0;
                    if (object.updateCount != null)
                        message.updateCount = object.updateCount >>> 0;
                    if (object.result != null)
                        message.result = object.result | 0;
                    return message;
                };

                /**
                 * Creates a plain object from a Record message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof wm.protobuf.LoadGhostKoshienRankingResponse.Record
                 * @static
                 * @param {wm.protobuf.LoadGhostKoshienRankingResponse.Record} message Record
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Record.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        object.challengeCount = 0;
                        object.updateCount = 0;
                        object.result = 0;
                    }
                    if (message.challengeCount != null && message.hasOwnProperty("challengeCount"))
                        object.challengeCount = message.challengeCount;
                    if (message.updateCount != null && message.hasOwnProperty("updateCount"))
                        object.updateCount = message.updateCount;
                    if (message.result != null && message.hasOwnProperty("result"))
                        object.result = message.result;
                    return object;
                };

                /**
                 * Converts this Record to JSON.
                 * @function toJSON
                 * @memberof wm.protobuf.LoadGhostKoshienRankingResponse.Record
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Record.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                /**
                 * Gets the default type url for Record
                 * @function getTypeUrl
                 * @memberof wm.protobuf.LoadGhostKoshienRankingResponse.Record
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                Record.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/wm.protobuf.LoadGhostKoshienRankingResponse.Record";
                };

                return Record;
            })();

            LoadGhostKoshienRankingResponse.PlaceRecord = (function() {

                /**
                 * Properties of a PlaceRecord.
                 * @memberof wm.protobuf.LoadGhostKoshienRankingResponse
                 * @interface IPlaceRecord
                 * @property {Array.<wm.protobuf.LoadGhostKoshienRankingResponse.PlaceRecord.IParticipantCar>|null} [challengeCount] PlaceRecord challengeCount
                 * @property {Array.<wm.protobuf.LoadGhostKoshienRankingResponse.PlaceRecord.IParticipantCar>|null} [updateCount] PlaceRecord updateCount
                 * @property {Array.<wm.protobuf.LoadGhostKoshienRankingResponse.PlaceRecord.IParticipantCar>|null} [result] PlaceRecord result
                 */

                /**
                 * Constructs a new PlaceRecord.
                 * @memberof wm.protobuf.LoadGhostKoshienRankingResponse
                 * @classdesc Represents a PlaceRecord.
                 * @implements IPlaceRecord
                 * @constructor
                 * @param {wm.protobuf.LoadGhostKoshienRankingResponse.IPlaceRecord=} [properties] Properties to set
                 */
                function PlaceRecord(properties) {
                    this.challengeCount = [];
                    this.updateCount = [];
                    this.result = [];
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * PlaceRecord challengeCount.
                 * @member {Array.<wm.protobuf.LoadGhostKoshienRankingResponse.PlaceRecord.IParticipantCar>} challengeCount
                 * @memberof wm.protobuf.LoadGhostKoshienRankingResponse.PlaceRecord
                 * @instance
                 */
                PlaceRecord.prototype.challengeCount = $util.emptyArray;

                /**
                 * PlaceRecord updateCount.
                 * @member {Array.<wm.protobuf.LoadGhostKoshienRankingResponse.PlaceRecord.IParticipantCar>} updateCount
                 * @memberof wm.protobuf.LoadGhostKoshienRankingResponse.PlaceRecord
                 * @instance
                 */
                PlaceRecord.prototype.updateCount = $util.emptyArray;

                /**
                 * PlaceRecord result.
                 * @member {Array.<wm.protobuf.LoadGhostKoshienRankingResponse.PlaceRecord.IParticipantCar>} result
                 * @memberof wm.protobuf.LoadGhostKoshienRankingResponse.PlaceRecord
                 * @instance
                 */
                PlaceRecord.prototype.result = $util.emptyArray;

                /**
                 * Creates a new PlaceRecord instance using the specified properties.
                 * @function create
                 * @memberof wm.protobuf.LoadGhostKoshienRankingResponse.PlaceRecord
                 * @static
                 * @param {wm.protobuf.LoadGhostKoshienRankingResponse.IPlaceRecord=} [properties] Properties to set
                 * @returns {wm.protobuf.LoadGhostKoshienRankingResponse.PlaceRecord} PlaceRecord instance
                 */
                PlaceRecord.create = function create(properties) {
                    return new PlaceRecord(properties);
                };

                /**
                 * Encodes the specified PlaceRecord message. Does not implicitly {@link wm.protobuf.LoadGhostKoshienRankingResponse.PlaceRecord.verify|verify} messages.
                 * @function encode
                 * @memberof wm.protobuf.LoadGhostKoshienRankingResponse.PlaceRecord
                 * @static
                 * @param {wm.protobuf.LoadGhostKoshienRankingResponse.IPlaceRecord} message PlaceRecord message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                PlaceRecord.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.challengeCount != null && message.challengeCount.length)
                        for (let i = 0; i < message.challengeCount.length; ++i)
                            $root.wm.protobuf.LoadGhostKoshienRankingResponse.PlaceRecord.ParticipantCar.encode(message.challengeCount[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.updateCount != null && message.updateCount.length)
                        for (let i = 0; i < message.updateCount.length; ++i)
                            $root.wm.protobuf.LoadGhostKoshienRankingResponse.PlaceRecord.ParticipantCar.encode(message.updateCount[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.result != null && message.result.length)
                        for (let i = 0; i < message.result.length; ++i)
                            $root.wm.protobuf.LoadGhostKoshienRankingResponse.PlaceRecord.ParticipantCar.encode(message.result[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    return writer;
                };

                /**
                 * Encodes the specified PlaceRecord message, length delimited. Does not implicitly {@link wm.protobuf.LoadGhostKoshienRankingResponse.PlaceRecord.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof wm.protobuf.LoadGhostKoshienRankingResponse.PlaceRecord
                 * @static
                 * @param {wm.protobuf.LoadGhostKoshienRankingResponse.IPlaceRecord} message PlaceRecord message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                PlaceRecord.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a PlaceRecord message from the specified reader or buffer.
                 * @function decode
                 * @memberof wm.protobuf.LoadGhostKoshienRankingResponse.PlaceRecord
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {wm.protobuf.LoadGhostKoshienRankingResponse.PlaceRecord} PlaceRecord
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                PlaceRecord.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.wm.protobuf.LoadGhostKoshienRankingResponse.PlaceRecord();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                if (!(message.challengeCount && message.challengeCount.length))
                                    message.challengeCount = [];
                                message.challengeCount.push($root.wm.protobuf.LoadGhostKoshienRankingResponse.PlaceRecord.ParticipantCar.decode(reader, reader.uint32()));
                                break;
                            }
                        case 2: {
                                if (!(message.updateCount && message.updateCount.length))
                                    message.updateCount = [];
                                message.updateCount.push($root.wm.protobuf.LoadGhostKoshienRankingResponse.PlaceRecord.ParticipantCar.decode(reader, reader.uint32()));
                                break;
                            }
                        case 3: {
                                if (!(message.result && message.result.length))
                                    message.result = [];
                                message.result.push($root.wm.protobuf.LoadGhostKoshienRankingResponse.PlaceRecord.ParticipantCar.decode(reader, reader.uint32()));
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a PlaceRecord message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof wm.protobuf.LoadGhostKoshienRankingResponse.PlaceRecord
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {wm.protobuf.LoadGhostKoshienRankingResponse.PlaceRecord} PlaceRecord
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                PlaceRecord.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a PlaceRecord message.
                 * @function verify
                 * @memberof wm.protobuf.LoadGhostKoshienRankingResponse.PlaceRecord
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                PlaceRecord.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.challengeCount != null && message.hasOwnProperty("challengeCount")) {
                        if (!Array.isArray(message.challengeCount))
                            return "challengeCount: array expected";
                        for (let i = 0; i < message.challengeCount.length; ++i) {
                            let error = $root.wm.protobuf.LoadGhostKoshienRankingResponse.PlaceRecord.ParticipantCar.verify(message.challengeCount[i]);
                            if (error)
                                return "challengeCount." + error;
                        }
                    }
                    if (message.updateCount != null && message.hasOwnProperty("updateCount")) {
                        if (!Array.isArray(message.updateCount))
                            return "updateCount: array expected";
                        for (let i = 0; i < message.updateCount.length; ++i) {
                            let error = $root.wm.protobuf.LoadGhostKoshienRankingResponse.PlaceRecord.ParticipantCar.verify(message.updateCount[i]);
                            if (error)
                                return "updateCount." + error;
                        }
                    }
                    if (message.result != null && message.hasOwnProperty("result")) {
                        if (!Array.isArray(message.result))
                            return "result: array expected";
                        for (let i = 0; i < message.result.length; ++i) {
                            let error = $root.wm.protobuf.LoadGhostKoshienRankingResponse.PlaceRecord.ParticipantCar.verify(message.result[i]);
                            if (error)
                                return "result." + error;
                        }
                    }
                    return null;
                };

                /**
                 * Creates a PlaceRecord message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof wm.protobuf.LoadGhostKoshienRankingResponse.PlaceRecord
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {wm.protobuf.LoadGhostKoshienRankingResponse.PlaceRecord} PlaceRecord
                 */
                PlaceRecord.fromObject = function fromObject(object) {
                    if (object instanceof $root.wm.protobuf.LoadGhostKoshienRankingResponse.PlaceRecord)
                        return object;
                    let message = new $root.wm.protobuf.LoadGhostKoshienRankingResponse.PlaceRecord();
                    if (object.challengeCount) {
                        if (!Array.isArray(object.challengeCount))
                            throw TypeError(".wm.protobuf.LoadGhostKoshienRankingResponse.PlaceRecord.challengeCount: array expected");
                        message.challengeCount = [];
                        for (let i = 0; i < object.challengeCount.length; ++i) {
                            if (typeof object.challengeCount[i] !== "object")
                                throw TypeError(".wm.protobuf.LoadGhostKoshienRankingResponse.PlaceRecord.challengeCount: object expected");
                            message.challengeCount[i] = $root.wm.protobuf.LoadGhostKoshienRankingResponse.PlaceRecord.ParticipantCar.fromObject(object.challengeCount[i]);
                        }
                    }
                    if (object.updateCount) {
                        if (!Array.isArray(object.updateCount))
                            throw TypeError(".wm.protobuf.LoadGhostKoshienRankingResponse.PlaceRecord.updateCount: array expected");
                        message.updateCount = [];
                        for (let i = 0; i < object.updateCount.length; ++i) {
                            if (typeof object.updateCount[i] !== "object")
                                throw TypeError(".wm.protobuf.LoadGhostKoshienRankingResponse.PlaceRecord.updateCount: object expected");
                            message.updateCount[i] = $root.wm.protobuf.LoadGhostKoshienRankingResponse.PlaceRecord.ParticipantCar.fromObject(object.updateCount[i]);
                        }
                    }
                    if (object.result) {
                        if (!Array.isArray(object.result))
                            throw TypeError(".wm.protobuf.LoadGhostKoshienRankingResponse.PlaceRecord.result: array expected");
                        message.result = [];
                        for (let i = 0; i < object.result.length; ++i) {
                            if (typeof object.result[i] !== "object")
                                throw TypeError(".wm.protobuf.LoadGhostKoshienRankingResponse.PlaceRecord.result: object expected");
                            message.result[i] = $root.wm.protobuf.LoadGhostKoshienRankingResponse.PlaceRecord.ParticipantCar.fromObject(object.result[i]);
                        }
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a PlaceRecord message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof wm.protobuf.LoadGhostKoshienRankingResponse.PlaceRecord
                 * @static
                 * @param {wm.protobuf.LoadGhostKoshienRankingResponse.PlaceRecord} message PlaceRecord
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                PlaceRecord.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.arrays || options.defaults) {
                        object.challengeCount = [];
                        object.updateCount = [];
                        object.result = [];
                    }
                    if (message.challengeCount && message.challengeCount.length) {
                        object.challengeCount = [];
                        for (let j = 0; j < message.challengeCount.length; ++j)
                            object.challengeCount[j] = $root.wm.protobuf.LoadGhostKoshienRankingResponse.PlaceRecord.ParticipantCar.toObject(message.challengeCount[j], options);
                    }
                    if (message.updateCount && message.updateCount.length) {
                        object.updateCount = [];
                        for (let j = 0; j < message.updateCount.length; ++j)
                            object.updateCount[j] = $root.wm.protobuf.LoadGhostKoshienRankingResponse.PlaceRecord.ParticipantCar.toObject(message.updateCount[j], options);
                    }
                    if (message.result && message.result.length) {
                        object.result = [];
                        for (let j = 0; j < message.result.length; ++j)
                            object.result[j] = $root.wm.protobuf.LoadGhostKoshienRankingResponse.PlaceRecord.ParticipantCar.toObject(message.result[j], options);
                    }
                    return object;
                };

                /**
                 * Converts this PlaceRecord to JSON.
                 * @function toJSON
                 * @memberof wm.protobuf.LoadGhostKoshienRankingResponse.PlaceRecord
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                PlaceRecord.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                /**
                 * Gets the default type url for PlaceRecord
                 * @function getTypeUrl
                 * @memberof wm.protobuf.LoadGhostKoshienRankingResponse.PlaceRecord
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                PlaceRecord.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/wm.protobuf.LoadGhostKoshienRankingResponse.PlaceRecord";
                };

                PlaceRecord.ParticipantCar = (function() {

                    /**
                     * Properties of a ParticipantCar.
                     * @memberof wm.protobuf.LoadGhostKoshienRankingResponse.PlaceRecord
                     * @interface IParticipantCar
                     * @property {number} carId ParticipantCar carId
                     * @property {number|null} [result] ParticipantCar result
                     * @property {number|null} [challengeCount] ParticipantCar challengeCount
                     * @property {number|null} [updateCount] ParticipantCar updateCount
                     */

                    /**
                     * Constructs a new ParticipantCar.
                     * @memberof wm.protobuf.LoadGhostKoshienRankingResponse.PlaceRecord
                     * @classdesc Represents a ParticipantCar.
                     * @implements IParticipantCar
                     * @constructor
                     * @param {wm.protobuf.LoadGhostKoshienRankingResponse.PlaceRecord.IParticipantCar=} [properties] Properties to set
                     */
                    function ParticipantCar(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * ParticipantCar carId.
                     * @member {number} carId
                     * @memberof wm.protobuf.LoadGhostKoshienRankingResponse.PlaceRecord.ParticipantCar
                     * @instance
                     */
                    ParticipantCar.prototype.carId = 0;

                    /**
                     * ParticipantCar result.
                     * @member {number} result
                     * @memberof wm.protobuf.LoadGhostKoshienRankingResponse.PlaceRecord.ParticipantCar
                     * @instance
                     */
                    ParticipantCar.prototype.result = 0;

                    /**
                     * ParticipantCar challengeCount.
                     * @member {number} challengeCount
                     * @memberof wm.protobuf.LoadGhostKoshienRankingResponse.PlaceRecord.ParticipantCar
                     * @instance
                     */
                    ParticipantCar.prototype.challengeCount = 0;

                    /**
                     * ParticipantCar updateCount.
                     * @member {number} updateCount
                     * @memberof wm.protobuf.LoadGhostKoshienRankingResponse.PlaceRecord.ParticipantCar
                     * @instance
                     */
                    ParticipantCar.prototype.updateCount = 0;

                    /**
                     * Creates a new ParticipantCar instance using the specified properties.
                     * @function create
                     * @memberof wm.protobuf.LoadGhostKoshienRankingResponse.PlaceRecord.ParticipantCar
                     * @static
                     * @param {wm.protobuf.LoadGhostKoshienRankingResponse.PlaceRecord.IParticipantCar=} [properties] Properties to set
                     * @returns {wm.protobuf.LoadGhostKoshienRankingResponse.PlaceRecord.ParticipantCar} ParticipantCar instance
                     */
                    ParticipantCar.create = function create(properties) {
                        return new ParticipantCar(properties);
                    };

                    /**
                     * Encodes the specified ParticipantCar message. Does not implicitly {@link wm.protobuf.LoadGhostKoshienRankingResponse.PlaceRecord.ParticipantCar.verify|verify} messages.
                     * @function encode
                     * @memberof wm.protobuf.LoadGhostKoshienRankingResponse.PlaceRecord.ParticipantCar
                     * @static
                     * @param {wm.protobuf.LoadGhostKoshienRankingResponse.PlaceRecord.IParticipantCar} message ParticipantCar message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ParticipantCar.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.carId);
                        if (message.result != null && Object.hasOwnProperty.call(message, "result"))
                            writer.uint32(/* id 2, wireType 0 =*/16).sint32(message.result);
                        if (message.challengeCount != null && Object.hasOwnProperty.call(message, "challengeCount"))
                            writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.challengeCount);
                        if (message.updateCount != null && Object.hasOwnProperty.call(message, "updateCount"))
                            writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.updateCount);
                        return writer;
                    };

                    /**
                     * Encodes the specified ParticipantCar message, length delimited. Does not implicitly {@link wm.protobuf.LoadGhostKoshienRankingResponse.PlaceRecord.ParticipantCar.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof wm.protobuf.LoadGhostKoshienRankingResponse.PlaceRecord.ParticipantCar
                     * @static
                     * @param {wm.protobuf.LoadGhostKoshienRankingResponse.PlaceRecord.IParticipantCar} message ParticipantCar message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ParticipantCar.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a ParticipantCar message from the specified reader or buffer.
                     * @function decode
                     * @memberof wm.protobuf.LoadGhostKoshienRankingResponse.PlaceRecord.ParticipantCar
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {wm.protobuf.LoadGhostKoshienRankingResponse.PlaceRecord.ParticipantCar} ParticipantCar
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ParticipantCar.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.wm.protobuf.LoadGhostKoshienRankingResponse.PlaceRecord.ParticipantCar();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.carId = reader.uint32();
                                    break;
                                }
                            case 2: {
                                    message.result = reader.sint32();
                                    break;
                                }
                            case 3: {
                                    message.challengeCount = reader.uint32();
                                    break;
                                }
                            case 4: {
                                    message.updateCount = reader.uint32();
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        if (!message.hasOwnProperty("carId"))
                            throw $util.ProtocolError("missing required 'carId'", { instance: message });
                        return message;
                    };

                    /**
                     * Decodes a ParticipantCar message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof wm.protobuf.LoadGhostKoshienRankingResponse.PlaceRecord.ParticipantCar
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {wm.protobuf.LoadGhostKoshienRankingResponse.PlaceRecord.ParticipantCar} ParticipantCar
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ParticipantCar.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a ParticipantCar message.
                     * @function verify
                     * @memberof wm.protobuf.LoadGhostKoshienRankingResponse.PlaceRecord.ParticipantCar
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    ParticipantCar.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (!$util.isInteger(message.carId))
                            return "carId: integer expected";
                        if (message.result != null && message.hasOwnProperty("result"))
                            if (!$util.isInteger(message.result))
                                return "result: integer expected";
                        if (message.challengeCount != null && message.hasOwnProperty("challengeCount"))
                            if (!$util.isInteger(message.challengeCount))
                                return "challengeCount: integer expected";
                        if (message.updateCount != null && message.hasOwnProperty("updateCount"))
                            if (!$util.isInteger(message.updateCount))
                                return "updateCount: integer expected";
                        return null;
                    };

                    /**
                     * Creates a ParticipantCar message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof wm.protobuf.LoadGhostKoshienRankingResponse.PlaceRecord.ParticipantCar
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {wm.protobuf.LoadGhostKoshienRankingResponse.PlaceRecord.ParticipantCar} ParticipantCar
                     */
                    ParticipantCar.fromObject = function fromObject(object) {
                        if (object instanceof $root.wm.protobuf.LoadGhostKoshienRankingResponse.PlaceRecord.ParticipantCar)
                            return object;
                        let message = new $root.wm.protobuf.LoadGhostKoshienRankingResponse.PlaceRecord.ParticipantCar();
                        if (object.carId != null)
                            message.carId = object.carId >>> 0;
                        if (object.result != null)
                            message.result = object.result | 0;
                        if (object.challengeCount != null)
                            message.challengeCount = object.challengeCount >>> 0;
                        if (object.updateCount != null)
                            message.updateCount = object.updateCount >>> 0;
                        return message;
                    };

                    /**
                     * Creates a plain object from a ParticipantCar message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof wm.protobuf.LoadGhostKoshienRankingResponse.PlaceRecord.ParticipantCar
                     * @static
                     * @param {wm.protobuf.LoadGhostKoshienRankingResponse.PlaceRecord.ParticipantCar} message ParticipantCar
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    ParticipantCar.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            object.carId = 0;
                            object.result = 0;
                            object.challengeCount = 0;
                            object.updateCount = 0;
                        }
                        if (message.carId != null && message.hasOwnProperty("carId"))
                            object.carId = message.carId;
                        if (message.result != null && message.hasOwnProperty("result"))
                            object.result = message.result;
                        if (message.challengeCount != null && message.hasOwnProperty("challengeCount"))
                            object.challengeCount = message.challengeCount;
                        if (message.updateCount != null && message.hasOwnProperty("updateCount"))
                            object.updateCount = message.updateCount;
                        return object;
                    };

                    /**
                     * Converts this ParticipantCar to JSON.
                     * @function toJSON
                     * @memberof wm.protobuf.LoadGhostKoshienRankingResponse.PlaceRecord.ParticipantCar
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    ParticipantCar.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    /**
                     * Gets the default type url for ParticipantCar
                     * @function getTypeUrl
                     * @memberof wm.protobuf.LoadGhostKoshienRankingResponse.PlaceRecord.ParticipantCar
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    ParticipantCar.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/wm.protobuf.LoadGhostKoshienRankingResponse.PlaceRecord.ParticipantCar";
                    };

                    return ParticipantCar;
                })();

                return PlaceRecord;
            })();

            return LoadGhostKoshienRankingResponse;
        })();

        protobuf.LoadGhostKoshienRoundRequest = (function() {

            /**
             * Properties of a LoadGhostKoshienRoundRequest.
             * @memberof wm.protobuf
             * @interface ILoadGhostKoshienRoundRequest
             * @property {number} userId LoadGhostKoshienRoundRequest userId
             * @property {number} koshienId LoadGhostKoshienRoundRequest koshienId
             * @property {number} roundId LoadGhostKoshienRoundRequest roundId
             */

            /**
             * Constructs a new LoadGhostKoshienRoundRequest.
             * @memberof wm.protobuf
             * @classdesc Represents a LoadGhostKoshienRoundRequest.
             * @implements ILoadGhostKoshienRoundRequest
             * @constructor
             * @param {wm.protobuf.ILoadGhostKoshienRoundRequest=} [properties] Properties to set
             */
            function LoadGhostKoshienRoundRequest(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * LoadGhostKoshienRoundRequest userId.
             * @member {number} userId
             * @memberof wm.protobuf.LoadGhostKoshienRoundRequest
             * @instance
             */
            LoadGhostKoshienRoundRequest.prototype.userId = 0;

            /**
             * LoadGhostKoshienRoundRequest koshienId.
             * @member {number} koshienId
             * @memberof wm.protobuf.LoadGhostKoshienRoundRequest
             * @instance
             */
            LoadGhostKoshienRoundRequest.prototype.koshienId = 0;

            /**
             * LoadGhostKoshienRoundRequest roundId.
             * @member {number} roundId
             * @memberof wm.protobuf.LoadGhostKoshienRoundRequest
             * @instance
             */
            LoadGhostKoshienRoundRequest.prototype.roundId = 0;

            /**
             * Creates a new LoadGhostKoshienRoundRequest instance using the specified properties.
             * @function create
             * @memberof wm.protobuf.LoadGhostKoshienRoundRequest
             * @static
             * @param {wm.protobuf.ILoadGhostKoshienRoundRequest=} [properties] Properties to set
             * @returns {wm.protobuf.LoadGhostKoshienRoundRequest} LoadGhostKoshienRoundRequest instance
             */
            LoadGhostKoshienRoundRequest.create = function create(properties) {
                return new LoadGhostKoshienRoundRequest(properties);
            };

            /**
             * Encodes the specified LoadGhostKoshienRoundRequest message. Does not implicitly {@link wm.protobuf.LoadGhostKoshienRoundRequest.verify|verify} messages.
             * @function encode
             * @memberof wm.protobuf.LoadGhostKoshienRoundRequest
             * @static
             * @param {wm.protobuf.ILoadGhostKoshienRoundRequest} message LoadGhostKoshienRoundRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LoadGhostKoshienRoundRequest.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.koshienId);
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.userId);
                writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.roundId);
                return writer;
            };

            /**
             * Encodes the specified LoadGhostKoshienRoundRequest message, length delimited. Does not implicitly {@link wm.protobuf.LoadGhostKoshienRoundRequest.verify|verify} messages.
             * @function encodeDelimited
             * @memberof wm.protobuf.LoadGhostKoshienRoundRequest
             * @static
             * @param {wm.protobuf.ILoadGhostKoshienRoundRequest} message LoadGhostKoshienRoundRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LoadGhostKoshienRoundRequest.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a LoadGhostKoshienRoundRequest message from the specified reader or buffer.
             * @function decode
             * @memberof wm.protobuf.LoadGhostKoshienRoundRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {wm.protobuf.LoadGhostKoshienRoundRequest} LoadGhostKoshienRoundRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LoadGhostKoshienRoundRequest.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.wm.protobuf.LoadGhostKoshienRoundRequest();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 3: {
                            message.userId = reader.uint32();
                            break;
                        }
                    case 2: {
                            message.koshienId = reader.uint32();
                            break;
                        }
                    case 4: {
                            message.roundId = reader.uint32();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("userId"))
                    throw $util.ProtocolError("missing required 'userId'", { instance: message });
                if (!message.hasOwnProperty("koshienId"))
                    throw $util.ProtocolError("missing required 'koshienId'", { instance: message });
                if (!message.hasOwnProperty("roundId"))
                    throw $util.ProtocolError("missing required 'roundId'", { instance: message });
                return message;
            };

            /**
             * Decodes a LoadGhostKoshienRoundRequest message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof wm.protobuf.LoadGhostKoshienRoundRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {wm.protobuf.LoadGhostKoshienRoundRequest} LoadGhostKoshienRoundRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LoadGhostKoshienRoundRequest.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a LoadGhostKoshienRoundRequest message.
             * @function verify
             * @memberof wm.protobuf.LoadGhostKoshienRoundRequest
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            LoadGhostKoshienRoundRequest.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (!$util.isInteger(message.userId))
                    return "userId: integer expected";
                if (!$util.isInteger(message.koshienId))
                    return "koshienId: integer expected";
                if (!$util.isInteger(message.roundId))
                    return "roundId: integer expected";
                return null;
            };

            /**
             * Creates a LoadGhostKoshienRoundRequest message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof wm.protobuf.LoadGhostKoshienRoundRequest
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {wm.protobuf.LoadGhostKoshienRoundRequest} LoadGhostKoshienRoundRequest
             */
            LoadGhostKoshienRoundRequest.fromObject = function fromObject(object) {
                if (object instanceof $root.wm.protobuf.LoadGhostKoshienRoundRequest)
                    return object;
                let message = new $root.wm.protobuf.LoadGhostKoshienRoundRequest();
                if (object.userId != null)
                    message.userId = object.userId >>> 0;
                if (object.koshienId != null)
                    message.koshienId = object.koshienId >>> 0;
                if (object.roundId != null)
                    message.roundId = object.roundId >>> 0;
                return message;
            };

            /**
             * Creates a plain object from a LoadGhostKoshienRoundRequest message. Also converts values to other types if specified.
             * @function toObject
             * @memberof wm.protobuf.LoadGhostKoshienRoundRequest
             * @static
             * @param {wm.protobuf.LoadGhostKoshienRoundRequest} message LoadGhostKoshienRoundRequest
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            LoadGhostKoshienRoundRequest.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.koshienId = 0;
                    object.userId = 0;
                    object.roundId = 0;
                }
                if (message.koshienId != null && message.hasOwnProperty("koshienId"))
                    object.koshienId = message.koshienId;
                if (message.userId != null && message.hasOwnProperty("userId"))
                    object.userId = message.userId;
                if (message.roundId != null && message.hasOwnProperty("roundId"))
                    object.roundId = message.roundId;
                return object;
            };

            /**
             * Converts this LoadGhostKoshienRoundRequest to JSON.
             * @function toJSON
             * @memberof wm.protobuf.LoadGhostKoshienRoundRequest
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            LoadGhostKoshienRoundRequest.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for LoadGhostKoshienRoundRequest
             * @function getTypeUrl
             * @memberof wm.protobuf.LoadGhostKoshienRoundRequest
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            LoadGhostKoshienRoundRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/wm.protobuf.LoadGhostKoshienRoundRequest";
            };

            return LoadGhostKoshienRoundRequest;
        })();

        protobuf.LoadGhostKoshienRoundResponse = (function() {

            /**
             * Properties of a LoadGhostKoshienRoundResponse.
             * @memberof wm.protobuf
             * @interface ILoadGhostKoshienRoundResponse
             * @property {wm.protobuf.IPlace|null} [participantShop] LoadGhostKoshienRoundResponse participantShop
             * @property {boolean} currentQualified LoadGhostKoshienRoundResponse currentQualified
             * @property {boolean|null} [previousRoundQualified] LoadGhostKoshienRoundResponse previousRoundQualified
             * @property {Array.<wm.protobuf.LoadGhostKoshienRoundResponse.IGhostKoshienRepresentedCar>|null} [koshienRepresentedCar] LoadGhostKoshienRoundResponse koshienRepresentedCar
             */

            /**
             * Constructs a new LoadGhostKoshienRoundResponse.
             * @memberof wm.protobuf
             * @classdesc Represents a LoadGhostKoshienRoundResponse.
             * @implements ILoadGhostKoshienRoundResponse
             * @constructor
             * @param {wm.protobuf.ILoadGhostKoshienRoundResponse=} [properties] Properties to set
             */
            function LoadGhostKoshienRoundResponse(properties) {
                this.koshienRepresentedCar = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * LoadGhostKoshienRoundResponse participantShop.
             * @member {wm.protobuf.IPlace|null|undefined} participantShop
             * @memberof wm.protobuf.LoadGhostKoshienRoundResponse
             * @instance
             */
            LoadGhostKoshienRoundResponse.prototype.participantShop = null;

            /**
             * LoadGhostKoshienRoundResponse currentQualified.
             * @member {boolean} currentQualified
             * @memberof wm.protobuf.LoadGhostKoshienRoundResponse
             * @instance
             */
            LoadGhostKoshienRoundResponse.prototype.currentQualified = false;

            /**
             * LoadGhostKoshienRoundResponse previousRoundQualified.
             * @member {boolean} previousRoundQualified
             * @memberof wm.protobuf.LoadGhostKoshienRoundResponse
             * @instance
             */
            LoadGhostKoshienRoundResponse.prototype.previousRoundQualified = false;

            /**
             * LoadGhostKoshienRoundResponse koshienRepresentedCar.
             * @member {Array.<wm.protobuf.LoadGhostKoshienRoundResponse.IGhostKoshienRepresentedCar>} koshienRepresentedCar
             * @memberof wm.protobuf.LoadGhostKoshienRoundResponse
             * @instance
             */
            LoadGhostKoshienRoundResponse.prototype.koshienRepresentedCar = $util.emptyArray;

            /**
             * Creates a new LoadGhostKoshienRoundResponse instance using the specified properties.
             * @function create
             * @memberof wm.protobuf.LoadGhostKoshienRoundResponse
             * @static
             * @param {wm.protobuf.ILoadGhostKoshienRoundResponse=} [properties] Properties to set
             * @returns {wm.protobuf.LoadGhostKoshienRoundResponse} LoadGhostKoshienRoundResponse instance
             */
            LoadGhostKoshienRoundResponse.create = function create(properties) {
                return new LoadGhostKoshienRoundResponse(properties);
            };

            /**
             * Encodes the specified LoadGhostKoshienRoundResponse message. Does not implicitly {@link wm.protobuf.LoadGhostKoshienRoundResponse.verify|verify} messages.
             * @function encode
             * @memberof wm.protobuf.LoadGhostKoshienRoundResponse
             * @static
             * @param {wm.protobuf.ILoadGhostKoshienRoundResponse} message LoadGhostKoshienRoundResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LoadGhostKoshienRoundResponse.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.participantShop != null && Object.hasOwnProperty.call(message, "participantShop"))
                    $root.wm.protobuf.Place.encode(message.participantShop, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                writer.uint32(/* id 2, wireType 0 =*/16).bool(message.currentQualified);
                if (message.previousRoundQualified != null && Object.hasOwnProperty.call(message, "previousRoundQualified"))
                    writer.uint32(/* id 3, wireType 0 =*/24).bool(message.previousRoundQualified);
                if (message.koshienRepresentedCar != null && message.koshienRepresentedCar.length)
                    for (let i = 0; i < message.koshienRepresentedCar.length; ++i)
                        $root.wm.protobuf.LoadGhostKoshienRoundResponse.GhostKoshienRepresentedCar.encode(message.koshienRepresentedCar[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified LoadGhostKoshienRoundResponse message, length delimited. Does not implicitly {@link wm.protobuf.LoadGhostKoshienRoundResponse.verify|verify} messages.
             * @function encodeDelimited
             * @memberof wm.protobuf.LoadGhostKoshienRoundResponse
             * @static
             * @param {wm.protobuf.ILoadGhostKoshienRoundResponse} message LoadGhostKoshienRoundResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LoadGhostKoshienRoundResponse.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a LoadGhostKoshienRoundResponse message from the specified reader or buffer.
             * @function decode
             * @memberof wm.protobuf.LoadGhostKoshienRoundResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {wm.protobuf.LoadGhostKoshienRoundResponse} LoadGhostKoshienRoundResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LoadGhostKoshienRoundResponse.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.wm.protobuf.LoadGhostKoshienRoundResponse();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.participantShop = $root.wm.protobuf.Place.decode(reader, reader.uint32());
                            break;
                        }
                    case 2: {
                            message.currentQualified = reader.bool();
                            break;
                        }
                    case 3: {
                            message.previousRoundQualified = reader.bool();
                            break;
                        }
                    case 4: {
                            if (!(message.koshienRepresentedCar && message.koshienRepresentedCar.length))
                                message.koshienRepresentedCar = [];
                            message.koshienRepresentedCar.push($root.wm.protobuf.LoadGhostKoshienRoundResponse.GhostKoshienRepresentedCar.decode(reader, reader.uint32()));
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("currentQualified"))
                    throw $util.ProtocolError("missing required 'currentQualified'", { instance: message });
                return message;
            };

            /**
             * Decodes a LoadGhostKoshienRoundResponse message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof wm.protobuf.LoadGhostKoshienRoundResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {wm.protobuf.LoadGhostKoshienRoundResponse} LoadGhostKoshienRoundResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LoadGhostKoshienRoundResponse.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a LoadGhostKoshienRoundResponse message.
             * @function verify
             * @memberof wm.protobuf.LoadGhostKoshienRoundResponse
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            LoadGhostKoshienRoundResponse.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.participantShop != null && message.hasOwnProperty("participantShop")) {
                    let error = $root.wm.protobuf.Place.verify(message.participantShop);
                    if (error)
                        return "participantShop." + error;
                }
                if (typeof message.currentQualified !== "boolean")
                    return "currentQualified: boolean expected";
                if (message.previousRoundQualified != null && message.hasOwnProperty("previousRoundQualified"))
                    if (typeof message.previousRoundQualified !== "boolean")
                        return "previousRoundQualified: boolean expected";
                if (message.koshienRepresentedCar != null && message.hasOwnProperty("koshienRepresentedCar")) {
                    if (!Array.isArray(message.koshienRepresentedCar))
                        return "koshienRepresentedCar: array expected";
                    for (let i = 0; i < message.koshienRepresentedCar.length; ++i) {
                        let error = $root.wm.protobuf.LoadGhostKoshienRoundResponse.GhostKoshienRepresentedCar.verify(message.koshienRepresentedCar[i]);
                        if (error)
                            return "koshienRepresentedCar." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a LoadGhostKoshienRoundResponse message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof wm.protobuf.LoadGhostKoshienRoundResponse
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {wm.protobuf.LoadGhostKoshienRoundResponse} LoadGhostKoshienRoundResponse
             */
            LoadGhostKoshienRoundResponse.fromObject = function fromObject(object) {
                if (object instanceof $root.wm.protobuf.LoadGhostKoshienRoundResponse)
                    return object;
                let message = new $root.wm.protobuf.LoadGhostKoshienRoundResponse();
                if (object.participantShop != null) {
                    if (typeof object.participantShop !== "object")
                        throw TypeError(".wm.protobuf.LoadGhostKoshienRoundResponse.participantShop: object expected");
                    message.participantShop = $root.wm.protobuf.Place.fromObject(object.participantShop);
                }
                if (object.currentQualified != null)
                    message.currentQualified = Boolean(object.currentQualified);
                if (object.previousRoundQualified != null)
                    message.previousRoundQualified = Boolean(object.previousRoundQualified);
                if (object.koshienRepresentedCar) {
                    if (!Array.isArray(object.koshienRepresentedCar))
                        throw TypeError(".wm.protobuf.LoadGhostKoshienRoundResponse.koshienRepresentedCar: array expected");
                    message.koshienRepresentedCar = [];
                    for (let i = 0; i < object.koshienRepresentedCar.length; ++i) {
                        if (typeof object.koshienRepresentedCar[i] !== "object")
                            throw TypeError(".wm.protobuf.LoadGhostKoshienRoundResponse.koshienRepresentedCar: object expected");
                        message.koshienRepresentedCar[i] = $root.wm.protobuf.LoadGhostKoshienRoundResponse.GhostKoshienRepresentedCar.fromObject(object.koshienRepresentedCar[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from a LoadGhostKoshienRoundResponse message. Also converts values to other types if specified.
             * @function toObject
             * @memberof wm.protobuf.LoadGhostKoshienRoundResponse
             * @static
             * @param {wm.protobuf.LoadGhostKoshienRoundResponse} message LoadGhostKoshienRoundResponse
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            LoadGhostKoshienRoundResponse.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.koshienRepresentedCar = [];
                if (options.defaults) {
                    object.participantShop = null;
                    object.currentQualified = false;
                    object.previousRoundQualified = false;
                }
                if (message.participantShop != null && message.hasOwnProperty("participantShop"))
                    object.participantShop = $root.wm.protobuf.Place.toObject(message.participantShop, options);
                if (message.currentQualified != null && message.hasOwnProperty("currentQualified"))
                    object.currentQualified = message.currentQualified;
                if (message.previousRoundQualified != null && message.hasOwnProperty("previousRoundQualified"))
                    object.previousRoundQualified = message.previousRoundQualified;
                if (message.koshienRepresentedCar && message.koshienRepresentedCar.length) {
                    object.koshienRepresentedCar = [];
                    for (let j = 0; j < message.koshienRepresentedCar.length; ++j)
                        object.koshienRepresentedCar[j] = $root.wm.protobuf.LoadGhostKoshienRoundResponse.GhostKoshienRepresentedCar.toObject(message.koshienRepresentedCar[j], options);
                }
                return object;
            };

            /**
             * Converts this LoadGhostKoshienRoundResponse to JSON.
             * @function toJSON
             * @memberof wm.protobuf.LoadGhostKoshienRoundResponse
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            LoadGhostKoshienRoundResponse.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for LoadGhostKoshienRoundResponse
             * @function getTypeUrl
             * @memberof wm.protobuf.LoadGhostKoshienRoundResponse
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            LoadGhostKoshienRoundResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/wm.protobuf.LoadGhostKoshienRoundResponse";
            };

            LoadGhostKoshienRoundResponse.GhostKoshienRepresentedCar = (function() {

                /**
                 * Properties of a GhostKoshienRepresentedCar.
                 * @memberof wm.protobuf.LoadGhostKoshienRoundResponse
                 * @interface IGhostKoshienRepresentedCar
                 * @property {wm.protobuf.ICar} representedCar GhostKoshienRepresentedCar representedCar
                 * @property {wm.protobuf.IPlace|null} [representedShop] GhostKoshienRepresentedCar representedShop
                 */

                /**
                 * Constructs a new GhostKoshienRepresentedCar.
                 * @memberof wm.protobuf.LoadGhostKoshienRoundResponse
                 * @classdesc Represents a GhostKoshienRepresentedCar.
                 * @implements IGhostKoshienRepresentedCar
                 * @constructor
                 * @param {wm.protobuf.LoadGhostKoshienRoundResponse.IGhostKoshienRepresentedCar=} [properties] Properties to set
                 */
                function GhostKoshienRepresentedCar(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * GhostKoshienRepresentedCar representedCar.
                 * @member {wm.protobuf.ICar} representedCar
                 * @memberof wm.protobuf.LoadGhostKoshienRoundResponse.GhostKoshienRepresentedCar
                 * @instance
                 */
                GhostKoshienRepresentedCar.prototype.representedCar = null;

                /**
                 * GhostKoshienRepresentedCar representedShop.
                 * @member {wm.protobuf.IPlace|null|undefined} representedShop
                 * @memberof wm.protobuf.LoadGhostKoshienRoundResponse.GhostKoshienRepresentedCar
                 * @instance
                 */
                GhostKoshienRepresentedCar.prototype.representedShop = null;

                /**
                 * Creates a new GhostKoshienRepresentedCar instance using the specified properties.
                 * @function create
                 * @memberof wm.protobuf.LoadGhostKoshienRoundResponse.GhostKoshienRepresentedCar
                 * @static
                 * @param {wm.protobuf.LoadGhostKoshienRoundResponse.IGhostKoshienRepresentedCar=} [properties] Properties to set
                 * @returns {wm.protobuf.LoadGhostKoshienRoundResponse.GhostKoshienRepresentedCar} GhostKoshienRepresentedCar instance
                 */
                GhostKoshienRepresentedCar.create = function create(properties) {
                    return new GhostKoshienRepresentedCar(properties);
                };

                /**
                 * Encodes the specified GhostKoshienRepresentedCar message. Does not implicitly {@link wm.protobuf.LoadGhostKoshienRoundResponse.GhostKoshienRepresentedCar.verify|verify} messages.
                 * @function encode
                 * @memberof wm.protobuf.LoadGhostKoshienRoundResponse.GhostKoshienRepresentedCar
                 * @static
                 * @param {wm.protobuf.LoadGhostKoshienRoundResponse.IGhostKoshienRepresentedCar} message GhostKoshienRepresentedCar message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                GhostKoshienRepresentedCar.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.representedShop != null && Object.hasOwnProperty.call(message, "representedShop"))
                        $root.wm.protobuf.Place.encode(message.representedShop, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                    $root.wm.protobuf.Car.encode(message.representedCar, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                    return writer;
                };

                /**
                 * Encodes the specified GhostKoshienRepresentedCar message, length delimited. Does not implicitly {@link wm.protobuf.LoadGhostKoshienRoundResponse.GhostKoshienRepresentedCar.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof wm.protobuf.LoadGhostKoshienRoundResponse.GhostKoshienRepresentedCar
                 * @static
                 * @param {wm.protobuf.LoadGhostKoshienRoundResponse.IGhostKoshienRepresentedCar} message GhostKoshienRepresentedCar message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                GhostKoshienRepresentedCar.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a GhostKoshienRepresentedCar message from the specified reader or buffer.
                 * @function decode
                 * @memberof wm.protobuf.LoadGhostKoshienRoundResponse.GhostKoshienRepresentedCar
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {wm.protobuf.LoadGhostKoshienRoundResponse.GhostKoshienRepresentedCar} GhostKoshienRepresentedCar
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                GhostKoshienRepresentedCar.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.wm.protobuf.LoadGhostKoshienRoundResponse.GhostKoshienRepresentedCar();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 6: {
                                message.representedCar = $root.wm.protobuf.Car.decode(reader, reader.uint32());
                                break;
                            }
                        case 5: {
                                message.representedShop = $root.wm.protobuf.Place.decode(reader, reader.uint32());
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    if (!message.hasOwnProperty("representedCar"))
                        throw $util.ProtocolError("missing required 'representedCar'", { instance: message });
                    return message;
                };

                /**
                 * Decodes a GhostKoshienRepresentedCar message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof wm.protobuf.LoadGhostKoshienRoundResponse.GhostKoshienRepresentedCar
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {wm.protobuf.LoadGhostKoshienRoundResponse.GhostKoshienRepresentedCar} GhostKoshienRepresentedCar
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                GhostKoshienRepresentedCar.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a GhostKoshienRepresentedCar message.
                 * @function verify
                 * @memberof wm.protobuf.LoadGhostKoshienRoundResponse.GhostKoshienRepresentedCar
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                GhostKoshienRepresentedCar.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    {
                        let error = $root.wm.protobuf.Car.verify(message.representedCar);
                        if (error)
                            return "representedCar." + error;
                    }
                    if (message.representedShop != null && message.hasOwnProperty("representedShop")) {
                        let error = $root.wm.protobuf.Place.verify(message.representedShop);
                        if (error)
                            return "representedShop." + error;
                    }
                    return null;
                };

                /**
                 * Creates a GhostKoshienRepresentedCar message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof wm.protobuf.LoadGhostKoshienRoundResponse.GhostKoshienRepresentedCar
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {wm.protobuf.LoadGhostKoshienRoundResponse.GhostKoshienRepresentedCar} GhostKoshienRepresentedCar
                 */
                GhostKoshienRepresentedCar.fromObject = function fromObject(object) {
                    if (object instanceof $root.wm.protobuf.LoadGhostKoshienRoundResponse.GhostKoshienRepresentedCar)
                        return object;
                    let message = new $root.wm.protobuf.LoadGhostKoshienRoundResponse.GhostKoshienRepresentedCar();
                    if (object.representedCar != null) {
                        if (typeof object.representedCar !== "object")
                            throw TypeError(".wm.protobuf.LoadGhostKoshienRoundResponse.GhostKoshienRepresentedCar.representedCar: object expected");
                        message.representedCar = $root.wm.protobuf.Car.fromObject(object.representedCar);
                    }
                    if (object.representedShop != null) {
                        if (typeof object.representedShop !== "object")
                            throw TypeError(".wm.protobuf.LoadGhostKoshienRoundResponse.GhostKoshienRepresentedCar.representedShop: object expected");
                        message.representedShop = $root.wm.protobuf.Place.fromObject(object.representedShop);
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a GhostKoshienRepresentedCar message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof wm.protobuf.LoadGhostKoshienRoundResponse.GhostKoshienRepresentedCar
                 * @static
                 * @param {wm.protobuf.LoadGhostKoshienRoundResponse.GhostKoshienRepresentedCar} message GhostKoshienRepresentedCar
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                GhostKoshienRepresentedCar.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        object.representedShop = null;
                        object.representedCar = null;
                    }
                    if (message.representedShop != null && message.hasOwnProperty("representedShop"))
                        object.representedShop = $root.wm.protobuf.Place.toObject(message.representedShop, options);
                    if (message.representedCar != null && message.hasOwnProperty("representedCar"))
                        object.representedCar = $root.wm.protobuf.Car.toObject(message.representedCar, options);
                    return object;
                };

                /**
                 * Converts this GhostKoshienRepresentedCar to JSON.
                 * @function toJSON
                 * @memberof wm.protobuf.LoadGhostKoshienRoundResponse.GhostKoshienRepresentedCar
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                GhostKoshienRepresentedCar.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                /**
                 * Gets the default type url for GhostKoshienRepresentedCar
                 * @function getTypeUrl
                 * @memberof wm.protobuf.LoadGhostKoshienRoundResponse.GhostKoshienRepresentedCar
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                GhostKoshienRepresentedCar.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/wm.protobuf.LoadGhostKoshienRoundResponse.GhostKoshienRepresentedCar";
                };

                return GhostKoshienRepresentedCar;
            })();

            return LoadGhostKoshienRoundResponse;
        })();

        protobuf.LoadGhostKoshienMvpRequest = (function() {

            /**
             * Properties of a LoadGhostKoshienMvpRequest.
             * @memberof wm.protobuf
             * @interface ILoadGhostKoshienMvpRequest
             * @property {number} userId LoadGhostKoshienMvpRequest userId
             * @property {number} koshienId LoadGhostKoshienMvpRequest koshienId
             * @property {number} roundId LoadGhostKoshienMvpRequest roundId
             */

            /**
             * Constructs a new LoadGhostKoshienMvpRequest.
             * @memberof wm.protobuf
             * @classdesc Represents a LoadGhostKoshienMvpRequest.
             * @implements ILoadGhostKoshienMvpRequest
             * @constructor
             * @param {wm.protobuf.ILoadGhostKoshienMvpRequest=} [properties] Properties to set
             */
            function LoadGhostKoshienMvpRequest(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * LoadGhostKoshienMvpRequest userId.
             * @member {number} userId
             * @memberof wm.protobuf.LoadGhostKoshienMvpRequest
             * @instance
             */
            LoadGhostKoshienMvpRequest.prototype.userId = 0;

            /**
             * LoadGhostKoshienMvpRequest koshienId.
             * @member {number} koshienId
             * @memberof wm.protobuf.LoadGhostKoshienMvpRequest
             * @instance
             */
            LoadGhostKoshienMvpRequest.prototype.koshienId = 0;

            /**
             * LoadGhostKoshienMvpRequest roundId.
             * @member {number} roundId
             * @memberof wm.protobuf.LoadGhostKoshienMvpRequest
             * @instance
             */
            LoadGhostKoshienMvpRequest.prototype.roundId = 0;

            /**
             * Creates a new LoadGhostKoshienMvpRequest instance using the specified properties.
             * @function create
             * @memberof wm.protobuf.LoadGhostKoshienMvpRequest
             * @static
             * @param {wm.protobuf.ILoadGhostKoshienMvpRequest=} [properties] Properties to set
             * @returns {wm.protobuf.LoadGhostKoshienMvpRequest} LoadGhostKoshienMvpRequest instance
             */
            LoadGhostKoshienMvpRequest.create = function create(properties) {
                return new LoadGhostKoshienMvpRequest(properties);
            };

            /**
             * Encodes the specified LoadGhostKoshienMvpRequest message. Does not implicitly {@link wm.protobuf.LoadGhostKoshienMvpRequest.verify|verify} messages.
             * @function encode
             * @memberof wm.protobuf.LoadGhostKoshienMvpRequest
             * @static
             * @param {wm.protobuf.ILoadGhostKoshienMvpRequest} message LoadGhostKoshienMvpRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LoadGhostKoshienMvpRequest.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.koshienId);
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.userId);
                writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.roundId);
                return writer;
            };

            /**
             * Encodes the specified LoadGhostKoshienMvpRequest message, length delimited. Does not implicitly {@link wm.protobuf.LoadGhostKoshienMvpRequest.verify|verify} messages.
             * @function encodeDelimited
             * @memberof wm.protobuf.LoadGhostKoshienMvpRequest
             * @static
             * @param {wm.protobuf.ILoadGhostKoshienMvpRequest} message LoadGhostKoshienMvpRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LoadGhostKoshienMvpRequest.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a LoadGhostKoshienMvpRequest message from the specified reader or buffer.
             * @function decode
             * @memberof wm.protobuf.LoadGhostKoshienMvpRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {wm.protobuf.LoadGhostKoshienMvpRequest} LoadGhostKoshienMvpRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LoadGhostKoshienMvpRequest.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.wm.protobuf.LoadGhostKoshienMvpRequest();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 3: {
                            message.userId = reader.uint32();
                            break;
                        }
                    case 2: {
                            message.koshienId = reader.uint32();
                            break;
                        }
                    case 4: {
                            message.roundId = reader.uint32();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("userId"))
                    throw $util.ProtocolError("missing required 'userId'", { instance: message });
                if (!message.hasOwnProperty("koshienId"))
                    throw $util.ProtocolError("missing required 'koshienId'", { instance: message });
                if (!message.hasOwnProperty("roundId"))
                    throw $util.ProtocolError("missing required 'roundId'", { instance: message });
                return message;
            };

            /**
             * Decodes a LoadGhostKoshienMvpRequest message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof wm.protobuf.LoadGhostKoshienMvpRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {wm.protobuf.LoadGhostKoshienMvpRequest} LoadGhostKoshienMvpRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LoadGhostKoshienMvpRequest.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a LoadGhostKoshienMvpRequest message.
             * @function verify
             * @memberof wm.protobuf.LoadGhostKoshienMvpRequest
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            LoadGhostKoshienMvpRequest.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (!$util.isInteger(message.userId))
                    return "userId: integer expected";
                if (!$util.isInteger(message.koshienId))
                    return "koshienId: integer expected";
                if (!$util.isInteger(message.roundId))
                    return "roundId: integer expected";
                return null;
            };

            /**
             * Creates a LoadGhostKoshienMvpRequest message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof wm.protobuf.LoadGhostKoshienMvpRequest
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {wm.protobuf.LoadGhostKoshienMvpRequest} LoadGhostKoshienMvpRequest
             */
            LoadGhostKoshienMvpRequest.fromObject = function fromObject(object) {
                if (object instanceof $root.wm.protobuf.LoadGhostKoshienMvpRequest)
                    return object;
                let message = new $root.wm.protobuf.LoadGhostKoshienMvpRequest();
                if (object.userId != null)
                    message.userId = object.userId >>> 0;
                if (object.koshienId != null)
                    message.koshienId = object.koshienId >>> 0;
                if (object.roundId != null)
                    message.roundId = object.roundId >>> 0;
                return message;
            };

            /**
             * Creates a plain object from a LoadGhostKoshienMvpRequest message. Also converts values to other types if specified.
             * @function toObject
             * @memberof wm.protobuf.LoadGhostKoshienMvpRequest
             * @static
             * @param {wm.protobuf.LoadGhostKoshienMvpRequest} message LoadGhostKoshienMvpRequest
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            LoadGhostKoshienMvpRequest.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.koshienId = 0;
                    object.userId = 0;
                    object.roundId = 0;
                }
                if (message.koshienId != null && message.hasOwnProperty("koshienId"))
                    object.koshienId = message.koshienId;
                if (message.userId != null && message.hasOwnProperty("userId"))
                    object.userId = message.userId;
                if (message.roundId != null && message.hasOwnProperty("roundId"))
                    object.roundId = message.roundId;
                return object;
            };

            /**
             * Converts this LoadGhostKoshienMvpRequest to JSON.
             * @function toJSON
             * @memberof wm.protobuf.LoadGhostKoshienMvpRequest
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            LoadGhostKoshienMvpRequest.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for LoadGhostKoshienMvpRequest
             * @function getTypeUrl
             * @memberof wm.protobuf.LoadGhostKoshienMvpRequest
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            LoadGhostKoshienMvpRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/wm.protobuf.LoadGhostKoshienMvpRequest";
            };

            return LoadGhostKoshienMvpRequest;
        })();

        protobuf.LoadGhostKoshienMvpResponse = (function() {

            /**
             * Properties of a LoadGhostKoshienMvpResponse.
             * @memberof wm.protobuf
             * @interface ILoadGhostKoshienMvpResponse
             * @property {string} shopName LoadGhostKoshienMvpResponse shopName
             * @property {wm.protobuf.LoadGhostKoshienMvpResponse.IGhostKoshienMvpCar} resultMvpCar LoadGhostKoshienMvpResponse resultMvpCar
             * @property {wm.protobuf.LoadGhostKoshienMvpResponse.IGhostKoshienMvpCar} challengeMvpCar LoadGhostKoshienMvpResponse challengeMvpCar
             * @property {wm.protobuf.LoadGhostKoshienMvpResponse.IGhostKoshienMvpCar} updateMvpCar LoadGhostKoshienMvpResponse updateMvpCar
             */

            /**
             * Constructs a new LoadGhostKoshienMvpResponse.
             * @memberof wm.protobuf
             * @classdesc Represents a LoadGhostKoshienMvpResponse.
             * @implements ILoadGhostKoshienMvpResponse
             * @constructor
             * @param {wm.protobuf.ILoadGhostKoshienMvpResponse=} [properties] Properties to set
             */
            function LoadGhostKoshienMvpResponse(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * LoadGhostKoshienMvpResponse shopName.
             * @member {string} shopName
             * @memberof wm.protobuf.LoadGhostKoshienMvpResponse
             * @instance
             */
            LoadGhostKoshienMvpResponse.prototype.shopName = "";

            /**
             * LoadGhostKoshienMvpResponse resultMvpCar.
             * @member {wm.protobuf.LoadGhostKoshienMvpResponse.IGhostKoshienMvpCar} resultMvpCar
             * @memberof wm.protobuf.LoadGhostKoshienMvpResponse
             * @instance
             */
            LoadGhostKoshienMvpResponse.prototype.resultMvpCar = null;

            /**
             * LoadGhostKoshienMvpResponse challengeMvpCar.
             * @member {wm.protobuf.LoadGhostKoshienMvpResponse.IGhostKoshienMvpCar} challengeMvpCar
             * @memberof wm.protobuf.LoadGhostKoshienMvpResponse
             * @instance
             */
            LoadGhostKoshienMvpResponse.prototype.challengeMvpCar = null;

            /**
             * LoadGhostKoshienMvpResponse updateMvpCar.
             * @member {wm.protobuf.LoadGhostKoshienMvpResponse.IGhostKoshienMvpCar} updateMvpCar
             * @memberof wm.protobuf.LoadGhostKoshienMvpResponse
             * @instance
             */
            LoadGhostKoshienMvpResponse.prototype.updateMvpCar = null;

            /**
             * Creates a new LoadGhostKoshienMvpResponse instance using the specified properties.
             * @function create
             * @memberof wm.protobuf.LoadGhostKoshienMvpResponse
             * @static
             * @param {wm.protobuf.ILoadGhostKoshienMvpResponse=} [properties] Properties to set
             * @returns {wm.protobuf.LoadGhostKoshienMvpResponse} LoadGhostKoshienMvpResponse instance
             */
            LoadGhostKoshienMvpResponse.create = function create(properties) {
                return new LoadGhostKoshienMvpResponse(properties);
            };

            /**
             * Encodes the specified LoadGhostKoshienMvpResponse message. Does not implicitly {@link wm.protobuf.LoadGhostKoshienMvpResponse.verify|verify} messages.
             * @function encode
             * @memberof wm.protobuf.LoadGhostKoshienMvpResponse
             * @static
             * @param {wm.protobuf.ILoadGhostKoshienMvpResponse} message LoadGhostKoshienMvpResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LoadGhostKoshienMvpResponse.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.shopName);
                $root.wm.protobuf.LoadGhostKoshienMvpResponse.GhostKoshienMvpCar.encode(message.resultMvpCar, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                $root.wm.protobuf.LoadGhostKoshienMvpResponse.GhostKoshienMvpCar.encode(message.challengeMvpCar, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                $root.wm.protobuf.LoadGhostKoshienMvpResponse.GhostKoshienMvpCar.encode(message.updateMvpCar, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified LoadGhostKoshienMvpResponse message, length delimited. Does not implicitly {@link wm.protobuf.LoadGhostKoshienMvpResponse.verify|verify} messages.
             * @function encodeDelimited
             * @memberof wm.protobuf.LoadGhostKoshienMvpResponse
             * @static
             * @param {wm.protobuf.ILoadGhostKoshienMvpResponse} message LoadGhostKoshienMvpResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LoadGhostKoshienMvpResponse.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a LoadGhostKoshienMvpResponse message from the specified reader or buffer.
             * @function decode
             * @memberof wm.protobuf.LoadGhostKoshienMvpResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {wm.protobuf.LoadGhostKoshienMvpResponse} LoadGhostKoshienMvpResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LoadGhostKoshienMvpResponse.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.wm.protobuf.LoadGhostKoshienMvpResponse();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.shopName = reader.string();
                            break;
                        }
                    case 2: {
                            message.resultMvpCar = $root.wm.protobuf.LoadGhostKoshienMvpResponse.GhostKoshienMvpCar.decode(reader, reader.uint32());
                            break;
                        }
                    case 3: {
                            message.challengeMvpCar = $root.wm.protobuf.LoadGhostKoshienMvpResponse.GhostKoshienMvpCar.decode(reader, reader.uint32());
                            break;
                        }
                    case 4: {
                            message.updateMvpCar = $root.wm.protobuf.LoadGhostKoshienMvpResponse.GhostKoshienMvpCar.decode(reader, reader.uint32());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("shopName"))
                    throw $util.ProtocolError("missing required 'shopName'", { instance: message });
                if (!message.hasOwnProperty("resultMvpCar"))
                    throw $util.ProtocolError("missing required 'resultMvpCar'", { instance: message });
                if (!message.hasOwnProperty("challengeMvpCar"))
                    throw $util.ProtocolError("missing required 'challengeMvpCar'", { instance: message });
                if (!message.hasOwnProperty("updateMvpCar"))
                    throw $util.ProtocolError("missing required 'updateMvpCar'", { instance: message });
                return message;
            };

            /**
             * Decodes a LoadGhostKoshienMvpResponse message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof wm.protobuf.LoadGhostKoshienMvpResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {wm.protobuf.LoadGhostKoshienMvpResponse} LoadGhostKoshienMvpResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LoadGhostKoshienMvpResponse.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a LoadGhostKoshienMvpResponse message.
             * @function verify
             * @memberof wm.protobuf.LoadGhostKoshienMvpResponse
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            LoadGhostKoshienMvpResponse.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (!$util.isString(message.shopName))
                    return "shopName: string expected";
                {
                    let error = $root.wm.protobuf.LoadGhostKoshienMvpResponse.GhostKoshienMvpCar.verify(message.resultMvpCar);
                    if (error)
                        return "resultMvpCar." + error;
                }
                {
                    let error = $root.wm.protobuf.LoadGhostKoshienMvpResponse.GhostKoshienMvpCar.verify(message.challengeMvpCar);
                    if (error)
                        return "challengeMvpCar." + error;
                }
                {
                    let error = $root.wm.protobuf.LoadGhostKoshienMvpResponse.GhostKoshienMvpCar.verify(message.updateMvpCar);
                    if (error)
                        return "updateMvpCar." + error;
                }
                return null;
            };

            /**
             * Creates a LoadGhostKoshienMvpResponse message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof wm.protobuf.LoadGhostKoshienMvpResponse
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {wm.protobuf.LoadGhostKoshienMvpResponse} LoadGhostKoshienMvpResponse
             */
            LoadGhostKoshienMvpResponse.fromObject = function fromObject(object) {
                if (object instanceof $root.wm.protobuf.LoadGhostKoshienMvpResponse)
                    return object;
                let message = new $root.wm.protobuf.LoadGhostKoshienMvpResponse();
                if (object.shopName != null)
                    message.shopName = String(object.shopName);
                if (object.resultMvpCar != null) {
                    if (typeof object.resultMvpCar !== "object")
                        throw TypeError(".wm.protobuf.LoadGhostKoshienMvpResponse.resultMvpCar: object expected");
                    message.resultMvpCar = $root.wm.protobuf.LoadGhostKoshienMvpResponse.GhostKoshienMvpCar.fromObject(object.resultMvpCar);
                }
                if (object.challengeMvpCar != null) {
                    if (typeof object.challengeMvpCar !== "object")
                        throw TypeError(".wm.protobuf.LoadGhostKoshienMvpResponse.challengeMvpCar: object expected");
                    message.challengeMvpCar = $root.wm.protobuf.LoadGhostKoshienMvpResponse.GhostKoshienMvpCar.fromObject(object.challengeMvpCar);
                }
                if (object.updateMvpCar != null) {
                    if (typeof object.updateMvpCar !== "object")
                        throw TypeError(".wm.protobuf.LoadGhostKoshienMvpResponse.updateMvpCar: object expected");
                    message.updateMvpCar = $root.wm.protobuf.LoadGhostKoshienMvpResponse.GhostKoshienMvpCar.fromObject(object.updateMvpCar);
                }
                return message;
            };

            /**
             * Creates a plain object from a LoadGhostKoshienMvpResponse message. Also converts values to other types if specified.
             * @function toObject
             * @memberof wm.protobuf.LoadGhostKoshienMvpResponse
             * @static
             * @param {wm.protobuf.LoadGhostKoshienMvpResponse} message LoadGhostKoshienMvpResponse
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            LoadGhostKoshienMvpResponse.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.shopName = "";
                    object.resultMvpCar = null;
                    object.challengeMvpCar = null;
                    object.updateMvpCar = null;
                }
                if (message.shopName != null && message.hasOwnProperty("shopName"))
                    object.shopName = message.shopName;
                if (message.resultMvpCar != null && message.hasOwnProperty("resultMvpCar"))
                    object.resultMvpCar = $root.wm.protobuf.LoadGhostKoshienMvpResponse.GhostKoshienMvpCar.toObject(message.resultMvpCar, options);
                if (message.challengeMvpCar != null && message.hasOwnProperty("challengeMvpCar"))
                    object.challengeMvpCar = $root.wm.protobuf.LoadGhostKoshienMvpResponse.GhostKoshienMvpCar.toObject(message.challengeMvpCar, options);
                if (message.updateMvpCar != null && message.hasOwnProperty("updateMvpCar"))
                    object.updateMvpCar = $root.wm.protobuf.LoadGhostKoshienMvpResponse.GhostKoshienMvpCar.toObject(message.updateMvpCar, options);
                return object;
            };

            /**
             * Converts this LoadGhostKoshienMvpResponse to JSON.
             * @function toJSON
             * @memberof wm.protobuf.LoadGhostKoshienMvpResponse
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            LoadGhostKoshienMvpResponse.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for LoadGhostKoshienMvpResponse
             * @function getTypeUrl
             * @memberof wm.protobuf.LoadGhostKoshienMvpResponse
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            LoadGhostKoshienMvpResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/wm.protobuf.LoadGhostKoshienMvpResponse";
            };

            LoadGhostKoshienMvpResponse.GhostKoshienMvpCar = (function() {

                /**
                 * Properties of a GhostKoshienMvpCar.
                 * @memberof wm.protobuf.LoadGhostKoshienMvpResponse
                 * @interface IGhostKoshienMvpCar
                 * @property {wm.protobuf.ICar} mvpCar GhostKoshienMvpCar mvpCar
                 * @property {number|null} [result] GhostKoshienMvpCar result
                 * @property {number|null} [challengeCount] GhostKoshienMvpCar challengeCount
                 * @property {number|null} [updateCount] GhostKoshienMvpCar updateCount
                 */

                /**
                 * Constructs a new GhostKoshienMvpCar.
                 * @memberof wm.protobuf.LoadGhostKoshienMvpResponse
                 * @classdesc Represents a GhostKoshienMvpCar.
                 * @implements IGhostKoshienMvpCar
                 * @constructor
                 * @param {wm.protobuf.LoadGhostKoshienMvpResponse.IGhostKoshienMvpCar=} [properties] Properties to set
                 */
                function GhostKoshienMvpCar(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * GhostKoshienMvpCar mvpCar.
                 * @member {wm.protobuf.ICar} mvpCar
                 * @memberof wm.protobuf.LoadGhostKoshienMvpResponse.GhostKoshienMvpCar
                 * @instance
                 */
                GhostKoshienMvpCar.prototype.mvpCar = null;

                /**
                 * GhostKoshienMvpCar result.
                 * @member {number} result
                 * @memberof wm.protobuf.LoadGhostKoshienMvpResponse.GhostKoshienMvpCar
                 * @instance
                 */
                GhostKoshienMvpCar.prototype.result = 0;

                /**
                 * GhostKoshienMvpCar challengeCount.
                 * @member {number} challengeCount
                 * @memberof wm.protobuf.LoadGhostKoshienMvpResponse.GhostKoshienMvpCar
                 * @instance
                 */
                GhostKoshienMvpCar.prototype.challengeCount = 0;

                /**
                 * GhostKoshienMvpCar updateCount.
                 * @member {number} updateCount
                 * @memberof wm.protobuf.LoadGhostKoshienMvpResponse.GhostKoshienMvpCar
                 * @instance
                 */
                GhostKoshienMvpCar.prototype.updateCount = 0;

                /**
                 * Creates a new GhostKoshienMvpCar instance using the specified properties.
                 * @function create
                 * @memberof wm.protobuf.LoadGhostKoshienMvpResponse.GhostKoshienMvpCar
                 * @static
                 * @param {wm.protobuf.LoadGhostKoshienMvpResponse.IGhostKoshienMvpCar=} [properties] Properties to set
                 * @returns {wm.protobuf.LoadGhostKoshienMvpResponse.GhostKoshienMvpCar} GhostKoshienMvpCar instance
                 */
                GhostKoshienMvpCar.create = function create(properties) {
                    return new GhostKoshienMvpCar(properties);
                };

                /**
                 * Encodes the specified GhostKoshienMvpCar message. Does not implicitly {@link wm.protobuf.LoadGhostKoshienMvpResponse.GhostKoshienMvpCar.verify|verify} messages.
                 * @function encode
                 * @memberof wm.protobuf.LoadGhostKoshienMvpResponse.GhostKoshienMvpCar
                 * @static
                 * @param {wm.protobuf.LoadGhostKoshienMvpResponse.IGhostKoshienMvpCar} message GhostKoshienMvpCar message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                GhostKoshienMvpCar.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.result != null && Object.hasOwnProperty.call(message, "result"))
                        writer.uint32(/* id 6, wireType 0 =*/48).sint32(message.result);
                    if (message.challengeCount != null && Object.hasOwnProperty.call(message, "challengeCount"))
                        writer.uint32(/* id 7, wireType 0 =*/56).uint32(message.challengeCount);
                    if (message.updateCount != null && Object.hasOwnProperty.call(message, "updateCount"))
                        writer.uint32(/* id 8, wireType 0 =*/64).uint32(message.updateCount);
                    $root.wm.protobuf.Car.encode(message.mvpCar, writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();
                    return writer;
                };

                /**
                 * Encodes the specified GhostKoshienMvpCar message, length delimited. Does not implicitly {@link wm.protobuf.LoadGhostKoshienMvpResponse.GhostKoshienMvpCar.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof wm.protobuf.LoadGhostKoshienMvpResponse.GhostKoshienMvpCar
                 * @static
                 * @param {wm.protobuf.LoadGhostKoshienMvpResponse.IGhostKoshienMvpCar} message GhostKoshienMvpCar message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                GhostKoshienMvpCar.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a GhostKoshienMvpCar message from the specified reader or buffer.
                 * @function decode
                 * @memberof wm.protobuf.LoadGhostKoshienMvpResponse.GhostKoshienMvpCar
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {wm.protobuf.LoadGhostKoshienMvpResponse.GhostKoshienMvpCar} GhostKoshienMvpCar
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                GhostKoshienMvpCar.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.wm.protobuf.LoadGhostKoshienMvpResponse.GhostKoshienMvpCar();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 9: {
                                message.mvpCar = $root.wm.protobuf.Car.decode(reader, reader.uint32());
                                break;
                            }
                        case 6: {
                                message.result = reader.sint32();
                                break;
                            }
                        case 7: {
                                message.challengeCount = reader.uint32();
                                break;
                            }
                        case 8: {
                                message.updateCount = reader.uint32();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    if (!message.hasOwnProperty("mvpCar"))
                        throw $util.ProtocolError("missing required 'mvpCar'", { instance: message });
                    return message;
                };

                /**
                 * Decodes a GhostKoshienMvpCar message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof wm.protobuf.LoadGhostKoshienMvpResponse.GhostKoshienMvpCar
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {wm.protobuf.LoadGhostKoshienMvpResponse.GhostKoshienMvpCar} GhostKoshienMvpCar
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                GhostKoshienMvpCar.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a GhostKoshienMvpCar message.
                 * @function verify
                 * @memberof wm.protobuf.LoadGhostKoshienMvpResponse.GhostKoshienMvpCar
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                GhostKoshienMvpCar.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    {
                        let error = $root.wm.protobuf.Car.verify(message.mvpCar);
                        if (error)
                            return "mvpCar." + error;
                    }
                    if (message.result != null && message.hasOwnProperty("result"))
                        if (!$util.isInteger(message.result))
                            return "result: integer expected";
                    if (message.challengeCount != null && message.hasOwnProperty("challengeCount"))
                        if (!$util.isInteger(message.challengeCount))
                            return "challengeCount: integer expected";
                    if (message.updateCount != null && message.hasOwnProperty("updateCount"))
                        if (!$util.isInteger(message.updateCount))
                            return "updateCount: integer expected";
                    return null;
                };

                /**
                 * Creates a GhostKoshienMvpCar message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof wm.protobuf.LoadGhostKoshienMvpResponse.GhostKoshienMvpCar
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {wm.protobuf.LoadGhostKoshienMvpResponse.GhostKoshienMvpCar} GhostKoshienMvpCar
                 */
                GhostKoshienMvpCar.fromObject = function fromObject(object) {
                    if (object instanceof $root.wm.protobuf.LoadGhostKoshienMvpResponse.GhostKoshienMvpCar)
                        return object;
                    let message = new $root.wm.protobuf.LoadGhostKoshienMvpResponse.GhostKoshienMvpCar();
                    if (object.mvpCar != null) {
                        if (typeof object.mvpCar !== "object")
                            throw TypeError(".wm.protobuf.LoadGhostKoshienMvpResponse.GhostKoshienMvpCar.mvpCar: object expected");
                        message.mvpCar = $root.wm.protobuf.Car.fromObject(object.mvpCar);
                    }
                    if (object.result != null)
                        message.result = object.result | 0;
                    if (object.challengeCount != null)
                        message.challengeCount = object.challengeCount >>> 0;
                    if (object.updateCount != null)
                        message.updateCount = object.updateCount >>> 0;
                    return message;
                };

                /**
                 * Creates a plain object from a GhostKoshienMvpCar message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof wm.protobuf.LoadGhostKoshienMvpResponse.GhostKoshienMvpCar
                 * @static
                 * @param {wm.protobuf.LoadGhostKoshienMvpResponse.GhostKoshienMvpCar} message GhostKoshienMvpCar
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                GhostKoshienMvpCar.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        object.result = 0;
                        object.challengeCount = 0;
                        object.updateCount = 0;
                        object.mvpCar = null;
                    }
                    if (message.result != null && message.hasOwnProperty("result"))
                        object.result = message.result;
                    if (message.challengeCount != null && message.hasOwnProperty("challengeCount"))
                        object.challengeCount = message.challengeCount;
                    if (message.updateCount != null && message.hasOwnProperty("updateCount"))
                        object.updateCount = message.updateCount;
                    if (message.mvpCar != null && message.hasOwnProperty("mvpCar"))
                        object.mvpCar = $root.wm.protobuf.Car.toObject(message.mvpCar, options);
                    return object;
                };

                /**
                 * Converts this GhostKoshienMvpCar to JSON.
                 * @function toJSON
                 * @memberof wm.protobuf.LoadGhostKoshienMvpResponse.GhostKoshienMvpCar
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                GhostKoshienMvpCar.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                /**
                 * Gets the default type url for GhostKoshienMvpCar
                 * @function getTypeUrl
                 * @memberof wm.protobuf.LoadGhostKoshienMvpResponse.GhostKoshienMvpCar
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                GhostKoshienMvpCar.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/wm.protobuf.LoadGhostKoshienMvpResponse.GhostKoshienMvpCar";
                };

                return GhostKoshienMvpCar;
            })();

            return LoadGhostKoshienMvpResponse;
        })();

        protobuf.LoadUnreceivedUserItemsRequest = (function() {

            /**
             * Properties of a LoadUnreceivedUserItemsRequest.
             * @memberof wm.protobuf
             * @interface ILoadUnreceivedUserItemsRequest
             * @property {number} userId LoadUnreceivedUserItemsRequest userId
             */

            /**
             * Constructs a new LoadUnreceivedUserItemsRequest.
             * @memberof wm.protobuf
             * @classdesc Represents a LoadUnreceivedUserItemsRequest.
             * @implements ILoadUnreceivedUserItemsRequest
             * @constructor
             * @param {wm.protobuf.ILoadUnreceivedUserItemsRequest=} [properties] Properties to set
             */
            function LoadUnreceivedUserItemsRequest(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * LoadUnreceivedUserItemsRequest userId.
             * @member {number} userId
             * @memberof wm.protobuf.LoadUnreceivedUserItemsRequest
             * @instance
             */
            LoadUnreceivedUserItemsRequest.prototype.userId = 0;

            /**
             * Creates a new LoadUnreceivedUserItemsRequest instance using the specified properties.
             * @function create
             * @memberof wm.protobuf.LoadUnreceivedUserItemsRequest
             * @static
             * @param {wm.protobuf.ILoadUnreceivedUserItemsRequest=} [properties] Properties to set
             * @returns {wm.protobuf.LoadUnreceivedUserItemsRequest} LoadUnreceivedUserItemsRequest instance
             */
            LoadUnreceivedUserItemsRequest.create = function create(properties) {
                return new LoadUnreceivedUserItemsRequest(properties);
            };

            /**
             * Encodes the specified LoadUnreceivedUserItemsRequest message. Does not implicitly {@link wm.protobuf.LoadUnreceivedUserItemsRequest.verify|verify} messages.
             * @function encode
             * @memberof wm.protobuf.LoadUnreceivedUserItemsRequest
             * @static
             * @param {wm.protobuf.ILoadUnreceivedUserItemsRequest} message LoadUnreceivedUserItemsRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LoadUnreceivedUserItemsRequest.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.userId);
                return writer;
            };

            /**
             * Encodes the specified LoadUnreceivedUserItemsRequest message, length delimited. Does not implicitly {@link wm.protobuf.LoadUnreceivedUserItemsRequest.verify|verify} messages.
             * @function encodeDelimited
             * @memberof wm.protobuf.LoadUnreceivedUserItemsRequest
             * @static
             * @param {wm.protobuf.ILoadUnreceivedUserItemsRequest} message LoadUnreceivedUserItemsRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LoadUnreceivedUserItemsRequest.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a LoadUnreceivedUserItemsRequest message from the specified reader or buffer.
             * @function decode
             * @memberof wm.protobuf.LoadUnreceivedUserItemsRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {wm.protobuf.LoadUnreceivedUserItemsRequest} LoadUnreceivedUserItemsRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LoadUnreceivedUserItemsRequest.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.wm.protobuf.LoadUnreceivedUserItemsRequest();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.userId = reader.uint32();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("userId"))
                    throw $util.ProtocolError("missing required 'userId'", { instance: message });
                return message;
            };

            /**
             * Decodes a LoadUnreceivedUserItemsRequest message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof wm.protobuf.LoadUnreceivedUserItemsRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {wm.protobuf.LoadUnreceivedUserItemsRequest} LoadUnreceivedUserItemsRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LoadUnreceivedUserItemsRequest.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a LoadUnreceivedUserItemsRequest message.
             * @function verify
             * @memberof wm.protobuf.LoadUnreceivedUserItemsRequest
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            LoadUnreceivedUserItemsRequest.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (!$util.isInteger(message.userId))
                    return "userId: integer expected";
                return null;
            };

            /**
             * Creates a LoadUnreceivedUserItemsRequest message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof wm.protobuf.LoadUnreceivedUserItemsRequest
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {wm.protobuf.LoadUnreceivedUserItemsRequest} LoadUnreceivedUserItemsRequest
             */
            LoadUnreceivedUserItemsRequest.fromObject = function fromObject(object) {
                if (object instanceof $root.wm.protobuf.LoadUnreceivedUserItemsRequest)
                    return object;
                let message = new $root.wm.protobuf.LoadUnreceivedUserItemsRequest();
                if (object.userId != null)
                    message.userId = object.userId >>> 0;
                return message;
            };

            /**
             * Creates a plain object from a LoadUnreceivedUserItemsRequest message. Also converts values to other types if specified.
             * @function toObject
             * @memberof wm.protobuf.LoadUnreceivedUserItemsRequest
             * @static
             * @param {wm.protobuf.LoadUnreceivedUserItemsRequest} message LoadUnreceivedUserItemsRequest
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            LoadUnreceivedUserItemsRequest.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults)
                    object.userId = 0;
                if (message.userId != null && message.hasOwnProperty("userId"))
                    object.userId = message.userId;
                return object;
            };

            /**
             * Converts this LoadUnreceivedUserItemsRequest to JSON.
             * @function toJSON
             * @memberof wm.protobuf.LoadUnreceivedUserItemsRequest
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            LoadUnreceivedUserItemsRequest.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for LoadUnreceivedUserItemsRequest
             * @function getTypeUrl
             * @memberof wm.protobuf.LoadUnreceivedUserItemsRequest
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            LoadUnreceivedUserItemsRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/wm.protobuf.LoadUnreceivedUserItemsRequest";
            };

            return LoadUnreceivedUserItemsRequest;
        })();

        protobuf.LoadUnreceivedUserItemsResponse = (function() {

            /**
             * Properties of a LoadUnreceivedUserItemsResponse.
             * @memberof wm.protobuf
             * @interface ILoadUnreceivedUserItemsResponse
             * @property {wm.protobuf.ErrorCode} error LoadUnreceivedUserItemsResponse error
             * @property {Array.<wm.protobuf.IUserItem>|null} [ownedUserItems] LoadUnreceivedUserItemsResponse ownedUserItems
             */

            /**
             * Constructs a new LoadUnreceivedUserItemsResponse.
             * @memberof wm.protobuf
             * @classdesc Represents a LoadUnreceivedUserItemsResponse.
             * @implements ILoadUnreceivedUserItemsResponse
             * @constructor
             * @param {wm.protobuf.ILoadUnreceivedUserItemsResponse=} [properties] Properties to set
             */
            function LoadUnreceivedUserItemsResponse(properties) {
                this.ownedUserItems = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * LoadUnreceivedUserItemsResponse error.
             * @member {wm.protobuf.ErrorCode} error
             * @memberof wm.protobuf.LoadUnreceivedUserItemsResponse
             * @instance
             */
            LoadUnreceivedUserItemsResponse.prototype.error = 0;

            /**
             * LoadUnreceivedUserItemsResponse ownedUserItems.
             * @member {Array.<wm.protobuf.IUserItem>} ownedUserItems
             * @memberof wm.protobuf.LoadUnreceivedUserItemsResponse
             * @instance
             */
            LoadUnreceivedUserItemsResponse.prototype.ownedUserItems = $util.emptyArray;

            /**
             * Creates a new LoadUnreceivedUserItemsResponse instance using the specified properties.
             * @function create
             * @memberof wm.protobuf.LoadUnreceivedUserItemsResponse
             * @static
             * @param {wm.protobuf.ILoadUnreceivedUserItemsResponse=} [properties] Properties to set
             * @returns {wm.protobuf.LoadUnreceivedUserItemsResponse} LoadUnreceivedUserItemsResponse instance
             */
            LoadUnreceivedUserItemsResponse.create = function create(properties) {
                return new LoadUnreceivedUserItemsResponse(properties);
            };

            /**
             * Encodes the specified LoadUnreceivedUserItemsResponse message. Does not implicitly {@link wm.protobuf.LoadUnreceivedUserItemsResponse.verify|verify} messages.
             * @function encode
             * @memberof wm.protobuf.LoadUnreceivedUserItemsResponse
             * @static
             * @param {wm.protobuf.ILoadUnreceivedUserItemsResponse} message LoadUnreceivedUserItemsResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LoadUnreceivedUserItemsResponse.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
                if (message.ownedUserItems != null && message.ownedUserItems.length)
                    for (let i = 0; i < message.ownedUserItems.length; ++i)
                        $root.wm.protobuf.UserItem.encode(message.ownedUserItems[i], writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified LoadUnreceivedUserItemsResponse message, length delimited. Does not implicitly {@link wm.protobuf.LoadUnreceivedUserItemsResponse.verify|verify} messages.
             * @function encodeDelimited
             * @memberof wm.protobuf.LoadUnreceivedUserItemsResponse
             * @static
             * @param {wm.protobuf.ILoadUnreceivedUserItemsResponse} message LoadUnreceivedUserItemsResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LoadUnreceivedUserItemsResponse.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a LoadUnreceivedUserItemsResponse message from the specified reader or buffer.
             * @function decode
             * @memberof wm.protobuf.LoadUnreceivedUserItemsResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {wm.protobuf.LoadUnreceivedUserItemsResponse} LoadUnreceivedUserItemsResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LoadUnreceivedUserItemsResponse.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.wm.protobuf.LoadUnreceivedUserItemsResponse();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.error = reader.int32();
                            break;
                        }
                    case 7: {
                            if (!(message.ownedUserItems && message.ownedUserItems.length))
                                message.ownedUserItems = [];
                            message.ownedUserItems.push($root.wm.protobuf.UserItem.decode(reader, reader.uint32()));
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("error"))
                    throw $util.ProtocolError("missing required 'error'", { instance: message });
                return message;
            };

            /**
             * Decodes a LoadUnreceivedUserItemsResponse message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof wm.protobuf.LoadUnreceivedUserItemsResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {wm.protobuf.LoadUnreceivedUserItemsResponse} LoadUnreceivedUserItemsResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LoadUnreceivedUserItemsResponse.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a LoadUnreceivedUserItemsResponse message.
             * @function verify
             * @memberof wm.protobuf.LoadUnreceivedUserItemsResponse
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            LoadUnreceivedUserItemsResponse.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                switch (message.error) {
                default:
                    return "error: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 7:
                case 9:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 16:
                case 17:
                case 18:
                case 19:
                    break;
                }
                if (message.ownedUserItems != null && message.hasOwnProperty("ownedUserItems")) {
                    if (!Array.isArray(message.ownedUserItems))
                        return "ownedUserItems: array expected";
                    for (let i = 0; i < message.ownedUserItems.length; ++i) {
                        let error = $root.wm.protobuf.UserItem.verify(message.ownedUserItems[i]);
                        if (error)
                            return "ownedUserItems." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a LoadUnreceivedUserItemsResponse message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof wm.protobuf.LoadUnreceivedUserItemsResponse
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {wm.protobuf.LoadUnreceivedUserItemsResponse} LoadUnreceivedUserItemsResponse
             */
            LoadUnreceivedUserItemsResponse.fromObject = function fromObject(object) {
                if (object instanceof $root.wm.protobuf.LoadUnreceivedUserItemsResponse)
                    return object;
                let message = new $root.wm.protobuf.LoadUnreceivedUserItemsResponse();
                switch (object.error) {
                default:
                    if (typeof object.error === "number") {
                        message.error = object.error;
                        break;
                    }
                    break;
                case "ERR_SUCCESS":
                case 0:
                    message.error = 0;
                    break;
                case "ERR_REQUEST":
                case 1:
                    message.error = 1;
                    break;
                case "ERR_NOT_FOUND":
                case 2:
                    message.error = 2;
                    break;
                case "ERR_ID_SERVER":
                case 3:
                    message.error = 3;
                    break;
                case "ERR_ID_BANNED":
                case 4:
                    message.error = 4;
                    break;
                case "ERR_USER_LOCKED":
                case 5:
                    message.error = 5;
                    break;
                case "ERR_USER_VERSION":
                case 6:
                    message.error = 6;
                    break;
                case "ERR_NAME_CONFLICTED":
                case 7:
                    message.error = 7;
                    break;
                case "ERR_FORBIDDEN":
                case 9:
                    message.error = 9;
                    break;
                case "ERR_USER_SUCCEEDED":
                case 11:
                    message.error = 11;
                    break;
                case "ERR_BEING_TRANSFERRED":
                case 12:
                    message.error = 12;
                    break;
                case "ERR_SCRATCH_LOCKED":
                case 13:
                    message.error = 13;
                    break;
                case "ERR_BINGO_REVENGE_LOCKED":
                case 14:
                    message.error = 14;
                    break;
                case "ERR_BINGO_ALREDY_LINKED":
                case 15:
                    message.error = 15;
                    break;
                case "ERR_BINGO_FINISHED":
                case 16:
                    message.error = 16;
                    break;
                case "ERR_BINGO_REACHED_MAX_USER":
                case 17:
                    message.error = 17;
                    break;
                case "ERR_CAR_NOT_FOUND":
                case 18:
                    message.error = 18;
                    break;
                case "ERR_BINGO_CARD_NOT_FOUND":
                case 19:
                    message.error = 19;
                    break;
                }
                if (object.ownedUserItems) {
                    if (!Array.isArray(object.ownedUserItems))
                        throw TypeError(".wm.protobuf.LoadUnreceivedUserItemsResponse.ownedUserItems: array expected");
                    message.ownedUserItems = [];
                    for (let i = 0; i < object.ownedUserItems.length; ++i) {
                        if (typeof object.ownedUserItems[i] !== "object")
                            throw TypeError(".wm.protobuf.LoadUnreceivedUserItemsResponse.ownedUserItems: object expected");
                        message.ownedUserItems[i] = $root.wm.protobuf.UserItem.fromObject(object.ownedUserItems[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from a LoadUnreceivedUserItemsResponse message. Also converts values to other types if specified.
             * @function toObject
             * @memberof wm.protobuf.LoadUnreceivedUserItemsResponse
             * @static
             * @param {wm.protobuf.LoadUnreceivedUserItemsResponse} message LoadUnreceivedUserItemsResponse
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            LoadUnreceivedUserItemsResponse.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.ownedUserItems = [];
                if (options.defaults)
                    object.error = options.enums === String ? "ERR_SUCCESS" : 0;
                if (message.error != null && message.hasOwnProperty("error"))
                    object.error = options.enums === String ? $root.wm.protobuf.ErrorCode[message.error] === undefined ? message.error : $root.wm.protobuf.ErrorCode[message.error] : message.error;
                if (message.ownedUserItems && message.ownedUserItems.length) {
                    object.ownedUserItems = [];
                    for (let j = 0; j < message.ownedUserItems.length; ++j)
                        object.ownedUserItems[j] = $root.wm.protobuf.UserItem.toObject(message.ownedUserItems[j], options);
                }
                return object;
            };

            /**
             * Converts this LoadUnreceivedUserItemsResponse to JSON.
             * @function toJSON
             * @memberof wm.protobuf.LoadUnreceivedUserItemsResponse
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            LoadUnreceivedUserItemsResponse.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for LoadUnreceivedUserItemsResponse
             * @function getTypeUrl
             * @memberof wm.protobuf.LoadUnreceivedUserItemsResponse
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            LoadUnreceivedUserItemsResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/wm.protobuf.LoadUnreceivedUserItemsResponse";
            };

            return LoadUnreceivedUserItemsResponse;
        })();

        protobuf.LoadBookmarksRequest = (function() {

            /**
             * Properties of a LoadBookmarksRequest.
             * @memberof wm.protobuf
             * @interface ILoadBookmarksRequest
             * @property {number} userId LoadBookmarksRequest userId
             */

            /**
             * Constructs a new LoadBookmarksRequest.
             * @memberof wm.protobuf
             * @classdesc Represents a LoadBookmarksRequest.
             * @implements ILoadBookmarksRequest
             * @constructor
             * @param {wm.protobuf.ILoadBookmarksRequest=} [properties] Properties to set
             */
            function LoadBookmarksRequest(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * LoadBookmarksRequest userId.
             * @member {number} userId
             * @memberof wm.protobuf.LoadBookmarksRequest
             * @instance
             */
            LoadBookmarksRequest.prototype.userId = 0;

            /**
             * Creates a new LoadBookmarksRequest instance using the specified properties.
             * @function create
             * @memberof wm.protobuf.LoadBookmarksRequest
             * @static
             * @param {wm.protobuf.ILoadBookmarksRequest=} [properties] Properties to set
             * @returns {wm.protobuf.LoadBookmarksRequest} LoadBookmarksRequest instance
             */
            LoadBookmarksRequest.create = function create(properties) {
                return new LoadBookmarksRequest(properties);
            };

            /**
             * Encodes the specified LoadBookmarksRequest message. Does not implicitly {@link wm.protobuf.LoadBookmarksRequest.verify|verify} messages.
             * @function encode
             * @memberof wm.protobuf.LoadBookmarksRequest
             * @static
             * @param {wm.protobuf.ILoadBookmarksRequest} message LoadBookmarksRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LoadBookmarksRequest.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.userId);
                return writer;
            };

            /**
             * Encodes the specified LoadBookmarksRequest message, length delimited. Does not implicitly {@link wm.protobuf.LoadBookmarksRequest.verify|verify} messages.
             * @function encodeDelimited
             * @memberof wm.protobuf.LoadBookmarksRequest
             * @static
             * @param {wm.protobuf.ILoadBookmarksRequest} message LoadBookmarksRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LoadBookmarksRequest.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a LoadBookmarksRequest message from the specified reader or buffer.
             * @function decode
             * @memberof wm.protobuf.LoadBookmarksRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {wm.protobuf.LoadBookmarksRequest} LoadBookmarksRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LoadBookmarksRequest.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.wm.protobuf.LoadBookmarksRequest();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.userId = reader.uint32();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("userId"))
                    throw $util.ProtocolError("missing required 'userId'", { instance: message });
                return message;
            };

            /**
             * Decodes a LoadBookmarksRequest message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof wm.protobuf.LoadBookmarksRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {wm.protobuf.LoadBookmarksRequest} LoadBookmarksRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LoadBookmarksRequest.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a LoadBookmarksRequest message.
             * @function verify
             * @memberof wm.protobuf.LoadBookmarksRequest
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            LoadBookmarksRequest.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (!$util.isInteger(message.userId))
                    return "userId: integer expected";
                return null;
            };

            /**
             * Creates a LoadBookmarksRequest message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof wm.protobuf.LoadBookmarksRequest
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {wm.protobuf.LoadBookmarksRequest} LoadBookmarksRequest
             */
            LoadBookmarksRequest.fromObject = function fromObject(object) {
                if (object instanceof $root.wm.protobuf.LoadBookmarksRequest)
                    return object;
                let message = new $root.wm.protobuf.LoadBookmarksRequest();
                if (object.userId != null)
                    message.userId = object.userId >>> 0;
                return message;
            };

            /**
             * Creates a plain object from a LoadBookmarksRequest message. Also converts values to other types if specified.
             * @function toObject
             * @memberof wm.protobuf.LoadBookmarksRequest
             * @static
             * @param {wm.protobuf.LoadBookmarksRequest} message LoadBookmarksRequest
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            LoadBookmarksRequest.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults)
                    object.userId = 0;
                if (message.userId != null && message.hasOwnProperty("userId"))
                    object.userId = message.userId;
                return object;
            };

            /**
             * Converts this LoadBookmarksRequest to JSON.
             * @function toJSON
             * @memberof wm.protobuf.LoadBookmarksRequest
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            LoadBookmarksRequest.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for LoadBookmarksRequest
             * @function getTypeUrl
             * @memberof wm.protobuf.LoadBookmarksRequest
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            LoadBookmarksRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/wm.protobuf.LoadBookmarksRequest";
            };

            return LoadBookmarksRequest;
        })();

        protobuf.LoadBookmarksResponse = (function() {

            /**
             * Properties of a LoadBookmarksResponse.
             * @memberof wm.protobuf
             * @interface ILoadBookmarksResponse
             * @property {wm.protobuf.ErrorCode} error LoadBookmarksResponse error
             * @property {Array.<wm.protobuf.ICar>|null} [cars] LoadBookmarksResponse cars
             */

            /**
             * Constructs a new LoadBookmarksResponse.
             * @memberof wm.protobuf
             * @classdesc Represents a LoadBookmarksResponse.
             * @implements ILoadBookmarksResponse
             * @constructor
             * @param {wm.protobuf.ILoadBookmarksResponse=} [properties] Properties to set
             */
            function LoadBookmarksResponse(properties) {
                this.cars = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * LoadBookmarksResponse error.
             * @member {wm.protobuf.ErrorCode} error
             * @memberof wm.protobuf.LoadBookmarksResponse
             * @instance
             */
            LoadBookmarksResponse.prototype.error = 0;

            /**
             * LoadBookmarksResponse cars.
             * @member {Array.<wm.protobuf.ICar>} cars
             * @memberof wm.protobuf.LoadBookmarksResponse
             * @instance
             */
            LoadBookmarksResponse.prototype.cars = $util.emptyArray;

            /**
             * Creates a new LoadBookmarksResponse instance using the specified properties.
             * @function create
             * @memberof wm.protobuf.LoadBookmarksResponse
             * @static
             * @param {wm.protobuf.ILoadBookmarksResponse=} [properties] Properties to set
             * @returns {wm.protobuf.LoadBookmarksResponse} LoadBookmarksResponse instance
             */
            LoadBookmarksResponse.create = function create(properties) {
                return new LoadBookmarksResponse(properties);
            };

            /**
             * Encodes the specified LoadBookmarksResponse message. Does not implicitly {@link wm.protobuf.LoadBookmarksResponse.verify|verify} messages.
             * @function encode
             * @memberof wm.protobuf.LoadBookmarksResponse
             * @static
             * @param {wm.protobuf.ILoadBookmarksResponse} message LoadBookmarksResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LoadBookmarksResponse.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
                if (message.cars != null && message.cars.length)
                    for (let i = 0; i < message.cars.length; ++i)
                        $root.wm.protobuf.Car.encode(message.cars[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified LoadBookmarksResponse message, length delimited. Does not implicitly {@link wm.protobuf.LoadBookmarksResponse.verify|verify} messages.
             * @function encodeDelimited
             * @memberof wm.protobuf.LoadBookmarksResponse
             * @static
             * @param {wm.protobuf.ILoadBookmarksResponse} message LoadBookmarksResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LoadBookmarksResponse.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a LoadBookmarksResponse message from the specified reader or buffer.
             * @function decode
             * @memberof wm.protobuf.LoadBookmarksResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {wm.protobuf.LoadBookmarksResponse} LoadBookmarksResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LoadBookmarksResponse.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.wm.protobuf.LoadBookmarksResponse();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.error = reader.int32();
                            break;
                        }
                    case 2: {
                            if (!(message.cars && message.cars.length))
                                message.cars = [];
                            message.cars.push($root.wm.protobuf.Car.decode(reader, reader.uint32()));
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("error"))
                    throw $util.ProtocolError("missing required 'error'", { instance: message });
                return message;
            };

            /**
             * Decodes a LoadBookmarksResponse message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof wm.protobuf.LoadBookmarksResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {wm.protobuf.LoadBookmarksResponse} LoadBookmarksResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LoadBookmarksResponse.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a LoadBookmarksResponse message.
             * @function verify
             * @memberof wm.protobuf.LoadBookmarksResponse
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            LoadBookmarksResponse.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                switch (message.error) {
                default:
                    return "error: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 7:
                case 9:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 16:
                case 17:
                case 18:
                case 19:
                    break;
                }
                if (message.cars != null && message.hasOwnProperty("cars")) {
                    if (!Array.isArray(message.cars))
                        return "cars: array expected";
                    for (let i = 0; i < message.cars.length; ++i) {
                        let error = $root.wm.protobuf.Car.verify(message.cars[i]);
                        if (error)
                            return "cars." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a LoadBookmarksResponse message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof wm.protobuf.LoadBookmarksResponse
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {wm.protobuf.LoadBookmarksResponse} LoadBookmarksResponse
             */
            LoadBookmarksResponse.fromObject = function fromObject(object) {
                if (object instanceof $root.wm.protobuf.LoadBookmarksResponse)
                    return object;
                let message = new $root.wm.protobuf.LoadBookmarksResponse();
                switch (object.error) {
                default:
                    if (typeof object.error === "number") {
                        message.error = object.error;
                        break;
                    }
                    break;
                case "ERR_SUCCESS":
                case 0:
                    message.error = 0;
                    break;
                case "ERR_REQUEST":
                case 1:
                    message.error = 1;
                    break;
                case "ERR_NOT_FOUND":
                case 2:
                    message.error = 2;
                    break;
                case "ERR_ID_SERVER":
                case 3:
                    message.error = 3;
                    break;
                case "ERR_ID_BANNED":
                case 4:
                    message.error = 4;
                    break;
                case "ERR_USER_LOCKED":
                case 5:
                    message.error = 5;
                    break;
                case "ERR_USER_VERSION":
                case 6:
                    message.error = 6;
                    break;
                case "ERR_NAME_CONFLICTED":
                case 7:
                    message.error = 7;
                    break;
                case "ERR_FORBIDDEN":
                case 9:
                    message.error = 9;
                    break;
                case "ERR_USER_SUCCEEDED":
                case 11:
                    message.error = 11;
                    break;
                case "ERR_BEING_TRANSFERRED":
                case 12:
                    message.error = 12;
                    break;
                case "ERR_SCRATCH_LOCKED":
                case 13:
                    message.error = 13;
                    break;
                case "ERR_BINGO_REVENGE_LOCKED":
                case 14:
                    message.error = 14;
                    break;
                case "ERR_BINGO_ALREDY_LINKED":
                case 15:
                    message.error = 15;
                    break;
                case "ERR_BINGO_FINISHED":
                case 16:
                    message.error = 16;
                    break;
                case "ERR_BINGO_REACHED_MAX_USER":
                case 17:
                    message.error = 17;
                    break;
                case "ERR_CAR_NOT_FOUND":
                case 18:
                    message.error = 18;
                    break;
                case "ERR_BINGO_CARD_NOT_FOUND":
                case 19:
                    message.error = 19;
                    break;
                }
                if (object.cars) {
                    if (!Array.isArray(object.cars))
                        throw TypeError(".wm.protobuf.LoadBookmarksResponse.cars: array expected");
                    message.cars = [];
                    for (let i = 0; i < object.cars.length; ++i) {
                        if (typeof object.cars[i] !== "object")
                            throw TypeError(".wm.protobuf.LoadBookmarksResponse.cars: object expected");
                        message.cars[i] = $root.wm.protobuf.Car.fromObject(object.cars[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from a LoadBookmarksResponse message. Also converts values to other types if specified.
             * @function toObject
             * @memberof wm.protobuf.LoadBookmarksResponse
             * @static
             * @param {wm.protobuf.LoadBookmarksResponse} message LoadBookmarksResponse
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            LoadBookmarksResponse.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.cars = [];
                if (options.defaults)
                    object.error = options.enums === String ? "ERR_SUCCESS" : 0;
                if (message.error != null && message.hasOwnProperty("error"))
                    object.error = options.enums === String ? $root.wm.protobuf.ErrorCode[message.error] === undefined ? message.error : $root.wm.protobuf.ErrorCode[message.error] : message.error;
                if (message.cars && message.cars.length) {
                    object.cars = [];
                    for (let j = 0; j < message.cars.length; ++j)
                        object.cars[j] = $root.wm.protobuf.Car.toObject(message.cars[j], options);
                }
                return object;
            };

            /**
             * Converts this LoadBookmarksResponse to JSON.
             * @function toJSON
             * @memberof wm.protobuf.LoadBookmarksResponse
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            LoadBookmarksResponse.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for LoadBookmarksResponse
             * @function getTypeUrl
             * @memberof wm.protobuf.LoadBookmarksResponse
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            LoadBookmarksResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/wm.protobuf.LoadBookmarksResponse";
            };

            return LoadBookmarksResponse;
        })();

        protobuf.SaveBookmarksRequest = (function() {

            /**
             * Properties of a SaveBookmarksRequest.
             * @memberof wm.protobuf
             * @interface ISaveBookmarksRequest
             * @property {number} userId SaveBookmarksRequest userId
             * @property {Array.<number>|null} [cars] SaveBookmarksRequest cars
             */

            /**
             * Constructs a new SaveBookmarksRequest.
             * @memberof wm.protobuf
             * @classdesc Represents a SaveBookmarksRequest.
             * @implements ISaveBookmarksRequest
             * @constructor
             * @param {wm.protobuf.ISaveBookmarksRequest=} [properties] Properties to set
             */
            function SaveBookmarksRequest(properties) {
                this.cars = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * SaveBookmarksRequest userId.
             * @member {number} userId
             * @memberof wm.protobuf.SaveBookmarksRequest
             * @instance
             */
            SaveBookmarksRequest.prototype.userId = 0;

            /**
             * SaveBookmarksRequest cars.
             * @member {Array.<number>} cars
             * @memberof wm.protobuf.SaveBookmarksRequest
             * @instance
             */
            SaveBookmarksRequest.prototype.cars = $util.emptyArray;

            /**
             * Creates a new SaveBookmarksRequest instance using the specified properties.
             * @function create
             * @memberof wm.protobuf.SaveBookmarksRequest
             * @static
             * @param {wm.protobuf.ISaveBookmarksRequest=} [properties] Properties to set
             * @returns {wm.protobuf.SaveBookmarksRequest} SaveBookmarksRequest instance
             */
            SaveBookmarksRequest.create = function create(properties) {
                return new SaveBookmarksRequest(properties);
            };

            /**
             * Encodes the specified SaveBookmarksRequest message. Does not implicitly {@link wm.protobuf.SaveBookmarksRequest.verify|verify} messages.
             * @function encode
             * @memberof wm.protobuf.SaveBookmarksRequest
             * @static
             * @param {wm.protobuf.ISaveBookmarksRequest} message SaveBookmarksRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SaveBookmarksRequest.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.userId);
                if (message.cars != null && message.cars.length)
                    for (let i = 0; i < message.cars.length; ++i)
                        writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.cars[i]);
                return writer;
            };

            /**
             * Encodes the specified SaveBookmarksRequest message, length delimited. Does not implicitly {@link wm.protobuf.SaveBookmarksRequest.verify|verify} messages.
             * @function encodeDelimited
             * @memberof wm.protobuf.SaveBookmarksRequest
             * @static
             * @param {wm.protobuf.ISaveBookmarksRequest} message SaveBookmarksRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SaveBookmarksRequest.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a SaveBookmarksRequest message from the specified reader or buffer.
             * @function decode
             * @memberof wm.protobuf.SaveBookmarksRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {wm.protobuf.SaveBookmarksRequest} SaveBookmarksRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SaveBookmarksRequest.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.wm.protobuf.SaveBookmarksRequest();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.userId = reader.uint32();
                            break;
                        }
                    case 2: {
                            if (!(message.cars && message.cars.length))
                                message.cars = [];
                            if ((tag & 7) === 2) {
                                let end2 = reader.uint32() + reader.pos;
                                while (reader.pos < end2)
                                    message.cars.push(reader.uint32());
                            } else
                                message.cars.push(reader.uint32());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("userId"))
                    throw $util.ProtocolError("missing required 'userId'", { instance: message });
                return message;
            };

            /**
             * Decodes a SaveBookmarksRequest message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof wm.protobuf.SaveBookmarksRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {wm.protobuf.SaveBookmarksRequest} SaveBookmarksRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SaveBookmarksRequest.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a SaveBookmarksRequest message.
             * @function verify
             * @memberof wm.protobuf.SaveBookmarksRequest
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            SaveBookmarksRequest.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (!$util.isInteger(message.userId))
                    return "userId: integer expected";
                if (message.cars != null && message.hasOwnProperty("cars")) {
                    if (!Array.isArray(message.cars))
                        return "cars: array expected";
                    for (let i = 0; i < message.cars.length; ++i)
                        if (!$util.isInteger(message.cars[i]))
                            return "cars: integer[] expected";
                }
                return null;
            };

            /**
             * Creates a SaveBookmarksRequest message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof wm.protobuf.SaveBookmarksRequest
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {wm.protobuf.SaveBookmarksRequest} SaveBookmarksRequest
             */
            SaveBookmarksRequest.fromObject = function fromObject(object) {
                if (object instanceof $root.wm.protobuf.SaveBookmarksRequest)
                    return object;
                let message = new $root.wm.protobuf.SaveBookmarksRequest();
                if (object.userId != null)
                    message.userId = object.userId >>> 0;
                if (object.cars) {
                    if (!Array.isArray(object.cars))
                        throw TypeError(".wm.protobuf.SaveBookmarksRequest.cars: array expected");
                    message.cars = [];
                    for (let i = 0; i < object.cars.length; ++i)
                        message.cars[i] = object.cars[i] >>> 0;
                }
                return message;
            };

            /**
             * Creates a plain object from a SaveBookmarksRequest message. Also converts values to other types if specified.
             * @function toObject
             * @memberof wm.protobuf.SaveBookmarksRequest
             * @static
             * @param {wm.protobuf.SaveBookmarksRequest} message SaveBookmarksRequest
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            SaveBookmarksRequest.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.cars = [];
                if (options.defaults)
                    object.userId = 0;
                if (message.userId != null && message.hasOwnProperty("userId"))
                    object.userId = message.userId;
                if (message.cars && message.cars.length) {
                    object.cars = [];
                    for (let j = 0; j < message.cars.length; ++j)
                        object.cars[j] = message.cars[j];
                }
                return object;
            };

            /**
             * Converts this SaveBookmarksRequest to JSON.
             * @function toJSON
             * @memberof wm.protobuf.SaveBookmarksRequest
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            SaveBookmarksRequest.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for SaveBookmarksRequest
             * @function getTypeUrl
             * @memberof wm.protobuf.SaveBookmarksRequest
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            SaveBookmarksRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/wm.protobuf.SaveBookmarksRequest";
            };

            return SaveBookmarksRequest;
        })();

        protobuf.SaveBookmarksResponse = (function() {

            /**
             * Properties of a SaveBookmarksResponse.
             * @memberof wm.protobuf
             * @interface ISaveBookmarksResponse
             * @property {wm.protobuf.ErrorCode} error SaveBookmarksResponse error
             */

            /**
             * Constructs a new SaveBookmarksResponse.
             * @memberof wm.protobuf
             * @classdesc Represents a SaveBookmarksResponse.
             * @implements ISaveBookmarksResponse
             * @constructor
             * @param {wm.protobuf.ISaveBookmarksResponse=} [properties] Properties to set
             */
            function SaveBookmarksResponse(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * SaveBookmarksResponse error.
             * @member {wm.protobuf.ErrorCode} error
             * @memberof wm.protobuf.SaveBookmarksResponse
             * @instance
             */
            SaveBookmarksResponse.prototype.error = 0;

            /**
             * Creates a new SaveBookmarksResponse instance using the specified properties.
             * @function create
             * @memberof wm.protobuf.SaveBookmarksResponse
             * @static
             * @param {wm.protobuf.ISaveBookmarksResponse=} [properties] Properties to set
             * @returns {wm.protobuf.SaveBookmarksResponse} SaveBookmarksResponse instance
             */
            SaveBookmarksResponse.create = function create(properties) {
                return new SaveBookmarksResponse(properties);
            };

            /**
             * Encodes the specified SaveBookmarksResponse message. Does not implicitly {@link wm.protobuf.SaveBookmarksResponse.verify|verify} messages.
             * @function encode
             * @memberof wm.protobuf.SaveBookmarksResponse
             * @static
             * @param {wm.protobuf.ISaveBookmarksResponse} message SaveBookmarksResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SaveBookmarksResponse.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
                return writer;
            };

            /**
             * Encodes the specified SaveBookmarksResponse message, length delimited. Does not implicitly {@link wm.protobuf.SaveBookmarksResponse.verify|verify} messages.
             * @function encodeDelimited
             * @memberof wm.protobuf.SaveBookmarksResponse
             * @static
             * @param {wm.protobuf.ISaveBookmarksResponse} message SaveBookmarksResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SaveBookmarksResponse.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a SaveBookmarksResponse message from the specified reader or buffer.
             * @function decode
             * @memberof wm.protobuf.SaveBookmarksResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {wm.protobuf.SaveBookmarksResponse} SaveBookmarksResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SaveBookmarksResponse.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.wm.protobuf.SaveBookmarksResponse();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.error = reader.int32();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("error"))
                    throw $util.ProtocolError("missing required 'error'", { instance: message });
                return message;
            };

            /**
             * Decodes a SaveBookmarksResponse message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof wm.protobuf.SaveBookmarksResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {wm.protobuf.SaveBookmarksResponse} SaveBookmarksResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SaveBookmarksResponse.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a SaveBookmarksResponse message.
             * @function verify
             * @memberof wm.protobuf.SaveBookmarksResponse
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            SaveBookmarksResponse.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                switch (message.error) {
                default:
                    return "error: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 7:
                case 9:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 16:
                case 17:
                case 18:
                case 19:
                    break;
                }
                return null;
            };

            /**
             * Creates a SaveBookmarksResponse message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof wm.protobuf.SaveBookmarksResponse
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {wm.protobuf.SaveBookmarksResponse} SaveBookmarksResponse
             */
            SaveBookmarksResponse.fromObject = function fromObject(object) {
                if (object instanceof $root.wm.protobuf.SaveBookmarksResponse)
                    return object;
                let message = new $root.wm.protobuf.SaveBookmarksResponse();
                switch (object.error) {
                default:
                    if (typeof object.error === "number") {
                        message.error = object.error;
                        break;
                    }
                    break;
                case "ERR_SUCCESS":
                case 0:
                    message.error = 0;
                    break;
                case "ERR_REQUEST":
                case 1:
                    message.error = 1;
                    break;
                case "ERR_NOT_FOUND":
                case 2:
                    message.error = 2;
                    break;
                case "ERR_ID_SERVER":
                case 3:
                    message.error = 3;
                    break;
                case "ERR_ID_BANNED":
                case 4:
                    message.error = 4;
                    break;
                case "ERR_USER_LOCKED":
                case 5:
                    message.error = 5;
                    break;
                case "ERR_USER_VERSION":
                case 6:
                    message.error = 6;
                    break;
                case "ERR_NAME_CONFLICTED":
                case 7:
                    message.error = 7;
                    break;
                case "ERR_FORBIDDEN":
                case 9:
                    message.error = 9;
                    break;
                case "ERR_USER_SUCCEEDED":
                case 11:
                    message.error = 11;
                    break;
                case "ERR_BEING_TRANSFERRED":
                case 12:
                    message.error = 12;
                    break;
                case "ERR_SCRATCH_LOCKED":
                case 13:
                    message.error = 13;
                    break;
                case "ERR_BINGO_REVENGE_LOCKED":
                case 14:
                    message.error = 14;
                    break;
                case "ERR_BINGO_ALREDY_LINKED":
                case 15:
                    message.error = 15;
                    break;
                case "ERR_BINGO_FINISHED":
                case 16:
                    message.error = 16;
                    break;
                case "ERR_BINGO_REACHED_MAX_USER":
                case 17:
                    message.error = 17;
                    break;
                case "ERR_CAR_NOT_FOUND":
                case 18:
                    message.error = 18;
                    break;
                case "ERR_BINGO_CARD_NOT_FOUND":
                case 19:
                    message.error = 19;
                    break;
                }
                return message;
            };

            /**
             * Creates a plain object from a SaveBookmarksResponse message. Also converts values to other types if specified.
             * @function toObject
             * @memberof wm.protobuf.SaveBookmarksResponse
             * @static
             * @param {wm.protobuf.SaveBookmarksResponse} message SaveBookmarksResponse
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            SaveBookmarksResponse.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults)
                    object.error = options.enums === String ? "ERR_SUCCESS" : 0;
                if (message.error != null && message.hasOwnProperty("error"))
                    object.error = options.enums === String ? $root.wm.protobuf.ErrorCode[message.error] === undefined ? message.error : $root.wm.protobuf.ErrorCode[message.error] : message.error;
                return object;
            };

            /**
             * Converts this SaveBookmarksResponse to JSON.
             * @function toJSON
             * @memberof wm.protobuf.SaveBookmarksResponse
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            SaveBookmarksResponse.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for SaveBookmarksResponse
             * @function getTypeUrl
             * @memberof wm.protobuf.SaveBookmarksResponse
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            SaveBookmarksResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/wm.protobuf.SaveBookmarksResponse";
            };

            return SaveBookmarksResponse;
        })();

        protobuf.StartTransferRequest = (function() {

            /**
             * Properties of a StartTransferRequest.
             * @memberof wm.protobuf
             * @interface IStartTransferRequest
             * @property {number} banapassportAmId StartTransferRequest banapassportAmId
             */

            /**
             * Constructs a new StartTransferRequest.
             * @memberof wm.protobuf
             * @classdesc Represents a StartTransferRequest.
             * @implements IStartTransferRequest
             * @constructor
             * @param {wm.protobuf.IStartTransferRequest=} [properties] Properties to set
             */
            function StartTransferRequest(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * StartTransferRequest banapassportAmId.
             * @member {number} banapassportAmId
             * @memberof wm.protobuf.StartTransferRequest
             * @instance
             */
            StartTransferRequest.prototype.banapassportAmId = 0;

            /**
             * Creates a new StartTransferRequest instance using the specified properties.
             * @function create
             * @memberof wm.protobuf.StartTransferRequest
             * @static
             * @param {wm.protobuf.IStartTransferRequest=} [properties] Properties to set
             * @returns {wm.protobuf.StartTransferRequest} StartTransferRequest instance
             */
            StartTransferRequest.create = function create(properties) {
                return new StartTransferRequest(properties);
            };

            /**
             * Encodes the specified StartTransferRequest message. Does not implicitly {@link wm.protobuf.StartTransferRequest.verify|verify} messages.
             * @function encode
             * @memberof wm.protobuf.StartTransferRequest
             * @static
             * @param {wm.protobuf.IStartTransferRequest} message StartTransferRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            StartTransferRequest.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.banapassportAmId);
                return writer;
            };

            /**
             * Encodes the specified StartTransferRequest message, length delimited. Does not implicitly {@link wm.protobuf.StartTransferRequest.verify|verify} messages.
             * @function encodeDelimited
             * @memberof wm.protobuf.StartTransferRequest
             * @static
             * @param {wm.protobuf.IStartTransferRequest} message StartTransferRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            StartTransferRequest.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a StartTransferRequest message from the specified reader or buffer.
             * @function decode
             * @memberof wm.protobuf.StartTransferRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {wm.protobuf.StartTransferRequest} StartTransferRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            StartTransferRequest.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.wm.protobuf.StartTransferRequest();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.banapassportAmId = reader.uint32();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("banapassportAmId"))
                    throw $util.ProtocolError("missing required 'banapassportAmId'", { instance: message });
                return message;
            };

            /**
             * Decodes a StartTransferRequest message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof wm.protobuf.StartTransferRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {wm.protobuf.StartTransferRequest} StartTransferRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            StartTransferRequest.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a StartTransferRequest message.
             * @function verify
             * @memberof wm.protobuf.StartTransferRequest
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            StartTransferRequest.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (!$util.isInteger(message.banapassportAmId))
                    return "banapassportAmId: integer expected";
                return null;
            };

            /**
             * Creates a StartTransferRequest message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof wm.protobuf.StartTransferRequest
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {wm.protobuf.StartTransferRequest} StartTransferRequest
             */
            StartTransferRequest.fromObject = function fromObject(object) {
                if (object instanceof $root.wm.protobuf.StartTransferRequest)
                    return object;
                let message = new $root.wm.protobuf.StartTransferRequest();
                if (object.banapassportAmId != null)
                    message.banapassportAmId = object.banapassportAmId >>> 0;
                return message;
            };

            /**
             * Creates a plain object from a StartTransferRequest message. Also converts values to other types if specified.
             * @function toObject
             * @memberof wm.protobuf.StartTransferRequest
             * @static
             * @param {wm.protobuf.StartTransferRequest} message StartTransferRequest
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            StartTransferRequest.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults)
                    object.banapassportAmId = 0;
                if (message.banapassportAmId != null && message.hasOwnProperty("banapassportAmId"))
                    object.banapassportAmId = message.banapassportAmId;
                return object;
            };

            /**
             * Converts this StartTransferRequest to JSON.
             * @function toJSON
             * @memberof wm.protobuf.StartTransferRequest
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            StartTransferRequest.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for StartTransferRequest
             * @function getTypeUrl
             * @memberof wm.protobuf.StartTransferRequest
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            StartTransferRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/wm.protobuf.StartTransferRequest";
            };

            return StartTransferRequest;
        })();

        protobuf.StartTransferResponse = (function() {

            /**
             * Properties of a StartTransferResponse.
             * @memberof wm.protobuf
             * @interface IStartTransferResponse
             * @property {wm.protobuf.ErrorCode} error StartTransferResponse error
             * @property {number} userId StartTransferResponse userId
             * @property {number|null} [pollingInterval] StartTransferResponse pollingInterval
             */

            /**
             * Constructs a new StartTransferResponse.
             * @memberof wm.protobuf
             * @classdesc Represents a StartTransferResponse.
             * @implements IStartTransferResponse
             * @constructor
             * @param {wm.protobuf.IStartTransferResponse=} [properties] Properties to set
             */
            function StartTransferResponse(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * StartTransferResponse error.
             * @member {wm.protobuf.ErrorCode} error
             * @memberof wm.protobuf.StartTransferResponse
             * @instance
             */
            StartTransferResponse.prototype.error = 0;

            /**
             * StartTransferResponse userId.
             * @member {number} userId
             * @memberof wm.protobuf.StartTransferResponse
             * @instance
             */
            StartTransferResponse.prototype.userId = 0;

            /**
             * StartTransferResponse pollingInterval.
             * @member {number} pollingInterval
             * @memberof wm.protobuf.StartTransferResponse
             * @instance
             */
            StartTransferResponse.prototype.pollingInterval = 0;

            /**
             * Creates a new StartTransferResponse instance using the specified properties.
             * @function create
             * @memberof wm.protobuf.StartTransferResponse
             * @static
             * @param {wm.protobuf.IStartTransferResponse=} [properties] Properties to set
             * @returns {wm.protobuf.StartTransferResponse} StartTransferResponse instance
             */
            StartTransferResponse.create = function create(properties) {
                return new StartTransferResponse(properties);
            };

            /**
             * Encodes the specified StartTransferResponse message. Does not implicitly {@link wm.protobuf.StartTransferResponse.verify|verify} messages.
             * @function encode
             * @memberof wm.protobuf.StartTransferResponse
             * @static
             * @param {wm.protobuf.IStartTransferResponse} message StartTransferResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            StartTransferResponse.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.userId);
                if (message.pollingInterval != null && Object.hasOwnProperty.call(message, "pollingInterval"))
                    writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.pollingInterval);
                return writer;
            };

            /**
             * Encodes the specified StartTransferResponse message, length delimited. Does not implicitly {@link wm.protobuf.StartTransferResponse.verify|verify} messages.
             * @function encodeDelimited
             * @memberof wm.protobuf.StartTransferResponse
             * @static
             * @param {wm.protobuf.IStartTransferResponse} message StartTransferResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            StartTransferResponse.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a StartTransferResponse message from the specified reader or buffer.
             * @function decode
             * @memberof wm.protobuf.StartTransferResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {wm.protobuf.StartTransferResponse} StartTransferResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            StartTransferResponse.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.wm.protobuf.StartTransferResponse();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.error = reader.int32();
                            break;
                        }
                    case 2: {
                            message.userId = reader.uint32();
                            break;
                        }
                    case 3: {
                            message.pollingInterval = reader.uint32();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("error"))
                    throw $util.ProtocolError("missing required 'error'", { instance: message });
                if (!message.hasOwnProperty("userId"))
                    throw $util.ProtocolError("missing required 'userId'", { instance: message });
                return message;
            };

            /**
             * Decodes a StartTransferResponse message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof wm.protobuf.StartTransferResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {wm.protobuf.StartTransferResponse} StartTransferResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            StartTransferResponse.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a StartTransferResponse message.
             * @function verify
             * @memberof wm.protobuf.StartTransferResponse
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            StartTransferResponse.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                switch (message.error) {
                default:
                    return "error: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 7:
                case 9:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 16:
                case 17:
                case 18:
                case 19:
                    break;
                }
                if (!$util.isInteger(message.userId))
                    return "userId: integer expected";
                if (message.pollingInterval != null && message.hasOwnProperty("pollingInterval"))
                    if (!$util.isInteger(message.pollingInterval))
                        return "pollingInterval: integer expected";
                return null;
            };

            /**
             * Creates a StartTransferResponse message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof wm.protobuf.StartTransferResponse
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {wm.protobuf.StartTransferResponse} StartTransferResponse
             */
            StartTransferResponse.fromObject = function fromObject(object) {
                if (object instanceof $root.wm.protobuf.StartTransferResponse)
                    return object;
                let message = new $root.wm.protobuf.StartTransferResponse();
                switch (object.error) {
                default:
                    if (typeof object.error === "number") {
                        message.error = object.error;
                        break;
                    }
                    break;
                case "ERR_SUCCESS":
                case 0:
                    message.error = 0;
                    break;
                case "ERR_REQUEST":
                case 1:
                    message.error = 1;
                    break;
                case "ERR_NOT_FOUND":
                case 2:
                    message.error = 2;
                    break;
                case "ERR_ID_SERVER":
                case 3:
                    message.error = 3;
                    break;
                case "ERR_ID_BANNED":
                case 4:
                    message.error = 4;
                    break;
                case "ERR_USER_LOCKED":
                case 5:
                    message.error = 5;
                    break;
                case "ERR_USER_VERSION":
                case 6:
                    message.error = 6;
                    break;
                case "ERR_NAME_CONFLICTED":
                case 7:
                    message.error = 7;
                    break;
                case "ERR_FORBIDDEN":
                case 9:
                    message.error = 9;
                    break;
                case "ERR_USER_SUCCEEDED":
                case 11:
                    message.error = 11;
                    break;
                case "ERR_BEING_TRANSFERRED":
                case 12:
                    message.error = 12;
                    break;
                case "ERR_SCRATCH_LOCKED":
                case 13:
                    message.error = 13;
                    break;
                case "ERR_BINGO_REVENGE_LOCKED":
                case 14:
                    message.error = 14;
                    break;
                case "ERR_BINGO_ALREDY_LINKED":
                case 15:
                    message.error = 15;
                    break;
                case "ERR_BINGO_FINISHED":
                case 16:
                    message.error = 16;
                    break;
                case "ERR_BINGO_REACHED_MAX_USER":
                case 17:
                    message.error = 17;
                    break;
                case "ERR_CAR_NOT_FOUND":
                case 18:
                    message.error = 18;
                    break;
                case "ERR_BINGO_CARD_NOT_FOUND":
                case 19:
                    message.error = 19;
                    break;
                }
                if (object.userId != null)
                    message.userId = object.userId >>> 0;
                if (object.pollingInterval != null)
                    message.pollingInterval = object.pollingInterval >>> 0;
                return message;
            };

            /**
             * Creates a plain object from a StartTransferResponse message. Also converts values to other types if specified.
             * @function toObject
             * @memberof wm.protobuf.StartTransferResponse
             * @static
             * @param {wm.protobuf.StartTransferResponse} message StartTransferResponse
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            StartTransferResponse.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.error = options.enums === String ? "ERR_SUCCESS" : 0;
                    object.userId = 0;
                    object.pollingInterval = 0;
                }
                if (message.error != null && message.hasOwnProperty("error"))
                    object.error = options.enums === String ? $root.wm.protobuf.ErrorCode[message.error] === undefined ? message.error : $root.wm.protobuf.ErrorCode[message.error] : message.error;
                if (message.userId != null && message.hasOwnProperty("userId"))
                    object.userId = message.userId;
                if (message.pollingInterval != null && message.hasOwnProperty("pollingInterval"))
                    object.pollingInterval = message.pollingInterval;
                return object;
            };

            /**
             * Converts this StartTransferResponse to JSON.
             * @function toJSON
             * @memberof wm.protobuf.StartTransferResponse
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            StartTransferResponse.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for StartTransferResponse
             * @function getTypeUrl
             * @memberof wm.protobuf.StartTransferResponse
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            StartTransferResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/wm.protobuf.StartTransferResponse";
            };

            return StartTransferResponse;
        })();

        protobuf.SaveScreenshotRequest = (function() {

            /**
             * Properties of a SaveScreenshotRequest.
             * @memberof wm.protobuf
             * @interface ISaveScreenshotRequest
             * @property {number} carId SaveScreenshotRequest carId
             * @property {number} timestamp SaveScreenshotRequest timestamp
             * @property {number|null} [playedAt] SaveScreenshotRequest playedAt
             * @property {boolean|null} [transparent] SaveScreenshotRequest transparent
             * @property {wm.protobuf.ScreenshotType} imageType SaveScreenshotRequest imageType
             * @property {Uint8Array|null} [image] SaveScreenshotRequest image
             * @property {wm.protobuf.SaveScreenshotRequest.IGhostBattleMetadata|null} [ghostMetadata] SaveScreenshotRequest ghostMetadata
             * @property {wm.protobuf.SaveScreenshotRequest.IVersusBattleMetadata|null} [versusMetadata] SaveScreenshotRequest versusMetadata
             * @property {wm.protobuf.SaveScreenshotRequest.ITerminalMetadata|null} [terminalMetadata] SaveScreenshotRequest terminalMetadata
             * @property {wm.protobuf.SaveScreenshotRequest.IAcquiringVersusStarMetadata|null} [acquiringVsStarMetadata] SaveScreenshotRequest acquiringVsStarMetadata
             * @property {wm.protobuf.SaveScreenshotRequest.IAcquiringAuraMotifMetadata|null} [acquiringAuraMotifMetadata] SaveScreenshotRequest acquiringAuraMotifMetadata
             * @property {wm.protobuf.SaveScreenshotRequest.IGhostTrophyMetadata|null} [ghostTrophyMetadata] SaveScreenshotRequest ghostTrophyMetadata
             * @property {wm.protobuf.SaveScreenshotRequest.IAcquiringCrownMetadata|null} [acquiringCrownMetadata] SaveScreenshotRequest acquiringCrownMetadata
             * @property {wm.protobuf.SaveScreenshotRequest.IGhostCompetitionResultMetadata|null} [competitionResultMetadata] SaveScreenshotRequest competitionResultMetadata
             * @property {wm.protobuf.SaveScreenshotRequest.ITimeAttackResultMetadata|null} [timeAttackResultMetadata] SaveScreenshotRequest timeAttackResultMetadata
             * @property {wm.protobuf.SaveScreenshotRequest.ILevelUpMetadata|null} [levelUpMetadata] SaveScreenshotRequest levelUpMetadata
             * @property {wm.protobuf.SaveScreenshotRequest.IGhostKoshienResultMetadata|null} [koshienResultMetadata] SaveScreenshotRequest koshienResultMetadata
             */

            /**
             * Constructs a new SaveScreenshotRequest.
             * @memberof wm.protobuf
             * @classdesc Represents a SaveScreenshotRequest.
             * @implements ISaveScreenshotRequest
             * @constructor
             * @param {wm.protobuf.ISaveScreenshotRequest=} [properties] Properties to set
             */
            function SaveScreenshotRequest(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * SaveScreenshotRequest carId.
             * @member {number} carId
             * @memberof wm.protobuf.SaveScreenshotRequest
             * @instance
             */
            SaveScreenshotRequest.prototype.carId = 0;

            /**
             * SaveScreenshotRequest timestamp.
             * @member {number} timestamp
             * @memberof wm.protobuf.SaveScreenshotRequest
             * @instance
             */
            SaveScreenshotRequest.prototype.timestamp = 0;

            /**
             * SaveScreenshotRequest playedAt.
             * @member {number} playedAt
             * @memberof wm.protobuf.SaveScreenshotRequest
             * @instance
             */
            SaveScreenshotRequest.prototype.playedAt = 0;

            /**
             * SaveScreenshotRequest transparent.
             * @member {boolean} transparent
             * @memberof wm.protobuf.SaveScreenshotRequest
             * @instance
             */
            SaveScreenshotRequest.prototype.transparent = false;

            /**
             * SaveScreenshotRequest imageType.
             * @member {wm.protobuf.ScreenshotType} imageType
             * @memberof wm.protobuf.SaveScreenshotRequest
             * @instance
             */
            SaveScreenshotRequest.prototype.imageType = 1;

            /**
             * SaveScreenshotRequest image.
             * @member {Uint8Array} image
             * @memberof wm.protobuf.SaveScreenshotRequest
             * @instance
             */
            SaveScreenshotRequest.prototype.image = $util.newBuffer([]);

            /**
             * SaveScreenshotRequest ghostMetadata.
             * @member {wm.protobuf.SaveScreenshotRequest.IGhostBattleMetadata|null|undefined} ghostMetadata
             * @memberof wm.protobuf.SaveScreenshotRequest
             * @instance
             */
            SaveScreenshotRequest.prototype.ghostMetadata = null;

            /**
             * SaveScreenshotRequest versusMetadata.
             * @member {wm.protobuf.SaveScreenshotRequest.IVersusBattleMetadata|null|undefined} versusMetadata
             * @memberof wm.protobuf.SaveScreenshotRequest
             * @instance
             */
            SaveScreenshotRequest.prototype.versusMetadata = null;

            /**
             * SaveScreenshotRequest terminalMetadata.
             * @member {wm.protobuf.SaveScreenshotRequest.ITerminalMetadata|null|undefined} terminalMetadata
             * @memberof wm.protobuf.SaveScreenshotRequest
             * @instance
             */
            SaveScreenshotRequest.prototype.terminalMetadata = null;

            /**
             * SaveScreenshotRequest acquiringVsStarMetadata.
             * @member {wm.protobuf.SaveScreenshotRequest.IAcquiringVersusStarMetadata|null|undefined} acquiringVsStarMetadata
             * @memberof wm.protobuf.SaveScreenshotRequest
             * @instance
             */
            SaveScreenshotRequest.prototype.acquiringVsStarMetadata = null;

            /**
             * SaveScreenshotRequest acquiringAuraMotifMetadata.
             * @member {wm.protobuf.SaveScreenshotRequest.IAcquiringAuraMotifMetadata|null|undefined} acquiringAuraMotifMetadata
             * @memberof wm.protobuf.SaveScreenshotRequest
             * @instance
             */
            SaveScreenshotRequest.prototype.acquiringAuraMotifMetadata = null;

            /**
             * SaveScreenshotRequest ghostTrophyMetadata.
             * @member {wm.protobuf.SaveScreenshotRequest.IGhostTrophyMetadata|null|undefined} ghostTrophyMetadata
             * @memberof wm.protobuf.SaveScreenshotRequest
             * @instance
             */
            SaveScreenshotRequest.prototype.ghostTrophyMetadata = null;

            /**
             * SaveScreenshotRequest acquiringCrownMetadata.
             * @member {wm.protobuf.SaveScreenshotRequest.IAcquiringCrownMetadata|null|undefined} acquiringCrownMetadata
             * @memberof wm.protobuf.SaveScreenshotRequest
             * @instance
             */
            SaveScreenshotRequest.prototype.acquiringCrownMetadata = null;

            /**
             * SaveScreenshotRequest competitionResultMetadata.
             * @member {wm.protobuf.SaveScreenshotRequest.IGhostCompetitionResultMetadata|null|undefined} competitionResultMetadata
             * @memberof wm.protobuf.SaveScreenshotRequest
             * @instance
             */
            SaveScreenshotRequest.prototype.competitionResultMetadata = null;

            /**
             * SaveScreenshotRequest timeAttackResultMetadata.
             * @member {wm.protobuf.SaveScreenshotRequest.ITimeAttackResultMetadata|null|undefined} timeAttackResultMetadata
             * @memberof wm.protobuf.SaveScreenshotRequest
             * @instance
             */
            SaveScreenshotRequest.prototype.timeAttackResultMetadata = null;

            /**
             * SaveScreenshotRequest levelUpMetadata.
             * @member {wm.protobuf.SaveScreenshotRequest.ILevelUpMetadata|null|undefined} levelUpMetadata
             * @memberof wm.protobuf.SaveScreenshotRequest
             * @instance
             */
            SaveScreenshotRequest.prototype.levelUpMetadata = null;

            /**
             * SaveScreenshotRequest koshienResultMetadata.
             * @member {wm.protobuf.SaveScreenshotRequest.IGhostKoshienResultMetadata|null|undefined} koshienResultMetadata
             * @memberof wm.protobuf.SaveScreenshotRequest
             * @instance
             */
            SaveScreenshotRequest.prototype.koshienResultMetadata = null;

            /**
             * Creates a new SaveScreenshotRequest instance using the specified properties.
             * @function create
             * @memberof wm.protobuf.SaveScreenshotRequest
             * @static
             * @param {wm.protobuf.ISaveScreenshotRequest=} [properties] Properties to set
             * @returns {wm.protobuf.SaveScreenshotRequest} SaveScreenshotRequest instance
             */
            SaveScreenshotRequest.create = function create(properties) {
                return new SaveScreenshotRequest(properties);
            };

            /**
             * Encodes the specified SaveScreenshotRequest message. Does not implicitly {@link wm.protobuf.SaveScreenshotRequest.verify|verify} messages.
             * @function encode
             * @memberof wm.protobuf.SaveScreenshotRequest
             * @static
             * @param {wm.protobuf.ISaveScreenshotRequest} message SaveScreenshotRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SaveScreenshotRequest.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.carId);
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.timestamp);
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.imageType);
                if (message.image != null && Object.hasOwnProperty.call(message, "image"))
                    writer.uint32(/* id 4, wireType 2 =*/34).bytes(message.image);
                if (message.ghostMetadata != null && Object.hasOwnProperty.call(message, "ghostMetadata"))
                    $root.wm.protobuf.SaveScreenshotRequest.GhostBattleMetadata.encode(message.ghostMetadata, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                if (message.versusMetadata != null && Object.hasOwnProperty.call(message, "versusMetadata"))
                    $root.wm.protobuf.SaveScreenshotRequest.VersusBattleMetadata.encode(message.versusMetadata, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                if (message.terminalMetadata != null && Object.hasOwnProperty.call(message, "terminalMetadata"))
                    $root.wm.protobuf.SaveScreenshotRequest.TerminalMetadata.encode(message.terminalMetadata, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                if (message.transparent != null && Object.hasOwnProperty.call(message, "transparent"))
                    writer.uint32(/* id 8, wireType 0 =*/64).bool(message.transparent);
                if (message.playedAt != null && Object.hasOwnProperty.call(message, "playedAt"))
                    writer.uint32(/* id 9, wireType 0 =*/72).uint32(message.playedAt);
                if (message.acquiringVsStarMetadata != null && Object.hasOwnProperty.call(message, "acquiringVsStarMetadata"))
                    $root.wm.protobuf.SaveScreenshotRequest.AcquiringVersusStarMetadata.encode(message.acquiringVsStarMetadata, writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();
                if (message.acquiringAuraMotifMetadata != null && Object.hasOwnProperty.call(message, "acquiringAuraMotifMetadata"))
                    $root.wm.protobuf.SaveScreenshotRequest.AcquiringAuraMotifMetadata.encode(message.acquiringAuraMotifMetadata, writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();
                if (message.ghostTrophyMetadata != null && Object.hasOwnProperty.call(message, "ghostTrophyMetadata"))
                    $root.wm.protobuf.SaveScreenshotRequest.GhostTrophyMetadata.encode(message.ghostTrophyMetadata, writer.uint32(/* id 12, wireType 2 =*/98).fork()).ldelim();
                if (message.acquiringCrownMetadata != null && Object.hasOwnProperty.call(message, "acquiringCrownMetadata"))
                    $root.wm.protobuf.SaveScreenshotRequest.AcquiringCrownMetadata.encode(message.acquiringCrownMetadata, writer.uint32(/* id 13, wireType 2 =*/106).fork()).ldelim();
                if (message.competitionResultMetadata != null && Object.hasOwnProperty.call(message, "competitionResultMetadata"))
                    $root.wm.protobuf.SaveScreenshotRequest.GhostCompetitionResultMetadata.encode(message.competitionResultMetadata, writer.uint32(/* id 14, wireType 2 =*/114).fork()).ldelim();
                if (message.timeAttackResultMetadata != null && Object.hasOwnProperty.call(message, "timeAttackResultMetadata"))
                    $root.wm.protobuf.SaveScreenshotRequest.TimeAttackResultMetadata.encode(message.timeAttackResultMetadata, writer.uint32(/* id 15, wireType 2 =*/122).fork()).ldelim();
                if (message.levelUpMetadata != null && Object.hasOwnProperty.call(message, "levelUpMetadata"))
                    $root.wm.protobuf.SaveScreenshotRequest.LevelUpMetadata.encode(message.levelUpMetadata, writer.uint32(/* id 16, wireType 2 =*/130).fork()).ldelim();
                if (message.koshienResultMetadata != null && Object.hasOwnProperty.call(message, "koshienResultMetadata"))
                    $root.wm.protobuf.SaveScreenshotRequest.GhostKoshienResultMetadata.encode(message.koshienResultMetadata, writer.uint32(/* id 17, wireType 2 =*/138).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified SaveScreenshotRequest message, length delimited. Does not implicitly {@link wm.protobuf.SaveScreenshotRequest.verify|verify} messages.
             * @function encodeDelimited
             * @memberof wm.protobuf.SaveScreenshotRequest
             * @static
             * @param {wm.protobuf.ISaveScreenshotRequest} message SaveScreenshotRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SaveScreenshotRequest.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a SaveScreenshotRequest message from the specified reader or buffer.
             * @function decode
             * @memberof wm.protobuf.SaveScreenshotRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {wm.protobuf.SaveScreenshotRequest} SaveScreenshotRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SaveScreenshotRequest.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.wm.protobuf.SaveScreenshotRequest();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.carId = reader.uint32();
                            break;
                        }
                    case 2: {
                            message.timestamp = reader.uint32();
                            break;
                        }
                    case 9: {
                            message.playedAt = reader.uint32();
                            break;
                        }
                    case 8: {
                            message.transparent = reader.bool();
                            break;
                        }
                    case 3: {
                            message.imageType = reader.int32();
                            break;
                        }
                    case 4: {
                            message.image = reader.bytes();
                            break;
                        }
                    case 5: {
                            message.ghostMetadata = $root.wm.protobuf.SaveScreenshotRequest.GhostBattleMetadata.decode(reader, reader.uint32());
                            break;
                        }
                    case 6: {
                            message.versusMetadata = $root.wm.protobuf.SaveScreenshotRequest.VersusBattleMetadata.decode(reader, reader.uint32());
                            break;
                        }
                    case 7: {
                            message.terminalMetadata = $root.wm.protobuf.SaveScreenshotRequest.TerminalMetadata.decode(reader, reader.uint32());
                            break;
                        }
                    case 10: {
                            message.acquiringVsStarMetadata = $root.wm.protobuf.SaveScreenshotRequest.AcquiringVersusStarMetadata.decode(reader, reader.uint32());
                            break;
                        }
                    case 11: {
                            message.acquiringAuraMotifMetadata = $root.wm.protobuf.SaveScreenshotRequest.AcquiringAuraMotifMetadata.decode(reader, reader.uint32());
                            break;
                        }
                    case 12: {
                            message.ghostTrophyMetadata = $root.wm.protobuf.SaveScreenshotRequest.GhostTrophyMetadata.decode(reader, reader.uint32());
                            break;
                        }
                    case 13: {
                            message.acquiringCrownMetadata = $root.wm.protobuf.SaveScreenshotRequest.AcquiringCrownMetadata.decode(reader, reader.uint32());
                            break;
                        }
                    case 14: {
                            message.competitionResultMetadata = $root.wm.protobuf.SaveScreenshotRequest.GhostCompetitionResultMetadata.decode(reader, reader.uint32());
                            break;
                        }
                    case 15: {
                            message.timeAttackResultMetadata = $root.wm.protobuf.SaveScreenshotRequest.TimeAttackResultMetadata.decode(reader, reader.uint32());
                            break;
                        }
                    case 16: {
                            message.levelUpMetadata = $root.wm.protobuf.SaveScreenshotRequest.LevelUpMetadata.decode(reader, reader.uint32());
                            break;
                        }
                    case 17: {
                            message.koshienResultMetadata = $root.wm.protobuf.SaveScreenshotRequest.GhostKoshienResultMetadata.decode(reader, reader.uint32());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("carId"))
                    throw $util.ProtocolError("missing required 'carId'", { instance: message });
                if (!message.hasOwnProperty("timestamp"))
                    throw $util.ProtocolError("missing required 'timestamp'", { instance: message });
                if (!message.hasOwnProperty("imageType"))
                    throw $util.ProtocolError("missing required 'imageType'", { instance: message });
                return message;
            };

            /**
             * Decodes a SaveScreenshotRequest message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof wm.protobuf.SaveScreenshotRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {wm.protobuf.SaveScreenshotRequest} SaveScreenshotRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SaveScreenshotRequest.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a SaveScreenshotRequest message.
             * @function verify
             * @memberof wm.protobuf.SaveScreenshotRequest
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            SaveScreenshotRequest.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (!$util.isInteger(message.carId))
                    return "carId: integer expected";
                if (!$util.isInteger(message.timestamp))
                    return "timestamp: integer expected";
                if (message.playedAt != null && message.hasOwnProperty("playedAt"))
                    if (!$util.isInteger(message.playedAt))
                        return "playedAt: integer expected";
                if (message.transparent != null && message.hasOwnProperty("transparent"))
                    if (typeof message.transparent !== "boolean")
                        return "transparent: boolean expected";
                switch (message.imageType) {
                default:
                    return "imageType: enum value expected";
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 7:
                case 8:
                case 9:
                case 10:
                case 11:
                    break;
                }
                if (message.image != null && message.hasOwnProperty("image"))
                    if (!(message.image && typeof message.image.length === "number" || $util.isString(message.image)))
                        return "image: buffer expected";
                if (message.ghostMetadata != null && message.hasOwnProperty("ghostMetadata")) {
                    let error = $root.wm.protobuf.SaveScreenshotRequest.GhostBattleMetadata.verify(message.ghostMetadata);
                    if (error)
                        return "ghostMetadata." + error;
                }
                if (message.versusMetadata != null && message.hasOwnProperty("versusMetadata")) {
                    let error = $root.wm.protobuf.SaveScreenshotRequest.VersusBattleMetadata.verify(message.versusMetadata);
                    if (error)
                        return "versusMetadata." + error;
                }
                if (message.terminalMetadata != null && message.hasOwnProperty("terminalMetadata")) {
                    let error = $root.wm.protobuf.SaveScreenshotRequest.TerminalMetadata.verify(message.terminalMetadata);
                    if (error)
                        return "terminalMetadata." + error;
                }
                if (message.acquiringVsStarMetadata != null && message.hasOwnProperty("acquiringVsStarMetadata")) {
                    let error = $root.wm.protobuf.SaveScreenshotRequest.AcquiringVersusStarMetadata.verify(message.acquiringVsStarMetadata);
                    if (error)
                        return "acquiringVsStarMetadata." + error;
                }
                if (message.acquiringAuraMotifMetadata != null && message.hasOwnProperty("acquiringAuraMotifMetadata")) {
                    let error = $root.wm.protobuf.SaveScreenshotRequest.AcquiringAuraMotifMetadata.verify(message.acquiringAuraMotifMetadata);
                    if (error)
                        return "acquiringAuraMotifMetadata." + error;
                }
                if (message.ghostTrophyMetadata != null && message.hasOwnProperty("ghostTrophyMetadata")) {
                    let error = $root.wm.protobuf.SaveScreenshotRequest.GhostTrophyMetadata.verify(message.ghostTrophyMetadata);
                    if (error)
                        return "ghostTrophyMetadata." + error;
                }
                if (message.acquiringCrownMetadata != null && message.hasOwnProperty("acquiringCrownMetadata")) {
                    let error = $root.wm.protobuf.SaveScreenshotRequest.AcquiringCrownMetadata.verify(message.acquiringCrownMetadata);
                    if (error)
                        return "acquiringCrownMetadata." + error;
                }
                if (message.competitionResultMetadata != null && message.hasOwnProperty("competitionResultMetadata")) {
                    let error = $root.wm.protobuf.SaveScreenshotRequest.GhostCompetitionResultMetadata.verify(message.competitionResultMetadata);
                    if (error)
                        return "competitionResultMetadata." + error;
                }
                if (message.timeAttackResultMetadata != null && message.hasOwnProperty("timeAttackResultMetadata")) {
                    let error = $root.wm.protobuf.SaveScreenshotRequest.TimeAttackResultMetadata.verify(message.timeAttackResultMetadata);
                    if (error)
                        return "timeAttackResultMetadata." + error;
                }
                if (message.levelUpMetadata != null && message.hasOwnProperty("levelUpMetadata")) {
                    let error = $root.wm.protobuf.SaveScreenshotRequest.LevelUpMetadata.verify(message.levelUpMetadata);
                    if (error)
                        return "levelUpMetadata." + error;
                }
                if (message.koshienResultMetadata != null && message.hasOwnProperty("koshienResultMetadata")) {
                    let error = $root.wm.protobuf.SaveScreenshotRequest.GhostKoshienResultMetadata.verify(message.koshienResultMetadata);
                    if (error)
                        return "koshienResultMetadata." + error;
                }
                return null;
            };

            /**
             * Creates a SaveScreenshotRequest message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof wm.protobuf.SaveScreenshotRequest
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {wm.protobuf.SaveScreenshotRequest} SaveScreenshotRequest
             */
            SaveScreenshotRequest.fromObject = function fromObject(object) {
                if (object instanceof $root.wm.protobuf.SaveScreenshotRequest)
                    return object;
                let message = new $root.wm.protobuf.SaveScreenshotRequest();
                if (object.carId != null)
                    message.carId = object.carId >>> 0;
                if (object.timestamp != null)
                    message.timestamp = object.timestamp >>> 0;
                if (object.playedAt != null)
                    message.playedAt = object.playedAt >>> 0;
                if (object.transparent != null)
                    message.transparent = Boolean(object.transparent);
                switch (object.imageType) {
                default:
                    if (typeof object.imageType === "number") {
                        message.imageType = object.imageType;
                        break;
                    }
                    break;
                case "SS_GHOST_BATTLE":
                case 1:
                    message.imageType = 1;
                    break;
                case "SS_VERSUS_BATTLE":
                case 2:
                    message.imageType = 2;
                    break;
                case "SS_TERMINAL":
                case 3:
                    message.imageType = 3;
                    break;
                case "SS_ACQUIRING_VERSUS_STAR":
                case 4:
                    message.imageType = 4;
                    break;
                case "SS_ACQUIRING_AURA_MOTIF":
                case 5:
                    message.imageType = 5;
                    break;
                case "SS_GHOST_TROPHY":
                case 6:
                    message.imageType = 6;
                    break;
                case "SS_ACQUIRING_CROWN":
                case 7:
                    message.imageType = 7;
                    break;
                case "SS_GHOST_COMPETITION_RESULT":
                case 8:
                    message.imageType = 8;
                    break;
                case "SS_TIME_ATTACK_RESULT":
                case 9:
                    message.imageType = 9;
                    break;
                case "SS_LEVEL_UP":
                case 10:
                    message.imageType = 10;
                    break;
                case "SS_GHOST_KOSHIEN_RESULT":
                case 11:
                    message.imageType = 11;
                    break;
                }
                if (object.image != null)
                    if (typeof object.image === "string")
                        $util.base64.decode(object.image, message.image = $util.newBuffer($util.base64.length(object.image)), 0);
                    else if (object.image.length >= 0)
                        message.image = object.image;
                if (object.ghostMetadata != null) {
                    if (typeof object.ghostMetadata !== "object")
                        throw TypeError(".wm.protobuf.SaveScreenshotRequest.ghostMetadata: object expected");
                    message.ghostMetadata = $root.wm.protobuf.SaveScreenshotRequest.GhostBattleMetadata.fromObject(object.ghostMetadata);
                }
                if (object.versusMetadata != null) {
                    if (typeof object.versusMetadata !== "object")
                        throw TypeError(".wm.protobuf.SaveScreenshotRequest.versusMetadata: object expected");
                    message.versusMetadata = $root.wm.protobuf.SaveScreenshotRequest.VersusBattleMetadata.fromObject(object.versusMetadata);
                }
                if (object.terminalMetadata != null) {
                    if (typeof object.terminalMetadata !== "object")
                        throw TypeError(".wm.protobuf.SaveScreenshotRequest.terminalMetadata: object expected");
                    message.terminalMetadata = $root.wm.protobuf.SaveScreenshotRequest.TerminalMetadata.fromObject(object.terminalMetadata);
                }
                if (object.acquiringVsStarMetadata != null) {
                    if (typeof object.acquiringVsStarMetadata !== "object")
                        throw TypeError(".wm.protobuf.SaveScreenshotRequest.acquiringVsStarMetadata: object expected");
                    message.acquiringVsStarMetadata = $root.wm.protobuf.SaveScreenshotRequest.AcquiringVersusStarMetadata.fromObject(object.acquiringVsStarMetadata);
                }
                if (object.acquiringAuraMotifMetadata != null) {
                    if (typeof object.acquiringAuraMotifMetadata !== "object")
                        throw TypeError(".wm.protobuf.SaveScreenshotRequest.acquiringAuraMotifMetadata: object expected");
                    message.acquiringAuraMotifMetadata = $root.wm.protobuf.SaveScreenshotRequest.AcquiringAuraMotifMetadata.fromObject(object.acquiringAuraMotifMetadata);
                }
                if (object.ghostTrophyMetadata != null) {
                    if (typeof object.ghostTrophyMetadata !== "object")
                        throw TypeError(".wm.protobuf.SaveScreenshotRequest.ghostTrophyMetadata: object expected");
                    message.ghostTrophyMetadata = $root.wm.protobuf.SaveScreenshotRequest.GhostTrophyMetadata.fromObject(object.ghostTrophyMetadata);
                }
                if (object.acquiringCrownMetadata != null) {
                    if (typeof object.acquiringCrownMetadata !== "object")
                        throw TypeError(".wm.protobuf.SaveScreenshotRequest.acquiringCrownMetadata: object expected");
                    message.acquiringCrownMetadata = $root.wm.protobuf.SaveScreenshotRequest.AcquiringCrownMetadata.fromObject(object.acquiringCrownMetadata);
                }
                if (object.competitionResultMetadata != null) {
                    if (typeof object.competitionResultMetadata !== "object")
                        throw TypeError(".wm.protobuf.SaveScreenshotRequest.competitionResultMetadata: object expected");
                    message.competitionResultMetadata = $root.wm.protobuf.SaveScreenshotRequest.GhostCompetitionResultMetadata.fromObject(object.competitionResultMetadata);
                }
                if (object.timeAttackResultMetadata != null) {
                    if (typeof object.timeAttackResultMetadata !== "object")
                        throw TypeError(".wm.protobuf.SaveScreenshotRequest.timeAttackResultMetadata: object expected");
                    message.timeAttackResultMetadata = $root.wm.protobuf.SaveScreenshotRequest.TimeAttackResultMetadata.fromObject(object.timeAttackResultMetadata);
                }
                if (object.levelUpMetadata != null) {
                    if (typeof object.levelUpMetadata !== "object")
                        throw TypeError(".wm.protobuf.SaveScreenshotRequest.levelUpMetadata: object expected");
                    message.levelUpMetadata = $root.wm.protobuf.SaveScreenshotRequest.LevelUpMetadata.fromObject(object.levelUpMetadata);
                }
                if (object.koshienResultMetadata != null) {
                    if (typeof object.koshienResultMetadata !== "object")
                        throw TypeError(".wm.protobuf.SaveScreenshotRequest.koshienResultMetadata: object expected");
                    message.koshienResultMetadata = $root.wm.protobuf.SaveScreenshotRequest.GhostKoshienResultMetadata.fromObject(object.koshienResultMetadata);
                }
                return message;
            };

            /**
             * Creates a plain object from a SaveScreenshotRequest message. Also converts values to other types if specified.
             * @function toObject
             * @memberof wm.protobuf.SaveScreenshotRequest
             * @static
             * @param {wm.protobuf.SaveScreenshotRequest} message SaveScreenshotRequest
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            SaveScreenshotRequest.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.carId = 0;
                    object.timestamp = 0;
                    object.imageType = options.enums === String ? "SS_GHOST_BATTLE" : 1;
                    if (options.bytes === String)
                        object.image = "";
                    else {
                        object.image = [];
                        if (options.bytes !== Array)
                            object.image = $util.newBuffer(object.image);
                    }
                    object.ghostMetadata = null;
                    object.versusMetadata = null;
                    object.terminalMetadata = null;
                    object.transparent = false;
                    object.playedAt = 0;
                    object.acquiringVsStarMetadata = null;
                    object.acquiringAuraMotifMetadata = null;
                    object.ghostTrophyMetadata = null;
                    object.acquiringCrownMetadata = null;
                    object.competitionResultMetadata = null;
                    object.timeAttackResultMetadata = null;
                    object.levelUpMetadata = null;
                    object.koshienResultMetadata = null;
                }
                if (message.carId != null && message.hasOwnProperty("carId"))
                    object.carId = message.carId;
                if (message.timestamp != null && message.hasOwnProperty("timestamp"))
                    object.timestamp = message.timestamp;
                if (message.imageType != null && message.hasOwnProperty("imageType"))
                    object.imageType = options.enums === String ? $root.wm.protobuf.ScreenshotType[message.imageType] === undefined ? message.imageType : $root.wm.protobuf.ScreenshotType[message.imageType] : message.imageType;
                if (message.image != null && message.hasOwnProperty("image"))
                    object.image = options.bytes === String ? $util.base64.encode(message.image, 0, message.image.length) : options.bytes === Array ? Array.prototype.slice.call(message.image) : message.image;
                if (message.ghostMetadata != null && message.hasOwnProperty("ghostMetadata"))
                    object.ghostMetadata = $root.wm.protobuf.SaveScreenshotRequest.GhostBattleMetadata.toObject(message.ghostMetadata, options);
                if (message.versusMetadata != null && message.hasOwnProperty("versusMetadata"))
                    object.versusMetadata = $root.wm.protobuf.SaveScreenshotRequest.VersusBattleMetadata.toObject(message.versusMetadata, options);
                if (message.terminalMetadata != null && message.hasOwnProperty("terminalMetadata"))
                    object.terminalMetadata = $root.wm.protobuf.SaveScreenshotRequest.TerminalMetadata.toObject(message.terminalMetadata, options);
                if (message.transparent != null && message.hasOwnProperty("transparent"))
                    object.transparent = message.transparent;
                if (message.playedAt != null && message.hasOwnProperty("playedAt"))
                    object.playedAt = message.playedAt;
                if (message.acquiringVsStarMetadata != null && message.hasOwnProperty("acquiringVsStarMetadata"))
                    object.acquiringVsStarMetadata = $root.wm.protobuf.SaveScreenshotRequest.AcquiringVersusStarMetadata.toObject(message.acquiringVsStarMetadata, options);
                if (message.acquiringAuraMotifMetadata != null && message.hasOwnProperty("acquiringAuraMotifMetadata"))
                    object.acquiringAuraMotifMetadata = $root.wm.protobuf.SaveScreenshotRequest.AcquiringAuraMotifMetadata.toObject(message.acquiringAuraMotifMetadata, options);
                if (message.ghostTrophyMetadata != null && message.hasOwnProperty("ghostTrophyMetadata"))
                    object.ghostTrophyMetadata = $root.wm.protobuf.SaveScreenshotRequest.GhostTrophyMetadata.toObject(message.ghostTrophyMetadata, options);
                if (message.acquiringCrownMetadata != null && message.hasOwnProperty("acquiringCrownMetadata"))
                    object.acquiringCrownMetadata = $root.wm.protobuf.SaveScreenshotRequest.AcquiringCrownMetadata.toObject(message.acquiringCrownMetadata, options);
                if (message.competitionResultMetadata != null && message.hasOwnProperty("competitionResultMetadata"))
                    object.competitionResultMetadata = $root.wm.protobuf.SaveScreenshotRequest.GhostCompetitionResultMetadata.toObject(message.competitionResultMetadata, options);
                if (message.timeAttackResultMetadata != null && message.hasOwnProperty("timeAttackResultMetadata"))
                    object.timeAttackResultMetadata = $root.wm.protobuf.SaveScreenshotRequest.TimeAttackResultMetadata.toObject(message.timeAttackResultMetadata, options);
                if (message.levelUpMetadata != null && message.hasOwnProperty("levelUpMetadata"))
                    object.levelUpMetadata = $root.wm.protobuf.SaveScreenshotRequest.LevelUpMetadata.toObject(message.levelUpMetadata, options);
                if (message.koshienResultMetadata != null && message.hasOwnProperty("koshienResultMetadata"))
                    object.koshienResultMetadata = $root.wm.protobuf.SaveScreenshotRequest.GhostKoshienResultMetadata.toObject(message.koshienResultMetadata, options);
                return object;
            };

            /**
             * Converts this SaveScreenshotRequest to JSON.
             * @function toJSON
             * @memberof wm.protobuf.SaveScreenshotRequest
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            SaveScreenshotRequest.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for SaveScreenshotRequest
             * @function getTypeUrl
             * @memberof wm.protobuf.SaveScreenshotRequest
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            SaveScreenshotRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/wm.protobuf.SaveScreenshotRequest";
            };

            SaveScreenshotRequest.OpponentCar = (function() {

                /**
                 * Properties of an OpponentCar.
                 * @memberof wm.protobuf.SaveScreenshotRequest
                 * @interface IOpponentCar
                 * @property {number|null} [carId] OpponentCar carId
                 * @property {number} tunePower OpponentCar tunePower
                 * @property {number} tuneHandling OpponentCar tuneHandling
                 */

                /**
                 * Constructs a new OpponentCar.
                 * @memberof wm.protobuf.SaveScreenshotRequest
                 * @classdesc Represents an OpponentCar.
                 * @implements IOpponentCar
                 * @constructor
                 * @param {wm.protobuf.SaveScreenshotRequest.IOpponentCar=} [properties] Properties to set
                 */
                function OpponentCar(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * OpponentCar carId.
                 * @member {number} carId
                 * @memberof wm.protobuf.SaveScreenshotRequest.OpponentCar
                 * @instance
                 */
                OpponentCar.prototype.carId = 0;

                /**
                 * OpponentCar tunePower.
                 * @member {number} tunePower
                 * @memberof wm.protobuf.SaveScreenshotRequest.OpponentCar
                 * @instance
                 */
                OpponentCar.prototype.tunePower = 0;

                /**
                 * OpponentCar tuneHandling.
                 * @member {number} tuneHandling
                 * @memberof wm.protobuf.SaveScreenshotRequest.OpponentCar
                 * @instance
                 */
                OpponentCar.prototype.tuneHandling = 0;

                /**
                 * Creates a new OpponentCar instance using the specified properties.
                 * @function create
                 * @memberof wm.protobuf.SaveScreenshotRequest.OpponentCar
                 * @static
                 * @param {wm.protobuf.SaveScreenshotRequest.IOpponentCar=} [properties] Properties to set
                 * @returns {wm.protobuf.SaveScreenshotRequest.OpponentCar} OpponentCar instance
                 */
                OpponentCar.create = function create(properties) {
                    return new OpponentCar(properties);
                };

                /**
                 * Encodes the specified OpponentCar message. Does not implicitly {@link wm.protobuf.SaveScreenshotRequest.OpponentCar.verify|verify} messages.
                 * @function encode
                 * @memberof wm.protobuf.SaveScreenshotRequest.OpponentCar
                 * @static
                 * @param {wm.protobuf.SaveScreenshotRequest.IOpponentCar} message OpponentCar message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                OpponentCar.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.carId != null && Object.hasOwnProperty.call(message, "carId"))
                        writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.carId);
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.tunePower);
                    writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.tuneHandling);
                    return writer;
                };

                /**
                 * Encodes the specified OpponentCar message, length delimited. Does not implicitly {@link wm.protobuf.SaveScreenshotRequest.OpponentCar.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof wm.protobuf.SaveScreenshotRequest.OpponentCar
                 * @static
                 * @param {wm.protobuf.SaveScreenshotRequest.IOpponentCar} message OpponentCar message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                OpponentCar.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes an OpponentCar message from the specified reader or buffer.
                 * @function decode
                 * @memberof wm.protobuf.SaveScreenshotRequest.OpponentCar
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {wm.protobuf.SaveScreenshotRequest.OpponentCar} OpponentCar
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                OpponentCar.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.wm.protobuf.SaveScreenshotRequest.OpponentCar();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.carId = reader.uint32();
                                break;
                            }
                        case 2: {
                                message.tunePower = reader.uint32();
                                break;
                            }
                        case 3: {
                                message.tuneHandling = reader.uint32();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    if (!message.hasOwnProperty("tunePower"))
                        throw $util.ProtocolError("missing required 'tunePower'", { instance: message });
                    if (!message.hasOwnProperty("tuneHandling"))
                        throw $util.ProtocolError("missing required 'tuneHandling'", { instance: message });
                    return message;
                };

                /**
                 * Decodes an OpponentCar message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof wm.protobuf.SaveScreenshotRequest.OpponentCar
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {wm.protobuf.SaveScreenshotRequest.OpponentCar} OpponentCar
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                OpponentCar.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies an OpponentCar message.
                 * @function verify
                 * @memberof wm.protobuf.SaveScreenshotRequest.OpponentCar
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                OpponentCar.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.carId != null && message.hasOwnProperty("carId"))
                        if (!$util.isInteger(message.carId))
                            return "carId: integer expected";
                    if (!$util.isInteger(message.tunePower))
                        return "tunePower: integer expected";
                    if (!$util.isInteger(message.tuneHandling))
                        return "tuneHandling: integer expected";
                    return null;
                };

                /**
                 * Creates an OpponentCar message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof wm.protobuf.SaveScreenshotRequest.OpponentCar
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {wm.protobuf.SaveScreenshotRequest.OpponentCar} OpponentCar
                 */
                OpponentCar.fromObject = function fromObject(object) {
                    if (object instanceof $root.wm.protobuf.SaveScreenshotRequest.OpponentCar)
                        return object;
                    let message = new $root.wm.protobuf.SaveScreenshotRequest.OpponentCar();
                    if (object.carId != null)
                        message.carId = object.carId >>> 0;
                    if (object.tunePower != null)
                        message.tunePower = object.tunePower >>> 0;
                    if (object.tuneHandling != null)
                        message.tuneHandling = object.tuneHandling >>> 0;
                    return message;
                };

                /**
                 * Creates a plain object from an OpponentCar message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof wm.protobuf.SaveScreenshotRequest.OpponentCar
                 * @static
                 * @param {wm.protobuf.SaveScreenshotRequest.OpponentCar} message OpponentCar
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                OpponentCar.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        object.carId = 0;
                        object.tunePower = 0;
                        object.tuneHandling = 0;
                    }
                    if (message.carId != null && message.hasOwnProperty("carId"))
                        object.carId = message.carId;
                    if (message.tunePower != null && message.hasOwnProperty("tunePower"))
                        object.tunePower = message.tunePower;
                    if (message.tuneHandling != null && message.hasOwnProperty("tuneHandling"))
                        object.tuneHandling = message.tuneHandling;
                    return object;
                };

                /**
                 * Converts this OpponentCar to JSON.
                 * @function toJSON
                 * @memberof wm.protobuf.SaveScreenshotRequest.OpponentCar
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                OpponentCar.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                /**
                 * Gets the default type url for OpponentCar
                 * @function getTypeUrl
                 * @memberof wm.protobuf.SaveScreenshotRequest.OpponentCar
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                OpponentCar.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/wm.protobuf.SaveScreenshotRequest.OpponentCar";
                };

                return OpponentCar;
            })();

            SaveScreenshotRequest.GhostBattleMetadata = (function() {

                /**
                 * Properties of a GhostBattleMetadata.
                 * @memberof wm.protobuf.SaveScreenshotRequest
                 * @interface IGhostBattleMetadata
                 * @property {number} tunePower GhostBattleMetadata tunePower
                 * @property {number} tuneHandling GhostBattleMetadata tuneHandling
                 * @property {number} area GhostBattleMetadata area
                 * @property {number} stampReturnCount GhostBattleMetadata stampReturnCount
                 * @property {Array.<wm.protobuf.SaveScreenshotRequest.IOpponentCar>|null} [opponents] GhostBattleMetadata opponents
                 */

                /**
                 * Constructs a new GhostBattleMetadata.
                 * @memberof wm.protobuf.SaveScreenshotRequest
                 * @classdesc Represents a GhostBattleMetadata.
                 * @implements IGhostBattleMetadata
                 * @constructor
                 * @param {wm.protobuf.SaveScreenshotRequest.IGhostBattleMetadata=} [properties] Properties to set
                 */
                function GhostBattleMetadata(properties) {
                    this.opponents = [];
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * GhostBattleMetadata tunePower.
                 * @member {number} tunePower
                 * @memberof wm.protobuf.SaveScreenshotRequest.GhostBattleMetadata
                 * @instance
                 */
                GhostBattleMetadata.prototype.tunePower = 0;

                /**
                 * GhostBattleMetadata tuneHandling.
                 * @member {number} tuneHandling
                 * @memberof wm.protobuf.SaveScreenshotRequest.GhostBattleMetadata
                 * @instance
                 */
                GhostBattleMetadata.prototype.tuneHandling = 0;

                /**
                 * GhostBattleMetadata area.
                 * @member {number} area
                 * @memberof wm.protobuf.SaveScreenshotRequest.GhostBattleMetadata
                 * @instance
                 */
                GhostBattleMetadata.prototype.area = 0;

                /**
                 * GhostBattleMetadata stampReturnCount.
                 * @member {number} stampReturnCount
                 * @memberof wm.protobuf.SaveScreenshotRequest.GhostBattleMetadata
                 * @instance
                 */
                GhostBattleMetadata.prototype.stampReturnCount = 0;

                /**
                 * GhostBattleMetadata opponents.
                 * @member {Array.<wm.protobuf.SaveScreenshotRequest.IOpponentCar>} opponents
                 * @memberof wm.protobuf.SaveScreenshotRequest.GhostBattleMetadata
                 * @instance
                 */
                GhostBattleMetadata.prototype.opponents = $util.emptyArray;

                /**
                 * Creates a new GhostBattleMetadata instance using the specified properties.
                 * @function create
                 * @memberof wm.protobuf.SaveScreenshotRequest.GhostBattleMetadata
                 * @static
                 * @param {wm.protobuf.SaveScreenshotRequest.IGhostBattleMetadata=} [properties] Properties to set
                 * @returns {wm.protobuf.SaveScreenshotRequest.GhostBattleMetadata} GhostBattleMetadata instance
                 */
                GhostBattleMetadata.create = function create(properties) {
                    return new GhostBattleMetadata(properties);
                };

                /**
                 * Encodes the specified GhostBattleMetadata message. Does not implicitly {@link wm.protobuf.SaveScreenshotRequest.GhostBattleMetadata.verify|verify} messages.
                 * @function encode
                 * @memberof wm.protobuf.SaveScreenshotRequest.GhostBattleMetadata
                 * @static
                 * @param {wm.protobuf.SaveScreenshotRequest.IGhostBattleMetadata} message GhostBattleMetadata message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                GhostBattleMetadata.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.tunePower);
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.tuneHandling);
                    writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.area);
                    writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.stampReturnCount);
                    if (message.opponents != null && message.opponents.length)
                        for (let i = 0; i < message.opponents.length; ++i)
                            $root.wm.protobuf.SaveScreenshotRequest.OpponentCar.encode(message.opponents[i], writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                    return writer;
                };

                /**
                 * Encodes the specified GhostBattleMetadata message, length delimited. Does not implicitly {@link wm.protobuf.SaveScreenshotRequest.GhostBattleMetadata.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof wm.protobuf.SaveScreenshotRequest.GhostBattleMetadata
                 * @static
                 * @param {wm.protobuf.SaveScreenshotRequest.IGhostBattleMetadata} message GhostBattleMetadata message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                GhostBattleMetadata.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a GhostBattleMetadata message from the specified reader or buffer.
                 * @function decode
                 * @memberof wm.protobuf.SaveScreenshotRequest.GhostBattleMetadata
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {wm.protobuf.SaveScreenshotRequest.GhostBattleMetadata} GhostBattleMetadata
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                GhostBattleMetadata.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.wm.protobuf.SaveScreenshotRequest.GhostBattleMetadata();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.tunePower = reader.uint32();
                                break;
                            }
                        case 2: {
                                message.tuneHandling = reader.uint32();
                                break;
                            }
                        case 3: {
                                message.area = reader.uint32();
                                break;
                            }
                        case 4: {
                                message.stampReturnCount = reader.uint32();
                                break;
                            }
                        case 6: {
                                if (!(message.opponents && message.opponents.length))
                                    message.opponents = [];
                                message.opponents.push($root.wm.protobuf.SaveScreenshotRequest.OpponentCar.decode(reader, reader.uint32()));
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    if (!message.hasOwnProperty("tunePower"))
                        throw $util.ProtocolError("missing required 'tunePower'", { instance: message });
                    if (!message.hasOwnProperty("tuneHandling"))
                        throw $util.ProtocolError("missing required 'tuneHandling'", { instance: message });
                    if (!message.hasOwnProperty("area"))
                        throw $util.ProtocolError("missing required 'area'", { instance: message });
                    if (!message.hasOwnProperty("stampReturnCount"))
                        throw $util.ProtocolError("missing required 'stampReturnCount'", { instance: message });
                    return message;
                };

                /**
                 * Decodes a GhostBattleMetadata message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof wm.protobuf.SaveScreenshotRequest.GhostBattleMetadata
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {wm.protobuf.SaveScreenshotRequest.GhostBattleMetadata} GhostBattleMetadata
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                GhostBattleMetadata.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a GhostBattleMetadata message.
                 * @function verify
                 * @memberof wm.protobuf.SaveScreenshotRequest.GhostBattleMetadata
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                GhostBattleMetadata.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (!$util.isInteger(message.tunePower))
                        return "tunePower: integer expected";
                    if (!$util.isInteger(message.tuneHandling))
                        return "tuneHandling: integer expected";
                    if (!$util.isInteger(message.area))
                        return "area: integer expected";
                    if (!$util.isInteger(message.stampReturnCount))
                        return "stampReturnCount: integer expected";
                    if (message.opponents != null && message.hasOwnProperty("opponents")) {
                        if (!Array.isArray(message.opponents))
                            return "opponents: array expected";
                        for (let i = 0; i < message.opponents.length; ++i) {
                            let error = $root.wm.protobuf.SaveScreenshotRequest.OpponentCar.verify(message.opponents[i]);
                            if (error)
                                return "opponents." + error;
                        }
                    }
                    return null;
                };

                /**
                 * Creates a GhostBattleMetadata message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof wm.protobuf.SaveScreenshotRequest.GhostBattleMetadata
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {wm.protobuf.SaveScreenshotRequest.GhostBattleMetadata} GhostBattleMetadata
                 */
                GhostBattleMetadata.fromObject = function fromObject(object) {
                    if (object instanceof $root.wm.protobuf.SaveScreenshotRequest.GhostBattleMetadata)
                        return object;
                    let message = new $root.wm.protobuf.SaveScreenshotRequest.GhostBattleMetadata();
                    if (object.tunePower != null)
                        message.tunePower = object.tunePower >>> 0;
                    if (object.tuneHandling != null)
                        message.tuneHandling = object.tuneHandling >>> 0;
                    if (object.area != null)
                        message.area = object.area >>> 0;
                    if (object.stampReturnCount != null)
                        message.stampReturnCount = object.stampReturnCount >>> 0;
                    if (object.opponents) {
                        if (!Array.isArray(object.opponents))
                            throw TypeError(".wm.protobuf.SaveScreenshotRequest.GhostBattleMetadata.opponents: array expected");
                        message.opponents = [];
                        for (let i = 0; i < object.opponents.length; ++i) {
                            if (typeof object.opponents[i] !== "object")
                                throw TypeError(".wm.protobuf.SaveScreenshotRequest.GhostBattleMetadata.opponents: object expected");
                            message.opponents[i] = $root.wm.protobuf.SaveScreenshotRequest.OpponentCar.fromObject(object.opponents[i]);
                        }
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a GhostBattleMetadata message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof wm.protobuf.SaveScreenshotRequest.GhostBattleMetadata
                 * @static
                 * @param {wm.protobuf.SaveScreenshotRequest.GhostBattleMetadata} message GhostBattleMetadata
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                GhostBattleMetadata.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.arrays || options.defaults)
                        object.opponents = [];
                    if (options.defaults) {
                        object.tunePower = 0;
                        object.tuneHandling = 0;
                        object.area = 0;
                        object.stampReturnCount = 0;
                    }
                    if (message.tunePower != null && message.hasOwnProperty("tunePower"))
                        object.tunePower = message.tunePower;
                    if (message.tuneHandling != null && message.hasOwnProperty("tuneHandling"))
                        object.tuneHandling = message.tuneHandling;
                    if (message.area != null && message.hasOwnProperty("area"))
                        object.area = message.area;
                    if (message.stampReturnCount != null && message.hasOwnProperty("stampReturnCount"))
                        object.stampReturnCount = message.stampReturnCount;
                    if (message.opponents && message.opponents.length) {
                        object.opponents = [];
                        for (let j = 0; j < message.opponents.length; ++j)
                            object.opponents[j] = $root.wm.protobuf.SaveScreenshotRequest.OpponentCar.toObject(message.opponents[j], options);
                    }
                    return object;
                };

                /**
                 * Converts this GhostBattleMetadata to JSON.
                 * @function toJSON
                 * @memberof wm.protobuf.SaveScreenshotRequest.GhostBattleMetadata
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                GhostBattleMetadata.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                /**
                 * Gets the default type url for GhostBattleMetadata
                 * @function getTypeUrl
                 * @memberof wm.protobuf.SaveScreenshotRequest.GhostBattleMetadata
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                GhostBattleMetadata.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/wm.protobuf.SaveScreenshotRequest.GhostBattleMetadata";
                };

                return GhostBattleMetadata;
            })();

            SaveScreenshotRequest.VersusBattleMetadata = (function() {

                /**
                 * Properties of a VersusBattleMetadata.
                 * @memberof wm.protobuf.SaveScreenshotRequest
                 * @interface IVersusBattleMetadata
                 * @property {number} tunePower VersusBattleMetadata tunePower
                 * @property {number} tuneHandling VersusBattleMetadata tuneHandling
                 * @property {number} area VersusBattleMetadata area
                 * @property {Array.<wm.protobuf.SaveScreenshotRequest.IOpponentCar>|null} [opponents] VersusBattleMetadata opponents
                 */

                /**
                 * Constructs a new VersusBattleMetadata.
                 * @memberof wm.protobuf.SaveScreenshotRequest
                 * @classdesc Represents a VersusBattleMetadata.
                 * @implements IVersusBattleMetadata
                 * @constructor
                 * @param {wm.protobuf.SaveScreenshotRequest.IVersusBattleMetadata=} [properties] Properties to set
                 */
                function VersusBattleMetadata(properties) {
                    this.opponents = [];
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * VersusBattleMetadata tunePower.
                 * @member {number} tunePower
                 * @memberof wm.protobuf.SaveScreenshotRequest.VersusBattleMetadata
                 * @instance
                 */
                VersusBattleMetadata.prototype.tunePower = 0;

                /**
                 * VersusBattleMetadata tuneHandling.
                 * @member {number} tuneHandling
                 * @memberof wm.protobuf.SaveScreenshotRequest.VersusBattleMetadata
                 * @instance
                 */
                VersusBattleMetadata.prototype.tuneHandling = 0;

                /**
                 * VersusBattleMetadata area.
                 * @member {number} area
                 * @memberof wm.protobuf.SaveScreenshotRequest.VersusBattleMetadata
                 * @instance
                 */
                VersusBattleMetadata.prototype.area = 0;

                /**
                 * VersusBattleMetadata opponents.
                 * @member {Array.<wm.protobuf.SaveScreenshotRequest.IOpponentCar>} opponents
                 * @memberof wm.protobuf.SaveScreenshotRequest.VersusBattleMetadata
                 * @instance
                 */
                VersusBattleMetadata.prototype.opponents = $util.emptyArray;

                /**
                 * Creates a new VersusBattleMetadata instance using the specified properties.
                 * @function create
                 * @memberof wm.protobuf.SaveScreenshotRequest.VersusBattleMetadata
                 * @static
                 * @param {wm.protobuf.SaveScreenshotRequest.IVersusBattleMetadata=} [properties] Properties to set
                 * @returns {wm.protobuf.SaveScreenshotRequest.VersusBattleMetadata} VersusBattleMetadata instance
                 */
                VersusBattleMetadata.create = function create(properties) {
                    return new VersusBattleMetadata(properties);
                };

                /**
                 * Encodes the specified VersusBattleMetadata message. Does not implicitly {@link wm.protobuf.SaveScreenshotRequest.VersusBattleMetadata.verify|verify} messages.
                 * @function encode
                 * @memberof wm.protobuf.SaveScreenshotRequest.VersusBattleMetadata
                 * @static
                 * @param {wm.protobuf.SaveScreenshotRequest.IVersusBattleMetadata} message VersusBattleMetadata message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                VersusBattleMetadata.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.tunePower);
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.tuneHandling);
                    writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.area);
                    if (message.opponents != null && message.opponents.length)
                        for (let i = 0; i < message.opponents.length; ++i)
                            $root.wm.protobuf.SaveScreenshotRequest.OpponentCar.encode(message.opponents[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                    return writer;
                };

                /**
                 * Encodes the specified VersusBattleMetadata message, length delimited. Does not implicitly {@link wm.protobuf.SaveScreenshotRequest.VersusBattleMetadata.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof wm.protobuf.SaveScreenshotRequest.VersusBattleMetadata
                 * @static
                 * @param {wm.protobuf.SaveScreenshotRequest.IVersusBattleMetadata} message VersusBattleMetadata message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                VersusBattleMetadata.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a VersusBattleMetadata message from the specified reader or buffer.
                 * @function decode
                 * @memberof wm.protobuf.SaveScreenshotRequest.VersusBattleMetadata
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {wm.protobuf.SaveScreenshotRequest.VersusBattleMetadata} VersusBattleMetadata
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                VersusBattleMetadata.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.wm.protobuf.SaveScreenshotRequest.VersusBattleMetadata();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.tunePower = reader.uint32();
                                break;
                            }
                        case 2: {
                                message.tuneHandling = reader.uint32();
                                break;
                            }
                        case 3: {
                                message.area = reader.uint32();
                                break;
                            }
                        case 4: {
                                if (!(message.opponents && message.opponents.length))
                                    message.opponents = [];
                                message.opponents.push($root.wm.protobuf.SaveScreenshotRequest.OpponentCar.decode(reader, reader.uint32()));
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    if (!message.hasOwnProperty("tunePower"))
                        throw $util.ProtocolError("missing required 'tunePower'", { instance: message });
                    if (!message.hasOwnProperty("tuneHandling"))
                        throw $util.ProtocolError("missing required 'tuneHandling'", { instance: message });
                    if (!message.hasOwnProperty("area"))
                        throw $util.ProtocolError("missing required 'area'", { instance: message });
                    return message;
                };

                /**
                 * Decodes a VersusBattleMetadata message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof wm.protobuf.SaveScreenshotRequest.VersusBattleMetadata
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {wm.protobuf.SaveScreenshotRequest.VersusBattleMetadata} VersusBattleMetadata
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                VersusBattleMetadata.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a VersusBattleMetadata message.
                 * @function verify
                 * @memberof wm.protobuf.SaveScreenshotRequest.VersusBattleMetadata
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                VersusBattleMetadata.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (!$util.isInteger(message.tunePower))
                        return "tunePower: integer expected";
                    if (!$util.isInteger(message.tuneHandling))
                        return "tuneHandling: integer expected";
                    if (!$util.isInteger(message.area))
                        return "area: integer expected";
                    if (message.opponents != null && message.hasOwnProperty("opponents")) {
                        if (!Array.isArray(message.opponents))
                            return "opponents: array expected";
                        for (let i = 0; i < message.opponents.length; ++i) {
                            let error = $root.wm.protobuf.SaveScreenshotRequest.OpponentCar.verify(message.opponents[i]);
                            if (error)
                                return "opponents." + error;
                        }
                    }
                    return null;
                };

                /**
                 * Creates a VersusBattleMetadata message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof wm.protobuf.SaveScreenshotRequest.VersusBattleMetadata
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {wm.protobuf.SaveScreenshotRequest.VersusBattleMetadata} VersusBattleMetadata
                 */
                VersusBattleMetadata.fromObject = function fromObject(object) {
                    if (object instanceof $root.wm.protobuf.SaveScreenshotRequest.VersusBattleMetadata)
                        return object;
                    let message = new $root.wm.protobuf.SaveScreenshotRequest.VersusBattleMetadata();
                    if (object.tunePower != null)
                        message.tunePower = object.tunePower >>> 0;
                    if (object.tuneHandling != null)
                        message.tuneHandling = object.tuneHandling >>> 0;
                    if (object.area != null)
                        message.area = object.area >>> 0;
                    if (object.opponents) {
                        if (!Array.isArray(object.opponents))
                            throw TypeError(".wm.protobuf.SaveScreenshotRequest.VersusBattleMetadata.opponents: array expected");
                        message.opponents = [];
                        for (let i = 0; i < object.opponents.length; ++i) {
                            if (typeof object.opponents[i] !== "object")
                                throw TypeError(".wm.protobuf.SaveScreenshotRequest.VersusBattleMetadata.opponents: object expected");
                            message.opponents[i] = $root.wm.protobuf.SaveScreenshotRequest.OpponentCar.fromObject(object.opponents[i]);
                        }
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a VersusBattleMetadata message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof wm.protobuf.SaveScreenshotRequest.VersusBattleMetadata
                 * @static
                 * @param {wm.protobuf.SaveScreenshotRequest.VersusBattleMetadata} message VersusBattleMetadata
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                VersusBattleMetadata.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.arrays || options.defaults)
                        object.opponents = [];
                    if (options.defaults) {
                        object.tunePower = 0;
                        object.tuneHandling = 0;
                        object.area = 0;
                    }
                    if (message.tunePower != null && message.hasOwnProperty("tunePower"))
                        object.tunePower = message.tunePower;
                    if (message.tuneHandling != null && message.hasOwnProperty("tuneHandling"))
                        object.tuneHandling = message.tuneHandling;
                    if (message.area != null && message.hasOwnProperty("area"))
                        object.area = message.area;
                    if (message.opponents && message.opponents.length) {
                        object.opponents = [];
                        for (let j = 0; j < message.opponents.length; ++j)
                            object.opponents[j] = $root.wm.protobuf.SaveScreenshotRequest.OpponentCar.toObject(message.opponents[j], options);
                    }
                    return object;
                };

                /**
                 * Converts this VersusBattleMetadata to JSON.
                 * @function toJSON
                 * @memberof wm.protobuf.SaveScreenshotRequest.VersusBattleMetadata
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                VersusBattleMetadata.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                /**
                 * Gets the default type url for VersusBattleMetadata
                 * @function getTypeUrl
                 * @memberof wm.protobuf.SaveScreenshotRequest.VersusBattleMetadata
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                VersusBattleMetadata.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/wm.protobuf.SaveScreenshotRequest.VersusBattleMetadata";
                };

                return VersusBattleMetadata;
            })();

            SaveScreenshotRequest.TerminalMetadata = (function() {

                /**
                 * Properties of a TerminalMetadata.
                 * @memberof wm.protobuf.SaveScreenshotRequest
                 * @interface ITerminalMetadata
                 * @property {number} tunePower TerminalMetadata tunePower
                 * @property {number} tuneHandling TerminalMetadata tuneHandling
                 * @property {string} name TerminalMetadata name
                 * @property {string} title TerminalMetadata title
                 * @property {number} level TerminalMetadata level
                 */

                /**
                 * Constructs a new TerminalMetadata.
                 * @memberof wm.protobuf.SaveScreenshotRequest
                 * @classdesc Represents a TerminalMetadata.
                 * @implements ITerminalMetadata
                 * @constructor
                 * @param {wm.protobuf.SaveScreenshotRequest.ITerminalMetadata=} [properties] Properties to set
                 */
                function TerminalMetadata(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * TerminalMetadata tunePower.
                 * @member {number} tunePower
                 * @memberof wm.protobuf.SaveScreenshotRequest.TerminalMetadata
                 * @instance
                 */
                TerminalMetadata.prototype.tunePower = 0;

                /**
                 * TerminalMetadata tuneHandling.
                 * @member {number} tuneHandling
                 * @memberof wm.protobuf.SaveScreenshotRequest.TerminalMetadata
                 * @instance
                 */
                TerminalMetadata.prototype.tuneHandling = 0;

                /**
                 * TerminalMetadata name.
                 * @member {string} name
                 * @memberof wm.protobuf.SaveScreenshotRequest.TerminalMetadata
                 * @instance
                 */
                TerminalMetadata.prototype.name = "";

                /**
                 * TerminalMetadata title.
                 * @member {string} title
                 * @memberof wm.protobuf.SaveScreenshotRequest.TerminalMetadata
                 * @instance
                 */
                TerminalMetadata.prototype.title = "";

                /**
                 * TerminalMetadata level.
                 * @member {number} level
                 * @memberof wm.protobuf.SaveScreenshotRequest.TerminalMetadata
                 * @instance
                 */
                TerminalMetadata.prototype.level = 0;

                /**
                 * Creates a new TerminalMetadata instance using the specified properties.
                 * @function create
                 * @memberof wm.protobuf.SaveScreenshotRequest.TerminalMetadata
                 * @static
                 * @param {wm.protobuf.SaveScreenshotRequest.ITerminalMetadata=} [properties] Properties to set
                 * @returns {wm.protobuf.SaveScreenshotRequest.TerminalMetadata} TerminalMetadata instance
                 */
                TerminalMetadata.create = function create(properties) {
                    return new TerminalMetadata(properties);
                };

                /**
                 * Encodes the specified TerminalMetadata message. Does not implicitly {@link wm.protobuf.SaveScreenshotRequest.TerminalMetadata.verify|verify} messages.
                 * @function encode
                 * @memberof wm.protobuf.SaveScreenshotRequest.TerminalMetadata
                 * @static
                 * @param {wm.protobuf.SaveScreenshotRequest.ITerminalMetadata} message TerminalMetadata message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                TerminalMetadata.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.tunePower);
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.tuneHandling);
                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.name);
                    writer.uint32(/* id 4, wireType 2 =*/34).string(message.title);
                    writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.level);
                    return writer;
                };

                /**
                 * Encodes the specified TerminalMetadata message, length delimited. Does not implicitly {@link wm.protobuf.SaveScreenshotRequest.TerminalMetadata.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof wm.protobuf.SaveScreenshotRequest.TerminalMetadata
                 * @static
                 * @param {wm.protobuf.SaveScreenshotRequest.ITerminalMetadata} message TerminalMetadata message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                TerminalMetadata.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a TerminalMetadata message from the specified reader or buffer.
                 * @function decode
                 * @memberof wm.protobuf.SaveScreenshotRequest.TerminalMetadata
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {wm.protobuf.SaveScreenshotRequest.TerminalMetadata} TerminalMetadata
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                TerminalMetadata.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.wm.protobuf.SaveScreenshotRequest.TerminalMetadata();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.tunePower = reader.uint32();
                                break;
                            }
                        case 2: {
                                message.tuneHandling = reader.uint32();
                                break;
                            }
                        case 3: {
                                message.name = reader.string();
                                break;
                            }
                        case 4: {
                                message.title = reader.string();
                                break;
                            }
                        case 5: {
                                message.level = reader.uint32();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    if (!message.hasOwnProperty("tunePower"))
                        throw $util.ProtocolError("missing required 'tunePower'", { instance: message });
                    if (!message.hasOwnProperty("tuneHandling"))
                        throw $util.ProtocolError("missing required 'tuneHandling'", { instance: message });
                    if (!message.hasOwnProperty("name"))
                        throw $util.ProtocolError("missing required 'name'", { instance: message });
                    if (!message.hasOwnProperty("title"))
                        throw $util.ProtocolError("missing required 'title'", { instance: message });
                    if (!message.hasOwnProperty("level"))
                        throw $util.ProtocolError("missing required 'level'", { instance: message });
                    return message;
                };

                /**
                 * Decodes a TerminalMetadata message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof wm.protobuf.SaveScreenshotRequest.TerminalMetadata
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {wm.protobuf.SaveScreenshotRequest.TerminalMetadata} TerminalMetadata
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                TerminalMetadata.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a TerminalMetadata message.
                 * @function verify
                 * @memberof wm.protobuf.SaveScreenshotRequest.TerminalMetadata
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                TerminalMetadata.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (!$util.isInteger(message.tunePower))
                        return "tunePower: integer expected";
                    if (!$util.isInteger(message.tuneHandling))
                        return "tuneHandling: integer expected";
                    if (!$util.isString(message.name))
                        return "name: string expected";
                    if (!$util.isString(message.title))
                        return "title: string expected";
                    if (!$util.isInteger(message.level))
                        return "level: integer expected";
                    return null;
                };

                /**
                 * Creates a TerminalMetadata message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof wm.protobuf.SaveScreenshotRequest.TerminalMetadata
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {wm.protobuf.SaveScreenshotRequest.TerminalMetadata} TerminalMetadata
                 */
                TerminalMetadata.fromObject = function fromObject(object) {
                    if (object instanceof $root.wm.protobuf.SaveScreenshotRequest.TerminalMetadata)
                        return object;
                    let message = new $root.wm.protobuf.SaveScreenshotRequest.TerminalMetadata();
                    if (object.tunePower != null)
                        message.tunePower = object.tunePower >>> 0;
                    if (object.tuneHandling != null)
                        message.tuneHandling = object.tuneHandling >>> 0;
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.title != null)
                        message.title = String(object.title);
                    if (object.level != null)
                        message.level = object.level >>> 0;
                    return message;
                };

                /**
                 * Creates a plain object from a TerminalMetadata message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof wm.protobuf.SaveScreenshotRequest.TerminalMetadata
                 * @static
                 * @param {wm.protobuf.SaveScreenshotRequest.TerminalMetadata} message TerminalMetadata
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                TerminalMetadata.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        object.tunePower = 0;
                        object.tuneHandling = 0;
                        object.name = "";
                        object.title = "";
                        object.level = 0;
                    }
                    if (message.tunePower != null && message.hasOwnProperty("tunePower"))
                        object.tunePower = message.tunePower;
                    if (message.tuneHandling != null && message.hasOwnProperty("tuneHandling"))
                        object.tuneHandling = message.tuneHandling;
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message.title != null && message.hasOwnProperty("title"))
                        object.title = message.title;
                    if (message.level != null && message.hasOwnProperty("level"))
                        object.level = message.level;
                    return object;
                };

                /**
                 * Converts this TerminalMetadata to JSON.
                 * @function toJSON
                 * @memberof wm.protobuf.SaveScreenshotRequest.TerminalMetadata
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                TerminalMetadata.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                /**
                 * Gets the default type url for TerminalMetadata
                 * @function getTypeUrl
                 * @memberof wm.protobuf.SaveScreenshotRequest.TerminalMetadata
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                TerminalMetadata.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/wm.protobuf.SaveScreenshotRequest.TerminalMetadata";
                };

                return TerminalMetadata;
            })();

            SaveScreenshotRequest.AcquiringVersusStarMetadata = (function() {

                /**
                 * Properties of an AcquiringVersusStarMetadata.
                 * @memberof wm.protobuf.SaveScreenshotRequest
                 * @interface IAcquiringVersusStarMetadata
                 * @property {number} tunePower AcquiringVersusStarMetadata tunePower
                 * @property {number} tuneHandling AcquiringVersusStarMetadata tuneHandling
                 * @property {number} vsStarCount AcquiringVersusStarMetadata vsStarCount
                 */

                /**
                 * Constructs a new AcquiringVersusStarMetadata.
                 * @memberof wm.protobuf.SaveScreenshotRequest
                 * @classdesc Represents an AcquiringVersusStarMetadata.
                 * @implements IAcquiringVersusStarMetadata
                 * @constructor
                 * @param {wm.protobuf.SaveScreenshotRequest.IAcquiringVersusStarMetadata=} [properties] Properties to set
                 */
                function AcquiringVersusStarMetadata(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * AcquiringVersusStarMetadata tunePower.
                 * @member {number} tunePower
                 * @memberof wm.protobuf.SaveScreenshotRequest.AcquiringVersusStarMetadata
                 * @instance
                 */
                AcquiringVersusStarMetadata.prototype.tunePower = 0;

                /**
                 * AcquiringVersusStarMetadata tuneHandling.
                 * @member {number} tuneHandling
                 * @memberof wm.protobuf.SaveScreenshotRequest.AcquiringVersusStarMetadata
                 * @instance
                 */
                AcquiringVersusStarMetadata.prototype.tuneHandling = 0;

                /**
                 * AcquiringVersusStarMetadata vsStarCount.
                 * @member {number} vsStarCount
                 * @memberof wm.protobuf.SaveScreenshotRequest.AcquiringVersusStarMetadata
                 * @instance
                 */
                AcquiringVersusStarMetadata.prototype.vsStarCount = 0;

                /**
                 * Creates a new AcquiringVersusStarMetadata instance using the specified properties.
                 * @function create
                 * @memberof wm.protobuf.SaveScreenshotRequest.AcquiringVersusStarMetadata
                 * @static
                 * @param {wm.protobuf.SaveScreenshotRequest.IAcquiringVersusStarMetadata=} [properties] Properties to set
                 * @returns {wm.protobuf.SaveScreenshotRequest.AcquiringVersusStarMetadata} AcquiringVersusStarMetadata instance
                 */
                AcquiringVersusStarMetadata.create = function create(properties) {
                    return new AcquiringVersusStarMetadata(properties);
                };

                /**
                 * Encodes the specified AcquiringVersusStarMetadata message. Does not implicitly {@link wm.protobuf.SaveScreenshotRequest.AcquiringVersusStarMetadata.verify|verify} messages.
                 * @function encode
                 * @memberof wm.protobuf.SaveScreenshotRequest.AcquiringVersusStarMetadata
                 * @static
                 * @param {wm.protobuf.SaveScreenshotRequest.IAcquiringVersusStarMetadata} message AcquiringVersusStarMetadata message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                AcquiringVersusStarMetadata.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.tunePower);
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.tuneHandling);
                    writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.vsStarCount);
                    return writer;
                };

                /**
                 * Encodes the specified AcquiringVersusStarMetadata message, length delimited. Does not implicitly {@link wm.protobuf.SaveScreenshotRequest.AcquiringVersusStarMetadata.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof wm.protobuf.SaveScreenshotRequest.AcquiringVersusStarMetadata
                 * @static
                 * @param {wm.protobuf.SaveScreenshotRequest.IAcquiringVersusStarMetadata} message AcquiringVersusStarMetadata message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                AcquiringVersusStarMetadata.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes an AcquiringVersusStarMetadata message from the specified reader or buffer.
                 * @function decode
                 * @memberof wm.protobuf.SaveScreenshotRequest.AcquiringVersusStarMetadata
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {wm.protobuf.SaveScreenshotRequest.AcquiringVersusStarMetadata} AcquiringVersusStarMetadata
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                AcquiringVersusStarMetadata.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.wm.protobuf.SaveScreenshotRequest.AcquiringVersusStarMetadata();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.tunePower = reader.uint32();
                                break;
                            }
                        case 2: {
                                message.tuneHandling = reader.uint32();
                                break;
                            }
                        case 3: {
                                message.vsStarCount = reader.uint32();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    if (!message.hasOwnProperty("tunePower"))
                        throw $util.ProtocolError("missing required 'tunePower'", { instance: message });
                    if (!message.hasOwnProperty("tuneHandling"))
                        throw $util.ProtocolError("missing required 'tuneHandling'", { instance: message });
                    if (!message.hasOwnProperty("vsStarCount"))
                        throw $util.ProtocolError("missing required 'vsStarCount'", { instance: message });
                    return message;
                };

                /**
                 * Decodes an AcquiringVersusStarMetadata message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof wm.protobuf.SaveScreenshotRequest.AcquiringVersusStarMetadata
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {wm.protobuf.SaveScreenshotRequest.AcquiringVersusStarMetadata} AcquiringVersusStarMetadata
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                AcquiringVersusStarMetadata.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies an AcquiringVersusStarMetadata message.
                 * @function verify
                 * @memberof wm.protobuf.SaveScreenshotRequest.AcquiringVersusStarMetadata
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                AcquiringVersusStarMetadata.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (!$util.isInteger(message.tunePower))
                        return "tunePower: integer expected";
                    if (!$util.isInteger(message.tuneHandling))
                        return "tuneHandling: integer expected";
                    if (!$util.isInteger(message.vsStarCount))
                        return "vsStarCount: integer expected";
                    return null;
                };

                /**
                 * Creates an AcquiringVersusStarMetadata message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof wm.protobuf.SaveScreenshotRequest.AcquiringVersusStarMetadata
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {wm.protobuf.SaveScreenshotRequest.AcquiringVersusStarMetadata} AcquiringVersusStarMetadata
                 */
                AcquiringVersusStarMetadata.fromObject = function fromObject(object) {
                    if (object instanceof $root.wm.protobuf.SaveScreenshotRequest.AcquiringVersusStarMetadata)
                        return object;
                    let message = new $root.wm.protobuf.SaveScreenshotRequest.AcquiringVersusStarMetadata();
                    if (object.tunePower != null)
                        message.tunePower = object.tunePower >>> 0;
                    if (object.tuneHandling != null)
                        message.tuneHandling = object.tuneHandling >>> 0;
                    if (object.vsStarCount != null)
                        message.vsStarCount = object.vsStarCount >>> 0;
                    return message;
                };

                /**
                 * Creates a plain object from an AcquiringVersusStarMetadata message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof wm.protobuf.SaveScreenshotRequest.AcquiringVersusStarMetadata
                 * @static
                 * @param {wm.protobuf.SaveScreenshotRequest.AcquiringVersusStarMetadata} message AcquiringVersusStarMetadata
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                AcquiringVersusStarMetadata.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        object.tunePower = 0;
                        object.tuneHandling = 0;
                        object.vsStarCount = 0;
                    }
                    if (message.tunePower != null && message.hasOwnProperty("tunePower"))
                        object.tunePower = message.tunePower;
                    if (message.tuneHandling != null && message.hasOwnProperty("tuneHandling"))
                        object.tuneHandling = message.tuneHandling;
                    if (message.vsStarCount != null && message.hasOwnProperty("vsStarCount"))
                        object.vsStarCount = message.vsStarCount;
                    return object;
                };

                /**
                 * Converts this AcquiringVersusStarMetadata to JSON.
                 * @function toJSON
                 * @memberof wm.protobuf.SaveScreenshotRequest.AcquiringVersusStarMetadata
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                AcquiringVersusStarMetadata.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                /**
                 * Gets the default type url for AcquiringVersusStarMetadata
                 * @function getTypeUrl
                 * @memberof wm.protobuf.SaveScreenshotRequest.AcquiringVersusStarMetadata
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                AcquiringVersusStarMetadata.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/wm.protobuf.SaveScreenshotRequest.AcquiringVersusStarMetadata";
                };

                return AcquiringVersusStarMetadata;
            })();

            SaveScreenshotRequest.AcquiringAuraMotifMetadata = (function() {

                /**
                 * Properties of an AcquiringAuraMotifMetadata.
                 * @memberof wm.protobuf.SaveScreenshotRequest
                 * @interface IAcquiringAuraMotifMetadata
                 * @property {number} tunePower AcquiringAuraMotifMetadata tunePower
                 * @property {number} tuneHandling AcquiringAuraMotifMetadata tuneHandling
                 * @property {number} auraMotif AcquiringAuraMotifMetadata auraMotif
                 */

                /**
                 * Constructs a new AcquiringAuraMotifMetadata.
                 * @memberof wm.protobuf.SaveScreenshotRequest
                 * @classdesc Represents an AcquiringAuraMotifMetadata.
                 * @implements IAcquiringAuraMotifMetadata
                 * @constructor
                 * @param {wm.protobuf.SaveScreenshotRequest.IAcquiringAuraMotifMetadata=} [properties] Properties to set
                 */
                function AcquiringAuraMotifMetadata(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * AcquiringAuraMotifMetadata tunePower.
                 * @member {number} tunePower
                 * @memberof wm.protobuf.SaveScreenshotRequest.AcquiringAuraMotifMetadata
                 * @instance
                 */
                AcquiringAuraMotifMetadata.prototype.tunePower = 0;

                /**
                 * AcquiringAuraMotifMetadata tuneHandling.
                 * @member {number} tuneHandling
                 * @memberof wm.protobuf.SaveScreenshotRequest.AcquiringAuraMotifMetadata
                 * @instance
                 */
                AcquiringAuraMotifMetadata.prototype.tuneHandling = 0;

                /**
                 * AcquiringAuraMotifMetadata auraMotif.
                 * @member {number} auraMotif
                 * @memberof wm.protobuf.SaveScreenshotRequest.AcquiringAuraMotifMetadata
                 * @instance
                 */
                AcquiringAuraMotifMetadata.prototype.auraMotif = 0;

                /**
                 * Creates a new AcquiringAuraMotifMetadata instance using the specified properties.
                 * @function create
                 * @memberof wm.protobuf.SaveScreenshotRequest.AcquiringAuraMotifMetadata
                 * @static
                 * @param {wm.protobuf.SaveScreenshotRequest.IAcquiringAuraMotifMetadata=} [properties] Properties to set
                 * @returns {wm.protobuf.SaveScreenshotRequest.AcquiringAuraMotifMetadata} AcquiringAuraMotifMetadata instance
                 */
                AcquiringAuraMotifMetadata.create = function create(properties) {
                    return new AcquiringAuraMotifMetadata(properties);
                };

                /**
                 * Encodes the specified AcquiringAuraMotifMetadata message. Does not implicitly {@link wm.protobuf.SaveScreenshotRequest.AcquiringAuraMotifMetadata.verify|verify} messages.
                 * @function encode
                 * @memberof wm.protobuf.SaveScreenshotRequest.AcquiringAuraMotifMetadata
                 * @static
                 * @param {wm.protobuf.SaveScreenshotRequest.IAcquiringAuraMotifMetadata} message AcquiringAuraMotifMetadata message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                AcquiringAuraMotifMetadata.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.tunePower);
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.tuneHandling);
                    writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.auraMotif);
                    return writer;
                };

                /**
                 * Encodes the specified AcquiringAuraMotifMetadata message, length delimited. Does not implicitly {@link wm.protobuf.SaveScreenshotRequest.AcquiringAuraMotifMetadata.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof wm.protobuf.SaveScreenshotRequest.AcquiringAuraMotifMetadata
                 * @static
                 * @param {wm.protobuf.SaveScreenshotRequest.IAcquiringAuraMotifMetadata} message AcquiringAuraMotifMetadata message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                AcquiringAuraMotifMetadata.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes an AcquiringAuraMotifMetadata message from the specified reader or buffer.
                 * @function decode
                 * @memberof wm.protobuf.SaveScreenshotRequest.AcquiringAuraMotifMetadata
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {wm.protobuf.SaveScreenshotRequest.AcquiringAuraMotifMetadata} AcquiringAuraMotifMetadata
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                AcquiringAuraMotifMetadata.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.wm.protobuf.SaveScreenshotRequest.AcquiringAuraMotifMetadata();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.tunePower = reader.uint32();
                                break;
                            }
                        case 2: {
                                message.tuneHandling = reader.uint32();
                                break;
                            }
                        case 3: {
                                message.auraMotif = reader.uint32();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    if (!message.hasOwnProperty("tunePower"))
                        throw $util.ProtocolError("missing required 'tunePower'", { instance: message });
                    if (!message.hasOwnProperty("tuneHandling"))
                        throw $util.ProtocolError("missing required 'tuneHandling'", { instance: message });
                    if (!message.hasOwnProperty("auraMotif"))
                        throw $util.ProtocolError("missing required 'auraMotif'", { instance: message });
                    return message;
                };

                /**
                 * Decodes an AcquiringAuraMotifMetadata message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof wm.protobuf.SaveScreenshotRequest.AcquiringAuraMotifMetadata
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {wm.protobuf.SaveScreenshotRequest.AcquiringAuraMotifMetadata} AcquiringAuraMotifMetadata
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                AcquiringAuraMotifMetadata.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies an AcquiringAuraMotifMetadata message.
                 * @function verify
                 * @memberof wm.protobuf.SaveScreenshotRequest.AcquiringAuraMotifMetadata
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                AcquiringAuraMotifMetadata.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (!$util.isInteger(message.tunePower))
                        return "tunePower: integer expected";
                    if (!$util.isInteger(message.tuneHandling))
                        return "tuneHandling: integer expected";
                    if (!$util.isInteger(message.auraMotif))
                        return "auraMotif: integer expected";
                    return null;
                };

                /**
                 * Creates an AcquiringAuraMotifMetadata message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof wm.protobuf.SaveScreenshotRequest.AcquiringAuraMotifMetadata
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {wm.protobuf.SaveScreenshotRequest.AcquiringAuraMotifMetadata} AcquiringAuraMotifMetadata
                 */
                AcquiringAuraMotifMetadata.fromObject = function fromObject(object) {
                    if (object instanceof $root.wm.protobuf.SaveScreenshotRequest.AcquiringAuraMotifMetadata)
                        return object;
                    let message = new $root.wm.protobuf.SaveScreenshotRequest.AcquiringAuraMotifMetadata();
                    if (object.tunePower != null)
                        message.tunePower = object.tunePower >>> 0;
                    if (object.tuneHandling != null)
                        message.tuneHandling = object.tuneHandling >>> 0;
                    if (object.auraMotif != null)
                        message.auraMotif = object.auraMotif >>> 0;
                    return message;
                };

                /**
                 * Creates a plain object from an AcquiringAuraMotifMetadata message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof wm.protobuf.SaveScreenshotRequest.AcquiringAuraMotifMetadata
                 * @static
                 * @param {wm.protobuf.SaveScreenshotRequest.AcquiringAuraMotifMetadata} message AcquiringAuraMotifMetadata
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                AcquiringAuraMotifMetadata.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        object.tunePower = 0;
                        object.tuneHandling = 0;
                        object.auraMotif = 0;
                    }
                    if (message.tunePower != null && message.hasOwnProperty("tunePower"))
                        object.tunePower = message.tunePower;
                    if (message.tuneHandling != null && message.hasOwnProperty("tuneHandling"))
                        object.tuneHandling = message.tuneHandling;
                    if (message.auraMotif != null && message.hasOwnProperty("auraMotif"))
                        object.auraMotif = message.auraMotif;
                    return object;
                };

                /**
                 * Converts this AcquiringAuraMotifMetadata to JSON.
                 * @function toJSON
                 * @memberof wm.protobuf.SaveScreenshotRequest.AcquiringAuraMotifMetadata
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                AcquiringAuraMotifMetadata.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                /**
                 * Gets the default type url for AcquiringAuraMotifMetadata
                 * @function getTypeUrl
                 * @memberof wm.protobuf.SaveScreenshotRequest.AcquiringAuraMotifMetadata
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                AcquiringAuraMotifMetadata.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/wm.protobuf.SaveScreenshotRequest.AcquiringAuraMotifMetadata";
                };

                return AcquiringAuraMotifMetadata;
            })();

            SaveScreenshotRequest.GhostTrophyMetadata = (function() {

                /**
                 * Properties of a GhostTrophyMetadata.
                 * @memberof wm.protobuf.SaveScreenshotRequest
                 * @interface IGhostTrophyMetadata
                 * @property {number} tunePower GhostTrophyMetadata tunePower
                 * @property {number} tuneHandling GhostTrophyMetadata tuneHandling
                 * @property {number} rgScore GhostTrophyMetadata rgScore
                 */

                /**
                 * Constructs a new GhostTrophyMetadata.
                 * @memberof wm.protobuf.SaveScreenshotRequest
                 * @classdesc Represents a GhostTrophyMetadata.
                 * @implements IGhostTrophyMetadata
                 * @constructor
                 * @param {wm.protobuf.SaveScreenshotRequest.IGhostTrophyMetadata=} [properties] Properties to set
                 */
                function GhostTrophyMetadata(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * GhostTrophyMetadata tunePower.
                 * @member {number} tunePower
                 * @memberof wm.protobuf.SaveScreenshotRequest.GhostTrophyMetadata
                 * @instance
                 */
                GhostTrophyMetadata.prototype.tunePower = 0;

                /**
                 * GhostTrophyMetadata tuneHandling.
                 * @member {number} tuneHandling
                 * @memberof wm.protobuf.SaveScreenshotRequest.GhostTrophyMetadata
                 * @instance
                 */
                GhostTrophyMetadata.prototype.tuneHandling = 0;

                /**
                 * GhostTrophyMetadata rgScore.
                 * @member {number} rgScore
                 * @memberof wm.protobuf.SaveScreenshotRequest.GhostTrophyMetadata
                 * @instance
                 */
                GhostTrophyMetadata.prototype.rgScore = 0;

                /**
                 * Creates a new GhostTrophyMetadata instance using the specified properties.
                 * @function create
                 * @memberof wm.protobuf.SaveScreenshotRequest.GhostTrophyMetadata
                 * @static
                 * @param {wm.protobuf.SaveScreenshotRequest.IGhostTrophyMetadata=} [properties] Properties to set
                 * @returns {wm.protobuf.SaveScreenshotRequest.GhostTrophyMetadata} GhostTrophyMetadata instance
                 */
                GhostTrophyMetadata.create = function create(properties) {
                    return new GhostTrophyMetadata(properties);
                };

                /**
                 * Encodes the specified GhostTrophyMetadata message. Does not implicitly {@link wm.protobuf.SaveScreenshotRequest.GhostTrophyMetadata.verify|verify} messages.
                 * @function encode
                 * @memberof wm.protobuf.SaveScreenshotRequest.GhostTrophyMetadata
                 * @static
                 * @param {wm.protobuf.SaveScreenshotRequest.IGhostTrophyMetadata} message GhostTrophyMetadata message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                GhostTrophyMetadata.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.tunePower);
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.tuneHandling);
                    writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.rgScore);
                    return writer;
                };

                /**
                 * Encodes the specified GhostTrophyMetadata message, length delimited. Does not implicitly {@link wm.protobuf.SaveScreenshotRequest.GhostTrophyMetadata.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof wm.protobuf.SaveScreenshotRequest.GhostTrophyMetadata
                 * @static
                 * @param {wm.protobuf.SaveScreenshotRequest.IGhostTrophyMetadata} message GhostTrophyMetadata message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                GhostTrophyMetadata.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a GhostTrophyMetadata message from the specified reader or buffer.
                 * @function decode
                 * @memberof wm.protobuf.SaveScreenshotRequest.GhostTrophyMetadata
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {wm.protobuf.SaveScreenshotRequest.GhostTrophyMetadata} GhostTrophyMetadata
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                GhostTrophyMetadata.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.wm.protobuf.SaveScreenshotRequest.GhostTrophyMetadata();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.tunePower = reader.uint32();
                                break;
                            }
                        case 2: {
                                message.tuneHandling = reader.uint32();
                                break;
                            }
                        case 3: {
                                message.rgScore = reader.uint32();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    if (!message.hasOwnProperty("tunePower"))
                        throw $util.ProtocolError("missing required 'tunePower'", { instance: message });
                    if (!message.hasOwnProperty("tuneHandling"))
                        throw $util.ProtocolError("missing required 'tuneHandling'", { instance: message });
                    if (!message.hasOwnProperty("rgScore"))
                        throw $util.ProtocolError("missing required 'rgScore'", { instance: message });
                    return message;
                };

                /**
                 * Decodes a GhostTrophyMetadata message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof wm.protobuf.SaveScreenshotRequest.GhostTrophyMetadata
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {wm.protobuf.SaveScreenshotRequest.GhostTrophyMetadata} GhostTrophyMetadata
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                GhostTrophyMetadata.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a GhostTrophyMetadata message.
                 * @function verify
                 * @memberof wm.protobuf.SaveScreenshotRequest.GhostTrophyMetadata
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                GhostTrophyMetadata.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (!$util.isInteger(message.tunePower))
                        return "tunePower: integer expected";
                    if (!$util.isInteger(message.tuneHandling))
                        return "tuneHandling: integer expected";
                    if (!$util.isInteger(message.rgScore))
                        return "rgScore: integer expected";
                    return null;
                };

                /**
                 * Creates a GhostTrophyMetadata message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof wm.protobuf.SaveScreenshotRequest.GhostTrophyMetadata
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {wm.protobuf.SaveScreenshotRequest.GhostTrophyMetadata} GhostTrophyMetadata
                 */
                GhostTrophyMetadata.fromObject = function fromObject(object) {
                    if (object instanceof $root.wm.protobuf.SaveScreenshotRequest.GhostTrophyMetadata)
                        return object;
                    let message = new $root.wm.protobuf.SaveScreenshotRequest.GhostTrophyMetadata();
                    if (object.tunePower != null)
                        message.tunePower = object.tunePower >>> 0;
                    if (object.tuneHandling != null)
                        message.tuneHandling = object.tuneHandling >>> 0;
                    if (object.rgScore != null)
                        message.rgScore = object.rgScore >>> 0;
                    return message;
                };

                /**
                 * Creates a plain object from a GhostTrophyMetadata message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof wm.protobuf.SaveScreenshotRequest.GhostTrophyMetadata
                 * @static
                 * @param {wm.protobuf.SaveScreenshotRequest.GhostTrophyMetadata} message GhostTrophyMetadata
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                GhostTrophyMetadata.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        object.tunePower = 0;
                        object.tuneHandling = 0;
                        object.rgScore = 0;
                    }
                    if (message.tunePower != null && message.hasOwnProperty("tunePower"))
                        object.tunePower = message.tunePower;
                    if (message.tuneHandling != null && message.hasOwnProperty("tuneHandling"))
                        object.tuneHandling = message.tuneHandling;
                    if (message.rgScore != null && message.hasOwnProperty("rgScore"))
                        object.rgScore = message.rgScore;
                    return object;
                };

                /**
                 * Converts this GhostTrophyMetadata to JSON.
                 * @function toJSON
                 * @memberof wm.protobuf.SaveScreenshotRequest.GhostTrophyMetadata
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                GhostTrophyMetadata.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                /**
                 * Gets the default type url for GhostTrophyMetadata
                 * @function getTypeUrl
                 * @memberof wm.protobuf.SaveScreenshotRequest.GhostTrophyMetadata
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                GhostTrophyMetadata.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/wm.protobuf.SaveScreenshotRequest.GhostTrophyMetadata";
                };

                return GhostTrophyMetadata;
            })();

            SaveScreenshotRequest.AcquiringCrownMetadata = (function() {

                /**
                 * Properties of an AcquiringCrownMetadata.
                 * @memberof wm.protobuf.SaveScreenshotRequest
                 * @interface IAcquiringCrownMetadata
                 * @property {number} tunePower AcquiringCrownMetadata tunePower
                 * @property {number} tuneHandling AcquiringCrownMetadata tuneHandling
                 * @property {number} area AcquiringCrownMetadata area
                 */

                /**
                 * Constructs a new AcquiringCrownMetadata.
                 * @memberof wm.protobuf.SaveScreenshotRequest
                 * @classdesc Represents an AcquiringCrownMetadata.
                 * @implements IAcquiringCrownMetadata
                 * @constructor
                 * @param {wm.protobuf.SaveScreenshotRequest.IAcquiringCrownMetadata=} [properties] Properties to set
                 */
                function AcquiringCrownMetadata(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * AcquiringCrownMetadata tunePower.
                 * @member {number} tunePower
                 * @memberof wm.protobuf.SaveScreenshotRequest.AcquiringCrownMetadata
                 * @instance
                 */
                AcquiringCrownMetadata.prototype.tunePower = 0;

                /**
                 * AcquiringCrownMetadata tuneHandling.
                 * @member {number} tuneHandling
                 * @memberof wm.protobuf.SaveScreenshotRequest.AcquiringCrownMetadata
                 * @instance
                 */
                AcquiringCrownMetadata.prototype.tuneHandling = 0;

                /**
                 * AcquiringCrownMetadata area.
                 * @member {number} area
                 * @memberof wm.protobuf.SaveScreenshotRequest.AcquiringCrownMetadata
                 * @instance
                 */
                AcquiringCrownMetadata.prototype.area = 0;

                /**
                 * Creates a new AcquiringCrownMetadata instance using the specified properties.
                 * @function create
                 * @memberof wm.protobuf.SaveScreenshotRequest.AcquiringCrownMetadata
                 * @static
                 * @param {wm.protobuf.SaveScreenshotRequest.IAcquiringCrownMetadata=} [properties] Properties to set
                 * @returns {wm.protobuf.SaveScreenshotRequest.AcquiringCrownMetadata} AcquiringCrownMetadata instance
                 */
                AcquiringCrownMetadata.create = function create(properties) {
                    return new AcquiringCrownMetadata(properties);
                };

                /**
                 * Encodes the specified AcquiringCrownMetadata message. Does not implicitly {@link wm.protobuf.SaveScreenshotRequest.AcquiringCrownMetadata.verify|verify} messages.
                 * @function encode
                 * @memberof wm.protobuf.SaveScreenshotRequest.AcquiringCrownMetadata
                 * @static
                 * @param {wm.protobuf.SaveScreenshotRequest.IAcquiringCrownMetadata} message AcquiringCrownMetadata message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                AcquiringCrownMetadata.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.tunePower);
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.tuneHandling);
                    writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.area);
                    return writer;
                };

                /**
                 * Encodes the specified AcquiringCrownMetadata message, length delimited. Does not implicitly {@link wm.protobuf.SaveScreenshotRequest.AcquiringCrownMetadata.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof wm.protobuf.SaveScreenshotRequest.AcquiringCrownMetadata
                 * @static
                 * @param {wm.protobuf.SaveScreenshotRequest.IAcquiringCrownMetadata} message AcquiringCrownMetadata message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                AcquiringCrownMetadata.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes an AcquiringCrownMetadata message from the specified reader or buffer.
                 * @function decode
                 * @memberof wm.protobuf.SaveScreenshotRequest.AcquiringCrownMetadata
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {wm.protobuf.SaveScreenshotRequest.AcquiringCrownMetadata} AcquiringCrownMetadata
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                AcquiringCrownMetadata.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.wm.protobuf.SaveScreenshotRequest.AcquiringCrownMetadata();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.tunePower = reader.uint32();
                                break;
                            }
                        case 2: {
                                message.tuneHandling = reader.uint32();
                                break;
                            }
                        case 3: {
                                message.area = reader.uint32();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    if (!message.hasOwnProperty("tunePower"))
                        throw $util.ProtocolError("missing required 'tunePower'", { instance: message });
                    if (!message.hasOwnProperty("tuneHandling"))
                        throw $util.ProtocolError("missing required 'tuneHandling'", { instance: message });
                    if (!message.hasOwnProperty("area"))
                        throw $util.ProtocolError("missing required 'area'", { instance: message });
                    return message;
                };

                /**
                 * Decodes an AcquiringCrownMetadata message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof wm.protobuf.SaveScreenshotRequest.AcquiringCrownMetadata
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {wm.protobuf.SaveScreenshotRequest.AcquiringCrownMetadata} AcquiringCrownMetadata
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                AcquiringCrownMetadata.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies an AcquiringCrownMetadata message.
                 * @function verify
                 * @memberof wm.protobuf.SaveScreenshotRequest.AcquiringCrownMetadata
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                AcquiringCrownMetadata.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (!$util.isInteger(message.tunePower))
                        return "tunePower: integer expected";
                    if (!$util.isInteger(message.tuneHandling))
                        return "tuneHandling: integer expected";
                    if (!$util.isInteger(message.area))
                        return "area: integer expected";
                    return null;
                };

                /**
                 * Creates an AcquiringCrownMetadata message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof wm.protobuf.SaveScreenshotRequest.AcquiringCrownMetadata
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {wm.protobuf.SaveScreenshotRequest.AcquiringCrownMetadata} AcquiringCrownMetadata
                 */
                AcquiringCrownMetadata.fromObject = function fromObject(object) {
                    if (object instanceof $root.wm.protobuf.SaveScreenshotRequest.AcquiringCrownMetadata)
                        return object;
                    let message = new $root.wm.protobuf.SaveScreenshotRequest.AcquiringCrownMetadata();
                    if (object.tunePower != null)
                        message.tunePower = object.tunePower >>> 0;
                    if (object.tuneHandling != null)
                        message.tuneHandling = object.tuneHandling >>> 0;
                    if (object.area != null)
                        message.area = object.area >>> 0;
                    return message;
                };

                /**
                 * Creates a plain object from an AcquiringCrownMetadata message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof wm.protobuf.SaveScreenshotRequest.AcquiringCrownMetadata
                 * @static
                 * @param {wm.protobuf.SaveScreenshotRequest.AcquiringCrownMetadata} message AcquiringCrownMetadata
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                AcquiringCrownMetadata.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        object.tunePower = 0;
                        object.tuneHandling = 0;
                        object.area = 0;
                    }
                    if (message.tunePower != null && message.hasOwnProperty("tunePower"))
                        object.tunePower = message.tunePower;
                    if (message.tuneHandling != null && message.hasOwnProperty("tuneHandling"))
                        object.tuneHandling = message.tuneHandling;
                    if (message.area != null && message.hasOwnProperty("area"))
                        object.area = message.area;
                    return object;
                };

                /**
                 * Converts this AcquiringCrownMetadata to JSON.
                 * @function toJSON
                 * @memberof wm.protobuf.SaveScreenshotRequest.AcquiringCrownMetadata
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                AcquiringCrownMetadata.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                /**
                 * Gets the default type url for AcquiringCrownMetadata
                 * @function getTypeUrl
                 * @memberof wm.protobuf.SaveScreenshotRequest.AcquiringCrownMetadata
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                AcquiringCrownMetadata.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/wm.protobuf.SaveScreenshotRequest.AcquiringCrownMetadata";
                };

                return AcquiringCrownMetadata;
            })();

            SaveScreenshotRequest.GhostCompetitionResultMetadata = (function() {

                /**
                 * Properties of a GhostCompetitionResultMetadata.
                 * @memberof wm.protobuf.SaveScreenshotRequest
                 * @interface IGhostCompetitionResultMetadata
                 * @property {number} tunePower GhostCompetitionResultMetadata tunePower
                 * @property {number} tuneHandling GhostCompetitionResultMetadata tuneHandling
                 * @property {number|null} [rank] GhostCompetitionResultMetadata rank
                 * @property {number} result GhostCompetitionResultMetadata result
                 */

                /**
                 * Constructs a new GhostCompetitionResultMetadata.
                 * @memberof wm.protobuf.SaveScreenshotRequest
                 * @classdesc Represents a GhostCompetitionResultMetadata.
                 * @implements IGhostCompetitionResultMetadata
                 * @constructor
                 * @param {wm.protobuf.SaveScreenshotRequest.IGhostCompetitionResultMetadata=} [properties] Properties to set
                 */
                function GhostCompetitionResultMetadata(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * GhostCompetitionResultMetadata tunePower.
                 * @member {number} tunePower
                 * @memberof wm.protobuf.SaveScreenshotRequest.GhostCompetitionResultMetadata
                 * @instance
                 */
                GhostCompetitionResultMetadata.prototype.tunePower = 0;

                /**
                 * GhostCompetitionResultMetadata tuneHandling.
                 * @member {number} tuneHandling
                 * @memberof wm.protobuf.SaveScreenshotRequest.GhostCompetitionResultMetadata
                 * @instance
                 */
                GhostCompetitionResultMetadata.prototype.tuneHandling = 0;

                /**
                 * GhostCompetitionResultMetadata rank.
                 * @member {number} rank
                 * @memberof wm.protobuf.SaveScreenshotRequest.GhostCompetitionResultMetadata
                 * @instance
                 */
                GhostCompetitionResultMetadata.prototype.rank = 0;

                /**
                 * GhostCompetitionResultMetadata result.
                 * @member {number} result
                 * @memberof wm.protobuf.SaveScreenshotRequest.GhostCompetitionResultMetadata
                 * @instance
                 */
                GhostCompetitionResultMetadata.prototype.result = 0;

                /**
                 * Creates a new GhostCompetitionResultMetadata instance using the specified properties.
                 * @function create
                 * @memberof wm.protobuf.SaveScreenshotRequest.GhostCompetitionResultMetadata
                 * @static
                 * @param {wm.protobuf.SaveScreenshotRequest.IGhostCompetitionResultMetadata=} [properties] Properties to set
                 * @returns {wm.protobuf.SaveScreenshotRequest.GhostCompetitionResultMetadata} GhostCompetitionResultMetadata instance
                 */
                GhostCompetitionResultMetadata.create = function create(properties) {
                    return new GhostCompetitionResultMetadata(properties);
                };

                /**
                 * Encodes the specified GhostCompetitionResultMetadata message. Does not implicitly {@link wm.protobuf.SaveScreenshotRequest.GhostCompetitionResultMetadata.verify|verify} messages.
                 * @function encode
                 * @memberof wm.protobuf.SaveScreenshotRequest.GhostCompetitionResultMetadata
                 * @static
                 * @param {wm.protobuf.SaveScreenshotRequest.IGhostCompetitionResultMetadata} message GhostCompetitionResultMetadata message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                GhostCompetitionResultMetadata.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.tunePower);
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.tuneHandling);
                    if (message.rank != null && Object.hasOwnProperty.call(message, "rank"))
                        writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.rank);
                    writer.uint32(/* id 4, wireType 0 =*/32).sint32(message.result);
                    return writer;
                };

                /**
                 * Encodes the specified GhostCompetitionResultMetadata message, length delimited. Does not implicitly {@link wm.protobuf.SaveScreenshotRequest.GhostCompetitionResultMetadata.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof wm.protobuf.SaveScreenshotRequest.GhostCompetitionResultMetadata
                 * @static
                 * @param {wm.protobuf.SaveScreenshotRequest.IGhostCompetitionResultMetadata} message GhostCompetitionResultMetadata message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                GhostCompetitionResultMetadata.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a GhostCompetitionResultMetadata message from the specified reader or buffer.
                 * @function decode
                 * @memberof wm.protobuf.SaveScreenshotRequest.GhostCompetitionResultMetadata
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {wm.protobuf.SaveScreenshotRequest.GhostCompetitionResultMetadata} GhostCompetitionResultMetadata
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                GhostCompetitionResultMetadata.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.wm.protobuf.SaveScreenshotRequest.GhostCompetitionResultMetadata();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.tunePower = reader.uint32();
                                break;
                            }
                        case 2: {
                                message.tuneHandling = reader.uint32();
                                break;
                            }
                        case 3: {
                                message.rank = reader.uint32();
                                break;
                            }
                        case 4: {
                                message.result = reader.sint32();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    if (!message.hasOwnProperty("tunePower"))
                        throw $util.ProtocolError("missing required 'tunePower'", { instance: message });
                    if (!message.hasOwnProperty("tuneHandling"))
                        throw $util.ProtocolError("missing required 'tuneHandling'", { instance: message });
                    if (!message.hasOwnProperty("result"))
                        throw $util.ProtocolError("missing required 'result'", { instance: message });
                    return message;
                };

                /**
                 * Decodes a GhostCompetitionResultMetadata message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof wm.protobuf.SaveScreenshotRequest.GhostCompetitionResultMetadata
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {wm.protobuf.SaveScreenshotRequest.GhostCompetitionResultMetadata} GhostCompetitionResultMetadata
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                GhostCompetitionResultMetadata.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a GhostCompetitionResultMetadata message.
                 * @function verify
                 * @memberof wm.protobuf.SaveScreenshotRequest.GhostCompetitionResultMetadata
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                GhostCompetitionResultMetadata.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (!$util.isInteger(message.tunePower))
                        return "tunePower: integer expected";
                    if (!$util.isInteger(message.tuneHandling))
                        return "tuneHandling: integer expected";
                    if (message.rank != null && message.hasOwnProperty("rank"))
                        if (!$util.isInteger(message.rank))
                            return "rank: integer expected";
                    if (!$util.isInteger(message.result))
                        return "result: integer expected";
                    return null;
                };

                /**
                 * Creates a GhostCompetitionResultMetadata message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof wm.protobuf.SaveScreenshotRequest.GhostCompetitionResultMetadata
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {wm.protobuf.SaveScreenshotRequest.GhostCompetitionResultMetadata} GhostCompetitionResultMetadata
                 */
                GhostCompetitionResultMetadata.fromObject = function fromObject(object) {
                    if (object instanceof $root.wm.protobuf.SaveScreenshotRequest.GhostCompetitionResultMetadata)
                        return object;
                    let message = new $root.wm.protobuf.SaveScreenshotRequest.GhostCompetitionResultMetadata();
                    if (object.tunePower != null)
                        message.tunePower = object.tunePower >>> 0;
                    if (object.tuneHandling != null)
                        message.tuneHandling = object.tuneHandling >>> 0;
                    if (object.rank != null)
                        message.rank = object.rank >>> 0;
                    if (object.result != null)
                        message.result = object.result | 0;
                    return message;
                };

                /**
                 * Creates a plain object from a GhostCompetitionResultMetadata message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof wm.protobuf.SaveScreenshotRequest.GhostCompetitionResultMetadata
                 * @static
                 * @param {wm.protobuf.SaveScreenshotRequest.GhostCompetitionResultMetadata} message GhostCompetitionResultMetadata
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                GhostCompetitionResultMetadata.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        object.tunePower = 0;
                        object.tuneHandling = 0;
                        object.rank = 0;
                        object.result = 0;
                    }
                    if (message.tunePower != null && message.hasOwnProperty("tunePower"))
                        object.tunePower = message.tunePower;
                    if (message.tuneHandling != null && message.hasOwnProperty("tuneHandling"))
                        object.tuneHandling = message.tuneHandling;
                    if (message.rank != null && message.hasOwnProperty("rank"))
                        object.rank = message.rank;
                    if (message.result != null && message.hasOwnProperty("result"))
                        object.result = message.result;
                    return object;
                };

                /**
                 * Converts this GhostCompetitionResultMetadata to JSON.
                 * @function toJSON
                 * @memberof wm.protobuf.SaveScreenshotRequest.GhostCompetitionResultMetadata
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                GhostCompetitionResultMetadata.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                /**
                 * Gets the default type url for GhostCompetitionResultMetadata
                 * @function getTypeUrl
                 * @memberof wm.protobuf.SaveScreenshotRequest.GhostCompetitionResultMetadata
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                GhostCompetitionResultMetadata.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/wm.protobuf.SaveScreenshotRequest.GhostCompetitionResultMetadata";
                };

                return GhostCompetitionResultMetadata;
            })();

            SaveScreenshotRequest.TimeAttackResultMetadata = (function() {

                /**
                 * Properties of a TimeAttackResultMetadata.
                 * @memberof wm.protobuf.SaveScreenshotRequest
                 * @interface ITimeAttackResultMetadata
                 * @property {number} tunePower TimeAttackResultMetadata tunePower
                 * @property {number} tuneHandling TimeAttackResultMetadata tuneHandling
                 * @property {number} course TimeAttackResultMetadata course
                 * @property {number|null} [wholeRank] TimeAttackResultMetadata wholeRank
                 * @property {number|null} [modelRank] TimeAttackResultMetadata modelRank
                 */

                /**
                 * Constructs a new TimeAttackResultMetadata.
                 * @memberof wm.protobuf.SaveScreenshotRequest
                 * @classdesc Represents a TimeAttackResultMetadata.
                 * @implements ITimeAttackResultMetadata
                 * @constructor
                 * @param {wm.protobuf.SaveScreenshotRequest.ITimeAttackResultMetadata=} [properties] Properties to set
                 */
                function TimeAttackResultMetadata(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * TimeAttackResultMetadata tunePower.
                 * @member {number} tunePower
                 * @memberof wm.protobuf.SaveScreenshotRequest.TimeAttackResultMetadata
                 * @instance
                 */
                TimeAttackResultMetadata.prototype.tunePower = 0;

                /**
                 * TimeAttackResultMetadata tuneHandling.
                 * @member {number} tuneHandling
                 * @memberof wm.protobuf.SaveScreenshotRequest.TimeAttackResultMetadata
                 * @instance
                 */
                TimeAttackResultMetadata.prototype.tuneHandling = 0;

                /**
                 * TimeAttackResultMetadata course.
                 * @member {number} course
                 * @memberof wm.protobuf.SaveScreenshotRequest.TimeAttackResultMetadata
                 * @instance
                 */
                TimeAttackResultMetadata.prototype.course = 0;

                /**
                 * TimeAttackResultMetadata wholeRank.
                 * @member {number} wholeRank
                 * @memberof wm.protobuf.SaveScreenshotRequest.TimeAttackResultMetadata
                 * @instance
                 */
                TimeAttackResultMetadata.prototype.wholeRank = 0;

                /**
                 * TimeAttackResultMetadata modelRank.
                 * @member {number} modelRank
                 * @memberof wm.protobuf.SaveScreenshotRequest.TimeAttackResultMetadata
                 * @instance
                 */
                TimeAttackResultMetadata.prototype.modelRank = 0;

                /**
                 * Creates a new TimeAttackResultMetadata instance using the specified properties.
                 * @function create
                 * @memberof wm.protobuf.SaveScreenshotRequest.TimeAttackResultMetadata
                 * @static
                 * @param {wm.protobuf.SaveScreenshotRequest.ITimeAttackResultMetadata=} [properties] Properties to set
                 * @returns {wm.protobuf.SaveScreenshotRequest.TimeAttackResultMetadata} TimeAttackResultMetadata instance
                 */
                TimeAttackResultMetadata.create = function create(properties) {
                    return new TimeAttackResultMetadata(properties);
                };

                /**
                 * Encodes the specified TimeAttackResultMetadata message. Does not implicitly {@link wm.protobuf.SaveScreenshotRequest.TimeAttackResultMetadata.verify|verify} messages.
                 * @function encode
                 * @memberof wm.protobuf.SaveScreenshotRequest.TimeAttackResultMetadata
                 * @static
                 * @param {wm.protobuf.SaveScreenshotRequest.ITimeAttackResultMetadata} message TimeAttackResultMetadata message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                TimeAttackResultMetadata.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.tunePower);
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.tuneHandling);
                    writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.course);
                    if (message.wholeRank != null && Object.hasOwnProperty.call(message, "wholeRank"))
                        writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.wholeRank);
                    if (message.modelRank != null && Object.hasOwnProperty.call(message, "modelRank"))
                        writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.modelRank);
                    return writer;
                };

                /**
                 * Encodes the specified TimeAttackResultMetadata message, length delimited. Does not implicitly {@link wm.protobuf.SaveScreenshotRequest.TimeAttackResultMetadata.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof wm.protobuf.SaveScreenshotRequest.TimeAttackResultMetadata
                 * @static
                 * @param {wm.protobuf.SaveScreenshotRequest.ITimeAttackResultMetadata} message TimeAttackResultMetadata message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                TimeAttackResultMetadata.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a TimeAttackResultMetadata message from the specified reader or buffer.
                 * @function decode
                 * @memberof wm.protobuf.SaveScreenshotRequest.TimeAttackResultMetadata
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {wm.protobuf.SaveScreenshotRequest.TimeAttackResultMetadata} TimeAttackResultMetadata
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                TimeAttackResultMetadata.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.wm.protobuf.SaveScreenshotRequest.TimeAttackResultMetadata();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.tunePower = reader.uint32();
                                break;
                            }
                        case 2: {
                                message.tuneHandling = reader.uint32();
                                break;
                            }
                        case 3: {
                                message.course = reader.uint32();
                                break;
                            }
                        case 4: {
                                message.wholeRank = reader.uint32();
                                break;
                            }
                        case 5: {
                                message.modelRank = reader.uint32();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    if (!message.hasOwnProperty("tunePower"))
                        throw $util.ProtocolError("missing required 'tunePower'", { instance: message });
                    if (!message.hasOwnProperty("tuneHandling"))
                        throw $util.ProtocolError("missing required 'tuneHandling'", { instance: message });
                    if (!message.hasOwnProperty("course"))
                        throw $util.ProtocolError("missing required 'course'", { instance: message });
                    return message;
                };

                /**
                 * Decodes a TimeAttackResultMetadata message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof wm.protobuf.SaveScreenshotRequest.TimeAttackResultMetadata
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {wm.protobuf.SaveScreenshotRequest.TimeAttackResultMetadata} TimeAttackResultMetadata
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                TimeAttackResultMetadata.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a TimeAttackResultMetadata message.
                 * @function verify
                 * @memberof wm.protobuf.SaveScreenshotRequest.TimeAttackResultMetadata
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                TimeAttackResultMetadata.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (!$util.isInteger(message.tunePower))
                        return "tunePower: integer expected";
                    if (!$util.isInteger(message.tuneHandling))
                        return "tuneHandling: integer expected";
                    if (!$util.isInteger(message.course))
                        return "course: integer expected";
                    if (message.wholeRank != null && message.hasOwnProperty("wholeRank"))
                        if (!$util.isInteger(message.wholeRank))
                            return "wholeRank: integer expected";
                    if (message.modelRank != null && message.hasOwnProperty("modelRank"))
                        if (!$util.isInteger(message.modelRank))
                            return "modelRank: integer expected";
                    return null;
                };

                /**
                 * Creates a TimeAttackResultMetadata message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof wm.protobuf.SaveScreenshotRequest.TimeAttackResultMetadata
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {wm.protobuf.SaveScreenshotRequest.TimeAttackResultMetadata} TimeAttackResultMetadata
                 */
                TimeAttackResultMetadata.fromObject = function fromObject(object) {
                    if (object instanceof $root.wm.protobuf.SaveScreenshotRequest.TimeAttackResultMetadata)
                        return object;
                    let message = new $root.wm.protobuf.SaveScreenshotRequest.TimeAttackResultMetadata();
                    if (object.tunePower != null)
                        message.tunePower = object.tunePower >>> 0;
                    if (object.tuneHandling != null)
                        message.tuneHandling = object.tuneHandling >>> 0;
                    if (object.course != null)
                        message.course = object.course >>> 0;
                    if (object.wholeRank != null)
                        message.wholeRank = object.wholeRank >>> 0;
                    if (object.modelRank != null)
                        message.modelRank = object.modelRank >>> 0;
                    return message;
                };

                /**
                 * Creates a plain object from a TimeAttackResultMetadata message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof wm.protobuf.SaveScreenshotRequest.TimeAttackResultMetadata
                 * @static
                 * @param {wm.protobuf.SaveScreenshotRequest.TimeAttackResultMetadata} message TimeAttackResultMetadata
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                TimeAttackResultMetadata.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        object.tunePower = 0;
                        object.tuneHandling = 0;
                        object.course = 0;
                        object.wholeRank = 0;
                        object.modelRank = 0;
                    }
                    if (message.tunePower != null && message.hasOwnProperty("tunePower"))
                        object.tunePower = message.tunePower;
                    if (message.tuneHandling != null && message.hasOwnProperty("tuneHandling"))
                        object.tuneHandling = message.tuneHandling;
                    if (message.course != null && message.hasOwnProperty("course"))
                        object.course = message.course;
                    if (message.wholeRank != null && message.hasOwnProperty("wholeRank"))
                        object.wholeRank = message.wholeRank;
                    if (message.modelRank != null && message.hasOwnProperty("modelRank"))
                        object.modelRank = message.modelRank;
                    return object;
                };

                /**
                 * Converts this TimeAttackResultMetadata to JSON.
                 * @function toJSON
                 * @memberof wm.protobuf.SaveScreenshotRequest.TimeAttackResultMetadata
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                TimeAttackResultMetadata.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                /**
                 * Gets the default type url for TimeAttackResultMetadata
                 * @function getTypeUrl
                 * @memberof wm.protobuf.SaveScreenshotRequest.TimeAttackResultMetadata
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                TimeAttackResultMetadata.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/wm.protobuf.SaveScreenshotRequest.TimeAttackResultMetadata";
                };

                return TimeAttackResultMetadata;
            })();

            SaveScreenshotRequest.LevelUpMetadata = (function() {

                /**
                 * Properties of a LevelUpMetadata.
                 * @memberof wm.protobuf.SaveScreenshotRequest
                 * @interface ILevelUpMetadata
                 * @property {number} tunePower LevelUpMetadata tunePower
                 * @property {number} tuneHandling LevelUpMetadata tuneHandling
                 * @property {number} level LevelUpMetadata level
                 */

                /**
                 * Constructs a new LevelUpMetadata.
                 * @memberof wm.protobuf.SaveScreenshotRequest
                 * @classdesc Represents a LevelUpMetadata.
                 * @implements ILevelUpMetadata
                 * @constructor
                 * @param {wm.protobuf.SaveScreenshotRequest.ILevelUpMetadata=} [properties] Properties to set
                 */
                function LevelUpMetadata(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * LevelUpMetadata tunePower.
                 * @member {number} tunePower
                 * @memberof wm.protobuf.SaveScreenshotRequest.LevelUpMetadata
                 * @instance
                 */
                LevelUpMetadata.prototype.tunePower = 0;

                /**
                 * LevelUpMetadata tuneHandling.
                 * @member {number} tuneHandling
                 * @memberof wm.protobuf.SaveScreenshotRequest.LevelUpMetadata
                 * @instance
                 */
                LevelUpMetadata.prototype.tuneHandling = 0;

                /**
                 * LevelUpMetadata level.
                 * @member {number} level
                 * @memberof wm.protobuf.SaveScreenshotRequest.LevelUpMetadata
                 * @instance
                 */
                LevelUpMetadata.prototype.level = 0;

                /**
                 * Creates a new LevelUpMetadata instance using the specified properties.
                 * @function create
                 * @memberof wm.protobuf.SaveScreenshotRequest.LevelUpMetadata
                 * @static
                 * @param {wm.protobuf.SaveScreenshotRequest.ILevelUpMetadata=} [properties] Properties to set
                 * @returns {wm.protobuf.SaveScreenshotRequest.LevelUpMetadata} LevelUpMetadata instance
                 */
                LevelUpMetadata.create = function create(properties) {
                    return new LevelUpMetadata(properties);
                };

                /**
                 * Encodes the specified LevelUpMetadata message. Does not implicitly {@link wm.protobuf.SaveScreenshotRequest.LevelUpMetadata.verify|verify} messages.
                 * @function encode
                 * @memberof wm.protobuf.SaveScreenshotRequest.LevelUpMetadata
                 * @static
                 * @param {wm.protobuf.SaveScreenshotRequest.ILevelUpMetadata} message LevelUpMetadata message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                LevelUpMetadata.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.level);
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.tunePower);
                    writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.tuneHandling);
                    return writer;
                };

                /**
                 * Encodes the specified LevelUpMetadata message, length delimited. Does not implicitly {@link wm.protobuf.SaveScreenshotRequest.LevelUpMetadata.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof wm.protobuf.SaveScreenshotRequest.LevelUpMetadata
                 * @static
                 * @param {wm.protobuf.SaveScreenshotRequest.ILevelUpMetadata} message LevelUpMetadata message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                LevelUpMetadata.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a LevelUpMetadata message from the specified reader or buffer.
                 * @function decode
                 * @memberof wm.protobuf.SaveScreenshotRequest.LevelUpMetadata
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {wm.protobuf.SaveScreenshotRequest.LevelUpMetadata} LevelUpMetadata
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                LevelUpMetadata.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.wm.protobuf.SaveScreenshotRequest.LevelUpMetadata();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 2: {
                                message.tunePower = reader.uint32();
                                break;
                            }
                        case 3: {
                                message.tuneHandling = reader.uint32();
                                break;
                            }
                        case 1: {
                                message.level = reader.uint32();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    if (!message.hasOwnProperty("tunePower"))
                        throw $util.ProtocolError("missing required 'tunePower'", { instance: message });
                    if (!message.hasOwnProperty("tuneHandling"))
                        throw $util.ProtocolError("missing required 'tuneHandling'", { instance: message });
                    if (!message.hasOwnProperty("level"))
                        throw $util.ProtocolError("missing required 'level'", { instance: message });
                    return message;
                };

                /**
                 * Decodes a LevelUpMetadata message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof wm.protobuf.SaveScreenshotRequest.LevelUpMetadata
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {wm.protobuf.SaveScreenshotRequest.LevelUpMetadata} LevelUpMetadata
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                LevelUpMetadata.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a LevelUpMetadata message.
                 * @function verify
                 * @memberof wm.protobuf.SaveScreenshotRequest.LevelUpMetadata
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                LevelUpMetadata.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (!$util.isInteger(message.tunePower))
                        return "tunePower: integer expected";
                    if (!$util.isInteger(message.tuneHandling))
                        return "tuneHandling: integer expected";
                    if (!$util.isInteger(message.level))
                        return "level: integer expected";
                    return null;
                };

                /**
                 * Creates a LevelUpMetadata message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof wm.protobuf.SaveScreenshotRequest.LevelUpMetadata
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {wm.protobuf.SaveScreenshotRequest.LevelUpMetadata} LevelUpMetadata
                 */
                LevelUpMetadata.fromObject = function fromObject(object) {
                    if (object instanceof $root.wm.protobuf.SaveScreenshotRequest.LevelUpMetadata)
                        return object;
                    let message = new $root.wm.protobuf.SaveScreenshotRequest.LevelUpMetadata();
                    if (object.tunePower != null)
                        message.tunePower = object.tunePower >>> 0;
                    if (object.tuneHandling != null)
                        message.tuneHandling = object.tuneHandling >>> 0;
                    if (object.level != null)
                        message.level = object.level >>> 0;
                    return message;
                };

                /**
                 * Creates a plain object from a LevelUpMetadata message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof wm.protobuf.SaveScreenshotRequest.LevelUpMetadata
                 * @static
                 * @param {wm.protobuf.SaveScreenshotRequest.LevelUpMetadata} message LevelUpMetadata
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                LevelUpMetadata.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        object.level = 0;
                        object.tunePower = 0;
                        object.tuneHandling = 0;
                    }
                    if (message.level != null && message.hasOwnProperty("level"))
                        object.level = message.level;
                    if (message.tunePower != null && message.hasOwnProperty("tunePower"))
                        object.tunePower = message.tunePower;
                    if (message.tuneHandling != null && message.hasOwnProperty("tuneHandling"))
                        object.tuneHandling = message.tuneHandling;
                    return object;
                };

                /**
                 * Converts this LevelUpMetadata to JSON.
                 * @function toJSON
                 * @memberof wm.protobuf.SaveScreenshotRequest.LevelUpMetadata
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                LevelUpMetadata.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                /**
                 * Gets the default type url for LevelUpMetadata
                 * @function getTypeUrl
                 * @memberof wm.protobuf.SaveScreenshotRequest.LevelUpMetadata
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                LevelUpMetadata.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/wm.protobuf.SaveScreenshotRequest.LevelUpMetadata";
                };

                return LevelUpMetadata;
            })();

            SaveScreenshotRequest.GhostKoshienResultMetadata = (function() {

                /**
                 * Properties of a GhostKoshienResultMetadata.
                 * @memberof wm.protobuf.SaveScreenshotRequest
                 * @interface IGhostKoshienResultMetadata
                 * @property {number} tunePower GhostKoshienResultMetadata tunePower
                 * @property {number} tuneHandling GhostKoshienResultMetadata tuneHandling
                 * @property {number|null} [rank] GhostKoshienResultMetadata rank
                 * @property {number} result GhostKoshienResultMetadata result
                 */

                /**
                 * Constructs a new GhostKoshienResultMetadata.
                 * @memberof wm.protobuf.SaveScreenshotRequest
                 * @classdesc Represents a GhostKoshienResultMetadata.
                 * @implements IGhostKoshienResultMetadata
                 * @constructor
                 * @param {wm.protobuf.SaveScreenshotRequest.IGhostKoshienResultMetadata=} [properties] Properties to set
                 */
                function GhostKoshienResultMetadata(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * GhostKoshienResultMetadata tunePower.
                 * @member {number} tunePower
                 * @memberof wm.protobuf.SaveScreenshotRequest.GhostKoshienResultMetadata
                 * @instance
                 */
                GhostKoshienResultMetadata.prototype.tunePower = 0;

                /**
                 * GhostKoshienResultMetadata tuneHandling.
                 * @member {number} tuneHandling
                 * @memberof wm.protobuf.SaveScreenshotRequest.GhostKoshienResultMetadata
                 * @instance
                 */
                GhostKoshienResultMetadata.prototype.tuneHandling = 0;

                /**
                 * GhostKoshienResultMetadata rank.
                 * @member {number} rank
                 * @memberof wm.protobuf.SaveScreenshotRequest.GhostKoshienResultMetadata
                 * @instance
                 */
                GhostKoshienResultMetadata.prototype.rank = 0;

                /**
                 * GhostKoshienResultMetadata result.
                 * @member {number} result
                 * @memberof wm.protobuf.SaveScreenshotRequest.GhostKoshienResultMetadata
                 * @instance
                 */
                GhostKoshienResultMetadata.prototype.result = 0;

                /**
                 * Creates a new GhostKoshienResultMetadata instance using the specified properties.
                 * @function create
                 * @memberof wm.protobuf.SaveScreenshotRequest.GhostKoshienResultMetadata
                 * @static
                 * @param {wm.protobuf.SaveScreenshotRequest.IGhostKoshienResultMetadata=} [properties] Properties to set
                 * @returns {wm.protobuf.SaveScreenshotRequest.GhostKoshienResultMetadata} GhostKoshienResultMetadata instance
                 */
                GhostKoshienResultMetadata.create = function create(properties) {
                    return new GhostKoshienResultMetadata(properties);
                };

                /**
                 * Encodes the specified GhostKoshienResultMetadata message. Does not implicitly {@link wm.protobuf.SaveScreenshotRequest.GhostKoshienResultMetadata.verify|verify} messages.
                 * @function encode
                 * @memberof wm.protobuf.SaveScreenshotRequest.GhostKoshienResultMetadata
                 * @static
                 * @param {wm.protobuf.SaveScreenshotRequest.IGhostKoshienResultMetadata} message GhostKoshienResultMetadata message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                GhostKoshienResultMetadata.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.tunePower);
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.tuneHandling);
                    if (message.rank != null && Object.hasOwnProperty.call(message, "rank"))
                        writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.rank);
                    writer.uint32(/* id 4, wireType 0 =*/32).sint32(message.result);
                    return writer;
                };

                /**
                 * Encodes the specified GhostKoshienResultMetadata message, length delimited. Does not implicitly {@link wm.protobuf.SaveScreenshotRequest.GhostKoshienResultMetadata.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof wm.protobuf.SaveScreenshotRequest.GhostKoshienResultMetadata
                 * @static
                 * @param {wm.protobuf.SaveScreenshotRequest.IGhostKoshienResultMetadata} message GhostKoshienResultMetadata message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                GhostKoshienResultMetadata.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a GhostKoshienResultMetadata message from the specified reader or buffer.
                 * @function decode
                 * @memberof wm.protobuf.SaveScreenshotRequest.GhostKoshienResultMetadata
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {wm.protobuf.SaveScreenshotRequest.GhostKoshienResultMetadata} GhostKoshienResultMetadata
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                GhostKoshienResultMetadata.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.wm.protobuf.SaveScreenshotRequest.GhostKoshienResultMetadata();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.tunePower = reader.uint32();
                                break;
                            }
                        case 2: {
                                message.tuneHandling = reader.uint32();
                                break;
                            }
                        case 3: {
                                message.rank = reader.uint32();
                                break;
                            }
                        case 4: {
                                message.result = reader.sint32();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    if (!message.hasOwnProperty("tunePower"))
                        throw $util.ProtocolError("missing required 'tunePower'", { instance: message });
                    if (!message.hasOwnProperty("tuneHandling"))
                        throw $util.ProtocolError("missing required 'tuneHandling'", { instance: message });
                    if (!message.hasOwnProperty("result"))
                        throw $util.ProtocolError("missing required 'result'", { instance: message });
                    return message;
                };

                /**
                 * Decodes a GhostKoshienResultMetadata message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof wm.protobuf.SaveScreenshotRequest.GhostKoshienResultMetadata
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {wm.protobuf.SaveScreenshotRequest.GhostKoshienResultMetadata} GhostKoshienResultMetadata
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                GhostKoshienResultMetadata.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a GhostKoshienResultMetadata message.
                 * @function verify
                 * @memberof wm.protobuf.SaveScreenshotRequest.GhostKoshienResultMetadata
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                GhostKoshienResultMetadata.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (!$util.isInteger(message.tunePower))
                        return "tunePower: integer expected";
                    if (!$util.isInteger(message.tuneHandling))
                        return "tuneHandling: integer expected";
                    if (message.rank != null && message.hasOwnProperty("rank"))
                        if (!$util.isInteger(message.rank))
                            return "rank: integer expected";
                    if (!$util.isInteger(message.result))
                        return "result: integer expected";
                    return null;
                };

                /**
                 * Creates a GhostKoshienResultMetadata message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof wm.protobuf.SaveScreenshotRequest.GhostKoshienResultMetadata
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {wm.protobuf.SaveScreenshotRequest.GhostKoshienResultMetadata} GhostKoshienResultMetadata
                 */
                GhostKoshienResultMetadata.fromObject = function fromObject(object) {
                    if (object instanceof $root.wm.protobuf.SaveScreenshotRequest.GhostKoshienResultMetadata)
                        return object;
                    let message = new $root.wm.protobuf.SaveScreenshotRequest.GhostKoshienResultMetadata();
                    if (object.tunePower != null)
                        message.tunePower = object.tunePower >>> 0;
                    if (object.tuneHandling != null)
                        message.tuneHandling = object.tuneHandling >>> 0;
                    if (object.rank != null)
                        message.rank = object.rank >>> 0;
                    if (object.result != null)
                        message.result = object.result | 0;
                    return message;
                };

                /**
                 * Creates a plain object from a GhostKoshienResultMetadata message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof wm.protobuf.SaveScreenshotRequest.GhostKoshienResultMetadata
                 * @static
                 * @param {wm.protobuf.SaveScreenshotRequest.GhostKoshienResultMetadata} message GhostKoshienResultMetadata
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                GhostKoshienResultMetadata.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        object.tunePower = 0;
                        object.tuneHandling = 0;
                        object.rank = 0;
                        object.result = 0;
                    }
                    if (message.tunePower != null && message.hasOwnProperty("tunePower"))
                        object.tunePower = message.tunePower;
                    if (message.tuneHandling != null && message.hasOwnProperty("tuneHandling"))
                        object.tuneHandling = message.tuneHandling;
                    if (message.rank != null && message.hasOwnProperty("rank"))
                        object.rank = message.rank;
                    if (message.result != null && message.hasOwnProperty("result"))
                        object.result = message.result;
                    return object;
                };

                /**
                 * Converts this GhostKoshienResultMetadata to JSON.
                 * @function toJSON
                 * @memberof wm.protobuf.SaveScreenshotRequest.GhostKoshienResultMetadata
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                GhostKoshienResultMetadata.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                /**
                 * Gets the default type url for GhostKoshienResultMetadata
                 * @function getTypeUrl
                 * @memberof wm.protobuf.SaveScreenshotRequest.GhostKoshienResultMetadata
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                GhostKoshienResultMetadata.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/wm.protobuf.SaveScreenshotRequest.GhostKoshienResultMetadata";
                };

                return GhostKoshienResultMetadata;
            })();

            return SaveScreenshotRequest;
        })();

        protobuf.SaveScreenshotResponse = (function() {

            /**
             * Properties of a SaveScreenshotResponse.
             * @memberof wm.protobuf
             * @interface ISaveScreenshotResponse
             * @property {wm.protobuf.ErrorCode} error SaveScreenshotResponse error
             */

            /**
             * Constructs a new SaveScreenshotResponse.
             * @memberof wm.protobuf
             * @classdesc Represents a SaveScreenshotResponse.
             * @implements ISaveScreenshotResponse
             * @constructor
             * @param {wm.protobuf.ISaveScreenshotResponse=} [properties] Properties to set
             */
            function SaveScreenshotResponse(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * SaveScreenshotResponse error.
             * @member {wm.protobuf.ErrorCode} error
             * @memberof wm.protobuf.SaveScreenshotResponse
             * @instance
             */
            SaveScreenshotResponse.prototype.error = 0;

            /**
             * Creates a new SaveScreenshotResponse instance using the specified properties.
             * @function create
             * @memberof wm.protobuf.SaveScreenshotResponse
             * @static
             * @param {wm.protobuf.ISaveScreenshotResponse=} [properties] Properties to set
             * @returns {wm.protobuf.SaveScreenshotResponse} SaveScreenshotResponse instance
             */
            SaveScreenshotResponse.create = function create(properties) {
                return new SaveScreenshotResponse(properties);
            };

            /**
             * Encodes the specified SaveScreenshotResponse message. Does not implicitly {@link wm.protobuf.SaveScreenshotResponse.verify|verify} messages.
             * @function encode
             * @memberof wm.protobuf.SaveScreenshotResponse
             * @static
             * @param {wm.protobuf.ISaveScreenshotResponse} message SaveScreenshotResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SaveScreenshotResponse.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
                return writer;
            };

            /**
             * Encodes the specified SaveScreenshotResponse message, length delimited. Does not implicitly {@link wm.protobuf.SaveScreenshotResponse.verify|verify} messages.
             * @function encodeDelimited
             * @memberof wm.protobuf.SaveScreenshotResponse
             * @static
             * @param {wm.protobuf.ISaveScreenshotResponse} message SaveScreenshotResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SaveScreenshotResponse.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a SaveScreenshotResponse message from the specified reader or buffer.
             * @function decode
             * @memberof wm.protobuf.SaveScreenshotResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {wm.protobuf.SaveScreenshotResponse} SaveScreenshotResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SaveScreenshotResponse.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.wm.protobuf.SaveScreenshotResponse();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.error = reader.int32();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("error"))
                    throw $util.ProtocolError("missing required 'error'", { instance: message });
                return message;
            };

            /**
             * Decodes a SaveScreenshotResponse message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof wm.protobuf.SaveScreenshotResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {wm.protobuf.SaveScreenshotResponse} SaveScreenshotResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SaveScreenshotResponse.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a SaveScreenshotResponse message.
             * @function verify
             * @memberof wm.protobuf.SaveScreenshotResponse
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            SaveScreenshotResponse.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                switch (message.error) {
                default:
                    return "error: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 7:
                case 9:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 16:
                case 17:
                case 18:
                case 19:
                    break;
                }
                return null;
            };

            /**
             * Creates a SaveScreenshotResponse message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof wm.protobuf.SaveScreenshotResponse
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {wm.protobuf.SaveScreenshotResponse} SaveScreenshotResponse
             */
            SaveScreenshotResponse.fromObject = function fromObject(object) {
                if (object instanceof $root.wm.protobuf.SaveScreenshotResponse)
                    return object;
                let message = new $root.wm.protobuf.SaveScreenshotResponse();
                switch (object.error) {
                default:
                    if (typeof object.error === "number") {
                        message.error = object.error;
                        break;
                    }
                    break;
                case "ERR_SUCCESS":
                case 0:
                    message.error = 0;
                    break;
                case "ERR_REQUEST":
                case 1:
                    message.error = 1;
                    break;
                case "ERR_NOT_FOUND":
                case 2:
                    message.error = 2;
                    break;
                case "ERR_ID_SERVER":
                case 3:
                    message.error = 3;
                    break;
                case "ERR_ID_BANNED":
                case 4:
                    message.error = 4;
                    break;
                case "ERR_USER_LOCKED":
                case 5:
                    message.error = 5;
                    break;
                case "ERR_USER_VERSION":
                case 6:
                    message.error = 6;
                    break;
                case "ERR_NAME_CONFLICTED":
                case 7:
                    message.error = 7;
                    break;
                case "ERR_FORBIDDEN":
                case 9:
                    message.error = 9;
                    break;
                case "ERR_USER_SUCCEEDED":
                case 11:
                    message.error = 11;
                    break;
                case "ERR_BEING_TRANSFERRED":
                case 12:
                    message.error = 12;
                    break;
                case "ERR_SCRATCH_LOCKED":
                case 13:
                    message.error = 13;
                    break;
                case "ERR_BINGO_REVENGE_LOCKED":
                case 14:
                    message.error = 14;
                    break;
                case "ERR_BINGO_ALREDY_LINKED":
                case 15:
                    message.error = 15;
                    break;
                case "ERR_BINGO_FINISHED":
                case 16:
                    message.error = 16;
                    break;
                case "ERR_BINGO_REACHED_MAX_USER":
                case 17:
                    message.error = 17;
                    break;
                case "ERR_CAR_NOT_FOUND":
                case 18:
                    message.error = 18;
                    break;
                case "ERR_BINGO_CARD_NOT_FOUND":
                case 19:
                    message.error = 19;
                    break;
                }
                return message;
            };

            /**
             * Creates a plain object from a SaveScreenshotResponse message. Also converts values to other types if specified.
             * @function toObject
             * @memberof wm.protobuf.SaveScreenshotResponse
             * @static
             * @param {wm.protobuf.SaveScreenshotResponse} message SaveScreenshotResponse
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            SaveScreenshotResponse.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults)
                    object.error = options.enums === String ? "ERR_SUCCESS" : 0;
                if (message.error != null && message.hasOwnProperty("error"))
                    object.error = options.enums === String ? $root.wm.protobuf.ErrorCode[message.error] === undefined ? message.error : $root.wm.protobuf.ErrorCode[message.error] : message.error;
                return object;
            };

            /**
             * Converts this SaveScreenshotResponse to JSON.
             * @function toJSON
             * @memberof wm.protobuf.SaveScreenshotResponse
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            SaveScreenshotResponse.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for SaveScreenshotResponse
             * @function getTypeUrl
             * @memberof wm.protobuf.SaveScreenshotResponse
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            SaveScreenshotResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/wm.protobuf.SaveScreenshotResponse";
            };

            return SaveScreenshotResponse;
        })();

        protobuf.SubmitClientLogRequest = (function() {

            /**
             * Properties of a SubmitClientLogRequest.
             * @memberof wm.protobuf
             * @interface ISubmitClientLogRequest
             * @property {Uint8Array} data SubmitClientLogRequest data
             * @property {number} modifiedAt SubmitClientLogRequest modifiedAt
             * @property {wm.protobuf.ClientLogType} logType SubmitClientLogRequest logType
             */

            /**
             * Constructs a new SubmitClientLogRequest.
             * @memberof wm.protobuf
             * @classdesc Represents a SubmitClientLogRequest.
             * @implements ISubmitClientLogRequest
             * @constructor
             * @param {wm.protobuf.ISubmitClientLogRequest=} [properties] Properties to set
             */
            function SubmitClientLogRequest(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * SubmitClientLogRequest data.
             * @member {Uint8Array} data
             * @memberof wm.protobuf.SubmitClientLogRequest
             * @instance
             */
            SubmitClientLogRequest.prototype.data = $util.newBuffer([]);

            /**
             * SubmitClientLogRequest modifiedAt.
             * @member {number} modifiedAt
             * @memberof wm.protobuf.SubmitClientLogRequest
             * @instance
             */
            SubmitClientLogRequest.prototype.modifiedAt = 0;

            /**
             * SubmitClientLogRequest logType.
             * @member {wm.protobuf.ClientLogType} logType
             * @memberof wm.protobuf.SubmitClientLogRequest
             * @instance
             */
            SubmitClientLogRequest.prototype.logType = 0;

            /**
             * Creates a new SubmitClientLogRequest instance using the specified properties.
             * @function create
             * @memberof wm.protobuf.SubmitClientLogRequest
             * @static
             * @param {wm.protobuf.ISubmitClientLogRequest=} [properties] Properties to set
             * @returns {wm.protobuf.SubmitClientLogRequest} SubmitClientLogRequest instance
             */
            SubmitClientLogRequest.create = function create(properties) {
                return new SubmitClientLogRequest(properties);
            };

            /**
             * Encodes the specified SubmitClientLogRequest message. Does not implicitly {@link wm.protobuf.SubmitClientLogRequest.verify|verify} messages.
             * @function encode
             * @memberof wm.protobuf.SubmitClientLogRequest
             * @static
             * @param {wm.protobuf.ISubmitClientLogRequest} message SubmitClientLogRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SubmitClientLogRequest.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.data);
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.modifiedAt);
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.logType);
                return writer;
            };

            /**
             * Encodes the specified SubmitClientLogRequest message, length delimited. Does not implicitly {@link wm.protobuf.SubmitClientLogRequest.verify|verify} messages.
             * @function encodeDelimited
             * @memberof wm.protobuf.SubmitClientLogRequest
             * @static
             * @param {wm.protobuf.ISubmitClientLogRequest} message SubmitClientLogRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SubmitClientLogRequest.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a SubmitClientLogRequest message from the specified reader or buffer.
             * @function decode
             * @memberof wm.protobuf.SubmitClientLogRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {wm.protobuf.SubmitClientLogRequest} SubmitClientLogRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SubmitClientLogRequest.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.wm.protobuf.SubmitClientLogRequest();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.data = reader.bytes();
                            break;
                        }
                    case 2: {
                            message.modifiedAt = reader.uint32();
                            break;
                        }
                    case 3: {
                            message.logType = reader.int32();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("data"))
                    throw $util.ProtocolError("missing required 'data'", { instance: message });
                if (!message.hasOwnProperty("modifiedAt"))
                    throw $util.ProtocolError("missing required 'modifiedAt'", { instance: message });
                if (!message.hasOwnProperty("logType"))
                    throw $util.ProtocolError("missing required 'logType'", { instance: message });
                return message;
            };

            /**
             * Decodes a SubmitClientLogRequest message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof wm.protobuf.SubmitClientLogRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {wm.protobuf.SubmitClientLogRequest} SubmitClientLogRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SubmitClientLogRequest.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a SubmitClientLogRequest message.
             * @function verify
             * @memberof wm.protobuf.SubmitClientLogRequest
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            SubmitClientLogRequest.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (!(message.data && typeof message.data.length === "number" || $util.isString(message.data)))
                    return "data: buffer expected";
                if (!$util.isInteger(message.modifiedAt))
                    return "modifiedAt: integer expected";
                switch (message.logType) {
                default:
                    return "logType: enum value expected";
                case 0:
                case 1:
                    break;
                }
                return null;
            };

            /**
             * Creates a SubmitClientLogRequest message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof wm.protobuf.SubmitClientLogRequest
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {wm.protobuf.SubmitClientLogRequest} SubmitClientLogRequest
             */
            SubmitClientLogRequest.fromObject = function fromObject(object) {
                if (object instanceof $root.wm.protobuf.SubmitClientLogRequest)
                    return object;
                let message = new $root.wm.protobuf.SubmitClientLogRequest();
                if (object.data != null)
                    if (typeof object.data === "string")
                        $util.base64.decode(object.data, message.data = $util.newBuffer($util.base64.length(object.data)), 0);
                    else if (object.data.length >= 0)
                        message.data = object.data;
                if (object.modifiedAt != null)
                    message.modifiedAt = object.modifiedAt >>> 0;
                switch (object.logType) {
                default:
                    if (typeof object.logType === "number") {
                        message.logType = object.logType;
                        break;
                    }
                    break;
                case "LOG_LOAD_REPORT":
                case 0:
                    message.logType = 0;
                    break;
                case "LOG_ERROR":
                case 1:
                    message.logType = 1;
                    break;
                }
                return message;
            };

            /**
             * Creates a plain object from a SubmitClientLogRequest message. Also converts values to other types if specified.
             * @function toObject
             * @memberof wm.protobuf.SubmitClientLogRequest
             * @static
             * @param {wm.protobuf.SubmitClientLogRequest} message SubmitClientLogRequest
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            SubmitClientLogRequest.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    if (options.bytes === String)
                        object.data = "";
                    else {
                        object.data = [];
                        if (options.bytes !== Array)
                            object.data = $util.newBuffer(object.data);
                    }
                    object.modifiedAt = 0;
                    object.logType = options.enums === String ? "LOG_LOAD_REPORT" : 0;
                }
                if (message.data != null && message.hasOwnProperty("data"))
                    object.data = options.bytes === String ? $util.base64.encode(message.data, 0, message.data.length) : options.bytes === Array ? Array.prototype.slice.call(message.data) : message.data;
                if (message.modifiedAt != null && message.hasOwnProperty("modifiedAt"))
                    object.modifiedAt = message.modifiedAt;
                if (message.logType != null && message.hasOwnProperty("logType"))
                    object.logType = options.enums === String ? $root.wm.protobuf.ClientLogType[message.logType] === undefined ? message.logType : $root.wm.protobuf.ClientLogType[message.logType] : message.logType;
                return object;
            };

            /**
             * Converts this SubmitClientLogRequest to JSON.
             * @function toJSON
             * @memberof wm.protobuf.SubmitClientLogRequest
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            SubmitClientLogRequest.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for SubmitClientLogRequest
             * @function getTypeUrl
             * @memberof wm.protobuf.SubmitClientLogRequest
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            SubmitClientLogRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/wm.protobuf.SubmitClientLogRequest";
            };

            return SubmitClientLogRequest;
        })();

        protobuf.SubmitClientLogResponse = (function() {

            /**
             * Properties of a SubmitClientLogResponse.
             * @memberof wm.protobuf
             * @interface ISubmitClientLogResponse
             * @property {wm.protobuf.ErrorCode} error SubmitClientLogResponse error
             */

            /**
             * Constructs a new SubmitClientLogResponse.
             * @memberof wm.protobuf
             * @classdesc Represents a SubmitClientLogResponse.
             * @implements ISubmitClientLogResponse
             * @constructor
             * @param {wm.protobuf.ISubmitClientLogResponse=} [properties] Properties to set
             */
            function SubmitClientLogResponse(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * SubmitClientLogResponse error.
             * @member {wm.protobuf.ErrorCode} error
             * @memberof wm.protobuf.SubmitClientLogResponse
             * @instance
             */
            SubmitClientLogResponse.prototype.error = 0;

            /**
             * Creates a new SubmitClientLogResponse instance using the specified properties.
             * @function create
             * @memberof wm.protobuf.SubmitClientLogResponse
             * @static
             * @param {wm.protobuf.ISubmitClientLogResponse=} [properties] Properties to set
             * @returns {wm.protobuf.SubmitClientLogResponse} SubmitClientLogResponse instance
             */
            SubmitClientLogResponse.create = function create(properties) {
                return new SubmitClientLogResponse(properties);
            };

            /**
             * Encodes the specified SubmitClientLogResponse message. Does not implicitly {@link wm.protobuf.SubmitClientLogResponse.verify|verify} messages.
             * @function encode
             * @memberof wm.protobuf.SubmitClientLogResponse
             * @static
             * @param {wm.protobuf.ISubmitClientLogResponse} message SubmitClientLogResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SubmitClientLogResponse.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
                return writer;
            };

            /**
             * Encodes the specified SubmitClientLogResponse message, length delimited. Does not implicitly {@link wm.protobuf.SubmitClientLogResponse.verify|verify} messages.
             * @function encodeDelimited
             * @memberof wm.protobuf.SubmitClientLogResponse
             * @static
             * @param {wm.protobuf.ISubmitClientLogResponse} message SubmitClientLogResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SubmitClientLogResponse.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a SubmitClientLogResponse message from the specified reader or buffer.
             * @function decode
             * @memberof wm.protobuf.SubmitClientLogResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {wm.protobuf.SubmitClientLogResponse} SubmitClientLogResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SubmitClientLogResponse.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.wm.protobuf.SubmitClientLogResponse();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.error = reader.int32();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("error"))
                    throw $util.ProtocolError("missing required 'error'", { instance: message });
                return message;
            };

            /**
             * Decodes a SubmitClientLogResponse message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof wm.protobuf.SubmitClientLogResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {wm.protobuf.SubmitClientLogResponse} SubmitClientLogResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SubmitClientLogResponse.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a SubmitClientLogResponse message.
             * @function verify
             * @memberof wm.protobuf.SubmitClientLogResponse
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            SubmitClientLogResponse.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                switch (message.error) {
                default:
                    return "error: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 7:
                case 9:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 16:
                case 17:
                case 18:
                case 19:
                    break;
                }
                return null;
            };

            /**
             * Creates a SubmitClientLogResponse message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof wm.protobuf.SubmitClientLogResponse
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {wm.protobuf.SubmitClientLogResponse} SubmitClientLogResponse
             */
            SubmitClientLogResponse.fromObject = function fromObject(object) {
                if (object instanceof $root.wm.protobuf.SubmitClientLogResponse)
                    return object;
                let message = new $root.wm.protobuf.SubmitClientLogResponse();
                switch (object.error) {
                default:
                    if (typeof object.error === "number") {
                        message.error = object.error;
                        break;
                    }
                    break;
                case "ERR_SUCCESS":
                case 0:
                    message.error = 0;
                    break;
                case "ERR_REQUEST":
                case 1:
                    message.error = 1;
                    break;
                case "ERR_NOT_FOUND":
                case 2:
                    message.error = 2;
                    break;
                case "ERR_ID_SERVER":
                case 3:
                    message.error = 3;
                    break;
                case "ERR_ID_BANNED":
                case 4:
                    message.error = 4;
                    break;
                case "ERR_USER_LOCKED":
                case 5:
                    message.error = 5;
                    break;
                case "ERR_USER_VERSION":
                case 6:
                    message.error = 6;
                    break;
                case "ERR_NAME_CONFLICTED":
                case 7:
                    message.error = 7;
                    break;
                case "ERR_FORBIDDEN":
                case 9:
                    message.error = 9;
                    break;
                case "ERR_USER_SUCCEEDED":
                case 11:
                    message.error = 11;
                    break;
                case "ERR_BEING_TRANSFERRED":
                case 12:
                    message.error = 12;
                    break;
                case "ERR_SCRATCH_LOCKED":
                case 13:
                    message.error = 13;
                    break;
                case "ERR_BINGO_REVENGE_LOCKED":
                case 14:
                    message.error = 14;
                    break;
                case "ERR_BINGO_ALREDY_LINKED":
                case 15:
                    message.error = 15;
                    break;
                case "ERR_BINGO_FINISHED":
                case 16:
                    message.error = 16;
                    break;
                case "ERR_BINGO_REACHED_MAX_USER":
                case 17:
                    message.error = 17;
                    break;
                case "ERR_CAR_NOT_FOUND":
                case 18:
                    message.error = 18;
                    break;
                case "ERR_BINGO_CARD_NOT_FOUND":
                case 19:
                    message.error = 19;
                    break;
                }
                return message;
            };

            /**
             * Creates a plain object from a SubmitClientLogResponse message. Also converts values to other types if specified.
             * @function toObject
             * @memberof wm.protobuf.SubmitClientLogResponse
             * @static
             * @param {wm.protobuf.SubmitClientLogResponse} message SubmitClientLogResponse
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            SubmitClientLogResponse.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults)
                    object.error = options.enums === String ? "ERR_SUCCESS" : 0;
                if (message.error != null && message.hasOwnProperty("error"))
                    object.error = options.enums === String ? $root.wm.protobuf.ErrorCode[message.error] === undefined ? message.error : $root.wm.protobuf.ErrorCode[message.error] : message.error;
                return object;
            };

            /**
             * Converts this SubmitClientLogResponse to JSON.
             * @function toJSON
             * @memberof wm.protobuf.SubmitClientLogResponse
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            SubmitClientLogResponse.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for SubmitClientLogResponse
             * @function getTypeUrl
             * @memberof wm.protobuf.SubmitClientLogResponse
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            SubmitClientLogResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/wm.protobuf.SubmitClientLogResponse";
            };

            return SubmitClientLogResponse;
        })();

        protobuf.LoadScratchInformationRequest = (function() {

            /**
             * Properties of a LoadScratchInformationRequest.
             * @memberof wm.protobuf
             * @interface ILoadScratchInformationRequest
             * @property {number} userId LoadScratchInformationRequest userId
             */

            /**
             * Constructs a new LoadScratchInformationRequest.
             * @memberof wm.protobuf
             * @classdesc Represents a LoadScratchInformationRequest.
             * @implements ILoadScratchInformationRequest
             * @constructor
             * @param {wm.protobuf.ILoadScratchInformationRequest=} [properties] Properties to set
             */
            function LoadScratchInformationRequest(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * LoadScratchInformationRequest userId.
             * @member {number} userId
             * @memberof wm.protobuf.LoadScratchInformationRequest
             * @instance
             */
            LoadScratchInformationRequest.prototype.userId = 0;

            /**
             * Creates a new LoadScratchInformationRequest instance using the specified properties.
             * @function create
             * @memberof wm.protobuf.LoadScratchInformationRequest
             * @static
             * @param {wm.protobuf.ILoadScratchInformationRequest=} [properties] Properties to set
             * @returns {wm.protobuf.LoadScratchInformationRequest} LoadScratchInformationRequest instance
             */
            LoadScratchInformationRequest.create = function create(properties) {
                return new LoadScratchInformationRequest(properties);
            };

            /**
             * Encodes the specified LoadScratchInformationRequest message. Does not implicitly {@link wm.protobuf.LoadScratchInformationRequest.verify|verify} messages.
             * @function encode
             * @memberof wm.protobuf.LoadScratchInformationRequest
             * @static
             * @param {wm.protobuf.ILoadScratchInformationRequest} message LoadScratchInformationRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LoadScratchInformationRequest.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.userId);
                return writer;
            };

            /**
             * Encodes the specified LoadScratchInformationRequest message, length delimited. Does not implicitly {@link wm.protobuf.LoadScratchInformationRequest.verify|verify} messages.
             * @function encodeDelimited
             * @memberof wm.protobuf.LoadScratchInformationRequest
             * @static
             * @param {wm.protobuf.ILoadScratchInformationRequest} message LoadScratchInformationRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LoadScratchInformationRequest.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a LoadScratchInformationRequest message from the specified reader or buffer.
             * @function decode
             * @memberof wm.protobuf.LoadScratchInformationRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {wm.protobuf.LoadScratchInformationRequest} LoadScratchInformationRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LoadScratchInformationRequest.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.wm.protobuf.LoadScratchInformationRequest();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.userId = reader.uint32();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("userId"))
                    throw $util.ProtocolError("missing required 'userId'", { instance: message });
                return message;
            };

            /**
             * Decodes a LoadScratchInformationRequest message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof wm.protobuf.LoadScratchInformationRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {wm.protobuf.LoadScratchInformationRequest} LoadScratchInformationRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LoadScratchInformationRequest.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a LoadScratchInformationRequest message.
             * @function verify
             * @memberof wm.protobuf.LoadScratchInformationRequest
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            LoadScratchInformationRequest.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (!$util.isInteger(message.userId))
                    return "userId: integer expected";
                return null;
            };

            /**
             * Creates a LoadScratchInformationRequest message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof wm.protobuf.LoadScratchInformationRequest
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {wm.protobuf.LoadScratchInformationRequest} LoadScratchInformationRequest
             */
            LoadScratchInformationRequest.fromObject = function fromObject(object) {
                if (object instanceof $root.wm.protobuf.LoadScratchInformationRequest)
                    return object;
                let message = new $root.wm.protobuf.LoadScratchInformationRequest();
                if (object.userId != null)
                    message.userId = object.userId >>> 0;
                return message;
            };

            /**
             * Creates a plain object from a LoadScratchInformationRequest message. Also converts values to other types if specified.
             * @function toObject
             * @memberof wm.protobuf.LoadScratchInformationRequest
             * @static
             * @param {wm.protobuf.LoadScratchInformationRequest} message LoadScratchInformationRequest
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            LoadScratchInformationRequest.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults)
                    object.userId = 0;
                if (message.userId != null && message.hasOwnProperty("userId"))
                    object.userId = message.userId;
                return object;
            };

            /**
             * Converts this LoadScratchInformationRequest to JSON.
             * @function toJSON
             * @memberof wm.protobuf.LoadScratchInformationRequest
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            LoadScratchInformationRequest.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for LoadScratchInformationRequest
             * @function getTypeUrl
             * @memberof wm.protobuf.LoadScratchInformationRequest
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            LoadScratchInformationRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/wm.protobuf.LoadScratchInformationRequest";
            };

            return LoadScratchInformationRequest;
        })();

        protobuf.LoadScratchInformationResponse = (function() {

            /**
             * Properties of a LoadScratchInformationResponse.
             * @memberof wm.protobuf
             * @interface ILoadScratchInformationResponse
             * @property {wm.protobuf.ErrorCode} error LoadScratchInformationResponse error
             * @property {Array.<wm.protobuf.IScratchSheet>|null} [scratchSheets] LoadScratchInformationResponse scratchSheets
             * @property {number} currentSheet LoadScratchInformationResponse currentSheet
             * @property {number} numOfScratched LoadScratchInformationResponse numOfScratched
             * @property {Array.<wm.protobuf.IUserItem>|null} [ownedUserItems] LoadScratchInformationResponse ownedUserItems
             */

            /**
             * Constructs a new LoadScratchInformationResponse.
             * @memberof wm.protobuf
             * @classdesc Represents a LoadScratchInformationResponse.
             * @implements ILoadScratchInformationResponse
             * @constructor
             * @param {wm.protobuf.ILoadScratchInformationResponse=} [properties] Properties to set
             */
            function LoadScratchInformationResponse(properties) {
                this.scratchSheets = [];
                this.ownedUserItems = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * LoadScratchInformationResponse error.
             * @member {wm.protobuf.ErrorCode} error
             * @memberof wm.protobuf.LoadScratchInformationResponse
             * @instance
             */
            LoadScratchInformationResponse.prototype.error = 0;

            /**
             * LoadScratchInformationResponse scratchSheets.
             * @member {Array.<wm.protobuf.IScratchSheet>} scratchSheets
             * @memberof wm.protobuf.LoadScratchInformationResponse
             * @instance
             */
            LoadScratchInformationResponse.prototype.scratchSheets = $util.emptyArray;

            /**
             * LoadScratchInformationResponse currentSheet.
             * @member {number} currentSheet
             * @memberof wm.protobuf.LoadScratchInformationResponse
             * @instance
             */
            LoadScratchInformationResponse.prototype.currentSheet = 0;

            /**
             * LoadScratchInformationResponse numOfScratched.
             * @member {number} numOfScratched
             * @memberof wm.protobuf.LoadScratchInformationResponse
             * @instance
             */
            LoadScratchInformationResponse.prototype.numOfScratched = 0;

            /**
             * LoadScratchInformationResponse ownedUserItems.
             * @member {Array.<wm.protobuf.IUserItem>} ownedUserItems
             * @memberof wm.protobuf.LoadScratchInformationResponse
             * @instance
             */
            LoadScratchInformationResponse.prototype.ownedUserItems = $util.emptyArray;

            /**
             * Creates a new LoadScratchInformationResponse instance using the specified properties.
             * @function create
             * @memberof wm.protobuf.LoadScratchInformationResponse
             * @static
             * @param {wm.protobuf.ILoadScratchInformationResponse=} [properties] Properties to set
             * @returns {wm.protobuf.LoadScratchInformationResponse} LoadScratchInformationResponse instance
             */
            LoadScratchInformationResponse.create = function create(properties) {
                return new LoadScratchInformationResponse(properties);
            };

            /**
             * Encodes the specified LoadScratchInformationResponse message. Does not implicitly {@link wm.protobuf.LoadScratchInformationResponse.verify|verify} messages.
             * @function encode
             * @memberof wm.protobuf.LoadScratchInformationResponse
             * @static
             * @param {wm.protobuf.ILoadScratchInformationResponse} message LoadScratchInformationResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LoadScratchInformationResponse.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
                if (message.scratchSheets != null && message.scratchSheets.length)
                    for (let i = 0; i < message.scratchSheets.length; ++i)
                        $root.wm.protobuf.ScratchSheet.encode(message.scratchSheets[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.currentSheet);
                writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.numOfScratched);
                if (message.ownedUserItems != null && message.ownedUserItems.length)
                    for (let i = 0; i < message.ownedUserItems.length; ++i)
                        $root.wm.protobuf.UserItem.encode(message.ownedUserItems[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified LoadScratchInformationResponse message, length delimited. Does not implicitly {@link wm.protobuf.LoadScratchInformationResponse.verify|verify} messages.
             * @function encodeDelimited
             * @memberof wm.protobuf.LoadScratchInformationResponse
             * @static
             * @param {wm.protobuf.ILoadScratchInformationResponse} message LoadScratchInformationResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LoadScratchInformationResponse.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a LoadScratchInformationResponse message from the specified reader or buffer.
             * @function decode
             * @memberof wm.protobuf.LoadScratchInformationResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {wm.protobuf.LoadScratchInformationResponse} LoadScratchInformationResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LoadScratchInformationResponse.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.wm.protobuf.LoadScratchInformationResponse();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.error = reader.int32();
                            break;
                        }
                    case 2: {
                            if (!(message.scratchSheets && message.scratchSheets.length))
                                message.scratchSheets = [];
                            message.scratchSheets.push($root.wm.protobuf.ScratchSheet.decode(reader, reader.uint32()));
                            break;
                        }
                    case 3: {
                            message.currentSheet = reader.uint32();
                            break;
                        }
                    case 4: {
                            message.numOfScratched = reader.uint32();
                            break;
                        }
                    case 5: {
                            if (!(message.ownedUserItems && message.ownedUserItems.length))
                                message.ownedUserItems = [];
                            message.ownedUserItems.push($root.wm.protobuf.UserItem.decode(reader, reader.uint32()));
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("error"))
                    throw $util.ProtocolError("missing required 'error'", { instance: message });
                if (!message.hasOwnProperty("currentSheet"))
                    throw $util.ProtocolError("missing required 'currentSheet'", { instance: message });
                if (!message.hasOwnProperty("numOfScratched"))
                    throw $util.ProtocolError("missing required 'numOfScratched'", { instance: message });
                return message;
            };

            /**
             * Decodes a LoadScratchInformationResponse message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof wm.protobuf.LoadScratchInformationResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {wm.protobuf.LoadScratchInformationResponse} LoadScratchInformationResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LoadScratchInformationResponse.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a LoadScratchInformationResponse message.
             * @function verify
             * @memberof wm.protobuf.LoadScratchInformationResponse
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            LoadScratchInformationResponse.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                switch (message.error) {
                default:
                    return "error: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 7:
                case 9:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 16:
                case 17:
                case 18:
                case 19:
                    break;
                }
                if (message.scratchSheets != null && message.hasOwnProperty("scratchSheets")) {
                    if (!Array.isArray(message.scratchSheets))
                        return "scratchSheets: array expected";
                    for (let i = 0; i < message.scratchSheets.length; ++i) {
                        let error = $root.wm.protobuf.ScratchSheet.verify(message.scratchSheets[i]);
                        if (error)
                            return "scratchSheets." + error;
                    }
                }
                if (!$util.isInteger(message.currentSheet))
                    return "currentSheet: integer expected";
                if (!$util.isInteger(message.numOfScratched))
                    return "numOfScratched: integer expected";
                if (message.ownedUserItems != null && message.hasOwnProperty("ownedUserItems")) {
                    if (!Array.isArray(message.ownedUserItems))
                        return "ownedUserItems: array expected";
                    for (let i = 0; i < message.ownedUserItems.length; ++i) {
                        let error = $root.wm.protobuf.UserItem.verify(message.ownedUserItems[i]);
                        if (error)
                            return "ownedUserItems." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a LoadScratchInformationResponse message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof wm.protobuf.LoadScratchInformationResponse
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {wm.protobuf.LoadScratchInformationResponse} LoadScratchInformationResponse
             */
            LoadScratchInformationResponse.fromObject = function fromObject(object) {
                if (object instanceof $root.wm.protobuf.LoadScratchInformationResponse)
                    return object;
                let message = new $root.wm.protobuf.LoadScratchInformationResponse();
                switch (object.error) {
                default:
                    if (typeof object.error === "number") {
                        message.error = object.error;
                        break;
                    }
                    break;
                case "ERR_SUCCESS":
                case 0:
                    message.error = 0;
                    break;
                case "ERR_REQUEST":
                case 1:
                    message.error = 1;
                    break;
                case "ERR_NOT_FOUND":
                case 2:
                    message.error = 2;
                    break;
                case "ERR_ID_SERVER":
                case 3:
                    message.error = 3;
                    break;
                case "ERR_ID_BANNED":
                case 4:
                    message.error = 4;
                    break;
                case "ERR_USER_LOCKED":
                case 5:
                    message.error = 5;
                    break;
                case "ERR_USER_VERSION":
                case 6:
                    message.error = 6;
                    break;
                case "ERR_NAME_CONFLICTED":
                case 7:
                    message.error = 7;
                    break;
                case "ERR_FORBIDDEN":
                case 9:
                    message.error = 9;
                    break;
                case "ERR_USER_SUCCEEDED":
                case 11:
                    message.error = 11;
                    break;
                case "ERR_BEING_TRANSFERRED":
                case 12:
                    message.error = 12;
                    break;
                case "ERR_SCRATCH_LOCKED":
                case 13:
                    message.error = 13;
                    break;
                case "ERR_BINGO_REVENGE_LOCKED":
                case 14:
                    message.error = 14;
                    break;
                case "ERR_BINGO_ALREDY_LINKED":
                case 15:
                    message.error = 15;
                    break;
                case "ERR_BINGO_FINISHED":
                case 16:
                    message.error = 16;
                    break;
                case "ERR_BINGO_REACHED_MAX_USER":
                case 17:
                    message.error = 17;
                    break;
                case "ERR_CAR_NOT_FOUND":
                case 18:
                    message.error = 18;
                    break;
                case "ERR_BINGO_CARD_NOT_FOUND":
                case 19:
                    message.error = 19;
                    break;
                }
                if (object.scratchSheets) {
                    if (!Array.isArray(object.scratchSheets))
                        throw TypeError(".wm.protobuf.LoadScratchInformationResponse.scratchSheets: array expected");
                    message.scratchSheets = [];
                    for (let i = 0; i < object.scratchSheets.length; ++i) {
                        if (typeof object.scratchSheets[i] !== "object")
                            throw TypeError(".wm.protobuf.LoadScratchInformationResponse.scratchSheets: object expected");
                        message.scratchSheets[i] = $root.wm.protobuf.ScratchSheet.fromObject(object.scratchSheets[i]);
                    }
                }
                if (object.currentSheet != null)
                    message.currentSheet = object.currentSheet >>> 0;
                if (object.numOfScratched != null)
                    message.numOfScratched = object.numOfScratched >>> 0;
                if (object.ownedUserItems) {
                    if (!Array.isArray(object.ownedUserItems))
                        throw TypeError(".wm.protobuf.LoadScratchInformationResponse.ownedUserItems: array expected");
                    message.ownedUserItems = [];
                    for (let i = 0; i < object.ownedUserItems.length; ++i) {
                        if (typeof object.ownedUserItems[i] !== "object")
                            throw TypeError(".wm.protobuf.LoadScratchInformationResponse.ownedUserItems: object expected");
                        message.ownedUserItems[i] = $root.wm.protobuf.UserItem.fromObject(object.ownedUserItems[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from a LoadScratchInformationResponse message. Also converts values to other types if specified.
             * @function toObject
             * @memberof wm.protobuf.LoadScratchInformationResponse
             * @static
             * @param {wm.protobuf.LoadScratchInformationResponse} message LoadScratchInformationResponse
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            LoadScratchInformationResponse.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults) {
                    object.scratchSheets = [];
                    object.ownedUserItems = [];
                }
                if (options.defaults) {
                    object.error = options.enums === String ? "ERR_SUCCESS" : 0;
                    object.currentSheet = 0;
                    object.numOfScratched = 0;
                }
                if (message.error != null && message.hasOwnProperty("error"))
                    object.error = options.enums === String ? $root.wm.protobuf.ErrorCode[message.error] === undefined ? message.error : $root.wm.protobuf.ErrorCode[message.error] : message.error;
                if (message.scratchSheets && message.scratchSheets.length) {
                    object.scratchSheets = [];
                    for (let j = 0; j < message.scratchSheets.length; ++j)
                        object.scratchSheets[j] = $root.wm.protobuf.ScratchSheet.toObject(message.scratchSheets[j], options);
                }
                if (message.currentSheet != null && message.hasOwnProperty("currentSheet"))
                    object.currentSheet = message.currentSheet;
                if (message.numOfScratched != null && message.hasOwnProperty("numOfScratched"))
                    object.numOfScratched = message.numOfScratched;
                if (message.ownedUserItems && message.ownedUserItems.length) {
                    object.ownedUserItems = [];
                    for (let j = 0; j < message.ownedUserItems.length; ++j)
                        object.ownedUserItems[j] = $root.wm.protobuf.UserItem.toObject(message.ownedUserItems[j], options);
                }
                return object;
            };

            /**
             * Converts this LoadScratchInformationResponse to JSON.
             * @function toJSON
             * @memberof wm.protobuf.LoadScratchInformationResponse
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            LoadScratchInformationResponse.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for LoadScratchInformationResponse
             * @function getTypeUrl
             * @memberof wm.protobuf.LoadScratchInformationResponse
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            LoadScratchInformationResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/wm.protobuf.LoadScratchInformationResponse";
            };

            return LoadScratchInformationResponse;
        })();

        protobuf.SaveScratchSheetRequest = (function() {

            /**
             * Properties of a SaveScratchSheetRequest.
             * @memberof wm.protobuf
             * @interface ISaveScratchSheetRequest
             * @property {number} timestamp SaveScratchSheetRequest timestamp
             * @property {number} targetSheet SaveScratchSheetRequest targetSheet
             * @property {number} targetSquare SaveScratchSheetRequest targetSquare
             * @property {number} userId SaveScratchSheetRequest userId
             */

            /**
             * Constructs a new SaveScratchSheetRequest.
             * @memberof wm.protobuf
             * @classdesc Represents a SaveScratchSheetRequest.
             * @implements ISaveScratchSheetRequest
             * @constructor
             * @param {wm.protobuf.ISaveScratchSheetRequest=} [properties] Properties to set
             */
            function SaveScratchSheetRequest(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * SaveScratchSheetRequest timestamp.
             * @member {number} timestamp
             * @memberof wm.protobuf.SaveScratchSheetRequest
             * @instance
             */
            SaveScratchSheetRequest.prototype.timestamp = 0;

            /**
             * SaveScratchSheetRequest targetSheet.
             * @member {number} targetSheet
             * @memberof wm.protobuf.SaveScratchSheetRequest
             * @instance
             */
            SaveScratchSheetRequest.prototype.targetSheet = 0;

            /**
             * SaveScratchSheetRequest targetSquare.
             * @member {number} targetSquare
             * @memberof wm.protobuf.SaveScratchSheetRequest
             * @instance
             */
            SaveScratchSheetRequest.prototype.targetSquare = 0;

            /**
             * SaveScratchSheetRequest userId.
             * @member {number} userId
             * @memberof wm.protobuf.SaveScratchSheetRequest
             * @instance
             */
            SaveScratchSheetRequest.prototype.userId = 0;

            /**
             * Creates a new SaveScratchSheetRequest instance using the specified properties.
             * @function create
             * @memberof wm.protobuf.SaveScratchSheetRequest
             * @static
             * @param {wm.protobuf.ISaveScratchSheetRequest=} [properties] Properties to set
             * @returns {wm.protobuf.SaveScratchSheetRequest} SaveScratchSheetRequest instance
             */
            SaveScratchSheetRequest.create = function create(properties) {
                return new SaveScratchSheetRequest(properties);
            };

            /**
             * Encodes the specified SaveScratchSheetRequest message. Does not implicitly {@link wm.protobuf.SaveScratchSheetRequest.verify|verify} messages.
             * @function encode
             * @memberof wm.protobuf.SaveScratchSheetRequest
             * @static
             * @param {wm.protobuf.ISaveScratchSheetRequest} message SaveScratchSheetRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SaveScratchSheetRequest.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.targetSheet);
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.targetSquare);
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.userId);
                writer.uint32(/* id 7, wireType 0 =*/56).uint32(message.timestamp);
                return writer;
            };

            /**
             * Encodes the specified SaveScratchSheetRequest message, length delimited. Does not implicitly {@link wm.protobuf.SaveScratchSheetRequest.verify|verify} messages.
             * @function encodeDelimited
             * @memberof wm.protobuf.SaveScratchSheetRequest
             * @static
             * @param {wm.protobuf.ISaveScratchSheetRequest} message SaveScratchSheetRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SaveScratchSheetRequest.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a SaveScratchSheetRequest message from the specified reader or buffer.
             * @function decode
             * @memberof wm.protobuf.SaveScratchSheetRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {wm.protobuf.SaveScratchSheetRequest} SaveScratchSheetRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SaveScratchSheetRequest.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.wm.protobuf.SaveScratchSheetRequest();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 7: {
                            message.timestamp = reader.uint32();
                            break;
                        }
                    case 1: {
                            message.targetSheet = reader.uint32();
                            break;
                        }
                    case 2: {
                            message.targetSquare = reader.uint32();
                            break;
                        }
                    case 3: {
                            message.userId = reader.uint32();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("timestamp"))
                    throw $util.ProtocolError("missing required 'timestamp'", { instance: message });
                if (!message.hasOwnProperty("targetSheet"))
                    throw $util.ProtocolError("missing required 'targetSheet'", { instance: message });
                if (!message.hasOwnProperty("targetSquare"))
                    throw $util.ProtocolError("missing required 'targetSquare'", { instance: message });
                if (!message.hasOwnProperty("userId"))
                    throw $util.ProtocolError("missing required 'userId'", { instance: message });
                return message;
            };

            /**
             * Decodes a SaveScratchSheetRequest message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof wm.protobuf.SaveScratchSheetRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {wm.protobuf.SaveScratchSheetRequest} SaveScratchSheetRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SaveScratchSheetRequest.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a SaveScratchSheetRequest message.
             * @function verify
             * @memberof wm.protobuf.SaveScratchSheetRequest
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            SaveScratchSheetRequest.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (!$util.isInteger(message.timestamp))
                    return "timestamp: integer expected";
                if (!$util.isInteger(message.targetSheet))
                    return "targetSheet: integer expected";
                if (!$util.isInteger(message.targetSquare))
                    return "targetSquare: integer expected";
                if (!$util.isInteger(message.userId))
                    return "userId: integer expected";
                return null;
            };

            /**
             * Creates a SaveScratchSheetRequest message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof wm.protobuf.SaveScratchSheetRequest
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {wm.protobuf.SaveScratchSheetRequest} SaveScratchSheetRequest
             */
            SaveScratchSheetRequest.fromObject = function fromObject(object) {
                if (object instanceof $root.wm.protobuf.SaveScratchSheetRequest)
                    return object;
                let message = new $root.wm.protobuf.SaveScratchSheetRequest();
                if (object.timestamp != null)
                    message.timestamp = object.timestamp >>> 0;
                if (object.targetSheet != null)
                    message.targetSheet = object.targetSheet >>> 0;
                if (object.targetSquare != null)
                    message.targetSquare = object.targetSquare >>> 0;
                if (object.userId != null)
                    message.userId = object.userId >>> 0;
                return message;
            };

            /**
             * Creates a plain object from a SaveScratchSheetRequest message. Also converts values to other types if specified.
             * @function toObject
             * @memberof wm.protobuf.SaveScratchSheetRequest
             * @static
             * @param {wm.protobuf.SaveScratchSheetRequest} message SaveScratchSheetRequest
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            SaveScratchSheetRequest.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.targetSheet = 0;
                    object.targetSquare = 0;
                    object.userId = 0;
                    object.timestamp = 0;
                }
                if (message.targetSheet != null && message.hasOwnProperty("targetSheet"))
                    object.targetSheet = message.targetSheet;
                if (message.targetSquare != null && message.hasOwnProperty("targetSquare"))
                    object.targetSquare = message.targetSquare;
                if (message.userId != null && message.hasOwnProperty("userId"))
                    object.userId = message.userId;
                if (message.timestamp != null && message.hasOwnProperty("timestamp"))
                    object.timestamp = message.timestamp;
                return object;
            };

            /**
             * Converts this SaveScratchSheetRequest to JSON.
             * @function toJSON
             * @memberof wm.protobuf.SaveScratchSheetRequest
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            SaveScratchSheetRequest.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for SaveScratchSheetRequest
             * @function getTypeUrl
             * @memberof wm.protobuf.SaveScratchSheetRequest
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            SaveScratchSheetRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/wm.protobuf.SaveScratchSheetRequest";
            };

            return SaveScratchSheetRequest;
        })();

        protobuf.SaveScratchSheetResponse = (function() {

            /**
             * Properties of a SaveScratchSheetResponse.
             * @memberof wm.protobuf
             * @interface ISaveScratchSheetResponse
             * @property {wm.protobuf.ErrorCode} error SaveScratchSheetResponse error
             * @property {Array.<wm.protobuf.IScratchSheet>|null} [scratchSheets] SaveScratchSheetResponse scratchSheets
             * @property {number} currentSheet SaveScratchSheetResponse currentSheet
             * @property {number} numOfScratched SaveScratchSheetResponse numOfScratched
             * @property {wm.protobuf.IUserItem|null} [earnedItem] SaveScratchSheetResponse earnedItem
             */

            /**
             * Constructs a new SaveScratchSheetResponse.
             * @memberof wm.protobuf
             * @classdesc Represents a SaveScratchSheetResponse.
             * @implements ISaveScratchSheetResponse
             * @constructor
             * @param {wm.protobuf.ISaveScratchSheetResponse=} [properties] Properties to set
             */
            function SaveScratchSheetResponse(properties) {
                this.scratchSheets = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * SaveScratchSheetResponse error.
             * @member {wm.protobuf.ErrorCode} error
             * @memberof wm.protobuf.SaveScratchSheetResponse
             * @instance
             */
            SaveScratchSheetResponse.prototype.error = 0;

            /**
             * SaveScratchSheetResponse scratchSheets.
             * @member {Array.<wm.protobuf.IScratchSheet>} scratchSheets
             * @memberof wm.protobuf.SaveScratchSheetResponse
             * @instance
             */
            SaveScratchSheetResponse.prototype.scratchSheets = $util.emptyArray;

            /**
             * SaveScratchSheetResponse currentSheet.
             * @member {number} currentSheet
             * @memberof wm.protobuf.SaveScratchSheetResponse
             * @instance
             */
            SaveScratchSheetResponse.prototype.currentSheet = 0;

            /**
             * SaveScratchSheetResponse numOfScratched.
             * @member {number} numOfScratched
             * @memberof wm.protobuf.SaveScratchSheetResponse
             * @instance
             */
            SaveScratchSheetResponse.prototype.numOfScratched = 0;

            /**
             * SaveScratchSheetResponse earnedItem.
             * @member {wm.protobuf.IUserItem|null|undefined} earnedItem
             * @memberof wm.protobuf.SaveScratchSheetResponse
             * @instance
             */
            SaveScratchSheetResponse.prototype.earnedItem = null;

            /**
             * Creates a new SaveScratchSheetResponse instance using the specified properties.
             * @function create
             * @memberof wm.protobuf.SaveScratchSheetResponse
             * @static
             * @param {wm.protobuf.ISaveScratchSheetResponse=} [properties] Properties to set
             * @returns {wm.protobuf.SaveScratchSheetResponse} SaveScratchSheetResponse instance
             */
            SaveScratchSheetResponse.create = function create(properties) {
                return new SaveScratchSheetResponse(properties);
            };

            /**
             * Encodes the specified SaveScratchSheetResponse message. Does not implicitly {@link wm.protobuf.SaveScratchSheetResponse.verify|verify} messages.
             * @function encode
             * @memberof wm.protobuf.SaveScratchSheetResponse
             * @static
             * @param {wm.protobuf.ISaveScratchSheetResponse} message SaveScratchSheetResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SaveScratchSheetResponse.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
                if (message.scratchSheets != null && message.scratchSheets.length)
                    for (let i = 0; i < message.scratchSheets.length; ++i)
                        $root.wm.protobuf.ScratchSheet.encode(message.scratchSheets[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.currentSheet);
                writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.numOfScratched);
                if (message.earnedItem != null && Object.hasOwnProperty.call(message, "earnedItem"))
                    $root.wm.protobuf.UserItem.encode(message.earnedItem, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified SaveScratchSheetResponse message, length delimited. Does not implicitly {@link wm.protobuf.SaveScratchSheetResponse.verify|verify} messages.
             * @function encodeDelimited
             * @memberof wm.protobuf.SaveScratchSheetResponse
             * @static
             * @param {wm.protobuf.ISaveScratchSheetResponse} message SaveScratchSheetResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SaveScratchSheetResponse.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a SaveScratchSheetResponse message from the specified reader or buffer.
             * @function decode
             * @memberof wm.protobuf.SaveScratchSheetResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {wm.protobuf.SaveScratchSheetResponse} SaveScratchSheetResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SaveScratchSheetResponse.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.wm.protobuf.SaveScratchSheetResponse();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.error = reader.int32();
                            break;
                        }
                    case 2: {
                            if (!(message.scratchSheets && message.scratchSheets.length))
                                message.scratchSheets = [];
                            message.scratchSheets.push($root.wm.protobuf.ScratchSheet.decode(reader, reader.uint32()));
                            break;
                        }
                    case 3: {
                            message.currentSheet = reader.uint32();
                            break;
                        }
                    case 4: {
                            message.numOfScratched = reader.uint32();
                            break;
                        }
                    case 5: {
                            message.earnedItem = $root.wm.protobuf.UserItem.decode(reader, reader.uint32());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("error"))
                    throw $util.ProtocolError("missing required 'error'", { instance: message });
                if (!message.hasOwnProperty("currentSheet"))
                    throw $util.ProtocolError("missing required 'currentSheet'", { instance: message });
                if (!message.hasOwnProperty("numOfScratched"))
                    throw $util.ProtocolError("missing required 'numOfScratched'", { instance: message });
                return message;
            };

            /**
             * Decodes a SaveScratchSheetResponse message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof wm.protobuf.SaveScratchSheetResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {wm.protobuf.SaveScratchSheetResponse} SaveScratchSheetResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SaveScratchSheetResponse.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a SaveScratchSheetResponse message.
             * @function verify
             * @memberof wm.protobuf.SaveScratchSheetResponse
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            SaveScratchSheetResponse.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                switch (message.error) {
                default:
                    return "error: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 7:
                case 9:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 16:
                case 17:
                case 18:
                case 19:
                    break;
                }
                if (message.scratchSheets != null && message.hasOwnProperty("scratchSheets")) {
                    if (!Array.isArray(message.scratchSheets))
                        return "scratchSheets: array expected";
                    for (let i = 0; i < message.scratchSheets.length; ++i) {
                        let error = $root.wm.protobuf.ScratchSheet.verify(message.scratchSheets[i]);
                        if (error)
                            return "scratchSheets." + error;
                    }
                }
                if (!$util.isInteger(message.currentSheet))
                    return "currentSheet: integer expected";
                if (!$util.isInteger(message.numOfScratched))
                    return "numOfScratched: integer expected";
                if (message.earnedItem != null && message.hasOwnProperty("earnedItem")) {
                    let error = $root.wm.protobuf.UserItem.verify(message.earnedItem);
                    if (error)
                        return "earnedItem." + error;
                }
                return null;
            };

            /**
             * Creates a SaveScratchSheetResponse message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof wm.protobuf.SaveScratchSheetResponse
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {wm.protobuf.SaveScratchSheetResponse} SaveScratchSheetResponse
             */
            SaveScratchSheetResponse.fromObject = function fromObject(object) {
                if (object instanceof $root.wm.protobuf.SaveScratchSheetResponse)
                    return object;
                let message = new $root.wm.protobuf.SaveScratchSheetResponse();
                switch (object.error) {
                default:
                    if (typeof object.error === "number") {
                        message.error = object.error;
                        break;
                    }
                    break;
                case "ERR_SUCCESS":
                case 0:
                    message.error = 0;
                    break;
                case "ERR_REQUEST":
                case 1:
                    message.error = 1;
                    break;
                case "ERR_NOT_FOUND":
                case 2:
                    message.error = 2;
                    break;
                case "ERR_ID_SERVER":
                case 3:
                    message.error = 3;
                    break;
                case "ERR_ID_BANNED":
                case 4:
                    message.error = 4;
                    break;
                case "ERR_USER_LOCKED":
                case 5:
                    message.error = 5;
                    break;
                case "ERR_USER_VERSION":
                case 6:
                    message.error = 6;
                    break;
                case "ERR_NAME_CONFLICTED":
                case 7:
                    message.error = 7;
                    break;
                case "ERR_FORBIDDEN":
                case 9:
                    message.error = 9;
                    break;
                case "ERR_USER_SUCCEEDED":
                case 11:
                    message.error = 11;
                    break;
                case "ERR_BEING_TRANSFERRED":
                case 12:
                    message.error = 12;
                    break;
                case "ERR_SCRATCH_LOCKED":
                case 13:
                    message.error = 13;
                    break;
                case "ERR_BINGO_REVENGE_LOCKED":
                case 14:
                    message.error = 14;
                    break;
                case "ERR_BINGO_ALREDY_LINKED":
                case 15:
                    message.error = 15;
                    break;
                case "ERR_BINGO_FINISHED":
                case 16:
                    message.error = 16;
                    break;
                case "ERR_BINGO_REACHED_MAX_USER":
                case 17:
                    message.error = 17;
                    break;
                case "ERR_CAR_NOT_FOUND":
                case 18:
                    message.error = 18;
                    break;
                case "ERR_BINGO_CARD_NOT_FOUND":
                case 19:
                    message.error = 19;
                    break;
                }
                if (object.scratchSheets) {
                    if (!Array.isArray(object.scratchSheets))
                        throw TypeError(".wm.protobuf.SaveScratchSheetResponse.scratchSheets: array expected");
                    message.scratchSheets = [];
                    for (let i = 0; i < object.scratchSheets.length; ++i) {
                        if (typeof object.scratchSheets[i] !== "object")
                            throw TypeError(".wm.protobuf.SaveScratchSheetResponse.scratchSheets: object expected");
                        message.scratchSheets[i] = $root.wm.protobuf.ScratchSheet.fromObject(object.scratchSheets[i]);
                    }
                }
                if (object.currentSheet != null)
                    message.currentSheet = object.currentSheet >>> 0;
                if (object.numOfScratched != null)
                    message.numOfScratched = object.numOfScratched >>> 0;
                if (object.earnedItem != null) {
                    if (typeof object.earnedItem !== "object")
                        throw TypeError(".wm.protobuf.SaveScratchSheetResponse.earnedItem: object expected");
                    message.earnedItem = $root.wm.protobuf.UserItem.fromObject(object.earnedItem);
                }
                return message;
            };

            /**
             * Creates a plain object from a SaveScratchSheetResponse message. Also converts values to other types if specified.
             * @function toObject
             * @memberof wm.protobuf.SaveScratchSheetResponse
             * @static
             * @param {wm.protobuf.SaveScratchSheetResponse} message SaveScratchSheetResponse
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            SaveScratchSheetResponse.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.scratchSheets = [];
                if (options.defaults) {
                    object.error = options.enums === String ? "ERR_SUCCESS" : 0;
                    object.currentSheet = 0;
                    object.numOfScratched = 0;
                    object.earnedItem = null;
                }
                if (message.error != null && message.hasOwnProperty("error"))
                    object.error = options.enums === String ? $root.wm.protobuf.ErrorCode[message.error] === undefined ? message.error : $root.wm.protobuf.ErrorCode[message.error] : message.error;
                if (message.scratchSheets && message.scratchSheets.length) {
                    object.scratchSheets = [];
                    for (let j = 0; j < message.scratchSheets.length; ++j)
                        object.scratchSheets[j] = $root.wm.protobuf.ScratchSheet.toObject(message.scratchSheets[j], options);
                }
                if (message.currentSheet != null && message.hasOwnProperty("currentSheet"))
                    object.currentSheet = message.currentSheet;
                if (message.numOfScratched != null && message.hasOwnProperty("numOfScratched"))
                    object.numOfScratched = message.numOfScratched;
                if (message.earnedItem != null && message.hasOwnProperty("earnedItem"))
                    object.earnedItem = $root.wm.protobuf.UserItem.toObject(message.earnedItem, options);
                return object;
            };

            /**
             * Converts this SaveScratchSheetResponse to JSON.
             * @function toJSON
             * @memberof wm.protobuf.SaveScratchSheetResponse
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            SaveScratchSheetResponse.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for SaveScratchSheetResponse
             * @function getTypeUrl
             * @memberof wm.protobuf.SaveScratchSheetResponse
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            SaveScratchSheetResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/wm.protobuf.SaveScratchSheetResponse";
            };

            return SaveScratchSheetResponse;
        })();

        protobuf.TurnScratchSheetRequest = (function() {

            /**
             * Properties of a TurnScratchSheetRequest.
             * @memberof wm.protobuf
             * @interface ITurnScratchSheetRequest
             * @property {number} userId TurnScratchSheetRequest userId
             * @property {number} targetSheet TurnScratchSheetRequest targetSheet
             */

            /**
             * Constructs a new TurnScratchSheetRequest.
             * @memberof wm.protobuf
             * @classdesc Represents a TurnScratchSheetRequest.
             * @implements ITurnScratchSheetRequest
             * @constructor
             * @param {wm.protobuf.ITurnScratchSheetRequest=} [properties] Properties to set
             */
            function TurnScratchSheetRequest(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * TurnScratchSheetRequest userId.
             * @member {number} userId
             * @memberof wm.protobuf.TurnScratchSheetRequest
             * @instance
             */
            TurnScratchSheetRequest.prototype.userId = 0;

            /**
             * TurnScratchSheetRequest targetSheet.
             * @member {number} targetSheet
             * @memberof wm.protobuf.TurnScratchSheetRequest
             * @instance
             */
            TurnScratchSheetRequest.prototype.targetSheet = 0;

            /**
             * Creates a new TurnScratchSheetRequest instance using the specified properties.
             * @function create
             * @memberof wm.protobuf.TurnScratchSheetRequest
             * @static
             * @param {wm.protobuf.ITurnScratchSheetRequest=} [properties] Properties to set
             * @returns {wm.protobuf.TurnScratchSheetRequest} TurnScratchSheetRequest instance
             */
            TurnScratchSheetRequest.create = function create(properties) {
                return new TurnScratchSheetRequest(properties);
            };

            /**
             * Encodes the specified TurnScratchSheetRequest message. Does not implicitly {@link wm.protobuf.TurnScratchSheetRequest.verify|verify} messages.
             * @function encode
             * @memberof wm.protobuf.TurnScratchSheetRequest
             * @static
             * @param {wm.protobuf.ITurnScratchSheetRequest} message TurnScratchSheetRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            TurnScratchSheetRequest.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.userId);
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.targetSheet);
                return writer;
            };

            /**
             * Encodes the specified TurnScratchSheetRequest message, length delimited. Does not implicitly {@link wm.protobuf.TurnScratchSheetRequest.verify|verify} messages.
             * @function encodeDelimited
             * @memberof wm.protobuf.TurnScratchSheetRequest
             * @static
             * @param {wm.protobuf.ITurnScratchSheetRequest} message TurnScratchSheetRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            TurnScratchSheetRequest.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a TurnScratchSheetRequest message from the specified reader or buffer.
             * @function decode
             * @memberof wm.protobuf.TurnScratchSheetRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {wm.protobuf.TurnScratchSheetRequest} TurnScratchSheetRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            TurnScratchSheetRequest.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.wm.protobuf.TurnScratchSheetRequest();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.userId = reader.uint32();
                            break;
                        }
                    case 2: {
                            message.targetSheet = reader.uint32();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("userId"))
                    throw $util.ProtocolError("missing required 'userId'", { instance: message });
                if (!message.hasOwnProperty("targetSheet"))
                    throw $util.ProtocolError("missing required 'targetSheet'", { instance: message });
                return message;
            };

            /**
             * Decodes a TurnScratchSheetRequest message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof wm.protobuf.TurnScratchSheetRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {wm.protobuf.TurnScratchSheetRequest} TurnScratchSheetRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            TurnScratchSheetRequest.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a TurnScratchSheetRequest message.
             * @function verify
             * @memberof wm.protobuf.TurnScratchSheetRequest
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            TurnScratchSheetRequest.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (!$util.isInteger(message.userId))
                    return "userId: integer expected";
                if (!$util.isInteger(message.targetSheet))
                    return "targetSheet: integer expected";
                return null;
            };

            /**
             * Creates a TurnScratchSheetRequest message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof wm.protobuf.TurnScratchSheetRequest
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {wm.protobuf.TurnScratchSheetRequest} TurnScratchSheetRequest
             */
            TurnScratchSheetRequest.fromObject = function fromObject(object) {
                if (object instanceof $root.wm.protobuf.TurnScratchSheetRequest)
                    return object;
                let message = new $root.wm.protobuf.TurnScratchSheetRequest();
                if (object.userId != null)
                    message.userId = object.userId >>> 0;
                if (object.targetSheet != null)
                    message.targetSheet = object.targetSheet >>> 0;
                return message;
            };

            /**
             * Creates a plain object from a TurnScratchSheetRequest message. Also converts values to other types if specified.
             * @function toObject
             * @memberof wm.protobuf.TurnScratchSheetRequest
             * @static
             * @param {wm.protobuf.TurnScratchSheetRequest} message TurnScratchSheetRequest
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            TurnScratchSheetRequest.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.userId = 0;
                    object.targetSheet = 0;
                }
                if (message.userId != null && message.hasOwnProperty("userId"))
                    object.userId = message.userId;
                if (message.targetSheet != null && message.hasOwnProperty("targetSheet"))
                    object.targetSheet = message.targetSheet;
                return object;
            };

            /**
             * Converts this TurnScratchSheetRequest to JSON.
             * @function toJSON
             * @memberof wm.protobuf.TurnScratchSheetRequest
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            TurnScratchSheetRequest.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for TurnScratchSheetRequest
             * @function getTypeUrl
             * @memberof wm.protobuf.TurnScratchSheetRequest
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            TurnScratchSheetRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/wm.protobuf.TurnScratchSheetRequest";
            };

            return TurnScratchSheetRequest;
        })();

        protobuf.TurnScratchSheetResponse = (function() {

            /**
             * Properties of a TurnScratchSheetResponse.
             * @memberof wm.protobuf
             * @interface ITurnScratchSheetResponse
             * @property {wm.protobuf.ErrorCode} error TurnScratchSheetResponse error
             */

            /**
             * Constructs a new TurnScratchSheetResponse.
             * @memberof wm.protobuf
             * @classdesc Represents a TurnScratchSheetResponse.
             * @implements ITurnScratchSheetResponse
             * @constructor
             * @param {wm.protobuf.ITurnScratchSheetResponse=} [properties] Properties to set
             */
            function TurnScratchSheetResponse(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * TurnScratchSheetResponse error.
             * @member {wm.protobuf.ErrorCode} error
             * @memberof wm.protobuf.TurnScratchSheetResponse
             * @instance
             */
            TurnScratchSheetResponse.prototype.error = 0;

            /**
             * Creates a new TurnScratchSheetResponse instance using the specified properties.
             * @function create
             * @memberof wm.protobuf.TurnScratchSheetResponse
             * @static
             * @param {wm.protobuf.ITurnScratchSheetResponse=} [properties] Properties to set
             * @returns {wm.protobuf.TurnScratchSheetResponse} TurnScratchSheetResponse instance
             */
            TurnScratchSheetResponse.create = function create(properties) {
                return new TurnScratchSheetResponse(properties);
            };

            /**
             * Encodes the specified TurnScratchSheetResponse message. Does not implicitly {@link wm.protobuf.TurnScratchSheetResponse.verify|verify} messages.
             * @function encode
             * @memberof wm.protobuf.TurnScratchSheetResponse
             * @static
             * @param {wm.protobuf.ITurnScratchSheetResponse} message TurnScratchSheetResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            TurnScratchSheetResponse.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
                return writer;
            };

            /**
             * Encodes the specified TurnScratchSheetResponse message, length delimited. Does not implicitly {@link wm.protobuf.TurnScratchSheetResponse.verify|verify} messages.
             * @function encodeDelimited
             * @memberof wm.protobuf.TurnScratchSheetResponse
             * @static
             * @param {wm.protobuf.ITurnScratchSheetResponse} message TurnScratchSheetResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            TurnScratchSheetResponse.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a TurnScratchSheetResponse message from the specified reader or buffer.
             * @function decode
             * @memberof wm.protobuf.TurnScratchSheetResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {wm.protobuf.TurnScratchSheetResponse} TurnScratchSheetResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            TurnScratchSheetResponse.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.wm.protobuf.TurnScratchSheetResponse();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.error = reader.int32();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("error"))
                    throw $util.ProtocolError("missing required 'error'", { instance: message });
                return message;
            };

            /**
             * Decodes a TurnScratchSheetResponse message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof wm.protobuf.TurnScratchSheetResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {wm.protobuf.TurnScratchSheetResponse} TurnScratchSheetResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            TurnScratchSheetResponse.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a TurnScratchSheetResponse message.
             * @function verify
             * @memberof wm.protobuf.TurnScratchSheetResponse
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            TurnScratchSheetResponse.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                switch (message.error) {
                default:
                    return "error: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 7:
                case 9:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 16:
                case 17:
                case 18:
                case 19:
                    break;
                }
                return null;
            };

            /**
             * Creates a TurnScratchSheetResponse message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof wm.protobuf.TurnScratchSheetResponse
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {wm.protobuf.TurnScratchSheetResponse} TurnScratchSheetResponse
             */
            TurnScratchSheetResponse.fromObject = function fromObject(object) {
                if (object instanceof $root.wm.protobuf.TurnScratchSheetResponse)
                    return object;
                let message = new $root.wm.protobuf.TurnScratchSheetResponse();
                switch (object.error) {
                default:
                    if (typeof object.error === "number") {
                        message.error = object.error;
                        break;
                    }
                    break;
                case "ERR_SUCCESS":
                case 0:
                    message.error = 0;
                    break;
                case "ERR_REQUEST":
                case 1:
                    message.error = 1;
                    break;
                case "ERR_NOT_FOUND":
                case 2:
                    message.error = 2;
                    break;
                case "ERR_ID_SERVER":
                case 3:
                    message.error = 3;
                    break;
                case "ERR_ID_BANNED":
                case 4:
                    message.error = 4;
                    break;
                case "ERR_USER_LOCKED":
                case 5:
                    message.error = 5;
                    break;
                case "ERR_USER_VERSION":
                case 6:
                    message.error = 6;
                    break;
                case "ERR_NAME_CONFLICTED":
                case 7:
                    message.error = 7;
                    break;
                case "ERR_FORBIDDEN":
                case 9:
                    message.error = 9;
                    break;
                case "ERR_USER_SUCCEEDED":
                case 11:
                    message.error = 11;
                    break;
                case "ERR_BEING_TRANSFERRED":
                case 12:
                    message.error = 12;
                    break;
                case "ERR_SCRATCH_LOCKED":
                case 13:
                    message.error = 13;
                    break;
                case "ERR_BINGO_REVENGE_LOCKED":
                case 14:
                    message.error = 14;
                    break;
                case "ERR_BINGO_ALREDY_LINKED":
                case 15:
                    message.error = 15;
                    break;
                case "ERR_BINGO_FINISHED":
                case 16:
                    message.error = 16;
                    break;
                case "ERR_BINGO_REACHED_MAX_USER":
                case 17:
                    message.error = 17;
                    break;
                case "ERR_CAR_NOT_FOUND":
                case 18:
                    message.error = 18;
                    break;
                case "ERR_BINGO_CARD_NOT_FOUND":
                case 19:
                    message.error = 19;
                    break;
                }
                return message;
            };

            /**
             * Creates a plain object from a TurnScratchSheetResponse message. Also converts values to other types if specified.
             * @function toObject
             * @memberof wm.protobuf.TurnScratchSheetResponse
             * @static
             * @param {wm.protobuf.TurnScratchSheetResponse} message TurnScratchSheetResponse
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            TurnScratchSheetResponse.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults)
                    object.error = options.enums === String ? "ERR_SUCCESS" : 0;
                if (message.error != null && message.hasOwnProperty("error"))
                    object.error = options.enums === String ? $root.wm.protobuf.ErrorCode[message.error] === undefined ? message.error : $root.wm.protobuf.ErrorCode[message.error] : message.error;
                return object;
            };

            /**
             * Converts this TurnScratchSheetResponse to JSON.
             * @function toJSON
             * @memberof wm.protobuf.TurnScratchSheetResponse
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            TurnScratchSheetResponse.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for TurnScratchSheetResponse
             * @function getTypeUrl
             * @memberof wm.protobuf.TurnScratchSheetResponse
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            TurnScratchSheetResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/wm.protobuf.TurnScratchSheetResponse";
            };

            return TurnScratchSheetResponse;
        })();

        protobuf.CheckItemReceivableCarsRequest = (function() {

            /**
             * Properties of a CheckItemReceivableCarsRequest.
             * @memberof wm.protobuf
             * @interface ICheckItemReceivableCarsRequest
             * @property {number} userId CheckItemReceivableCarsRequest userId
             * @property {Array.<wm.protobuf.IUserItem>|null} [itemsToBeEarned] CheckItemReceivableCarsRequest itemsToBeEarned
             */

            /**
             * Constructs a new CheckItemReceivableCarsRequest.
             * @memberof wm.protobuf
             * @classdesc Represents a CheckItemReceivableCarsRequest.
             * @implements ICheckItemReceivableCarsRequest
             * @constructor
             * @param {wm.protobuf.ICheckItemReceivableCarsRequest=} [properties] Properties to set
             */
            function CheckItemReceivableCarsRequest(properties) {
                this.itemsToBeEarned = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * CheckItemReceivableCarsRequest userId.
             * @member {number} userId
             * @memberof wm.protobuf.CheckItemReceivableCarsRequest
             * @instance
             */
            CheckItemReceivableCarsRequest.prototype.userId = 0;

            /**
             * CheckItemReceivableCarsRequest itemsToBeEarned.
             * @member {Array.<wm.protobuf.IUserItem>} itemsToBeEarned
             * @memberof wm.protobuf.CheckItemReceivableCarsRequest
             * @instance
             */
            CheckItemReceivableCarsRequest.prototype.itemsToBeEarned = $util.emptyArray;

            /**
             * Creates a new CheckItemReceivableCarsRequest instance using the specified properties.
             * @function create
             * @memberof wm.protobuf.CheckItemReceivableCarsRequest
             * @static
             * @param {wm.protobuf.ICheckItemReceivableCarsRequest=} [properties] Properties to set
             * @returns {wm.protobuf.CheckItemReceivableCarsRequest} CheckItemReceivableCarsRequest instance
             */
            CheckItemReceivableCarsRequest.create = function create(properties) {
                return new CheckItemReceivableCarsRequest(properties);
            };

            /**
             * Encodes the specified CheckItemReceivableCarsRequest message. Does not implicitly {@link wm.protobuf.CheckItemReceivableCarsRequest.verify|verify} messages.
             * @function encode
             * @memberof wm.protobuf.CheckItemReceivableCarsRequest
             * @static
             * @param {wm.protobuf.ICheckItemReceivableCarsRequest} message CheckItemReceivableCarsRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            CheckItemReceivableCarsRequest.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.userId);
                if (message.itemsToBeEarned != null && message.itemsToBeEarned.length)
                    for (let i = 0; i < message.itemsToBeEarned.length; ++i)
                        $root.wm.protobuf.UserItem.encode(message.itemsToBeEarned[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified CheckItemReceivableCarsRequest message, length delimited. Does not implicitly {@link wm.protobuf.CheckItemReceivableCarsRequest.verify|verify} messages.
             * @function encodeDelimited
             * @memberof wm.protobuf.CheckItemReceivableCarsRequest
             * @static
             * @param {wm.protobuf.ICheckItemReceivableCarsRequest} message CheckItemReceivableCarsRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            CheckItemReceivableCarsRequest.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a CheckItemReceivableCarsRequest message from the specified reader or buffer.
             * @function decode
             * @memberof wm.protobuf.CheckItemReceivableCarsRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {wm.protobuf.CheckItemReceivableCarsRequest} CheckItemReceivableCarsRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            CheckItemReceivableCarsRequest.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.wm.protobuf.CheckItemReceivableCarsRequest();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.userId = reader.uint32();
                            break;
                        }
                    case 2: {
                            if (!(message.itemsToBeEarned && message.itemsToBeEarned.length))
                                message.itemsToBeEarned = [];
                            message.itemsToBeEarned.push($root.wm.protobuf.UserItem.decode(reader, reader.uint32()));
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("userId"))
                    throw $util.ProtocolError("missing required 'userId'", { instance: message });
                return message;
            };

            /**
             * Decodes a CheckItemReceivableCarsRequest message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof wm.protobuf.CheckItemReceivableCarsRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {wm.protobuf.CheckItemReceivableCarsRequest} CheckItemReceivableCarsRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            CheckItemReceivableCarsRequest.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a CheckItemReceivableCarsRequest message.
             * @function verify
             * @memberof wm.protobuf.CheckItemReceivableCarsRequest
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            CheckItemReceivableCarsRequest.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (!$util.isInteger(message.userId))
                    return "userId: integer expected";
                if (message.itemsToBeEarned != null && message.hasOwnProperty("itemsToBeEarned")) {
                    if (!Array.isArray(message.itemsToBeEarned))
                        return "itemsToBeEarned: array expected";
                    for (let i = 0; i < message.itemsToBeEarned.length; ++i) {
                        let error = $root.wm.protobuf.UserItem.verify(message.itemsToBeEarned[i]);
                        if (error)
                            return "itemsToBeEarned." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a CheckItemReceivableCarsRequest message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof wm.protobuf.CheckItemReceivableCarsRequest
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {wm.protobuf.CheckItemReceivableCarsRequest} CheckItemReceivableCarsRequest
             */
            CheckItemReceivableCarsRequest.fromObject = function fromObject(object) {
                if (object instanceof $root.wm.protobuf.CheckItemReceivableCarsRequest)
                    return object;
                let message = new $root.wm.protobuf.CheckItemReceivableCarsRequest();
                if (object.userId != null)
                    message.userId = object.userId >>> 0;
                if (object.itemsToBeEarned) {
                    if (!Array.isArray(object.itemsToBeEarned))
                        throw TypeError(".wm.protobuf.CheckItemReceivableCarsRequest.itemsToBeEarned: array expected");
                    message.itemsToBeEarned = [];
                    for (let i = 0; i < object.itemsToBeEarned.length; ++i) {
                        if (typeof object.itemsToBeEarned[i] !== "object")
                            throw TypeError(".wm.protobuf.CheckItemReceivableCarsRequest.itemsToBeEarned: object expected");
                        message.itemsToBeEarned[i] = $root.wm.protobuf.UserItem.fromObject(object.itemsToBeEarned[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from a CheckItemReceivableCarsRequest message. Also converts values to other types if specified.
             * @function toObject
             * @memberof wm.protobuf.CheckItemReceivableCarsRequest
             * @static
             * @param {wm.protobuf.CheckItemReceivableCarsRequest} message CheckItemReceivableCarsRequest
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            CheckItemReceivableCarsRequest.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.itemsToBeEarned = [];
                if (options.defaults)
                    object.userId = 0;
                if (message.userId != null && message.hasOwnProperty("userId"))
                    object.userId = message.userId;
                if (message.itemsToBeEarned && message.itemsToBeEarned.length) {
                    object.itemsToBeEarned = [];
                    for (let j = 0; j < message.itemsToBeEarned.length; ++j)
                        object.itemsToBeEarned[j] = $root.wm.protobuf.UserItem.toObject(message.itemsToBeEarned[j], options);
                }
                return object;
            };

            /**
             * Converts this CheckItemReceivableCarsRequest to JSON.
             * @function toJSON
             * @memberof wm.protobuf.CheckItemReceivableCarsRequest
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            CheckItemReceivableCarsRequest.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for CheckItemReceivableCarsRequest
             * @function getTypeUrl
             * @memberof wm.protobuf.CheckItemReceivableCarsRequest
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            CheckItemReceivableCarsRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/wm.protobuf.CheckItemReceivableCarsRequest";
            };

            return CheckItemReceivableCarsRequest;
        })();

        protobuf.CheckItemReceivableCarsResponse = (function() {

            /**
             * Properties of a CheckItemReceivableCarsResponse.
             * @memberof wm.protobuf
             * @interface ICheckItemReceivableCarsResponse
             * @property {wm.protobuf.ErrorCode} error CheckItemReceivableCarsResponse error
             * @property {Array.<number>|null} [carIds] CheckItemReceivableCarsResponse carIds
             */

            /**
             * Constructs a new CheckItemReceivableCarsResponse.
             * @memberof wm.protobuf
             * @classdesc Represents a CheckItemReceivableCarsResponse.
             * @implements ICheckItemReceivableCarsResponse
             * @constructor
             * @param {wm.protobuf.ICheckItemReceivableCarsResponse=} [properties] Properties to set
             */
            function CheckItemReceivableCarsResponse(properties) {
                this.carIds = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * CheckItemReceivableCarsResponse error.
             * @member {wm.protobuf.ErrorCode} error
             * @memberof wm.protobuf.CheckItemReceivableCarsResponse
             * @instance
             */
            CheckItemReceivableCarsResponse.prototype.error = 0;

            /**
             * CheckItemReceivableCarsResponse carIds.
             * @member {Array.<number>} carIds
             * @memberof wm.protobuf.CheckItemReceivableCarsResponse
             * @instance
             */
            CheckItemReceivableCarsResponse.prototype.carIds = $util.emptyArray;

            /**
             * Creates a new CheckItemReceivableCarsResponse instance using the specified properties.
             * @function create
             * @memberof wm.protobuf.CheckItemReceivableCarsResponse
             * @static
             * @param {wm.protobuf.ICheckItemReceivableCarsResponse=} [properties] Properties to set
             * @returns {wm.protobuf.CheckItemReceivableCarsResponse} CheckItemReceivableCarsResponse instance
             */
            CheckItemReceivableCarsResponse.create = function create(properties) {
                return new CheckItemReceivableCarsResponse(properties);
            };

            /**
             * Encodes the specified CheckItemReceivableCarsResponse message. Does not implicitly {@link wm.protobuf.CheckItemReceivableCarsResponse.verify|verify} messages.
             * @function encode
             * @memberof wm.protobuf.CheckItemReceivableCarsResponse
             * @static
             * @param {wm.protobuf.ICheckItemReceivableCarsResponse} message CheckItemReceivableCarsResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            CheckItemReceivableCarsResponse.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
                if (message.carIds != null && message.carIds.length)
                    for (let i = 0; i < message.carIds.length; ++i)
                        writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.carIds[i]);
                return writer;
            };

            /**
             * Encodes the specified CheckItemReceivableCarsResponse message, length delimited. Does not implicitly {@link wm.protobuf.CheckItemReceivableCarsResponse.verify|verify} messages.
             * @function encodeDelimited
             * @memberof wm.protobuf.CheckItemReceivableCarsResponse
             * @static
             * @param {wm.protobuf.ICheckItemReceivableCarsResponse} message CheckItemReceivableCarsResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            CheckItemReceivableCarsResponse.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a CheckItemReceivableCarsResponse message from the specified reader or buffer.
             * @function decode
             * @memberof wm.protobuf.CheckItemReceivableCarsResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {wm.protobuf.CheckItemReceivableCarsResponse} CheckItemReceivableCarsResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            CheckItemReceivableCarsResponse.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.wm.protobuf.CheckItemReceivableCarsResponse();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.error = reader.int32();
                            break;
                        }
                    case 2: {
                            if (!(message.carIds && message.carIds.length))
                                message.carIds = [];
                            if ((tag & 7) === 2) {
                                let end2 = reader.uint32() + reader.pos;
                                while (reader.pos < end2)
                                    message.carIds.push(reader.uint32());
                            } else
                                message.carIds.push(reader.uint32());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("error"))
                    throw $util.ProtocolError("missing required 'error'", { instance: message });
                return message;
            };

            /**
             * Decodes a CheckItemReceivableCarsResponse message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof wm.protobuf.CheckItemReceivableCarsResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {wm.protobuf.CheckItemReceivableCarsResponse} CheckItemReceivableCarsResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            CheckItemReceivableCarsResponse.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a CheckItemReceivableCarsResponse message.
             * @function verify
             * @memberof wm.protobuf.CheckItemReceivableCarsResponse
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            CheckItemReceivableCarsResponse.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                switch (message.error) {
                default:
                    return "error: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 7:
                case 9:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 16:
                case 17:
                case 18:
                case 19:
                    break;
                }
                if (message.carIds != null && message.hasOwnProperty("carIds")) {
                    if (!Array.isArray(message.carIds))
                        return "carIds: array expected";
                    for (let i = 0; i < message.carIds.length; ++i)
                        if (!$util.isInteger(message.carIds[i]))
                            return "carIds: integer[] expected";
                }
                return null;
            };

            /**
             * Creates a CheckItemReceivableCarsResponse message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof wm.protobuf.CheckItemReceivableCarsResponse
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {wm.protobuf.CheckItemReceivableCarsResponse} CheckItemReceivableCarsResponse
             */
            CheckItemReceivableCarsResponse.fromObject = function fromObject(object) {
                if (object instanceof $root.wm.protobuf.CheckItemReceivableCarsResponse)
                    return object;
                let message = new $root.wm.protobuf.CheckItemReceivableCarsResponse();
                switch (object.error) {
                default:
                    if (typeof object.error === "number") {
                        message.error = object.error;
                        break;
                    }
                    break;
                case "ERR_SUCCESS":
                case 0:
                    message.error = 0;
                    break;
                case "ERR_REQUEST":
                case 1:
                    message.error = 1;
                    break;
                case "ERR_NOT_FOUND":
                case 2:
                    message.error = 2;
                    break;
                case "ERR_ID_SERVER":
                case 3:
                    message.error = 3;
                    break;
                case "ERR_ID_BANNED":
                case 4:
                    message.error = 4;
                    break;
                case "ERR_USER_LOCKED":
                case 5:
                    message.error = 5;
                    break;
                case "ERR_USER_VERSION":
                case 6:
                    message.error = 6;
                    break;
                case "ERR_NAME_CONFLICTED":
                case 7:
                    message.error = 7;
                    break;
                case "ERR_FORBIDDEN":
                case 9:
                    message.error = 9;
                    break;
                case "ERR_USER_SUCCEEDED":
                case 11:
                    message.error = 11;
                    break;
                case "ERR_BEING_TRANSFERRED":
                case 12:
                    message.error = 12;
                    break;
                case "ERR_SCRATCH_LOCKED":
                case 13:
                    message.error = 13;
                    break;
                case "ERR_BINGO_REVENGE_LOCKED":
                case 14:
                    message.error = 14;
                    break;
                case "ERR_BINGO_ALREDY_LINKED":
                case 15:
                    message.error = 15;
                    break;
                case "ERR_BINGO_FINISHED":
                case 16:
                    message.error = 16;
                    break;
                case "ERR_BINGO_REACHED_MAX_USER":
                case 17:
                    message.error = 17;
                    break;
                case "ERR_CAR_NOT_FOUND":
                case 18:
                    message.error = 18;
                    break;
                case "ERR_BINGO_CARD_NOT_FOUND":
                case 19:
                    message.error = 19;
                    break;
                }
                if (object.carIds) {
                    if (!Array.isArray(object.carIds))
                        throw TypeError(".wm.protobuf.CheckItemReceivableCarsResponse.carIds: array expected");
                    message.carIds = [];
                    for (let i = 0; i < object.carIds.length; ++i)
                        message.carIds[i] = object.carIds[i] >>> 0;
                }
                return message;
            };

            /**
             * Creates a plain object from a CheckItemReceivableCarsResponse message. Also converts values to other types if specified.
             * @function toObject
             * @memberof wm.protobuf.CheckItemReceivableCarsResponse
             * @static
             * @param {wm.protobuf.CheckItemReceivableCarsResponse} message CheckItemReceivableCarsResponse
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            CheckItemReceivableCarsResponse.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.carIds = [];
                if (options.defaults)
                    object.error = options.enums === String ? "ERR_SUCCESS" : 0;
                if (message.error != null && message.hasOwnProperty("error"))
                    object.error = options.enums === String ? $root.wm.protobuf.ErrorCode[message.error] === undefined ? message.error : $root.wm.protobuf.ErrorCode[message.error] : message.error;
                if (message.carIds && message.carIds.length) {
                    object.carIds = [];
                    for (let j = 0; j < message.carIds.length; ++j)
                        object.carIds[j] = message.carIds[j];
                }
                return object;
            };

            /**
             * Converts this CheckItemReceivableCarsResponse to JSON.
             * @function toJSON
             * @memberof wm.protobuf.CheckItemReceivableCarsResponse
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            CheckItemReceivableCarsResponse.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for CheckItemReceivableCarsResponse
             * @function getTypeUrl
             * @memberof wm.protobuf.CheckItemReceivableCarsResponse
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            CheckItemReceivableCarsResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/wm.protobuf.CheckItemReceivableCarsResponse";
            };

            return CheckItemReceivableCarsResponse;
        })();

        protobuf.ReceiveUserItemsRequest = (function() {

            /**
             * Properties of a ReceiveUserItemsRequest.
             * @memberof wm.protobuf
             * @interface IReceiveUserItemsRequest
             * @property {number} carId ReceiveUserItemsRequest carId
             * @property {Array.<number>|null} [targetItemIds] ReceiveUserItemsRequest targetItemIds
             */

            /**
             * Constructs a new ReceiveUserItemsRequest.
             * @memberof wm.protobuf
             * @classdesc Represents a ReceiveUserItemsRequest.
             * @implements IReceiveUserItemsRequest
             * @constructor
             * @param {wm.protobuf.IReceiveUserItemsRequest=} [properties] Properties to set
             */
            function ReceiveUserItemsRequest(properties) {
                this.targetItemIds = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * ReceiveUserItemsRequest carId.
             * @member {number} carId
             * @memberof wm.protobuf.ReceiveUserItemsRequest
             * @instance
             */
            ReceiveUserItemsRequest.prototype.carId = 0;

            /**
             * ReceiveUserItemsRequest targetItemIds.
             * @member {Array.<number>} targetItemIds
             * @memberof wm.protobuf.ReceiveUserItemsRequest
             * @instance
             */
            ReceiveUserItemsRequest.prototype.targetItemIds = $util.emptyArray;

            /**
             * Creates a new ReceiveUserItemsRequest instance using the specified properties.
             * @function create
             * @memberof wm.protobuf.ReceiveUserItemsRequest
             * @static
             * @param {wm.protobuf.IReceiveUserItemsRequest=} [properties] Properties to set
             * @returns {wm.protobuf.ReceiveUserItemsRequest} ReceiveUserItemsRequest instance
             */
            ReceiveUserItemsRequest.create = function create(properties) {
                return new ReceiveUserItemsRequest(properties);
            };

            /**
             * Encodes the specified ReceiveUserItemsRequest message. Does not implicitly {@link wm.protobuf.ReceiveUserItemsRequest.verify|verify} messages.
             * @function encode
             * @memberof wm.protobuf.ReceiveUserItemsRequest
             * @static
             * @param {wm.protobuf.IReceiveUserItemsRequest} message ReceiveUserItemsRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ReceiveUserItemsRequest.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.carId);
                if (message.targetItemIds != null && message.targetItemIds.length)
                    for (let i = 0; i < message.targetItemIds.length; ++i)
                        writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.targetItemIds[i]);
                return writer;
            };

            /**
             * Encodes the specified ReceiveUserItemsRequest message, length delimited. Does not implicitly {@link wm.protobuf.ReceiveUserItemsRequest.verify|verify} messages.
             * @function encodeDelimited
             * @memberof wm.protobuf.ReceiveUserItemsRequest
             * @static
             * @param {wm.protobuf.IReceiveUserItemsRequest} message ReceiveUserItemsRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ReceiveUserItemsRequest.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a ReceiveUserItemsRequest message from the specified reader or buffer.
             * @function decode
             * @memberof wm.protobuf.ReceiveUserItemsRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {wm.protobuf.ReceiveUserItemsRequest} ReceiveUserItemsRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ReceiveUserItemsRequest.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.wm.protobuf.ReceiveUserItemsRequest();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.carId = reader.uint32();
                            break;
                        }
                    case 2: {
                            if (!(message.targetItemIds && message.targetItemIds.length))
                                message.targetItemIds = [];
                            if ((tag & 7) === 2) {
                                let end2 = reader.uint32() + reader.pos;
                                while (reader.pos < end2)
                                    message.targetItemIds.push(reader.uint32());
                            } else
                                message.targetItemIds.push(reader.uint32());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("carId"))
                    throw $util.ProtocolError("missing required 'carId'", { instance: message });
                return message;
            };

            /**
             * Decodes a ReceiveUserItemsRequest message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof wm.protobuf.ReceiveUserItemsRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {wm.protobuf.ReceiveUserItemsRequest} ReceiveUserItemsRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ReceiveUserItemsRequest.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a ReceiveUserItemsRequest message.
             * @function verify
             * @memberof wm.protobuf.ReceiveUserItemsRequest
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ReceiveUserItemsRequest.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (!$util.isInteger(message.carId))
                    return "carId: integer expected";
                if (message.targetItemIds != null && message.hasOwnProperty("targetItemIds")) {
                    if (!Array.isArray(message.targetItemIds))
                        return "targetItemIds: array expected";
                    for (let i = 0; i < message.targetItemIds.length; ++i)
                        if (!$util.isInteger(message.targetItemIds[i]))
                            return "targetItemIds: integer[] expected";
                }
                return null;
            };

            /**
             * Creates a ReceiveUserItemsRequest message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof wm.protobuf.ReceiveUserItemsRequest
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {wm.protobuf.ReceiveUserItemsRequest} ReceiveUserItemsRequest
             */
            ReceiveUserItemsRequest.fromObject = function fromObject(object) {
                if (object instanceof $root.wm.protobuf.ReceiveUserItemsRequest)
                    return object;
                let message = new $root.wm.protobuf.ReceiveUserItemsRequest();
                if (object.carId != null)
                    message.carId = object.carId >>> 0;
                if (object.targetItemIds) {
                    if (!Array.isArray(object.targetItemIds))
                        throw TypeError(".wm.protobuf.ReceiveUserItemsRequest.targetItemIds: array expected");
                    message.targetItemIds = [];
                    for (let i = 0; i < object.targetItemIds.length; ++i)
                        message.targetItemIds[i] = object.targetItemIds[i] >>> 0;
                }
                return message;
            };

            /**
             * Creates a plain object from a ReceiveUserItemsRequest message. Also converts values to other types if specified.
             * @function toObject
             * @memberof wm.protobuf.ReceiveUserItemsRequest
             * @static
             * @param {wm.protobuf.ReceiveUserItemsRequest} message ReceiveUserItemsRequest
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ReceiveUserItemsRequest.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.targetItemIds = [];
                if (options.defaults)
                    object.carId = 0;
                if (message.carId != null && message.hasOwnProperty("carId"))
                    object.carId = message.carId;
                if (message.targetItemIds && message.targetItemIds.length) {
                    object.targetItemIds = [];
                    for (let j = 0; j < message.targetItemIds.length; ++j)
                        object.targetItemIds[j] = message.targetItemIds[j];
                }
                return object;
            };

            /**
             * Converts this ReceiveUserItemsRequest to JSON.
             * @function toJSON
             * @memberof wm.protobuf.ReceiveUserItemsRequest
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ReceiveUserItemsRequest.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for ReceiveUserItemsRequest
             * @function getTypeUrl
             * @memberof wm.protobuf.ReceiveUserItemsRequest
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            ReceiveUserItemsRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/wm.protobuf.ReceiveUserItemsRequest";
            };

            return ReceiveUserItemsRequest;
        })();

        protobuf.ReceiveUserItemsResponse = (function() {

            /**
             * Properties of a ReceiveUserItemsResponse.
             * @memberof wm.protobuf
             * @interface IReceiveUserItemsResponse
             * @property {wm.protobuf.ErrorCode} error ReceiveUserItemsResponse error
             */

            /**
             * Constructs a new ReceiveUserItemsResponse.
             * @memberof wm.protobuf
             * @classdesc Represents a ReceiveUserItemsResponse.
             * @implements IReceiveUserItemsResponse
             * @constructor
             * @param {wm.protobuf.IReceiveUserItemsResponse=} [properties] Properties to set
             */
            function ReceiveUserItemsResponse(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * ReceiveUserItemsResponse error.
             * @member {wm.protobuf.ErrorCode} error
             * @memberof wm.protobuf.ReceiveUserItemsResponse
             * @instance
             */
            ReceiveUserItemsResponse.prototype.error = 0;

            /**
             * Creates a new ReceiveUserItemsResponse instance using the specified properties.
             * @function create
             * @memberof wm.protobuf.ReceiveUserItemsResponse
             * @static
             * @param {wm.protobuf.IReceiveUserItemsResponse=} [properties] Properties to set
             * @returns {wm.protobuf.ReceiveUserItemsResponse} ReceiveUserItemsResponse instance
             */
            ReceiveUserItemsResponse.create = function create(properties) {
                return new ReceiveUserItemsResponse(properties);
            };

            /**
             * Encodes the specified ReceiveUserItemsResponse message. Does not implicitly {@link wm.protobuf.ReceiveUserItemsResponse.verify|verify} messages.
             * @function encode
             * @memberof wm.protobuf.ReceiveUserItemsResponse
             * @static
             * @param {wm.protobuf.IReceiveUserItemsResponse} message ReceiveUserItemsResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ReceiveUserItemsResponse.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
                return writer;
            };

            /**
             * Encodes the specified ReceiveUserItemsResponse message, length delimited. Does not implicitly {@link wm.protobuf.ReceiveUserItemsResponse.verify|verify} messages.
             * @function encodeDelimited
             * @memberof wm.protobuf.ReceiveUserItemsResponse
             * @static
             * @param {wm.protobuf.IReceiveUserItemsResponse} message ReceiveUserItemsResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ReceiveUserItemsResponse.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a ReceiveUserItemsResponse message from the specified reader or buffer.
             * @function decode
             * @memberof wm.protobuf.ReceiveUserItemsResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {wm.protobuf.ReceiveUserItemsResponse} ReceiveUserItemsResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ReceiveUserItemsResponse.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.wm.protobuf.ReceiveUserItemsResponse();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.error = reader.int32();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("error"))
                    throw $util.ProtocolError("missing required 'error'", { instance: message });
                return message;
            };

            /**
             * Decodes a ReceiveUserItemsResponse message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof wm.protobuf.ReceiveUserItemsResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {wm.protobuf.ReceiveUserItemsResponse} ReceiveUserItemsResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ReceiveUserItemsResponse.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a ReceiveUserItemsResponse message.
             * @function verify
             * @memberof wm.protobuf.ReceiveUserItemsResponse
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ReceiveUserItemsResponse.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                switch (message.error) {
                default:
                    return "error: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 7:
                case 9:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 16:
                case 17:
                case 18:
                case 19:
                    break;
                }
                return null;
            };

            /**
             * Creates a ReceiveUserItemsResponse message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof wm.protobuf.ReceiveUserItemsResponse
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {wm.protobuf.ReceiveUserItemsResponse} ReceiveUserItemsResponse
             */
            ReceiveUserItemsResponse.fromObject = function fromObject(object) {
                if (object instanceof $root.wm.protobuf.ReceiveUserItemsResponse)
                    return object;
                let message = new $root.wm.protobuf.ReceiveUserItemsResponse();
                switch (object.error) {
                default:
                    if (typeof object.error === "number") {
                        message.error = object.error;
                        break;
                    }
                    break;
                case "ERR_SUCCESS":
                case 0:
                    message.error = 0;
                    break;
                case "ERR_REQUEST":
                case 1:
                    message.error = 1;
                    break;
                case "ERR_NOT_FOUND":
                case 2:
                    message.error = 2;
                    break;
                case "ERR_ID_SERVER":
                case 3:
                    message.error = 3;
                    break;
                case "ERR_ID_BANNED":
                case 4:
                    message.error = 4;
                    break;
                case "ERR_USER_LOCKED":
                case 5:
                    message.error = 5;
                    break;
                case "ERR_USER_VERSION":
                case 6:
                    message.error = 6;
                    break;
                case "ERR_NAME_CONFLICTED":
                case 7:
                    message.error = 7;
                    break;
                case "ERR_FORBIDDEN":
                case 9:
                    message.error = 9;
                    break;
                case "ERR_USER_SUCCEEDED":
                case 11:
                    message.error = 11;
                    break;
                case "ERR_BEING_TRANSFERRED":
                case 12:
                    message.error = 12;
                    break;
                case "ERR_SCRATCH_LOCKED":
                case 13:
                    message.error = 13;
                    break;
                case "ERR_BINGO_REVENGE_LOCKED":
                case 14:
                    message.error = 14;
                    break;
                case "ERR_BINGO_ALREDY_LINKED":
                case 15:
                    message.error = 15;
                    break;
                case "ERR_BINGO_FINISHED":
                case 16:
                    message.error = 16;
                    break;
                case "ERR_BINGO_REACHED_MAX_USER":
                case 17:
                    message.error = 17;
                    break;
                case "ERR_CAR_NOT_FOUND":
                case 18:
                    message.error = 18;
                    break;
                case "ERR_BINGO_CARD_NOT_FOUND":
                case 19:
                    message.error = 19;
                    break;
                }
                return message;
            };

            /**
             * Creates a plain object from a ReceiveUserItemsResponse message. Also converts values to other types if specified.
             * @function toObject
             * @memberof wm.protobuf.ReceiveUserItemsResponse
             * @static
             * @param {wm.protobuf.ReceiveUserItemsResponse} message ReceiveUserItemsResponse
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ReceiveUserItemsResponse.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults)
                    object.error = options.enums === String ? "ERR_SUCCESS" : 0;
                if (message.error != null && message.hasOwnProperty("error"))
                    object.error = options.enums === String ? $root.wm.protobuf.ErrorCode[message.error] === undefined ? message.error : $root.wm.protobuf.ErrorCode[message.error] : message.error;
                return object;
            };

            /**
             * Converts this ReceiveUserItemsResponse to JSON.
             * @function toJSON
             * @memberof wm.protobuf.ReceiveUserItemsResponse
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ReceiveUserItemsResponse.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for ReceiveUserItemsResponse
             * @function getTypeUrl
             * @memberof wm.protobuf.ReceiveUserItemsResponse
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            ReceiveUserItemsResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/wm.protobuf.ReceiveUserItemsResponse";
            };

            return ReceiveUserItemsResponse;
        })();

        protobuf.UpdateEventModeSerialRequest = (function() {

            /**
             * Properties of an UpdateEventModeSerialRequest.
             * @memberof wm.protobuf
             * @interface IUpdateEventModeSerialRequest
             * @property {string|null} [eventModeSerial] UpdateEventModeSerialRequest eventModeSerial
             */

            /**
             * Constructs a new UpdateEventModeSerialRequest.
             * @memberof wm.protobuf
             * @classdesc Represents an UpdateEventModeSerialRequest.
             * @implements IUpdateEventModeSerialRequest
             * @constructor
             * @param {wm.protobuf.IUpdateEventModeSerialRequest=} [properties] Properties to set
             */
            function UpdateEventModeSerialRequest(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * UpdateEventModeSerialRequest eventModeSerial.
             * @member {string} eventModeSerial
             * @memberof wm.protobuf.UpdateEventModeSerialRequest
             * @instance
             */
            UpdateEventModeSerialRequest.prototype.eventModeSerial = "";

            /**
             * Creates a new UpdateEventModeSerialRequest instance using the specified properties.
             * @function create
             * @memberof wm.protobuf.UpdateEventModeSerialRequest
             * @static
             * @param {wm.protobuf.IUpdateEventModeSerialRequest=} [properties] Properties to set
             * @returns {wm.protobuf.UpdateEventModeSerialRequest} UpdateEventModeSerialRequest instance
             */
            UpdateEventModeSerialRequest.create = function create(properties) {
                return new UpdateEventModeSerialRequest(properties);
            };

            /**
             * Encodes the specified UpdateEventModeSerialRequest message. Does not implicitly {@link wm.protobuf.UpdateEventModeSerialRequest.verify|verify} messages.
             * @function encode
             * @memberof wm.protobuf.UpdateEventModeSerialRequest
             * @static
             * @param {wm.protobuf.IUpdateEventModeSerialRequest} message UpdateEventModeSerialRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            UpdateEventModeSerialRequest.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.eventModeSerial != null && Object.hasOwnProperty.call(message, "eventModeSerial"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.eventModeSerial);
                return writer;
            };

            /**
             * Encodes the specified UpdateEventModeSerialRequest message, length delimited. Does not implicitly {@link wm.protobuf.UpdateEventModeSerialRequest.verify|verify} messages.
             * @function encodeDelimited
             * @memberof wm.protobuf.UpdateEventModeSerialRequest
             * @static
             * @param {wm.protobuf.IUpdateEventModeSerialRequest} message UpdateEventModeSerialRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            UpdateEventModeSerialRequest.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an UpdateEventModeSerialRequest message from the specified reader or buffer.
             * @function decode
             * @memberof wm.protobuf.UpdateEventModeSerialRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {wm.protobuf.UpdateEventModeSerialRequest} UpdateEventModeSerialRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            UpdateEventModeSerialRequest.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.wm.protobuf.UpdateEventModeSerialRequest();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.eventModeSerial = reader.string();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an UpdateEventModeSerialRequest message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof wm.protobuf.UpdateEventModeSerialRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {wm.protobuf.UpdateEventModeSerialRequest} UpdateEventModeSerialRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            UpdateEventModeSerialRequest.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an UpdateEventModeSerialRequest message.
             * @function verify
             * @memberof wm.protobuf.UpdateEventModeSerialRequest
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            UpdateEventModeSerialRequest.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.eventModeSerial != null && message.hasOwnProperty("eventModeSerial"))
                    if (!$util.isString(message.eventModeSerial))
                        return "eventModeSerial: string expected";
                return null;
            };

            /**
             * Creates an UpdateEventModeSerialRequest message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof wm.protobuf.UpdateEventModeSerialRequest
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {wm.protobuf.UpdateEventModeSerialRequest} UpdateEventModeSerialRequest
             */
            UpdateEventModeSerialRequest.fromObject = function fromObject(object) {
                if (object instanceof $root.wm.protobuf.UpdateEventModeSerialRequest)
                    return object;
                let message = new $root.wm.protobuf.UpdateEventModeSerialRequest();
                if (object.eventModeSerial != null)
                    message.eventModeSerial = String(object.eventModeSerial);
                return message;
            };

            /**
             * Creates a plain object from an UpdateEventModeSerialRequest message. Also converts values to other types if specified.
             * @function toObject
             * @memberof wm.protobuf.UpdateEventModeSerialRequest
             * @static
             * @param {wm.protobuf.UpdateEventModeSerialRequest} message UpdateEventModeSerialRequest
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            UpdateEventModeSerialRequest.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults)
                    object.eventModeSerial = "";
                if (message.eventModeSerial != null && message.hasOwnProperty("eventModeSerial"))
                    object.eventModeSerial = message.eventModeSerial;
                return object;
            };

            /**
             * Converts this UpdateEventModeSerialRequest to JSON.
             * @function toJSON
             * @memberof wm.protobuf.UpdateEventModeSerialRequest
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            UpdateEventModeSerialRequest.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for UpdateEventModeSerialRequest
             * @function getTypeUrl
             * @memberof wm.protobuf.UpdateEventModeSerialRequest
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            UpdateEventModeSerialRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/wm.protobuf.UpdateEventModeSerialRequest";
            };

            return UpdateEventModeSerialRequest;
        })();

        protobuf.UpdateEventModeSerialResponse = (function() {

            /**
             * Properties of an UpdateEventModeSerialResponse.
             * @memberof wm.protobuf
             * @interface IUpdateEventModeSerialResponse
             * @property {wm.protobuf.ErrorCode} error UpdateEventModeSerialResponse error
             * @property {wm.protobuf.EventModeSerialErrorCode} serialError UpdateEventModeSerialResponse serialError
             * @property {string|null} [eventModeSerial] UpdateEventModeSerialResponse eventModeSerial
             * @property {number|null} [startAt] UpdateEventModeSerialResponse startAt
             * @property {number|null} [endAt] UpdateEventModeSerialResponse endAt
             */

            /**
             * Constructs a new UpdateEventModeSerialResponse.
             * @memberof wm.protobuf
             * @classdesc Represents an UpdateEventModeSerialResponse.
             * @implements IUpdateEventModeSerialResponse
             * @constructor
             * @param {wm.protobuf.IUpdateEventModeSerialResponse=} [properties] Properties to set
             */
            function UpdateEventModeSerialResponse(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * UpdateEventModeSerialResponse error.
             * @member {wm.protobuf.ErrorCode} error
             * @memberof wm.protobuf.UpdateEventModeSerialResponse
             * @instance
             */
            UpdateEventModeSerialResponse.prototype.error = 0;

            /**
             * UpdateEventModeSerialResponse serialError.
             * @member {wm.protobuf.EventModeSerialErrorCode} serialError
             * @memberof wm.protobuf.UpdateEventModeSerialResponse
             * @instance
             */
            UpdateEventModeSerialResponse.prototype.serialError = 0;

            /**
             * UpdateEventModeSerialResponse eventModeSerial.
             * @member {string} eventModeSerial
             * @memberof wm.protobuf.UpdateEventModeSerialResponse
             * @instance
             */
            UpdateEventModeSerialResponse.prototype.eventModeSerial = "";

            /**
             * UpdateEventModeSerialResponse startAt.
             * @member {number} startAt
             * @memberof wm.protobuf.UpdateEventModeSerialResponse
             * @instance
             */
            UpdateEventModeSerialResponse.prototype.startAt = 0;

            /**
             * UpdateEventModeSerialResponse endAt.
             * @member {number} endAt
             * @memberof wm.protobuf.UpdateEventModeSerialResponse
             * @instance
             */
            UpdateEventModeSerialResponse.prototype.endAt = 0;

            /**
             * Creates a new UpdateEventModeSerialResponse instance using the specified properties.
             * @function create
             * @memberof wm.protobuf.UpdateEventModeSerialResponse
             * @static
             * @param {wm.protobuf.IUpdateEventModeSerialResponse=} [properties] Properties to set
             * @returns {wm.protobuf.UpdateEventModeSerialResponse} UpdateEventModeSerialResponse instance
             */
            UpdateEventModeSerialResponse.create = function create(properties) {
                return new UpdateEventModeSerialResponse(properties);
            };

            /**
             * Encodes the specified UpdateEventModeSerialResponse message. Does not implicitly {@link wm.protobuf.UpdateEventModeSerialResponse.verify|verify} messages.
             * @function encode
             * @memberof wm.protobuf.UpdateEventModeSerialResponse
             * @static
             * @param {wm.protobuf.IUpdateEventModeSerialResponse} message UpdateEventModeSerialResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            UpdateEventModeSerialResponse.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
                if (message.eventModeSerial != null && Object.hasOwnProperty.call(message, "eventModeSerial"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.eventModeSerial);
                if (message.endAt != null && Object.hasOwnProperty.call(message, "endAt"))
                    writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.endAt);
                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.serialError);
                if (message.startAt != null && Object.hasOwnProperty.call(message, "startAt"))
                    writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.startAt);
                return writer;
            };

            /**
             * Encodes the specified UpdateEventModeSerialResponse message, length delimited. Does not implicitly {@link wm.protobuf.UpdateEventModeSerialResponse.verify|verify} messages.
             * @function encodeDelimited
             * @memberof wm.protobuf.UpdateEventModeSerialResponse
             * @static
             * @param {wm.protobuf.IUpdateEventModeSerialResponse} message UpdateEventModeSerialResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            UpdateEventModeSerialResponse.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an UpdateEventModeSerialResponse message from the specified reader or buffer.
             * @function decode
             * @memberof wm.protobuf.UpdateEventModeSerialResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {wm.protobuf.UpdateEventModeSerialResponse} UpdateEventModeSerialResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            UpdateEventModeSerialResponse.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.wm.protobuf.UpdateEventModeSerialResponse();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.error = reader.int32();
                            break;
                        }
                    case 4: {
                            message.serialError = reader.int32();
                            break;
                        }
                    case 2: {
                            message.eventModeSerial = reader.string();
                            break;
                        }
                    case 5: {
                            message.startAt = reader.uint32();
                            break;
                        }
                    case 3: {
                            message.endAt = reader.uint32();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("error"))
                    throw $util.ProtocolError("missing required 'error'", { instance: message });
                if (!message.hasOwnProperty("serialError"))
                    throw $util.ProtocolError("missing required 'serialError'", { instance: message });
                return message;
            };

            /**
             * Decodes an UpdateEventModeSerialResponse message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof wm.protobuf.UpdateEventModeSerialResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {wm.protobuf.UpdateEventModeSerialResponse} UpdateEventModeSerialResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            UpdateEventModeSerialResponse.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an UpdateEventModeSerialResponse message.
             * @function verify
             * @memberof wm.protobuf.UpdateEventModeSerialResponse
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            UpdateEventModeSerialResponse.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                switch (message.error) {
                default:
                    return "error: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 7:
                case 9:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 16:
                case 17:
                case 18:
                case 19:
                    break;
                }
                switch (message.serialError) {
                default:
                    return "serialError: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                    break;
                }
                if (message.eventModeSerial != null && message.hasOwnProperty("eventModeSerial"))
                    if (!$util.isString(message.eventModeSerial))
                        return "eventModeSerial: string expected";
                if (message.startAt != null && message.hasOwnProperty("startAt"))
                    if (!$util.isInteger(message.startAt))
                        return "startAt: integer expected";
                if (message.endAt != null && message.hasOwnProperty("endAt"))
                    if (!$util.isInteger(message.endAt))
                        return "endAt: integer expected";
                return null;
            };

            /**
             * Creates an UpdateEventModeSerialResponse message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof wm.protobuf.UpdateEventModeSerialResponse
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {wm.protobuf.UpdateEventModeSerialResponse} UpdateEventModeSerialResponse
             */
            UpdateEventModeSerialResponse.fromObject = function fromObject(object) {
                if (object instanceof $root.wm.protobuf.UpdateEventModeSerialResponse)
                    return object;
                let message = new $root.wm.protobuf.UpdateEventModeSerialResponse();
                switch (object.error) {
                default:
                    if (typeof object.error === "number") {
                        message.error = object.error;
                        break;
                    }
                    break;
                case "ERR_SUCCESS":
                case 0:
                    message.error = 0;
                    break;
                case "ERR_REQUEST":
                case 1:
                    message.error = 1;
                    break;
                case "ERR_NOT_FOUND":
                case 2:
                    message.error = 2;
                    break;
                case "ERR_ID_SERVER":
                case 3:
                    message.error = 3;
                    break;
                case "ERR_ID_BANNED":
                case 4:
                    message.error = 4;
                    break;
                case "ERR_USER_LOCKED":
                case 5:
                    message.error = 5;
                    break;
                case "ERR_USER_VERSION":
                case 6:
                    message.error = 6;
                    break;
                case "ERR_NAME_CONFLICTED":
                case 7:
                    message.error = 7;
                    break;
                case "ERR_FORBIDDEN":
                case 9:
                    message.error = 9;
                    break;
                case "ERR_USER_SUCCEEDED":
                case 11:
                    message.error = 11;
                    break;
                case "ERR_BEING_TRANSFERRED":
                case 12:
                    message.error = 12;
                    break;
                case "ERR_SCRATCH_LOCKED":
                case 13:
                    message.error = 13;
                    break;
                case "ERR_BINGO_REVENGE_LOCKED":
                case 14:
                    message.error = 14;
                    break;
                case "ERR_BINGO_ALREDY_LINKED":
                case 15:
                    message.error = 15;
                    break;
                case "ERR_BINGO_FINISHED":
                case 16:
                    message.error = 16;
                    break;
                case "ERR_BINGO_REACHED_MAX_USER":
                case 17:
                    message.error = 17;
                    break;
                case "ERR_CAR_NOT_FOUND":
                case 18:
                    message.error = 18;
                    break;
                case "ERR_BINGO_CARD_NOT_FOUND":
                case 19:
                    message.error = 19;
                    break;
                }
                switch (object.serialError) {
                default:
                    if (typeof object.serialError === "number") {
                        message.serialError = object.serialError;
                        break;
                    }
                    break;
                case "SERIAL_SUCCESS":
                case 0:
                    message.serialError = 0;
                    break;
                case "SERIAL_ATTEMPT_TO_CHANGE":
                case 1:
                    message.serialError = 1;
                    break;
                case "SERIAL_NO_INPUT":
                case 2:
                    message.serialError = 2;
                    break;
                case "SERIAL_INVALID":
                case 3:
                    message.serialError = 3;
                    break;
                case "SERIAL_EXPIRED":
                case 4:
                    message.serialError = 4;
                    break;
                case "SERIAL_OTHER_PLACE":
                case 5:
                    message.serialError = 5;
                    break;
                }
                if (object.eventModeSerial != null)
                    message.eventModeSerial = String(object.eventModeSerial);
                if (object.startAt != null)
                    message.startAt = object.startAt >>> 0;
                if (object.endAt != null)
                    message.endAt = object.endAt >>> 0;
                return message;
            };

            /**
             * Creates a plain object from an UpdateEventModeSerialResponse message. Also converts values to other types if specified.
             * @function toObject
             * @memberof wm.protobuf.UpdateEventModeSerialResponse
             * @static
             * @param {wm.protobuf.UpdateEventModeSerialResponse} message UpdateEventModeSerialResponse
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            UpdateEventModeSerialResponse.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.error = options.enums === String ? "ERR_SUCCESS" : 0;
                    object.eventModeSerial = "";
                    object.endAt = 0;
                    object.serialError = options.enums === String ? "SERIAL_SUCCESS" : 0;
                    object.startAt = 0;
                }
                if (message.error != null && message.hasOwnProperty("error"))
                    object.error = options.enums === String ? $root.wm.protobuf.ErrorCode[message.error] === undefined ? message.error : $root.wm.protobuf.ErrorCode[message.error] : message.error;
                if (message.eventModeSerial != null && message.hasOwnProperty("eventModeSerial"))
                    object.eventModeSerial = message.eventModeSerial;
                if (message.endAt != null && message.hasOwnProperty("endAt"))
                    object.endAt = message.endAt;
                if (message.serialError != null && message.hasOwnProperty("serialError"))
                    object.serialError = options.enums === String ? $root.wm.protobuf.EventModeSerialErrorCode[message.serialError] === undefined ? message.serialError : $root.wm.protobuf.EventModeSerialErrorCode[message.serialError] : message.serialError;
                if (message.startAt != null && message.hasOwnProperty("startAt"))
                    object.startAt = message.startAt;
                return object;
            };

            /**
             * Converts this UpdateEventModeSerialResponse to JSON.
             * @function toJSON
             * @memberof wm.protobuf.UpdateEventModeSerialResponse
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            UpdateEventModeSerialResponse.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for UpdateEventModeSerialResponse
             * @function getTypeUrl
             * @memberof wm.protobuf.UpdateEventModeSerialResponse
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            UpdateEventModeSerialResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/wm.protobuf.UpdateEventModeSerialResponse";
            };

            return UpdateEventModeSerialResponse;
        })();

        protobuf.ParticipateInInviteFriendCampaignRequest = (function() {

            /**
             * Properties of a ParticipateInInviteFriendCampaignRequest.
             * @memberof wm.protobuf
             * @interface IParticipateInInviteFriendCampaignRequest
             * @property {number} invitingUserId ParticipateInInviteFriendCampaignRequest invitingUserId
             * @property {number} invitedUserId ParticipateInInviteFriendCampaignRequest invitedUserId
             * @property {number} sourceCarId ParticipateInInviteFriendCampaignRequest sourceCarId
             * @property {boolean} transmission ParticipateInInviteFriendCampaignRequest transmission
             */

            /**
             * Constructs a new ParticipateInInviteFriendCampaignRequest.
             * @memberof wm.protobuf
             * @classdesc Represents a ParticipateInInviteFriendCampaignRequest.
             * @implements IParticipateInInviteFriendCampaignRequest
             * @constructor
             * @param {wm.protobuf.IParticipateInInviteFriendCampaignRequest=} [properties] Properties to set
             */
            function ParticipateInInviteFriendCampaignRequest(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * ParticipateInInviteFriendCampaignRequest invitingUserId.
             * @member {number} invitingUserId
             * @memberof wm.protobuf.ParticipateInInviteFriendCampaignRequest
             * @instance
             */
            ParticipateInInviteFriendCampaignRequest.prototype.invitingUserId = 0;

            /**
             * ParticipateInInviteFriendCampaignRequest invitedUserId.
             * @member {number} invitedUserId
             * @memberof wm.protobuf.ParticipateInInviteFriendCampaignRequest
             * @instance
             */
            ParticipateInInviteFriendCampaignRequest.prototype.invitedUserId = 0;

            /**
             * ParticipateInInviteFriendCampaignRequest sourceCarId.
             * @member {number} sourceCarId
             * @memberof wm.protobuf.ParticipateInInviteFriendCampaignRequest
             * @instance
             */
            ParticipateInInviteFriendCampaignRequest.prototype.sourceCarId = 0;

            /**
             * ParticipateInInviteFriendCampaignRequest transmission.
             * @member {boolean} transmission
             * @memberof wm.protobuf.ParticipateInInviteFriendCampaignRequest
             * @instance
             */
            ParticipateInInviteFriendCampaignRequest.prototype.transmission = false;

            /**
             * Creates a new ParticipateInInviteFriendCampaignRequest instance using the specified properties.
             * @function create
             * @memberof wm.protobuf.ParticipateInInviteFriendCampaignRequest
             * @static
             * @param {wm.protobuf.IParticipateInInviteFriendCampaignRequest=} [properties] Properties to set
             * @returns {wm.protobuf.ParticipateInInviteFriendCampaignRequest} ParticipateInInviteFriendCampaignRequest instance
             */
            ParticipateInInviteFriendCampaignRequest.create = function create(properties) {
                return new ParticipateInInviteFriendCampaignRequest(properties);
            };

            /**
             * Encodes the specified ParticipateInInviteFriendCampaignRequest message. Does not implicitly {@link wm.protobuf.ParticipateInInviteFriendCampaignRequest.verify|verify} messages.
             * @function encode
             * @memberof wm.protobuf.ParticipateInInviteFriendCampaignRequest
             * @static
             * @param {wm.protobuf.IParticipateInInviteFriendCampaignRequest} message ParticipateInInviteFriendCampaignRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ParticipateInInviteFriendCampaignRequest.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.invitingUserId);
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.invitedUserId);
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.sourceCarId);
                writer.uint32(/* id 4, wireType 0 =*/32).bool(message.transmission);
                return writer;
            };

            /**
             * Encodes the specified ParticipateInInviteFriendCampaignRequest message, length delimited. Does not implicitly {@link wm.protobuf.ParticipateInInviteFriendCampaignRequest.verify|verify} messages.
             * @function encodeDelimited
             * @memberof wm.protobuf.ParticipateInInviteFriendCampaignRequest
             * @static
             * @param {wm.protobuf.IParticipateInInviteFriendCampaignRequest} message ParticipateInInviteFriendCampaignRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ParticipateInInviteFriendCampaignRequest.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a ParticipateInInviteFriendCampaignRequest message from the specified reader or buffer.
             * @function decode
             * @memberof wm.protobuf.ParticipateInInviteFriendCampaignRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {wm.protobuf.ParticipateInInviteFriendCampaignRequest} ParticipateInInviteFriendCampaignRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ParticipateInInviteFriendCampaignRequest.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.wm.protobuf.ParticipateInInviteFriendCampaignRequest();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.invitingUserId = reader.uint32();
                            break;
                        }
                    case 2: {
                            message.invitedUserId = reader.uint32();
                            break;
                        }
                    case 3: {
                            message.sourceCarId = reader.uint32();
                            break;
                        }
                    case 4: {
                            message.transmission = reader.bool();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("invitingUserId"))
                    throw $util.ProtocolError("missing required 'invitingUserId'", { instance: message });
                if (!message.hasOwnProperty("invitedUserId"))
                    throw $util.ProtocolError("missing required 'invitedUserId'", { instance: message });
                if (!message.hasOwnProperty("sourceCarId"))
                    throw $util.ProtocolError("missing required 'sourceCarId'", { instance: message });
                if (!message.hasOwnProperty("transmission"))
                    throw $util.ProtocolError("missing required 'transmission'", { instance: message });
                return message;
            };

            /**
             * Decodes a ParticipateInInviteFriendCampaignRequest message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof wm.protobuf.ParticipateInInviteFriendCampaignRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {wm.protobuf.ParticipateInInviteFriendCampaignRequest} ParticipateInInviteFriendCampaignRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ParticipateInInviteFriendCampaignRequest.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a ParticipateInInviteFriendCampaignRequest message.
             * @function verify
             * @memberof wm.protobuf.ParticipateInInviteFriendCampaignRequest
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ParticipateInInviteFriendCampaignRequest.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (!$util.isInteger(message.invitingUserId))
                    return "invitingUserId: integer expected";
                if (!$util.isInteger(message.invitedUserId))
                    return "invitedUserId: integer expected";
                if (!$util.isInteger(message.sourceCarId))
                    return "sourceCarId: integer expected";
                if (typeof message.transmission !== "boolean")
                    return "transmission: boolean expected";
                return null;
            };

            /**
             * Creates a ParticipateInInviteFriendCampaignRequest message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof wm.protobuf.ParticipateInInviteFriendCampaignRequest
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {wm.protobuf.ParticipateInInviteFriendCampaignRequest} ParticipateInInviteFriendCampaignRequest
             */
            ParticipateInInviteFriendCampaignRequest.fromObject = function fromObject(object) {
                if (object instanceof $root.wm.protobuf.ParticipateInInviteFriendCampaignRequest)
                    return object;
                let message = new $root.wm.protobuf.ParticipateInInviteFriendCampaignRequest();
                if (object.invitingUserId != null)
                    message.invitingUserId = object.invitingUserId >>> 0;
                if (object.invitedUserId != null)
                    message.invitedUserId = object.invitedUserId >>> 0;
                if (object.sourceCarId != null)
                    message.sourceCarId = object.sourceCarId >>> 0;
                if (object.transmission != null)
                    message.transmission = Boolean(object.transmission);
                return message;
            };

            /**
             * Creates a plain object from a ParticipateInInviteFriendCampaignRequest message. Also converts values to other types if specified.
             * @function toObject
             * @memberof wm.protobuf.ParticipateInInviteFriendCampaignRequest
             * @static
             * @param {wm.protobuf.ParticipateInInviteFriendCampaignRequest} message ParticipateInInviteFriendCampaignRequest
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ParticipateInInviteFriendCampaignRequest.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.invitingUserId = 0;
                    object.invitedUserId = 0;
                    object.sourceCarId = 0;
                    object.transmission = false;
                }
                if (message.invitingUserId != null && message.hasOwnProperty("invitingUserId"))
                    object.invitingUserId = message.invitingUserId;
                if (message.invitedUserId != null && message.hasOwnProperty("invitedUserId"))
                    object.invitedUserId = message.invitedUserId;
                if (message.sourceCarId != null && message.hasOwnProperty("sourceCarId"))
                    object.sourceCarId = message.sourceCarId;
                if (message.transmission != null && message.hasOwnProperty("transmission"))
                    object.transmission = message.transmission;
                return object;
            };

            /**
             * Converts this ParticipateInInviteFriendCampaignRequest to JSON.
             * @function toJSON
             * @memberof wm.protobuf.ParticipateInInviteFriendCampaignRequest
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ParticipateInInviteFriendCampaignRequest.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for ParticipateInInviteFriendCampaignRequest
             * @function getTypeUrl
             * @memberof wm.protobuf.ParticipateInInviteFriendCampaignRequest
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            ParticipateInInviteFriendCampaignRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/wm.protobuf.ParticipateInInviteFriendCampaignRequest";
            };

            return ParticipateInInviteFriendCampaignRequest;
        })();

        protobuf.ParticipateInInviteFriendCampaignResponse = (function() {

            /**
             * Properties of a ParticipateInInviteFriendCampaignResponse.
             * @memberof wm.protobuf
             * @interface IParticipateInInviteFriendCampaignResponse
             * @property {wm.protobuf.ErrorCode} error ParticipateInInviteFriendCampaignResponse error
             */

            /**
             * Constructs a new ParticipateInInviteFriendCampaignResponse.
             * @memberof wm.protobuf
             * @classdesc Represents a ParticipateInInviteFriendCampaignResponse.
             * @implements IParticipateInInviteFriendCampaignResponse
             * @constructor
             * @param {wm.protobuf.IParticipateInInviteFriendCampaignResponse=} [properties] Properties to set
             */
            function ParticipateInInviteFriendCampaignResponse(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * ParticipateInInviteFriendCampaignResponse error.
             * @member {wm.protobuf.ErrorCode} error
             * @memberof wm.protobuf.ParticipateInInviteFriendCampaignResponse
             * @instance
             */
            ParticipateInInviteFriendCampaignResponse.prototype.error = 0;

            /**
             * Creates a new ParticipateInInviteFriendCampaignResponse instance using the specified properties.
             * @function create
             * @memberof wm.protobuf.ParticipateInInviteFriendCampaignResponse
             * @static
             * @param {wm.protobuf.IParticipateInInviteFriendCampaignResponse=} [properties] Properties to set
             * @returns {wm.protobuf.ParticipateInInviteFriendCampaignResponse} ParticipateInInviteFriendCampaignResponse instance
             */
            ParticipateInInviteFriendCampaignResponse.create = function create(properties) {
                return new ParticipateInInviteFriendCampaignResponse(properties);
            };

            /**
             * Encodes the specified ParticipateInInviteFriendCampaignResponse message. Does not implicitly {@link wm.protobuf.ParticipateInInviteFriendCampaignResponse.verify|verify} messages.
             * @function encode
             * @memberof wm.protobuf.ParticipateInInviteFriendCampaignResponse
             * @static
             * @param {wm.protobuf.IParticipateInInviteFriendCampaignResponse} message ParticipateInInviteFriendCampaignResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ParticipateInInviteFriendCampaignResponse.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
                return writer;
            };

            /**
             * Encodes the specified ParticipateInInviteFriendCampaignResponse message, length delimited. Does not implicitly {@link wm.protobuf.ParticipateInInviteFriendCampaignResponse.verify|verify} messages.
             * @function encodeDelimited
             * @memberof wm.protobuf.ParticipateInInviteFriendCampaignResponse
             * @static
             * @param {wm.protobuf.IParticipateInInviteFriendCampaignResponse} message ParticipateInInviteFriendCampaignResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ParticipateInInviteFriendCampaignResponse.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a ParticipateInInviteFriendCampaignResponse message from the specified reader or buffer.
             * @function decode
             * @memberof wm.protobuf.ParticipateInInviteFriendCampaignResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {wm.protobuf.ParticipateInInviteFriendCampaignResponse} ParticipateInInviteFriendCampaignResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ParticipateInInviteFriendCampaignResponse.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.wm.protobuf.ParticipateInInviteFriendCampaignResponse();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.error = reader.int32();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("error"))
                    throw $util.ProtocolError("missing required 'error'", { instance: message });
                return message;
            };

            /**
             * Decodes a ParticipateInInviteFriendCampaignResponse message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof wm.protobuf.ParticipateInInviteFriendCampaignResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {wm.protobuf.ParticipateInInviteFriendCampaignResponse} ParticipateInInviteFriendCampaignResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ParticipateInInviteFriendCampaignResponse.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a ParticipateInInviteFriendCampaignResponse message.
             * @function verify
             * @memberof wm.protobuf.ParticipateInInviteFriendCampaignResponse
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ParticipateInInviteFriendCampaignResponse.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                switch (message.error) {
                default:
                    return "error: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 7:
                case 9:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 16:
                case 17:
                case 18:
                case 19:
                    break;
                }
                return null;
            };

            /**
             * Creates a ParticipateInInviteFriendCampaignResponse message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof wm.protobuf.ParticipateInInviteFriendCampaignResponse
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {wm.protobuf.ParticipateInInviteFriendCampaignResponse} ParticipateInInviteFriendCampaignResponse
             */
            ParticipateInInviteFriendCampaignResponse.fromObject = function fromObject(object) {
                if (object instanceof $root.wm.protobuf.ParticipateInInviteFriendCampaignResponse)
                    return object;
                let message = new $root.wm.protobuf.ParticipateInInviteFriendCampaignResponse();
                switch (object.error) {
                default:
                    if (typeof object.error === "number") {
                        message.error = object.error;
                        break;
                    }
                    break;
                case "ERR_SUCCESS":
                case 0:
                    message.error = 0;
                    break;
                case "ERR_REQUEST":
                case 1:
                    message.error = 1;
                    break;
                case "ERR_NOT_FOUND":
                case 2:
                    message.error = 2;
                    break;
                case "ERR_ID_SERVER":
                case 3:
                    message.error = 3;
                    break;
                case "ERR_ID_BANNED":
                case 4:
                    message.error = 4;
                    break;
                case "ERR_USER_LOCKED":
                case 5:
                    message.error = 5;
                    break;
                case "ERR_USER_VERSION":
                case 6:
                    message.error = 6;
                    break;
                case "ERR_NAME_CONFLICTED":
                case 7:
                    message.error = 7;
                    break;
                case "ERR_FORBIDDEN":
                case 9:
                    message.error = 9;
                    break;
                case "ERR_USER_SUCCEEDED":
                case 11:
                    message.error = 11;
                    break;
                case "ERR_BEING_TRANSFERRED":
                case 12:
                    message.error = 12;
                    break;
                case "ERR_SCRATCH_LOCKED":
                case 13:
                    message.error = 13;
                    break;
                case "ERR_BINGO_REVENGE_LOCKED":
                case 14:
                    message.error = 14;
                    break;
                case "ERR_BINGO_ALREDY_LINKED":
                case 15:
                    message.error = 15;
                    break;
                case "ERR_BINGO_FINISHED":
                case 16:
                    message.error = 16;
                    break;
                case "ERR_BINGO_REACHED_MAX_USER":
                case 17:
                    message.error = 17;
                    break;
                case "ERR_CAR_NOT_FOUND":
                case 18:
                    message.error = 18;
                    break;
                case "ERR_BINGO_CARD_NOT_FOUND":
                case 19:
                    message.error = 19;
                    break;
                }
                return message;
            };

            /**
             * Creates a plain object from a ParticipateInInviteFriendCampaignResponse message. Also converts values to other types if specified.
             * @function toObject
             * @memberof wm.protobuf.ParticipateInInviteFriendCampaignResponse
             * @static
             * @param {wm.protobuf.ParticipateInInviteFriendCampaignResponse} message ParticipateInInviteFriendCampaignResponse
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ParticipateInInviteFriendCampaignResponse.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults)
                    object.error = options.enums === String ? "ERR_SUCCESS" : 0;
                if (message.error != null && message.hasOwnProperty("error"))
                    object.error = options.enums === String ? $root.wm.protobuf.ErrorCode[message.error] === undefined ? message.error : $root.wm.protobuf.ErrorCode[message.error] : message.error;
                return object;
            };

            /**
             * Converts this ParticipateInInviteFriendCampaignResponse to JSON.
             * @function toJSON
             * @memberof wm.protobuf.ParticipateInInviteFriendCampaignResponse
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ParticipateInInviteFriendCampaignResponse.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for ParticipateInInviteFriendCampaignResponse
             * @function getTypeUrl
             * @memberof wm.protobuf.ParticipateInInviteFriendCampaignResponse
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            ParticipateInInviteFriendCampaignResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/wm.protobuf.ParticipateInInviteFriendCampaignResponse";
            };

            return ParticipateInInviteFriendCampaignResponse;
        })();

        protobuf.ConsumeUserItemRequest = (function() {

            /**
             * Properties of a ConsumeUserItemRequest.
             * @memberof wm.protobuf
             * @interface IConsumeUserItemRequest
             * @property {number} userId ConsumeUserItemRequest userId
             * @property {number} carId ConsumeUserItemRequest carId
             * @property {number} userItemId ConsumeUserItemRequest userItemId
             */

            /**
             * Constructs a new ConsumeUserItemRequest.
             * @memberof wm.protobuf
             * @classdesc Represents a ConsumeUserItemRequest.
             * @implements IConsumeUserItemRequest
             * @constructor
             * @param {wm.protobuf.IConsumeUserItemRequest=} [properties] Properties to set
             */
            function ConsumeUserItemRequest(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * ConsumeUserItemRequest userId.
             * @member {number} userId
             * @memberof wm.protobuf.ConsumeUserItemRequest
             * @instance
             */
            ConsumeUserItemRequest.prototype.userId = 0;

            /**
             * ConsumeUserItemRequest carId.
             * @member {number} carId
             * @memberof wm.protobuf.ConsumeUserItemRequest
             * @instance
             */
            ConsumeUserItemRequest.prototype.carId = 0;

            /**
             * ConsumeUserItemRequest userItemId.
             * @member {number} userItemId
             * @memberof wm.protobuf.ConsumeUserItemRequest
             * @instance
             */
            ConsumeUserItemRequest.prototype.userItemId = 0;

            /**
             * Creates a new ConsumeUserItemRequest instance using the specified properties.
             * @function create
             * @memberof wm.protobuf.ConsumeUserItemRequest
             * @static
             * @param {wm.protobuf.IConsumeUserItemRequest=} [properties] Properties to set
             * @returns {wm.protobuf.ConsumeUserItemRequest} ConsumeUserItemRequest instance
             */
            ConsumeUserItemRequest.create = function create(properties) {
                return new ConsumeUserItemRequest(properties);
            };

            /**
             * Encodes the specified ConsumeUserItemRequest message. Does not implicitly {@link wm.protobuf.ConsumeUserItemRequest.verify|verify} messages.
             * @function encode
             * @memberof wm.protobuf.ConsumeUserItemRequest
             * @static
             * @param {wm.protobuf.IConsumeUserItemRequest} message ConsumeUserItemRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ConsumeUserItemRequest.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.userId);
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.carId);
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.userItemId);
                return writer;
            };

            /**
             * Encodes the specified ConsumeUserItemRequest message, length delimited. Does not implicitly {@link wm.protobuf.ConsumeUserItemRequest.verify|verify} messages.
             * @function encodeDelimited
             * @memberof wm.protobuf.ConsumeUserItemRequest
             * @static
             * @param {wm.protobuf.IConsumeUserItemRequest} message ConsumeUserItemRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ConsumeUserItemRequest.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a ConsumeUserItemRequest message from the specified reader or buffer.
             * @function decode
             * @memberof wm.protobuf.ConsumeUserItemRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {wm.protobuf.ConsumeUserItemRequest} ConsumeUserItemRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ConsumeUserItemRequest.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.wm.protobuf.ConsumeUserItemRequest();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.userId = reader.uint32();
                            break;
                        }
                    case 2: {
                            message.carId = reader.uint32();
                            break;
                        }
                    case 3: {
                            message.userItemId = reader.uint32();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("userId"))
                    throw $util.ProtocolError("missing required 'userId'", { instance: message });
                if (!message.hasOwnProperty("carId"))
                    throw $util.ProtocolError("missing required 'carId'", { instance: message });
                if (!message.hasOwnProperty("userItemId"))
                    throw $util.ProtocolError("missing required 'userItemId'", { instance: message });
                return message;
            };

            /**
             * Decodes a ConsumeUserItemRequest message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof wm.protobuf.ConsumeUserItemRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {wm.protobuf.ConsumeUserItemRequest} ConsumeUserItemRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ConsumeUserItemRequest.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a ConsumeUserItemRequest message.
             * @function verify
             * @memberof wm.protobuf.ConsumeUserItemRequest
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ConsumeUserItemRequest.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (!$util.isInteger(message.userId))
                    return "userId: integer expected";
                if (!$util.isInteger(message.carId))
                    return "carId: integer expected";
                if (!$util.isInteger(message.userItemId))
                    return "userItemId: integer expected";
                return null;
            };

            /**
             * Creates a ConsumeUserItemRequest message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof wm.protobuf.ConsumeUserItemRequest
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {wm.protobuf.ConsumeUserItemRequest} ConsumeUserItemRequest
             */
            ConsumeUserItemRequest.fromObject = function fromObject(object) {
                if (object instanceof $root.wm.protobuf.ConsumeUserItemRequest)
                    return object;
                let message = new $root.wm.protobuf.ConsumeUserItemRequest();
                if (object.userId != null)
                    message.userId = object.userId >>> 0;
                if (object.carId != null)
                    message.carId = object.carId >>> 0;
                if (object.userItemId != null)
                    message.userItemId = object.userItemId >>> 0;
                return message;
            };

            /**
             * Creates a plain object from a ConsumeUserItemRequest message. Also converts values to other types if specified.
             * @function toObject
             * @memberof wm.protobuf.ConsumeUserItemRequest
             * @static
             * @param {wm.protobuf.ConsumeUserItemRequest} message ConsumeUserItemRequest
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ConsumeUserItemRequest.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.userId = 0;
                    object.carId = 0;
                    object.userItemId = 0;
                }
                if (message.userId != null && message.hasOwnProperty("userId"))
                    object.userId = message.userId;
                if (message.carId != null && message.hasOwnProperty("carId"))
                    object.carId = message.carId;
                if (message.userItemId != null && message.hasOwnProperty("userItemId"))
                    object.userItemId = message.userItemId;
                return object;
            };

            /**
             * Converts this ConsumeUserItemRequest to JSON.
             * @function toJSON
             * @memberof wm.protobuf.ConsumeUserItemRequest
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ConsumeUserItemRequest.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for ConsumeUserItemRequest
             * @function getTypeUrl
             * @memberof wm.protobuf.ConsumeUserItemRequest
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            ConsumeUserItemRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/wm.protobuf.ConsumeUserItemRequest";
            };

            return ConsumeUserItemRequest;
        })();

        protobuf.ConsumeUserItemResponse = (function() {

            /**
             * Properties of a ConsumeUserItemResponse.
             * @memberof wm.protobuf
             * @interface IConsumeUserItemResponse
             * @property {wm.protobuf.ErrorCode} error ConsumeUserItemResponse error
             */

            /**
             * Constructs a new ConsumeUserItemResponse.
             * @memberof wm.protobuf
             * @classdesc Represents a ConsumeUserItemResponse.
             * @implements IConsumeUserItemResponse
             * @constructor
             * @param {wm.protobuf.IConsumeUserItemResponse=} [properties] Properties to set
             */
            function ConsumeUserItemResponse(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * ConsumeUserItemResponse error.
             * @member {wm.protobuf.ErrorCode} error
             * @memberof wm.protobuf.ConsumeUserItemResponse
             * @instance
             */
            ConsumeUserItemResponse.prototype.error = 0;

            /**
             * Creates a new ConsumeUserItemResponse instance using the specified properties.
             * @function create
             * @memberof wm.protobuf.ConsumeUserItemResponse
             * @static
             * @param {wm.protobuf.IConsumeUserItemResponse=} [properties] Properties to set
             * @returns {wm.protobuf.ConsumeUserItemResponse} ConsumeUserItemResponse instance
             */
            ConsumeUserItemResponse.create = function create(properties) {
                return new ConsumeUserItemResponse(properties);
            };

            /**
             * Encodes the specified ConsumeUserItemResponse message. Does not implicitly {@link wm.protobuf.ConsumeUserItemResponse.verify|verify} messages.
             * @function encode
             * @memberof wm.protobuf.ConsumeUserItemResponse
             * @static
             * @param {wm.protobuf.IConsumeUserItemResponse} message ConsumeUserItemResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ConsumeUserItemResponse.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
                return writer;
            };

            /**
             * Encodes the specified ConsumeUserItemResponse message, length delimited. Does not implicitly {@link wm.protobuf.ConsumeUserItemResponse.verify|verify} messages.
             * @function encodeDelimited
             * @memberof wm.protobuf.ConsumeUserItemResponse
             * @static
             * @param {wm.protobuf.IConsumeUserItemResponse} message ConsumeUserItemResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ConsumeUserItemResponse.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a ConsumeUserItemResponse message from the specified reader or buffer.
             * @function decode
             * @memberof wm.protobuf.ConsumeUserItemResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {wm.protobuf.ConsumeUserItemResponse} ConsumeUserItemResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ConsumeUserItemResponse.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.wm.protobuf.ConsumeUserItemResponse();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.error = reader.int32();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("error"))
                    throw $util.ProtocolError("missing required 'error'", { instance: message });
                return message;
            };

            /**
             * Decodes a ConsumeUserItemResponse message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof wm.protobuf.ConsumeUserItemResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {wm.protobuf.ConsumeUserItemResponse} ConsumeUserItemResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ConsumeUserItemResponse.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a ConsumeUserItemResponse message.
             * @function verify
             * @memberof wm.protobuf.ConsumeUserItemResponse
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ConsumeUserItemResponse.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                switch (message.error) {
                default:
                    return "error: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 7:
                case 9:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 16:
                case 17:
                case 18:
                case 19:
                    break;
                }
                return null;
            };

            /**
             * Creates a ConsumeUserItemResponse message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof wm.protobuf.ConsumeUserItemResponse
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {wm.protobuf.ConsumeUserItemResponse} ConsumeUserItemResponse
             */
            ConsumeUserItemResponse.fromObject = function fromObject(object) {
                if (object instanceof $root.wm.protobuf.ConsumeUserItemResponse)
                    return object;
                let message = new $root.wm.protobuf.ConsumeUserItemResponse();
                switch (object.error) {
                default:
                    if (typeof object.error === "number") {
                        message.error = object.error;
                        break;
                    }
                    break;
                case "ERR_SUCCESS":
                case 0:
                    message.error = 0;
                    break;
                case "ERR_REQUEST":
                case 1:
                    message.error = 1;
                    break;
                case "ERR_NOT_FOUND":
                case 2:
                    message.error = 2;
                    break;
                case "ERR_ID_SERVER":
                case 3:
                    message.error = 3;
                    break;
                case "ERR_ID_BANNED":
                case 4:
                    message.error = 4;
                    break;
                case "ERR_USER_LOCKED":
                case 5:
                    message.error = 5;
                    break;
                case "ERR_USER_VERSION":
                case 6:
                    message.error = 6;
                    break;
                case "ERR_NAME_CONFLICTED":
                case 7:
                    message.error = 7;
                    break;
                case "ERR_FORBIDDEN":
                case 9:
                    message.error = 9;
                    break;
                case "ERR_USER_SUCCEEDED":
                case 11:
                    message.error = 11;
                    break;
                case "ERR_BEING_TRANSFERRED":
                case 12:
                    message.error = 12;
                    break;
                case "ERR_SCRATCH_LOCKED":
                case 13:
                    message.error = 13;
                    break;
                case "ERR_BINGO_REVENGE_LOCKED":
                case 14:
                    message.error = 14;
                    break;
                case "ERR_BINGO_ALREDY_LINKED":
                case 15:
                    message.error = 15;
                    break;
                case "ERR_BINGO_FINISHED":
                case 16:
                    message.error = 16;
                    break;
                case "ERR_BINGO_REACHED_MAX_USER":
                case 17:
                    message.error = 17;
                    break;
                case "ERR_CAR_NOT_FOUND":
                case 18:
                    message.error = 18;
                    break;
                case "ERR_BINGO_CARD_NOT_FOUND":
                case 19:
                    message.error = 19;
                    break;
                }
                return message;
            };

            /**
             * Creates a plain object from a ConsumeUserItemResponse message. Also converts values to other types if specified.
             * @function toObject
             * @memberof wm.protobuf.ConsumeUserItemResponse
             * @static
             * @param {wm.protobuf.ConsumeUserItemResponse} message ConsumeUserItemResponse
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ConsumeUserItemResponse.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults)
                    object.error = options.enums === String ? "ERR_SUCCESS" : 0;
                if (message.error != null && message.hasOwnProperty("error"))
                    object.error = options.enums === String ? $root.wm.protobuf.ErrorCode[message.error] === undefined ? message.error : $root.wm.protobuf.ErrorCode[message.error] : message.error;
                return object;
            };

            /**
             * Converts this ConsumeUserItemResponse to JSON.
             * @function toJSON
             * @memberof wm.protobuf.ConsumeUserItemResponse
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ConsumeUserItemResponse.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for ConsumeUserItemResponse
             * @function getTypeUrl
             * @memberof wm.protobuf.ConsumeUserItemResponse
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            ConsumeUserItemResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/wm.protobuf.ConsumeUserItemResponse";
            };

            return ConsumeUserItemResponse;
        })();

        protobuf.SearchCarsByLevelRequest = (function() {

            /**
             * Properties of a SearchCarsByLevelRequest.
             * @memberof wm.protobuf
             * @interface ISearchCarsByLevelRequest
             * @property {number} carId SearchCarsByLevelRequest carId
             * @property {number} ghostLevel SearchCarsByLevelRequest ghostLevel
             * @property {number} area SearchCarsByLevelRequest area
             * @property {number|null} [regionId] SearchCarsByLevelRequest regionId
             */

            /**
             * Constructs a new SearchCarsByLevelRequest.
             * @memberof wm.protobuf
             * @classdesc Represents a SearchCarsByLevelRequest.
             * @implements ISearchCarsByLevelRequest
             * @constructor
             * @param {wm.protobuf.ISearchCarsByLevelRequest=} [properties] Properties to set
             */
            function SearchCarsByLevelRequest(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * SearchCarsByLevelRequest carId.
             * @member {number} carId
             * @memberof wm.protobuf.SearchCarsByLevelRequest
             * @instance
             */
            SearchCarsByLevelRequest.prototype.carId = 0;

            /**
             * SearchCarsByLevelRequest ghostLevel.
             * @member {number} ghostLevel
             * @memberof wm.protobuf.SearchCarsByLevelRequest
             * @instance
             */
            SearchCarsByLevelRequest.prototype.ghostLevel = 0;

            /**
             * SearchCarsByLevelRequest area.
             * @member {number} area
             * @memberof wm.protobuf.SearchCarsByLevelRequest
             * @instance
             */
            SearchCarsByLevelRequest.prototype.area = 0;

            /**
             * SearchCarsByLevelRequest regionId.
             * @member {number} regionId
             * @memberof wm.protobuf.SearchCarsByLevelRequest
             * @instance
             */
            SearchCarsByLevelRequest.prototype.regionId = 0;

            /**
             * Creates a new SearchCarsByLevelRequest instance using the specified properties.
             * @function create
             * @memberof wm.protobuf.SearchCarsByLevelRequest
             * @static
             * @param {wm.protobuf.ISearchCarsByLevelRequest=} [properties] Properties to set
             * @returns {wm.protobuf.SearchCarsByLevelRequest} SearchCarsByLevelRequest instance
             */
            SearchCarsByLevelRequest.create = function create(properties) {
                return new SearchCarsByLevelRequest(properties);
            };

            /**
             * Encodes the specified SearchCarsByLevelRequest message. Does not implicitly {@link wm.protobuf.SearchCarsByLevelRequest.verify|verify} messages.
             * @function encode
             * @memberof wm.protobuf.SearchCarsByLevelRequest
             * @static
             * @param {wm.protobuf.ISearchCarsByLevelRequest} message SearchCarsByLevelRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SearchCarsByLevelRequest.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.carId);
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.ghostLevel);
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.area);
                if (message.regionId != null && Object.hasOwnProperty.call(message, "regionId"))
                    writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.regionId);
                return writer;
            };

            /**
             * Encodes the specified SearchCarsByLevelRequest message, length delimited. Does not implicitly {@link wm.protobuf.SearchCarsByLevelRequest.verify|verify} messages.
             * @function encodeDelimited
             * @memberof wm.protobuf.SearchCarsByLevelRequest
             * @static
             * @param {wm.protobuf.ISearchCarsByLevelRequest} message SearchCarsByLevelRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SearchCarsByLevelRequest.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a SearchCarsByLevelRequest message from the specified reader or buffer.
             * @function decode
             * @memberof wm.protobuf.SearchCarsByLevelRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {wm.protobuf.SearchCarsByLevelRequest} SearchCarsByLevelRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SearchCarsByLevelRequest.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.wm.protobuf.SearchCarsByLevelRequest();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.carId = reader.uint32();
                            break;
                        }
                    case 2: {
                            message.ghostLevel = reader.uint32();
                            break;
                        }
                    case 3: {
                            message.area = reader.uint32();
                            break;
                        }
                    case 4: {
                            message.regionId = reader.uint32();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("carId"))
                    throw $util.ProtocolError("missing required 'carId'", { instance: message });
                if (!message.hasOwnProperty("ghostLevel"))
                    throw $util.ProtocolError("missing required 'ghostLevel'", { instance: message });
                if (!message.hasOwnProperty("area"))
                    throw $util.ProtocolError("missing required 'area'", { instance: message });
                return message;
            };

            /**
             * Decodes a SearchCarsByLevelRequest message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof wm.protobuf.SearchCarsByLevelRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {wm.protobuf.SearchCarsByLevelRequest} SearchCarsByLevelRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SearchCarsByLevelRequest.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a SearchCarsByLevelRequest message.
             * @function verify
             * @memberof wm.protobuf.SearchCarsByLevelRequest
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            SearchCarsByLevelRequest.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (!$util.isInteger(message.carId))
                    return "carId: integer expected";
                if (!$util.isInteger(message.ghostLevel))
                    return "ghostLevel: integer expected";
                if (!$util.isInteger(message.area))
                    return "area: integer expected";
                if (message.regionId != null && message.hasOwnProperty("regionId"))
                    if (!$util.isInteger(message.regionId))
                        return "regionId: integer expected";
                return null;
            };

            /**
             * Creates a SearchCarsByLevelRequest message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof wm.protobuf.SearchCarsByLevelRequest
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {wm.protobuf.SearchCarsByLevelRequest} SearchCarsByLevelRequest
             */
            SearchCarsByLevelRequest.fromObject = function fromObject(object) {
                if (object instanceof $root.wm.protobuf.SearchCarsByLevelRequest)
                    return object;
                let message = new $root.wm.protobuf.SearchCarsByLevelRequest();
                if (object.carId != null)
                    message.carId = object.carId >>> 0;
                if (object.ghostLevel != null)
                    message.ghostLevel = object.ghostLevel >>> 0;
                if (object.area != null)
                    message.area = object.area >>> 0;
                if (object.regionId != null)
                    message.regionId = object.regionId >>> 0;
                return message;
            };

            /**
             * Creates a plain object from a SearchCarsByLevelRequest message. Also converts values to other types if specified.
             * @function toObject
             * @memberof wm.protobuf.SearchCarsByLevelRequest
             * @static
             * @param {wm.protobuf.SearchCarsByLevelRequest} message SearchCarsByLevelRequest
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            SearchCarsByLevelRequest.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.carId = 0;
                    object.ghostLevel = 0;
                    object.area = 0;
                    object.regionId = 0;
                }
                if (message.carId != null && message.hasOwnProperty("carId"))
                    object.carId = message.carId;
                if (message.ghostLevel != null && message.hasOwnProperty("ghostLevel"))
                    object.ghostLevel = message.ghostLevel;
                if (message.area != null && message.hasOwnProperty("area"))
                    object.area = message.area;
                if (message.regionId != null && message.hasOwnProperty("regionId"))
                    object.regionId = message.regionId;
                return object;
            };

            /**
             * Converts this SearchCarsByLevelRequest to JSON.
             * @function toJSON
             * @memberof wm.protobuf.SearchCarsByLevelRequest
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            SearchCarsByLevelRequest.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for SearchCarsByLevelRequest
             * @function getTypeUrl
             * @memberof wm.protobuf.SearchCarsByLevelRequest
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            SearchCarsByLevelRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/wm.protobuf.SearchCarsByLevelRequest";
            };

            return SearchCarsByLevelRequest;
        })();

        protobuf.SearchCarsByLevelResponse = (function() {

            /**
             * Properties of a SearchCarsByLevelResponse.
             * @memberof wm.protobuf
             * @interface ISearchCarsByLevelResponse
             * @property {wm.protobuf.ErrorCode} error SearchCarsByLevelResponse error
             * @property {number} ramp SearchCarsByLevelResponse ramp
             * @property {number} path SearchCarsByLevelResponse path
             * @property {Array.<wm.protobuf.IGhostCar>|null} [ghosts] SearchCarsByLevelResponse ghosts
             * @property {wm.protobuf.PathSelectionMethod} selectionMethod SearchCarsByLevelResponse selectionMethod
             * @property {Array.<wm.protobuf.SearchCarsByLevelResponse.IRate>|null} [rates] SearchCarsByLevelResponse rates
             */

            /**
             * Constructs a new SearchCarsByLevelResponse.
             * @memberof wm.protobuf
             * @classdesc Represents a SearchCarsByLevelResponse.
             * @implements ISearchCarsByLevelResponse
             * @constructor
             * @param {wm.protobuf.ISearchCarsByLevelResponse=} [properties] Properties to set
             */
            function SearchCarsByLevelResponse(properties) {
                this.ghosts = [];
                this.rates = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * SearchCarsByLevelResponse error.
             * @member {wm.protobuf.ErrorCode} error
             * @memberof wm.protobuf.SearchCarsByLevelResponse
             * @instance
             */
            SearchCarsByLevelResponse.prototype.error = 0;

            /**
             * SearchCarsByLevelResponse ramp.
             * @member {number} ramp
             * @memberof wm.protobuf.SearchCarsByLevelResponse
             * @instance
             */
            SearchCarsByLevelResponse.prototype.ramp = 0;

            /**
             * SearchCarsByLevelResponse path.
             * @member {number} path
             * @memberof wm.protobuf.SearchCarsByLevelResponse
             * @instance
             */
            SearchCarsByLevelResponse.prototype.path = 0;

            /**
             * SearchCarsByLevelResponse ghosts.
             * @member {Array.<wm.protobuf.IGhostCar>} ghosts
             * @memberof wm.protobuf.SearchCarsByLevelResponse
             * @instance
             */
            SearchCarsByLevelResponse.prototype.ghosts = $util.emptyArray;

            /**
             * SearchCarsByLevelResponse selectionMethod.
             * @member {wm.protobuf.PathSelectionMethod} selectionMethod
             * @memberof wm.protobuf.SearchCarsByLevelResponse
             * @instance
             */
            SearchCarsByLevelResponse.prototype.selectionMethod = 1;

            /**
             * SearchCarsByLevelResponse rates.
             * @member {Array.<wm.protobuf.SearchCarsByLevelResponse.IRate>} rates
             * @memberof wm.protobuf.SearchCarsByLevelResponse
             * @instance
             */
            SearchCarsByLevelResponse.prototype.rates = $util.emptyArray;

            /**
             * Creates a new SearchCarsByLevelResponse instance using the specified properties.
             * @function create
             * @memberof wm.protobuf.SearchCarsByLevelResponse
             * @static
             * @param {wm.protobuf.ISearchCarsByLevelResponse=} [properties] Properties to set
             * @returns {wm.protobuf.SearchCarsByLevelResponse} SearchCarsByLevelResponse instance
             */
            SearchCarsByLevelResponse.create = function create(properties) {
                return new SearchCarsByLevelResponse(properties);
            };

            /**
             * Encodes the specified SearchCarsByLevelResponse message. Does not implicitly {@link wm.protobuf.SearchCarsByLevelResponse.verify|verify} messages.
             * @function encode
             * @memberof wm.protobuf.SearchCarsByLevelResponse
             * @static
             * @param {wm.protobuf.ISearchCarsByLevelResponse} message SearchCarsByLevelResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SearchCarsByLevelResponse.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.ramp);
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.path);
                if (message.ghosts != null && message.ghosts.length)
                    for (let i = 0; i < message.ghosts.length; ++i)
                        $root.wm.protobuf.GhostCar.encode(message.ghosts[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                writer.uint32(/* id 5, wireType 0 =*/40).int32(message.selectionMethod);
                if (message.rates != null && message.rates.length)
                    for (let i = 0; i < message.rates.length; ++i)
                        $root.wm.protobuf.SearchCarsByLevelResponse.Rate.encode(message.rates[i], writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified SearchCarsByLevelResponse message, length delimited. Does not implicitly {@link wm.protobuf.SearchCarsByLevelResponse.verify|verify} messages.
             * @function encodeDelimited
             * @memberof wm.protobuf.SearchCarsByLevelResponse
             * @static
             * @param {wm.protobuf.ISearchCarsByLevelResponse} message SearchCarsByLevelResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SearchCarsByLevelResponse.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a SearchCarsByLevelResponse message from the specified reader or buffer.
             * @function decode
             * @memberof wm.protobuf.SearchCarsByLevelResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {wm.protobuf.SearchCarsByLevelResponse} SearchCarsByLevelResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SearchCarsByLevelResponse.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.wm.protobuf.SearchCarsByLevelResponse();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.error = reader.int32();
                            break;
                        }
                    case 2: {
                            message.ramp = reader.uint32();
                            break;
                        }
                    case 3: {
                            message.path = reader.uint32();
                            break;
                        }
                    case 4: {
                            if (!(message.ghosts && message.ghosts.length))
                                message.ghosts = [];
                            message.ghosts.push($root.wm.protobuf.GhostCar.decode(reader, reader.uint32()));
                            break;
                        }
                    case 5: {
                            message.selectionMethod = reader.int32();
                            break;
                        }
                    case 6: {
                            if (!(message.rates && message.rates.length))
                                message.rates = [];
                            message.rates.push($root.wm.protobuf.SearchCarsByLevelResponse.Rate.decode(reader, reader.uint32()));
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("error"))
                    throw $util.ProtocolError("missing required 'error'", { instance: message });
                if (!message.hasOwnProperty("ramp"))
                    throw $util.ProtocolError("missing required 'ramp'", { instance: message });
                if (!message.hasOwnProperty("path"))
                    throw $util.ProtocolError("missing required 'path'", { instance: message });
                if (!message.hasOwnProperty("selectionMethod"))
                    throw $util.ProtocolError("missing required 'selectionMethod'", { instance: message });
                return message;
            };

            /**
             * Decodes a SearchCarsByLevelResponse message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof wm.protobuf.SearchCarsByLevelResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {wm.protobuf.SearchCarsByLevelResponse} SearchCarsByLevelResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SearchCarsByLevelResponse.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a SearchCarsByLevelResponse message.
             * @function verify
             * @memberof wm.protobuf.SearchCarsByLevelResponse
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            SearchCarsByLevelResponse.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                switch (message.error) {
                default:
                    return "error: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 7:
                case 9:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 16:
                case 17:
                case 18:
                case 19:
                    break;
                }
                if (!$util.isInteger(message.ramp))
                    return "ramp: integer expected";
                if (!$util.isInteger(message.path))
                    return "path: integer expected";
                if (message.ghosts != null && message.hasOwnProperty("ghosts")) {
                    if (!Array.isArray(message.ghosts))
                        return "ghosts: array expected";
                    for (let i = 0; i < message.ghosts.length; ++i) {
                        let error = $root.wm.protobuf.GhostCar.verify(message.ghosts[i]);
                        if (error)
                            return "ghosts." + error;
                    }
                }
                switch (message.selectionMethod) {
                default:
                    return "selectionMethod: enum value expected";
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                    break;
                }
                if (message.rates != null && message.hasOwnProperty("rates")) {
                    if (!Array.isArray(message.rates))
                        return "rates: array expected";
                    for (let i = 0; i < message.rates.length; ++i) {
                        let error = $root.wm.protobuf.SearchCarsByLevelResponse.Rate.verify(message.rates[i]);
                        if (error)
                            return "rates." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a SearchCarsByLevelResponse message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof wm.protobuf.SearchCarsByLevelResponse
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {wm.protobuf.SearchCarsByLevelResponse} SearchCarsByLevelResponse
             */
            SearchCarsByLevelResponse.fromObject = function fromObject(object) {
                if (object instanceof $root.wm.protobuf.SearchCarsByLevelResponse)
                    return object;
                let message = new $root.wm.protobuf.SearchCarsByLevelResponse();
                switch (object.error) {
                default:
                    if (typeof object.error === "number") {
                        message.error = object.error;
                        break;
                    }
                    break;
                case "ERR_SUCCESS":
                case 0:
                    message.error = 0;
                    break;
                case "ERR_REQUEST":
                case 1:
                    message.error = 1;
                    break;
                case "ERR_NOT_FOUND":
                case 2:
                    message.error = 2;
                    break;
                case "ERR_ID_SERVER":
                case 3:
                    message.error = 3;
                    break;
                case "ERR_ID_BANNED":
                case 4:
                    message.error = 4;
                    break;
                case "ERR_USER_LOCKED":
                case 5:
                    message.error = 5;
                    break;
                case "ERR_USER_VERSION":
                case 6:
                    message.error = 6;
                    break;
                case "ERR_NAME_CONFLICTED":
                case 7:
                    message.error = 7;
                    break;
                case "ERR_FORBIDDEN":
                case 9:
                    message.error = 9;
                    break;
                case "ERR_USER_SUCCEEDED":
                case 11:
                    message.error = 11;
                    break;
                case "ERR_BEING_TRANSFERRED":
                case 12:
                    message.error = 12;
                    break;
                case "ERR_SCRATCH_LOCKED":
                case 13:
                    message.error = 13;
                    break;
                case "ERR_BINGO_REVENGE_LOCKED":
                case 14:
                    message.error = 14;
                    break;
                case "ERR_BINGO_ALREDY_LINKED":
                case 15:
                    message.error = 15;
                    break;
                case "ERR_BINGO_FINISHED":
                case 16:
                    message.error = 16;
                    break;
                case "ERR_BINGO_REACHED_MAX_USER":
                case 17:
                    message.error = 17;
                    break;
                case "ERR_CAR_NOT_FOUND":
                case 18:
                    message.error = 18;
                    break;
                case "ERR_BINGO_CARD_NOT_FOUND":
                case 19:
                    message.error = 19;
                    break;
                }
                if (object.ramp != null)
                    message.ramp = object.ramp >>> 0;
                if (object.path != null)
                    message.path = object.path >>> 0;
                if (object.ghosts) {
                    if (!Array.isArray(object.ghosts))
                        throw TypeError(".wm.protobuf.SearchCarsByLevelResponse.ghosts: array expected");
                    message.ghosts = [];
                    for (let i = 0; i < object.ghosts.length; ++i) {
                        if (typeof object.ghosts[i] !== "object")
                            throw TypeError(".wm.protobuf.SearchCarsByLevelResponse.ghosts: object expected");
                        message.ghosts[i] = $root.wm.protobuf.GhostCar.fromObject(object.ghosts[i]);
                    }
                }
                switch (object.selectionMethod) {
                default:
                    if (typeof object.selectionMethod === "number") {
                        message.selectionMethod = object.selectionMethod;
                        break;
                    }
                    break;
                case "PATH_NEW":
                case 1:
                    message.selectionMethod = 1;
                    break;
                case "PATH_PLAIN":
                case 2:
                    message.selectionMethod = 2;
                    break;
                case "PATH_FRIEND":
                case 3:
                    message.selectionMethod = 3;
                    break;
                case "PATH_NORMAL":
                case 4:
                    message.selectionMethod = 4;
                    break;
                case "PATH_CHALLENGER":
                case 5:
                    message.selectionMethod = 5;
                    break;
                }
                if (object.rates) {
                    if (!Array.isArray(object.rates))
                        throw TypeError(".wm.protobuf.SearchCarsByLevelResponse.rates: array expected");
                    message.rates = [];
                    for (let i = 0; i < object.rates.length; ++i) {
                        if (typeof object.rates[i] !== "object")
                            throw TypeError(".wm.protobuf.SearchCarsByLevelResponse.rates: object expected");
                        message.rates[i] = $root.wm.protobuf.SearchCarsByLevelResponse.Rate.fromObject(object.rates[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from a SearchCarsByLevelResponse message. Also converts values to other types if specified.
             * @function toObject
             * @memberof wm.protobuf.SearchCarsByLevelResponse
             * @static
             * @param {wm.protobuf.SearchCarsByLevelResponse} message SearchCarsByLevelResponse
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            SearchCarsByLevelResponse.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults) {
                    object.ghosts = [];
                    object.rates = [];
                }
                if (options.defaults) {
                    object.error = options.enums === String ? "ERR_SUCCESS" : 0;
                    object.ramp = 0;
                    object.path = 0;
                    object.selectionMethod = options.enums === String ? "PATH_NEW" : 1;
                }
                if (message.error != null && message.hasOwnProperty("error"))
                    object.error = options.enums === String ? $root.wm.protobuf.ErrorCode[message.error] === undefined ? message.error : $root.wm.protobuf.ErrorCode[message.error] : message.error;
                if (message.ramp != null && message.hasOwnProperty("ramp"))
                    object.ramp = message.ramp;
                if (message.path != null && message.hasOwnProperty("path"))
                    object.path = message.path;
                if (message.ghosts && message.ghosts.length) {
                    object.ghosts = [];
                    for (let j = 0; j < message.ghosts.length; ++j)
                        object.ghosts[j] = $root.wm.protobuf.GhostCar.toObject(message.ghosts[j], options);
                }
                if (message.selectionMethod != null && message.hasOwnProperty("selectionMethod"))
                    object.selectionMethod = options.enums === String ? $root.wm.protobuf.PathSelectionMethod[message.selectionMethod] === undefined ? message.selectionMethod : $root.wm.protobuf.PathSelectionMethod[message.selectionMethod] : message.selectionMethod;
                if (message.rates && message.rates.length) {
                    object.rates = [];
                    for (let j = 0; j < message.rates.length; ++j)
                        object.rates[j] = $root.wm.protobuf.SearchCarsByLevelResponse.Rate.toObject(message.rates[j], options);
                }
                return object;
            };

            /**
             * Converts this SearchCarsByLevelResponse to JSON.
             * @function toJSON
             * @memberof wm.protobuf.SearchCarsByLevelResponse
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            SearchCarsByLevelResponse.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for SearchCarsByLevelResponse
             * @function getTypeUrl
             * @memberof wm.protobuf.SearchCarsByLevelResponse
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            SearchCarsByLevelResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/wm.protobuf.SearchCarsByLevelResponse";
            };

            SearchCarsByLevelResponse.Rate = (function() {

                /**
                 * Properties of a Rate.
                 * @memberof wm.protobuf.SearchCarsByLevelResponse
                 * @interface IRate
                 * @property {number} carId Rate carId
                 * @property {wm.protobuf.GhostRateType} type Rate type
                 * @property {number|null} [rate] Rate rate
                 */

                /**
                 * Constructs a new Rate.
                 * @memberof wm.protobuf.SearchCarsByLevelResponse
                 * @classdesc Represents a Rate.
                 * @implements IRate
                 * @constructor
                 * @param {wm.protobuf.SearchCarsByLevelResponse.IRate=} [properties] Properties to set
                 */
                function Rate(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * Rate carId.
                 * @member {number} carId
                 * @memberof wm.protobuf.SearchCarsByLevelResponse.Rate
                 * @instance
                 */
                Rate.prototype.carId = 0;

                /**
                 * Rate type.
                 * @member {wm.protobuf.GhostRateType} type
                 * @memberof wm.protobuf.SearchCarsByLevelResponse.Rate
                 * @instance
                 */
                Rate.prototype.type = 1;

                /**
                 * Rate rate.
                 * @member {number} rate
                 * @memberof wm.protobuf.SearchCarsByLevelResponse.Rate
                 * @instance
                 */
                Rate.prototype.rate = 0;

                /**
                 * Creates a new Rate instance using the specified properties.
                 * @function create
                 * @memberof wm.protobuf.SearchCarsByLevelResponse.Rate
                 * @static
                 * @param {wm.protobuf.SearchCarsByLevelResponse.IRate=} [properties] Properties to set
                 * @returns {wm.protobuf.SearchCarsByLevelResponse.Rate} Rate instance
                 */
                Rate.create = function create(properties) {
                    return new Rate(properties);
                };

                /**
                 * Encodes the specified Rate message. Does not implicitly {@link wm.protobuf.SearchCarsByLevelResponse.Rate.verify|verify} messages.
                 * @function encode
                 * @memberof wm.protobuf.SearchCarsByLevelResponse.Rate
                 * @static
                 * @param {wm.protobuf.SearchCarsByLevelResponse.IRate} message Rate message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Rate.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.carId);
                    writer.uint32(/* id 2, wireType 0 =*/16).int32(message.type);
                    if (message.rate != null && Object.hasOwnProperty.call(message, "rate"))
                        writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.rate);
                    return writer;
                };

                /**
                 * Encodes the specified Rate message, length delimited. Does not implicitly {@link wm.protobuf.SearchCarsByLevelResponse.Rate.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof wm.protobuf.SearchCarsByLevelResponse.Rate
                 * @static
                 * @param {wm.protobuf.SearchCarsByLevelResponse.IRate} message Rate message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Rate.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a Rate message from the specified reader or buffer.
                 * @function decode
                 * @memberof wm.protobuf.SearchCarsByLevelResponse.Rate
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {wm.protobuf.SearchCarsByLevelResponse.Rate} Rate
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Rate.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.wm.protobuf.SearchCarsByLevelResponse.Rate();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.carId = reader.uint32();
                                break;
                            }
                        case 2: {
                                message.type = reader.int32();
                                break;
                            }
                        case 3: {
                                message.rate = reader.uint32();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    if (!message.hasOwnProperty("carId"))
                        throw $util.ProtocolError("missing required 'carId'", { instance: message });
                    if (!message.hasOwnProperty("type"))
                        throw $util.ProtocolError("missing required 'type'", { instance: message });
                    return message;
                };

                /**
                 * Decodes a Rate message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof wm.protobuf.SearchCarsByLevelResponse.Rate
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {wm.protobuf.SearchCarsByLevelResponse.Rate} Rate
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Rate.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a Rate message.
                 * @function verify
                 * @memberof wm.protobuf.SearchCarsByLevelResponse.Rate
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Rate.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (!$util.isInteger(message.carId))
                        return "carId: integer expected";
                    switch (message.type) {
                    default:
                        return "type: enum value expected";
                    case 1:
                    case 2:
                    case 3:
                        break;
                    }
                    if (message.rate != null && message.hasOwnProperty("rate"))
                        if (!$util.isInteger(message.rate))
                            return "rate: integer expected";
                    return null;
                };

                /**
                 * Creates a Rate message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof wm.protobuf.SearchCarsByLevelResponse.Rate
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {wm.protobuf.SearchCarsByLevelResponse.Rate} Rate
                 */
                Rate.fromObject = function fromObject(object) {
                    if (object instanceof $root.wm.protobuf.SearchCarsByLevelResponse.Rate)
                        return object;
                    let message = new $root.wm.protobuf.SearchCarsByLevelResponse.Rate();
                    if (object.carId != null)
                        message.carId = object.carId >>> 0;
                    switch (object.type) {
                    default:
                        if (typeof object.type === "number") {
                            message.type = object.type;
                            break;
                        }
                        break;
                    case "GHOST_RATE_UNKNOWN":
                    case 1:
                        message.type = 1;
                        break;
                    case "GHOST_RATE_INVALID":
                    case 2:
                        message.type = 2;
                        break;
                    case "GHOST_RATE_VALID":
                    case 3:
                        message.type = 3;
                        break;
                    }
                    if (object.rate != null)
                        message.rate = object.rate >>> 0;
                    return message;
                };

                /**
                 * Creates a plain object from a Rate message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof wm.protobuf.SearchCarsByLevelResponse.Rate
                 * @static
                 * @param {wm.protobuf.SearchCarsByLevelResponse.Rate} message Rate
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Rate.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        object.carId = 0;
                        object.type = options.enums === String ? "GHOST_RATE_UNKNOWN" : 1;
                        object.rate = 0;
                    }
                    if (message.carId != null && message.hasOwnProperty("carId"))
                        object.carId = message.carId;
                    if (message.type != null && message.hasOwnProperty("type"))
                        object.type = options.enums === String ? $root.wm.protobuf.GhostRateType[message.type] === undefined ? message.type : $root.wm.protobuf.GhostRateType[message.type] : message.type;
                    if (message.rate != null && message.hasOwnProperty("rate"))
                        object.rate = message.rate;
                    return object;
                };

                /**
                 * Converts this Rate to JSON.
                 * @function toJSON
                 * @memberof wm.protobuf.SearchCarsByLevelResponse.Rate
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Rate.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                /**
                 * Gets the default type url for Rate
                 * @function getTypeUrl
                 * @memberof wm.protobuf.SearchCarsByLevelResponse.Rate
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                Rate.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/wm.protobuf.SearchCarsByLevelResponse.Rate";
                };

                return Rate;
            })();

            return SearchCarsByLevelResponse;
        })();

        protobuf.SearchCarsRequest = (function() {

            /**
             * Properties of a SearchCarsRequest.
             * @memberof wm.protobuf
             * @interface ISearchCarsRequest
             * @property {number} carId SearchCarsRequest carId
             * @property {wm.protobuf.GhostSelectionMethod} selectionMethod SearchCarsRequest selectionMethod
             * @property {number} area SearchCarsRequest area
             * @property {string} placeId SearchCarsRequest placeId
             * @property {number|null} [regionId] SearchCarsRequest regionId
             * @property {string|null} [selectPlaceId] SearchCarsRequest selectPlaceId
             * @property {number|null} [selectManufacturer] SearchCarsRequest selectManufacturer
             * @property {number|null} [defaultGhostId] SearchCarsRequest defaultGhostId
             */

            /**
             * Constructs a new SearchCarsRequest.
             * @memberof wm.protobuf
             * @classdesc Represents a SearchCarsRequest.
             * @implements ISearchCarsRequest
             * @constructor
             * @param {wm.protobuf.ISearchCarsRequest=} [properties] Properties to set
             */
            function SearchCarsRequest(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * SearchCarsRequest carId.
             * @member {number} carId
             * @memberof wm.protobuf.SearchCarsRequest
             * @instance
             */
            SearchCarsRequest.prototype.carId = 0;

            /**
             * SearchCarsRequest selectionMethod.
             * @member {wm.protobuf.GhostSelectionMethod} selectionMethod
             * @memberof wm.protobuf.SearchCarsRequest
             * @instance
             */
            SearchCarsRequest.prototype.selectionMethod = 1;

            /**
             * SearchCarsRequest area.
             * @member {number} area
             * @memberof wm.protobuf.SearchCarsRequest
             * @instance
             */
            SearchCarsRequest.prototype.area = 0;

            /**
             * SearchCarsRequest placeId.
             * @member {string} placeId
             * @memberof wm.protobuf.SearchCarsRequest
             * @instance
             */
            SearchCarsRequest.prototype.placeId = "";

            /**
             * SearchCarsRequest regionId.
             * @member {number} regionId
             * @memberof wm.protobuf.SearchCarsRequest
             * @instance
             */
            SearchCarsRequest.prototype.regionId = 0;

            /**
             * SearchCarsRequest selectPlaceId.
             * @member {string} selectPlaceId
             * @memberof wm.protobuf.SearchCarsRequest
             * @instance
             */
            SearchCarsRequest.prototype.selectPlaceId = "";

            /**
             * SearchCarsRequest selectManufacturer.
             * @member {number} selectManufacturer
             * @memberof wm.protobuf.SearchCarsRequest
             * @instance
             */
            SearchCarsRequest.prototype.selectManufacturer = 0;

            /**
             * SearchCarsRequest defaultGhostId.
             * @member {number} defaultGhostId
             * @memberof wm.protobuf.SearchCarsRequest
             * @instance
             */
            SearchCarsRequest.prototype.defaultGhostId = 0;

            /**
             * Creates a new SearchCarsRequest instance using the specified properties.
             * @function create
             * @memberof wm.protobuf.SearchCarsRequest
             * @static
             * @param {wm.protobuf.ISearchCarsRequest=} [properties] Properties to set
             * @returns {wm.protobuf.SearchCarsRequest} SearchCarsRequest instance
             */
            SearchCarsRequest.create = function create(properties) {
                return new SearchCarsRequest(properties);
            };

            /**
             * Encodes the specified SearchCarsRequest message. Does not implicitly {@link wm.protobuf.SearchCarsRequest.verify|verify} messages.
             * @function encode
             * @memberof wm.protobuf.SearchCarsRequest
             * @static
             * @param {wm.protobuf.ISearchCarsRequest} message SearchCarsRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SearchCarsRequest.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.carId);
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.selectionMethod);
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.area);
                writer.uint32(/* id 4, wireType 2 =*/34).string(message.placeId);
                if (message.regionId != null && Object.hasOwnProperty.call(message, "regionId"))
                    writer.uint32(/* id 5, wireType 0 =*/40).int32(message.regionId);
                if (message.defaultGhostId != null && Object.hasOwnProperty.call(message, "defaultGhostId"))
                    writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.defaultGhostId);
                if (message.selectPlaceId != null && Object.hasOwnProperty.call(message, "selectPlaceId"))
                    writer.uint32(/* id 7, wireType 2 =*/58).string(message.selectPlaceId);
                if (message.selectManufacturer != null && Object.hasOwnProperty.call(message, "selectManufacturer"))
                    writer.uint32(/* id 8, wireType 0 =*/64).uint32(message.selectManufacturer);
                return writer;
            };

            /**
             * Encodes the specified SearchCarsRequest message, length delimited. Does not implicitly {@link wm.protobuf.SearchCarsRequest.verify|verify} messages.
             * @function encodeDelimited
             * @memberof wm.protobuf.SearchCarsRequest
             * @static
             * @param {wm.protobuf.ISearchCarsRequest} message SearchCarsRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SearchCarsRequest.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a SearchCarsRequest message from the specified reader or buffer.
             * @function decode
             * @memberof wm.protobuf.SearchCarsRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {wm.protobuf.SearchCarsRequest} SearchCarsRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SearchCarsRequest.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.wm.protobuf.SearchCarsRequest();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.carId = reader.uint32();
                            break;
                        }
                    case 2: {
                            message.selectionMethod = reader.int32();
                            break;
                        }
                    case 3: {
                            message.area = reader.uint32();
                            break;
                        }
                    case 4: {
                            message.placeId = reader.string();
                            break;
                        }
                    case 5: {
                            message.regionId = reader.int32();
                            break;
                        }
                    case 7: {
                            message.selectPlaceId = reader.string();
                            break;
                        }
                    case 8: {
                            message.selectManufacturer = reader.uint32();
                            break;
                        }
                    case 6: {
                            message.defaultGhostId = reader.uint32();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("carId"))
                    throw $util.ProtocolError("missing required 'carId'", { instance: message });
                if (!message.hasOwnProperty("selectionMethod"))
                    throw $util.ProtocolError("missing required 'selectionMethod'", { instance: message });
                if (!message.hasOwnProperty("area"))
                    throw $util.ProtocolError("missing required 'area'", { instance: message });
                if (!message.hasOwnProperty("placeId"))
                    throw $util.ProtocolError("missing required 'placeId'", { instance: message });
                return message;
            };

            /**
             * Decodes a SearchCarsRequest message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof wm.protobuf.SearchCarsRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {wm.protobuf.SearchCarsRequest} SearchCarsRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SearchCarsRequest.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a SearchCarsRequest message.
             * @function verify
             * @memberof wm.protobuf.SearchCarsRequest
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            SearchCarsRequest.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (!$util.isInteger(message.carId))
                    return "carId: integer expected";
                switch (message.selectionMethod) {
                default:
                    return "selectionMethod: enum value expected";
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 7:
                case 8:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 16:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                    break;
                }
                if (!$util.isInteger(message.area))
                    return "area: integer expected";
                if (!$util.isString(message.placeId))
                    return "placeId: string expected";
                if (message.regionId != null && message.hasOwnProperty("regionId"))
                    if (!$util.isInteger(message.regionId))
                        return "regionId: integer expected";
                if (message.selectPlaceId != null && message.hasOwnProperty("selectPlaceId"))
                    if (!$util.isString(message.selectPlaceId))
                        return "selectPlaceId: string expected";
                if (message.selectManufacturer != null && message.hasOwnProperty("selectManufacturer"))
                    if (!$util.isInteger(message.selectManufacturer))
                        return "selectManufacturer: integer expected";
                if (message.defaultGhostId != null && message.hasOwnProperty("defaultGhostId"))
                    if (!$util.isInteger(message.defaultGhostId))
                        return "defaultGhostId: integer expected";
                return null;
            };

            /**
             * Creates a SearchCarsRequest message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof wm.protobuf.SearchCarsRequest
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {wm.protobuf.SearchCarsRequest} SearchCarsRequest
             */
            SearchCarsRequest.fromObject = function fromObject(object) {
                if (object instanceof $root.wm.protobuf.SearchCarsRequest)
                    return object;
                let message = new $root.wm.protobuf.SearchCarsRequest();
                if (object.carId != null)
                    message.carId = object.carId >>> 0;
                switch (object.selectionMethod) {
                default:
                    if (typeof object.selectionMethod === "number") {
                        message.selectionMethod = object.selectionMethod;
                        break;
                    }
                    break;
                case "GHOST_SEARCH_BY_REGION":
                case 1:
                    message.selectionMethod = 1;
                    break;
                case "GHOST_SELECT_BY_LEVEL":
                case 2:
                    message.selectionMethod = 2;
                    break;
                case "GHOST_SELECT_CROWN_MATCH":
                case 3:
                    message.selectionMethod = 3;
                    break;
                case "GHOST_SELECT_STAMP_MATCH":
                case 4:
                    message.selectionMethod = 4;
                    break;
                case "GHOST_SELECT_FROM_HISTORY":
                case 5:
                    message.selectionMethod = 5;
                    break;
                case "GHOST_SEARCH_BY_SHOP":
                case 6:
                    message.selectionMethod = 6;
                    break;
                case "GHOST_SEARCH_BY_NAME":
                case 7:
                    message.selectionMethod = 7;
                    break;
                case "GHOST_ACCEPT_CHALLENGER":
                case 8:
                    message.selectionMethod = 8;
                    break;
                case "GHOST_APPOINTMENT":
                case 9:
                    message.selectionMethod = 9;
                    break;
                case "GHOST_DEFAULT_OPPONENT":
                case 10:
                    message.selectionMethod = 10;
                    break;
                case "GHOST_COMPETITION":
                case 11:
                    message.selectionMethod = 11;
                    break;
                case "GHOST_SELECT_FROM_BOOKMARKS":
                case 12:
                    message.selectionMethod = 12;
                    break;
                case "GHOST_EXPEDITION":
                case 13:
                    message.selectionMethod = 13;
                    break;
                case "GHOST_SELECT_BY_PLACE":
                case 14:
                    message.selectionMethod = 14;
                    break;
                case "GHOST_SELECT_BY_OTHER_PLACE":
                case 15:
                    message.selectionMethod = 15;
                    break;
                case "GHOST_SELECT_BY_MANUFACTURER":
                case 16:
                    message.selectionMethod = 16;
                    break;
                case "GHOST_SELECT_BY_OTHER_MANUFACTURER":
                case 17:
                    message.selectionMethod = 17;
                    break;
                case "GHOST_SELECT_BY_PLAYED":
                case 18:
                    message.selectionMethod = 18;
                    break;
                case "GHOST_UNUSED_19":
                case 19:
                    message.selectionMethod = 19;
                    break;
                case "GHOST_SELECT_BY_REGION_MANUFACTURER":
                case 20:
                    message.selectionMethod = 20;
                    break;
                case "GHOST_UNUSED_21":
                case 21:
                    message.selectionMethod = 21;
                    break;
                case "GHOST_SELECT_BY_REGION_PLAYED":
                case 22:
                    message.selectionMethod = 22;
                    break;
                case "GHOST_SELECT_BY_REGION_STATION":
                case 23:
                    message.selectionMethod = 23;
                    break;
                case "GHOST_SELECT_BY_REGION_BOSS":
                case 24:
                    message.selectionMethod = 24;
                    break;
                case "GHOST_SELECT_BY_REGION_PLACE":
                case 25:
                    message.selectionMethod = 25;
                    break;
                case "GHOST_BINGO_CHALLENGE":
                case 26:
                    message.selectionMethod = 26;
                    break;
                case "GHOST_KOSHIEN":
                case 27:
                    message.selectionMethod = 27;
                    break;
                }
                if (object.area != null)
                    message.area = object.area >>> 0;
                if (object.placeId != null)
                    message.placeId = String(object.placeId);
                if (object.regionId != null)
                    message.regionId = object.regionId | 0;
                if (object.selectPlaceId != null)
                    message.selectPlaceId = String(object.selectPlaceId);
                if (object.selectManufacturer != null)
                    message.selectManufacturer = object.selectManufacturer >>> 0;
                if (object.defaultGhostId != null)
                    message.defaultGhostId = object.defaultGhostId >>> 0;
                return message;
            };

            /**
             * Creates a plain object from a SearchCarsRequest message. Also converts values to other types if specified.
             * @function toObject
             * @memberof wm.protobuf.SearchCarsRequest
             * @static
             * @param {wm.protobuf.SearchCarsRequest} message SearchCarsRequest
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            SearchCarsRequest.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.carId = 0;
                    object.selectionMethod = options.enums === String ? "GHOST_SEARCH_BY_REGION" : 1;
                    object.area = 0;
                    object.placeId = "";
                    object.regionId = 0;
                    object.defaultGhostId = 0;
                    object.selectPlaceId = "";
                    object.selectManufacturer = 0;
                }
                if (message.carId != null && message.hasOwnProperty("carId"))
                    object.carId = message.carId;
                if (message.selectionMethod != null && message.hasOwnProperty("selectionMethod"))
                    object.selectionMethod = options.enums === String ? $root.wm.protobuf.GhostSelectionMethod[message.selectionMethod] === undefined ? message.selectionMethod : $root.wm.protobuf.GhostSelectionMethod[message.selectionMethod] : message.selectionMethod;
                if (message.area != null && message.hasOwnProperty("area"))
                    object.area = message.area;
                if (message.placeId != null && message.hasOwnProperty("placeId"))
                    object.placeId = message.placeId;
                if (message.regionId != null && message.hasOwnProperty("regionId"))
                    object.regionId = message.regionId;
                if (message.defaultGhostId != null && message.hasOwnProperty("defaultGhostId"))
                    object.defaultGhostId = message.defaultGhostId;
                if (message.selectPlaceId != null && message.hasOwnProperty("selectPlaceId"))
                    object.selectPlaceId = message.selectPlaceId;
                if (message.selectManufacturer != null && message.hasOwnProperty("selectManufacturer"))
                    object.selectManufacturer = message.selectManufacturer;
                return object;
            };

            /**
             * Converts this SearchCarsRequest to JSON.
             * @function toJSON
             * @memberof wm.protobuf.SearchCarsRequest
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            SearchCarsRequest.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for SearchCarsRequest
             * @function getTypeUrl
             * @memberof wm.protobuf.SearchCarsRequest
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            SearchCarsRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/wm.protobuf.SearchCarsRequest";
            };

            return SearchCarsRequest;
        })();

        protobuf.SearchCarsResponse = (function() {

            /**
             * Properties of a SearchCarsResponse.
             * @memberof wm.protobuf
             * @interface ISearchCarsResponse
             * @property {wm.protobuf.ErrorCode} error SearchCarsResponse error
             * @property {number} ramp SearchCarsResponse ramp
             * @property {number} path SearchCarsResponse path
             * @property {Array.<wm.protobuf.IGhostCar>|null} [ghosts] SearchCarsResponse ghosts
             * @property {wm.protobuf.PathSelectionMethod} selectionMethod SearchCarsResponse selectionMethod
             * @property {Array.<wm.protobuf.SearchCarsResponse.IRate>|null} [rates] SearchCarsResponse rates
             */

            /**
             * Constructs a new SearchCarsResponse.
             * @memberof wm.protobuf
             * @classdesc Represents a SearchCarsResponse.
             * @implements ISearchCarsResponse
             * @constructor
             * @param {wm.protobuf.ISearchCarsResponse=} [properties] Properties to set
             */
            function SearchCarsResponse(properties) {
                this.ghosts = [];
                this.rates = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * SearchCarsResponse error.
             * @member {wm.protobuf.ErrorCode} error
             * @memberof wm.protobuf.SearchCarsResponse
             * @instance
             */
            SearchCarsResponse.prototype.error = 0;

            /**
             * SearchCarsResponse ramp.
             * @member {number} ramp
             * @memberof wm.protobuf.SearchCarsResponse
             * @instance
             */
            SearchCarsResponse.prototype.ramp = 0;

            /**
             * SearchCarsResponse path.
             * @member {number} path
             * @memberof wm.protobuf.SearchCarsResponse
             * @instance
             */
            SearchCarsResponse.prototype.path = 0;

            /**
             * SearchCarsResponse ghosts.
             * @member {Array.<wm.protobuf.IGhostCar>} ghosts
             * @memberof wm.protobuf.SearchCarsResponse
             * @instance
             */
            SearchCarsResponse.prototype.ghosts = $util.emptyArray;

            /**
             * SearchCarsResponse selectionMethod.
             * @member {wm.protobuf.PathSelectionMethod} selectionMethod
             * @memberof wm.protobuf.SearchCarsResponse
             * @instance
             */
            SearchCarsResponse.prototype.selectionMethod = 1;

            /**
             * SearchCarsResponse rates.
             * @member {Array.<wm.protobuf.SearchCarsResponse.IRate>} rates
             * @memberof wm.protobuf.SearchCarsResponse
             * @instance
             */
            SearchCarsResponse.prototype.rates = $util.emptyArray;

            /**
             * Creates a new SearchCarsResponse instance using the specified properties.
             * @function create
             * @memberof wm.protobuf.SearchCarsResponse
             * @static
             * @param {wm.protobuf.ISearchCarsResponse=} [properties] Properties to set
             * @returns {wm.protobuf.SearchCarsResponse} SearchCarsResponse instance
             */
            SearchCarsResponse.create = function create(properties) {
                return new SearchCarsResponse(properties);
            };

            /**
             * Encodes the specified SearchCarsResponse message. Does not implicitly {@link wm.protobuf.SearchCarsResponse.verify|verify} messages.
             * @function encode
             * @memberof wm.protobuf.SearchCarsResponse
             * @static
             * @param {wm.protobuf.ISearchCarsResponse} message SearchCarsResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SearchCarsResponse.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.ramp);
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.path);
                if (message.ghosts != null && message.ghosts.length)
                    for (let i = 0; i < message.ghosts.length; ++i)
                        $root.wm.protobuf.GhostCar.encode(message.ghosts[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                writer.uint32(/* id 5, wireType 0 =*/40).int32(message.selectionMethod);
                if (message.rates != null && message.rates.length)
                    for (let i = 0; i < message.rates.length; ++i)
                        $root.wm.protobuf.SearchCarsResponse.Rate.encode(message.rates[i], writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified SearchCarsResponse message, length delimited. Does not implicitly {@link wm.protobuf.SearchCarsResponse.verify|verify} messages.
             * @function encodeDelimited
             * @memberof wm.protobuf.SearchCarsResponse
             * @static
             * @param {wm.protobuf.ISearchCarsResponse} message SearchCarsResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SearchCarsResponse.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a SearchCarsResponse message from the specified reader or buffer.
             * @function decode
             * @memberof wm.protobuf.SearchCarsResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {wm.protobuf.SearchCarsResponse} SearchCarsResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SearchCarsResponse.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.wm.protobuf.SearchCarsResponse();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.error = reader.int32();
                            break;
                        }
                    case 2: {
                            message.ramp = reader.uint32();
                            break;
                        }
                    case 3: {
                            message.path = reader.uint32();
                            break;
                        }
                    case 4: {
                            if (!(message.ghosts && message.ghosts.length))
                                message.ghosts = [];
                            message.ghosts.push($root.wm.protobuf.GhostCar.decode(reader, reader.uint32()));
                            break;
                        }
                    case 5: {
                            message.selectionMethod = reader.int32();
                            break;
                        }
                    case 6: {
                            if (!(message.rates && message.rates.length))
                                message.rates = [];
                            message.rates.push($root.wm.protobuf.SearchCarsResponse.Rate.decode(reader, reader.uint32()));
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("error"))
                    throw $util.ProtocolError("missing required 'error'", { instance: message });
                if (!message.hasOwnProperty("ramp"))
                    throw $util.ProtocolError("missing required 'ramp'", { instance: message });
                if (!message.hasOwnProperty("path"))
                    throw $util.ProtocolError("missing required 'path'", { instance: message });
                if (!message.hasOwnProperty("selectionMethod"))
                    throw $util.ProtocolError("missing required 'selectionMethod'", { instance: message });
                return message;
            };

            /**
             * Decodes a SearchCarsResponse message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof wm.protobuf.SearchCarsResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {wm.protobuf.SearchCarsResponse} SearchCarsResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SearchCarsResponse.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a SearchCarsResponse message.
             * @function verify
             * @memberof wm.protobuf.SearchCarsResponse
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            SearchCarsResponse.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                switch (message.error) {
                default:
                    return "error: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 7:
                case 9:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 16:
                case 17:
                case 18:
                case 19:
                    break;
                }
                if (!$util.isInteger(message.ramp))
                    return "ramp: integer expected";
                if (!$util.isInteger(message.path))
                    return "path: integer expected";
                if (message.ghosts != null && message.hasOwnProperty("ghosts")) {
                    if (!Array.isArray(message.ghosts))
                        return "ghosts: array expected";
                    for (let i = 0; i < message.ghosts.length; ++i) {
                        let error = $root.wm.protobuf.GhostCar.verify(message.ghosts[i]);
                        if (error)
                            return "ghosts." + error;
                    }
                }
                switch (message.selectionMethod) {
                default:
                    return "selectionMethod: enum value expected";
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                    break;
                }
                if (message.rates != null && message.hasOwnProperty("rates")) {
                    if (!Array.isArray(message.rates))
                        return "rates: array expected";
                    for (let i = 0; i < message.rates.length; ++i) {
                        let error = $root.wm.protobuf.SearchCarsResponse.Rate.verify(message.rates[i]);
                        if (error)
                            return "rates." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a SearchCarsResponse message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof wm.protobuf.SearchCarsResponse
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {wm.protobuf.SearchCarsResponse} SearchCarsResponse
             */
            SearchCarsResponse.fromObject = function fromObject(object) {
                if (object instanceof $root.wm.protobuf.SearchCarsResponse)
                    return object;
                let message = new $root.wm.protobuf.SearchCarsResponse();
                switch (object.error) {
                default:
                    if (typeof object.error === "number") {
                        message.error = object.error;
                        break;
                    }
                    break;
                case "ERR_SUCCESS":
                case 0:
                    message.error = 0;
                    break;
                case "ERR_REQUEST":
                case 1:
                    message.error = 1;
                    break;
                case "ERR_NOT_FOUND":
                case 2:
                    message.error = 2;
                    break;
                case "ERR_ID_SERVER":
                case 3:
                    message.error = 3;
                    break;
                case "ERR_ID_BANNED":
                case 4:
                    message.error = 4;
                    break;
                case "ERR_USER_LOCKED":
                case 5:
                    message.error = 5;
                    break;
                case "ERR_USER_VERSION":
                case 6:
                    message.error = 6;
                    break;
                case "ERR_NAME_CONFLICTED":
                case 7:
                    message.error = 7;
                    break;
                case "ERR_FORBIDDEN":
                case 9:
                    message.error = 9;
                    break;
                case "ERR_USER_SUCCEEDED":
                case 11:
                    message.error = 11;
                    break;
                case "ERR_BEING_TRANSFERRED":
                case 12:
                    message.error = 12;
                    break;
                case "ERR_SCRATCH_LOCKED":
                case 13:
                    message.error = 13;
                    break;
                case "ERR_BINGO_REVENGE_LOCKED":
                case 14:
                    message.error = 14;
                    break;
                case "ERR_BINGO_ALREDY_LINKED":
                case 15:
                    message.error = 15;
                    break;
                case "ERR_BINGO_FINISHED":
                case 16:
                    message.error = 16;
                    break;
                case "ERR_BINGO_REACHED_MAX_USER":
                case 17:
                    message.error = 17;
                    break;
                case "ERR_CAR_NOT_FOUND":
                case 18:
                    message.error = 18;
                    break;
                case "ERR_BINGO_CARD_NOT_FOUND":
                case 19:
                    message.error = 19;
                    break;
                }
                if (object.ramp != null)
                    message.ramp = object.ramp >>> 0;
                if (object.path != null)
                    message.path = object.path >>> 0;
                if (object.ghosts) {
                    if (!Array.isArray(object.ghosts))
                        throw TypeError(".wm.protobuf.SearchCarsResponse.ghosts: array expected");
                    message.ghosts = [];
                    for (let i = 0; i < object.ghosts.length; ++i) {
                        if (typeof object.ghosts[i] !== "object")
                            throw TypeError(".wm.protobuf.SearchCarsResponse.ghosts: object expected");
                        message.ghosts[i] = $root.wm.protobuf.GhostCar.fromObject(object.ghosts[i]);
                    }
                }
                switch (object.selectionMethod) {
                default:
                    if (typeof object.selectionMethod === "number") {
                        message.selectionMethod = object.selectionMethod;
                        break;
                    }
                    break;
                case "PATH_NEW":
                case 1:
                    message.selectionMethod = 1;
                    break;
                case "PATH_PLAIN":
                case 2:
                    message.selectionMethod = 2;
                    break;
                case "PATH_FRIEND":
                case 3:
                    message.selectionMethod = 3;
                    break;
                case "PATH_NORMAL":
                case 4:
                    message.selectionMethod = 4;
                    break;
                case "PATH_CHALLENGER":
                case 5:
                    message.selectionMethod = 5;
                    break;
                }
                if (object.rates) {
                    if (!Array.isArray(object.rates))
                        throw TypeError(".wm.protobuf.SearchCarsResponse.rates: array expected");
                    message.rates = [];
                    for (let i = 0; i < object.rates.length; ++i) {
                        if (typeof object.rates[i] !== "object")
                            throw TypeError(".wm.protobuf.SearchCarsResponse.rates: object expected");
                        message.rates[i] = $root.wm.protobuf.SearchCarsResponse.Rate.fromObject(object.rates[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from a SearchCarsResponse message. Also converts values to other types if specified.
             * @function toObject
             * @memberof wm.protobuf.SearchCarsResponse
             * @static
             * @param {wm.protobuf.SearchCarsResponse} message SearchCarsResponse
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            SearchCarsResponse.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults) {
                    object.ghosts = [];
                    object.rates = [];
                }
                if (options.defaults) {
                    object.error = options.enums === String ? "ERR_SUCCESS" : 0;
                    object.ramp = 0;
                    object.path = 0;
                    object.selectionMethod = options.enums === String ? "PATH_NEW" : 1;
                }
                if (message.error != null && message.hasOwnProperty("error"))
                    object.error = options.enums === String ? $root.wm.protobuf.ErrorCode[message.error] === undefined ? message.error : $root.wm.protobuf.ErrorCode[message.error] : message.error;
                if (message.ramp != null && message.hasOwnProperty("ramp"))
                    object.ramp = message.ramp;
                if (message.path != null && message.hasOwnProperty("path"))
                    object.path = message.path;
                if (message.ghosts && message.ghosts.length) {
                    object.ghosts = [];
                    for (let j = 0; j < message.ghosts.length; ++j)
                        object.ghosts[j] = $root.wm.protobuf.GhostCar.toObject(message.ghosts[j], options);
                }
                if (message.selectionMethod != null && message.hasOwnProperty("selectionMethod"))
                    object.selectionMethod = options.enums === String ? $root.wm.protobuf.PathSelectionMethod[message.selectionMethod] === undefined ? message.selectionMethod : $root.wm.protobuf.PathSelectionMethod[message.selectionMethod] : message.selectionMethod;
                if (message.rates && message.rates.length) {
                    object.rates = [];
                    for (let j = 0; j < message.rates.length; ++j)
                        object.rates[j] = $root.wm.protobuf.SearchCarsResponse.Rate.toObject(message.rates[j], options);
                }
                return object;
            };

            /**
             * Converts this SearchCarsResponse to JSON.
             * @function toJSON
             * @memberof wm.protobuf.SearchCarsResponse
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            SearchCarsResponse.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for SearchCarsResponse
             * @function getTypeUrl
             * @memberof wm.protobuf.SearchCarsResponse
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            SearchCarsResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/wm.protobuf.SearchCarsResponse";
            };

            SearchCarsResponse.Rate = (function() {

                /**
                 * Properties of a Rate.
                 * @memberof wm.protobuf.SearchCarsResponse
                 * @interface IRate
                 * @property {number} carId Rate carId
                 * @property {wm.protobuf.GhostRateType} type Rate type
                 * @property {number|null} [rate] Rate rate
                 */

                /**
                 * Constructs a new Rate.
                 * @memberof wm.protobuf.SearchCarsResponse
                 * @classdesc Represents a Rate.
                 * @implements IRate
                 * @constructor
                 * @param {wm.protobuf.SearchCarsResponse.IRate=} [properties] Properties to set
                 */
                function Rate(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * Rate carId.
                 * @member {number} carId
                 * @memberof wm.protobuf.SearchCarsResponse.Rate
                 * @instance
                 */
                Rate.prototype.carId = 0;

                /**
                 * Rate type.
                 * @member {wm.protobuf.GhostRateType} type
                 * @memberof wm.protobuf.SearchCarsResponse.Rate
                 * @instance
                 */
                Rate.prototype.type = 1;

                /**
                 * Rate rate.
                 * @member {number} rate
                 * @memberof wm.protobuf.SearchCarsResponse.Rate
                 * @instance
                 */
                Rate.prototype.rate = 0;

                /**
                 * Creates a new Rate instance using the specified properties.
                 * @function create
                 * @memberof wm.protobuf.SearchCarsResponse.Rate
                 * @static
                 * @param {wm.protobuf.SearchCarsResponse.IRate=} [properties] Properties to set
                 * @returns {wm.protobuf.SearchCarsResponse.Rate} Rate instance
                 */
                Rate.create = function create(properties) {
                    return new Rate(properties);
                };

                /**
                 * Encodes the specified Rate message. Does not implicitly {@link wm.protobuf.SearchCarsResponse.Rate.verify|verify} messages.
                 * @function encode
                 * @memberof wm.protobuf.SearchCarsResponse.Rate
                 * @static
                 * @param {wm.protobuf.SearchCarsResponse.IRate} message Rate message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Rate.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.carId);
                    writer.uint32(/* id 2, wireType 0 =*/16).int32(message.type);
                    if (message.rate != null && Object.hasOwnProperty.call(message, "rate"))
                        writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.rate);
                    return writer;
                };

                /**
                 * Encodes the specified Rate message, length delimited. Does not implicitly {@link wm.protobuf.SearchCarsResponse.Rate.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof wm.protobuf.SearchCarsResponse.Rate
                 * @static
                 * @param {wm.protobuf.SearchCarsResponse.IRate} message Rate message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Rate.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a Rate message from the specified reader or buffer.
                 * @function decode
                 * @memberof wm.protobuf.SearchCarsResponse.Rate
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {wm.protobuf.SearchCarsResponse.Rate} Rate
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Rate.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.wm.protobuf.SearchCarsResponse.Rate();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.carId = reader.uint32();
                                break;
                            }
                        case 2: {
                                message.type = reader.int32();
                                break;
                            }
                        case 3: {
                                message.rate = reader.uint32();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    if (!message.hasOwnProperty("carId"))
                        throw $util.ProtocolError("missing required 'carId'", { instance: message });
                    if (!message.hasOwnProperty("type"))
                        throw $util.ProtocolError("missing required 'type'", { instance: message });
                    return message;
                };

                /**
                 * Decodes a Rate message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof wm.protobuf.SearchCarsResponse.Rate
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {wm.protobuf.SearchCarsResponse.Rate} Rate
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Rate.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a Rate message.
                 * @function verify
                 * @memberof wm.protobuf.SearchCarsResponse.Rate
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Rate.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (!$util.isInteger(message.carId))
                        return "carId: integer expected";
                    switch (message.type) {
                    default:
                        return "type: enum value expected";
                    case 1:
                    case 2:
                    case 3:
                        break;
                    }
                    if (message.rate != null && message.hasOwnProperty("rate"))
                        if (!$util.isInteger(message.rate))
                            return "rate: integer expected";
                    return null;
                };

                /**
                 * Creates a Rate message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof wm.protobuf.SearchCarsResponse.Rate
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {wm.protobuf.SearchCarsResponse.Rate} Rate
                 */
                Rate.fromObject = function fromObject(object) {
                    if (object instanceof $root.wm.protobuf.SearchCarsResponse.Rate)
                        return object;
                    let message = new $root.wm.protobuf.SearchCarsResponse.Rate();
                    if (object.carId != null)
                        message.carId = object.carId >>> 0;
                    switch (object.type) {
                    default:
                        if (typeof object.type === "number") {
                            message.type = object.type;
                            break;
                        }
                        break;
                    case "GHOST_RATE_UNKNOWN":
                    case 1:
                        message.type = 1;
                        break;
                    case "GHOST_RATE_INVALID":
                    case 2:
                        message.type = 2;
                        break;
                    case "GHOST_RATE_VALID":
                    case 3:
                        message.type = 3;
                        break;
                    }
                    if (object.rate != null)
                        message.rate = object.rate >>> 0;
                    return message;
                };

                /**
                 * Creates a plain object from a Rate message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof wm.protobuf.SearchCarsResponse.Rate
                 * @static
                 * @param {wm.protobuf.SearchCarsResponse.Rate} message Rate
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Rate.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        object.carId = 0;
                        object.type = options.enums === String ? "GHOST_RATE_UNKNOWN" : 1;
                        object.rate = 0;
                    }
                    if (message.carId != null && message.hasOwnProperty("carId"))
                        object.carId = message.carId;
                    if (message.type != null && message.hasOwnProperty("type"))
                        object.type = options.enums === String ? $root.wm.protobuf.GhostRateType[message.type] === undefined ? message.type : $root.wm.protobuf.GhostRateType[message.type] : message.type;
                    if (message.rate != null && message.hasOwnProperty("rate"))
                        object.rate = message.rate;
                    return object;
                };

                /**
                 * Converts this Rate to JSON.
                 * @function toJSON
                 * @memberof wm.protobuf.SearchCarsResponse.Rate
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Rate.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                /**
                 * Gets the default type url for Rate
                 * @function getTypeUrl
                 * @memberof wm.protobuf.SearchCarsResponse.Rate
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                Rate.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/wm.protobuf.SearchCarsResponse.Rate";
                };

                return Rate;
            })();

            return SearchCarsResponse;
        })();

        protobuf.LoadPathsAndTuningsRequest = (function() {

            /**
             * Properties of a LoadPathsAndTuningsRequest.
             * @memberof wm.protobuf
             * @interface ILoadPathsAndTuningsRequest
             * @property {number} carId LoadPathsAndTuningsRequest carId
             * @property {Array.<number>|null} [selectedCars] LoadPathsAndTuningsRequest selectedCars
             * @property {boolean|null} [returnImmediately] LoadPathsAndTuningsRequest returnImmediately
             * @property {number|null} [stampTargetArea] LoadPathsAndTuningsRequest stampTargetArea
             */

            /**
             * Constructs a new LoadPathsAndTuningsRequest.
             * @memberof wm.protobuf
             * @classdesc Represents a LoadPathsAndTuningsRequest.
             * @implements ILoadPathsAndTuningsRequest
             * @constructor
             * @param {wm.protobuf.ILoadPathsAndTuningsRequest=} [properties] Properties to set
             */
            function LoadPathsAndTuningsRequest(properties) {
                this.selectedCars = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * LoadPathsAndTuningsRequest carId.
             * @member {number} carId
             * @memberof wm.protobuf.LoadPathsAndTuningsRequest
             * @instance
             */
            LoadPathsAndTuningsRequest.prototype.carId = 0;

            /**
             * LoadPathsAndTuningsRequest selectedCars.
             * @member {Array.<number>} selectedCars
             * @memberof wm.protobuf.LoadPathsAndTuningsRequest
             * @instance
             */
            LoadPathsAndTuningsRequest.prototype.selectedCars = $util.emptyArray;

            /**
             * LoadPathsAndTuningsRequest returnImmediately.
             * @member {boolean} returnImmediately
             * @memberof wm.protobuf.LoadPathsAndTuningsRequest
             * @instance
             */
            LoadPathsAndTuningsRequest.prototype.returnImmediately = false;

            /**
             * LoadPathsAndTuningsRequest stampTargetArea.
             * @member {number} stampTargetArea
             * @memberof wm.protobuf.LoadPathsAndTuningsRequest
             * @instance
             */
            LoadPathsAndTuningsRequest.prototype.stampTargetArea = 0;

            /**
             * Creates a new LoadPathsAndTuningsRequest instance using the specified properties.
             * @function create
             * @memberof wm.protobuf.LoadPathsAndTuningsRequest
             * @static
             * @param {wm.protobuf.ILoadPathsAndTuningsRequest=} [properties] Properties to set
             * @returns {wm.protobuf.LoadPathsAndTuningsRequest} LoadPathsAndTuningsRequest instance
             */
            LoadPathsAndTuningsRequest.create = function create(properties) {
                return new LoadPathsAndTuningsRequest(properties);
            };

            /**
             * Encodes the specified LoadPathsAndTuningsRequest message. Does not implicitly {@link wm.protobuf.LoadPathsAndTuningsRequest.verify|verify} messages.
             * @function encode
             * @memberof wm.protobuf.LoadPathsAndTuningsRequest
             * @static
             * @param {wm.protobuf.ILoadPathsAndTuningsRequest} message LoadPathsAndTuningsRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LoadPathsAndTuningsRequest.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.carId);
                if (message.selectedCars != null && message.selectedCars.length)
                    for (let i = 0; i < message.selectedCars.length; ++i)
                        writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.selectedCars[i]);
                if (message.returnImmediately != null && Object.hasOwnProperty.call(message, "returnImmediately"))
                    writer.uint32(/* id 3, wireType 0 =*/24).bool(message.returnImmediately);
                if (message.stampTargetArea != null && Object.hasOwnProperty.call(message, "stampTargetArea"))
                    writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.stampTargetArea);
                return writer;
            };

            /**
             * Encodes the specified LoadPathsAndTuningsRequest message, length delimited. Does not implicitly {@link wm.protobuf.LoadPathsAndTuningsRequest.verify|verify} messages.
             * @function encodeDelimited
             * @memberof wm.protobuf.LoadPathsAndTuningsRequest
             * @static
             * @param {wm.protobuf.ILoadPathsAndTuningsRequest} message LoadPathsAndTuningsRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LoadPathsAndTuningsRequest.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a LoadPathsAndTuningsRequest message from the specified reader or buffer.
             * @function decode
             * @memberof wm.protobuf.LoadPathsAndTuningsRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {wm.protobuf.LoadPathsAndTuningsRequest} LoadPathsAndTuningsRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LoadPathsAndTuningsRequest.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.wm.protobuf.LoadPathsAndTuningsRequest();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.carId = reader.uint32();
                            break;
                        }
                    case 2: {
                            if (!(message.selectedCars && message.selectedCars.length))
                                message.selectedCars = [];
                            if ((tag & 7) === 2) {
                                let end2 = reader.uint32() + reader.pos;
                                while (reader.pos < end2)
                                    message.selectedCars.push(reader.uint32());
                            } else
                                message.selectedCars.push(reader.uint32());
                            break;
                        }
                    case 3: {
                            message.returnImmediately = reader.bool();
                            break;
                        }
                    case 4: {
                            message.stampTargetArea = reader.uint32();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("carId"))
                    throw $util.ProtocolError("missing required 'carId'", { instance: message });
                return message;
            };

            /**
             * Decodes a LoadPathsAndTuningsRequest message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof wm.protobuf.LoadPathsAndTuningsRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {wm.protobuf.LoadPathsAndTuningsRequest} LoadPathsAndTuningsRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LoadPathsAndTuningsRequest.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a LoadPathsAndTuningsRequest message.
             * @function verify
             * @memberof wm.protobuf.LoadPathsAndTuningsRequest
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            LoadPathsAndTuningsRequest.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (!$util.isInteger(message.carId))
                    return "carId: integer expected";
                if (message.selectedCars != null && message.hasOwnProperty("selectedCars")) {
                    if (!Array.isArray(message.selectedCars))
                        return "selectedCars: array expected";
                    for (let i = 0; i < message.selectedCars.length; ++i)
                        if (!$util.isInteger(message.selectedCars[i]))
                            return "selectedCars: integer[] expected";
                }
                if (message.returnImmediately != null && message.hasOwnProperty("returnImmediately"))
                    if (typeof message.returnImmediately !== "boolean")
                        return "returnImmediately: boolean expected";
                if (message.stampTargetArea != null && message.hasOwnProperty("stampTargetArea"))
                    if (!$util.isInteger(message.stampTargetArea))
                        return "stampTargetArea: integer expected";
                return null;
            };

            /**
             * Creates a LoadPathsAndTuningsRequest message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof wm.protobuf.LoadPathsAndTuningsRequest
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {wm.protobuf.LoadPathsAndTuningsRequest} LoadPathsAndTuningsRequest
             */
            LoadPathsAndTuningsRequest.fromObject = function fromObject(object) {
                if (object instanceof $root.wm.protobuf.LoadPathsAndTuningsRequest)
                    return object;
                let message = new $root.wm.protobuf.LoadPathsAndTuningsRequest();
                if (object.carId != null)
                    message.carId = object.carId >>> 0;
                if (object.selectedCars) {
                    if (!Array.isArray(object.selectedCars))
                        throw TypeError(".wm.protobuf.LoadPathsAndTuningsRequest.selectedCars: array expected");
                    message.selectedCars = [];
                    for (let i = 0; i < object.selectedCars.length; ++i)
                        message.selectedCars[i] = object.selectedCars[i] >>> 0;
                }
                if (object.returnImmediately != null)
                    message.returnImmediately = Boolean(object.returnImmediately);
                if (object.stampTargetArea != null)
                    message.stampTargetArea = object.stampTargetArea >>> 0;
                return message;
            };

            /**
             * Creates a plain object from a LoadPathsAndTuningsRequest message. Also converts values to other types if specified.
             * @function toObject
             * @memberof wm.protobuf.LoadPathsAndTuningsRequest
             * @static
             * @param {wm.protobuf.LoadPathsAndTuningsRequest} message LoadPathsAndTuningsRequest
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            LoadPathsAndTuningsRequest.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.selectedCars = [];
                if (options.defaults) {
                    object.carId = 0;
                    object.returnImmediately = false;
                    object.stampTargetArea = 0;
                }
                if (message.carId != null && message.hasOwnProperty("carId"))
                    object.carId = message.carId;
                if (message.selectedCars && message.selectedCars.length) {
                    object.selectedCars = [];
                    for (let j = 0; j < message.selectedCars.length; ++j)
                        object.selectedCars[j] = message.selectedCars[j];
                }
                if (message.returnImmediately != null && message.hasOwnProperty("returnImmediately"))
                    object.returnImmediately = message.returnImmediately;
                if (message.stampTargetArea != null && message.hasOwnProperty("stampTargetArea"))
                    object.stampTargetArea = message.stampTargetArea;
                return object;
            };

            /**
             * Converts this LoadPathsAndTuningsRequest to JSON.
             * @function toJSON
             * @memberof wm.protobuf.LoadPathsAndTuningsRequest
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            LoadPathsAndTuningsRequest.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for LoadPathsAndTuningsRequest
             * @function getTypeUrl
             * @memberof wm.protobuf.LoadPathsAndTuningsRequest
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            LoadPathsAndTuningsRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/wm.protobuf.LoadPathsAndTuningsRequest";
            };

            return LoadPathsAndTuningsRequest;
        })();

        protobuf.LoadPathsAndTuningsResponse = (function() {

            /**
             * Properties of a LoadPathsAndTuningsResponse.
             * @memberof wm.protobuf
             * @interface ILoadPathsAndTuningsResponse
             * @property {wm.protobuf.ErrorCode} error LoadPathsAndTuningsResponse error
             * @property {Array.<wm.protobuf.LoadPathsAndTuningsResponse.ICarTuningsByPath>|null} [data] LoadPathsAndTuningsResponse data
             */

            /**
             * Constructs a new LoadPathsAndTuningsResponse.
             * @memberof wm.protobuf
             * @classdesc Represents a LoadPathsAndTuningsResponse.
             * @implements ILoadPathsAndTuningsResponse
             * @constructor
             * @param {wm.protobuf.ILoadPathsAndTuningsResponse=} [properties] Properties to set
             */
            function LoadPathsAndTuningsResponse(properties) {
                this.data = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * LoadPathsAndTuningsResponse error.
             * @member {wm.protobuf.ErrorCode} error
             * @memberof wm.protobuf.LoadPathsAndTuningsResponse
             * @instance
             */
            LoadPathsAndTuningsResponse.prototype.error = 0;

            /**
             * LoadPathsAndTuningsResponse data.
             * @member {Array.<wm.protobuf.LoadPathsAndTuningsResponse.ICarTuningsByPath>} data
             * @memberof wm.protobuf.LoadPathsAndTuningsResponse
             * @instance
             */
            LoadPathsAndTuningsResponse.prototype.data = $util.emptyArray;

            /**
             * Creates a new LoadPathsAndTuningsResponse instance using the specified properties.
             * @function create
             * @memberof wm.protobuf.LoadPathsAndTuningsResponse
             * @static
             * @param {wm.protobuf.ILoadPathsAndTuningsResponse=} [properties] Properties to set
             * @returns {wm.protobuf.LoadPathsAndTuningsResponse} LoadPathsAndTuningsResponse instance
             */
            LoadPathsAndTuningsResponse.create = function create(properties) {
                return new LoadPathsAndTuningsResponse(properties);
            };

            /**
             * Encodes the specified LoadPathsAndTuningsResponse message. Does not implicitly {@link wm.protobuf.LoadPathsAndTuningsResponse.verify|verify} messages.
             * @function encode
             * @memberof wm.protobuf.LoadPathsAndTuningsResponse
             * @static
             * @param {wm.protobuf.ILoadPathsAndTuningsResponse} message LoadPathsAndTuningsResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LoadPathsAndTuningsResponse.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
                if (message.data != null && message.data.length)
                    for (let i = 0; i < message.data.length; ++i)
                        $root.wm.protobuf.LoadPathsAndTuningsResponse.CarTuningsByPath.encode(message.data[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified LoadPathsAndTuningsResponse message, length delimited. Does not implicitly {@link wm.protobuf.LoadPathsAndTuningsResponse.verify|verify} messages.
             * @function encodeDelimited
             * @memberof wm.protobuf.LoadPathsAndTuningsResponse
             * @static
             * @param {wm.protobuf.ILoadPathsAndTuningsResponse} message LoadPathsAndTuningsResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LoadPathsAndTuningsResponse.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a LoadPathsAndTuningsResponse message from the specified reader or buffer.
             * @function decode
             * @memberof wm.protobuf.LoadPathsAndTuningsResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {wm.protobuf.LoadPathsAndTuningsResponse} LoadPathsAndTuningsResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LoadPathsAndTuningsResponse.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.wm.protobuf.LoadPathsAndTuningsResponse();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.error = reader.int32();
                            break;
                        }
                    case 2: {
                            if (!(message.data && message.data.length))
                                message.data = [];
                            message.data.push($root.wm.protobuf.LoadPathsAndTuningsResponse.CarTuningsByPath.decode(reader, reader.uint32()));
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("error"))
                    throw $util.ProtocolError("missing required 'error'", { instance: message });
                return message;
            };

            /**
             * Decodes a LoadPathsAndTuningsResponse message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof wm.protobuf.LoadPathsAndTuningsResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {wm.protobuf.LoadPathsAndTuningsResponse} LoadPathsAndTuningsResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LoadPathsAndTuningsResponse.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a LoadPathsAndTuningsResponse message.
             * @function verify
             * @memberof wm.protobuf.LoadPathsAndTuningsResponse
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            LoadPathsAndTuningsResponse.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                switch (message.error) {
                default:
                    return "error: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 7:
                case 9:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 16:
                case 17:
                case 18:
                case 19:
                    break;
                }
                if (message.data != null && message.hasOwnProperty("data")) {
                    if (!Array.isArray(message.data))
                        return "data: array expected";
                    for (let i = 0; i < message.data.length; ++i) {
                        let error = $root.wm.protobuf.LoadPathsAndTuningsResponse.CarTuningsByPath.verify(message.data[i]);
                        if (error)
                            return "data." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a LoadPathsAndTuningsResponse message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof wm.protobuf.LoadPathsAndTuningsResponse
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {wm.protobuf.LoadPathsAndTuningsResponse} LoadPathsAndTuningsResponse
             */
            LoadPathsAndTuningsResponse.fromObject = function fromObject(object) {
                if (object instanceof $root.wm.protobuf.LoadPathsAndTuningsResponse)
                    return object;
                let message = new $root.wm.protobuf.LoadPathsAndTuningsResponse();
                switch (object.error) {
                default:
                    if (typeof object.error === "number") {
                        message.error = object.error;
                        break;
                    }
                    break;
                case "ERR_SUCCESS":
                case 0:
                    message.error = 0;
                    break;
                case "ERR_REQUEST":
                case 1:
                    message.error = 1;
                    break;
                case "ERR_NOT_FOUND":
                case 2:
                    message.error = 2;
                    break;
                case "ERR_ID_SERVER":
                case 3:
                    message.error = 3;
                    break;
                case "ERR_ID_BANNED":
                case 4:
                    message.error = 4;
                    break;
                case "ERR_USER_LOCKED":
                case 5:
                    message.error = 5;
                    break;
                case "ERR_USER_VERSION":
                case 6:
                    message.error = 6;
                    break;
                case "ERR_NAME_CONFLICTED":
                case 7:
                    message.error = 7;
                    break;
                case "ERR_FORBIDDEN":
                case 9:
                    message.error = 9;
                    break;
                case "ERR_USER_SUCCEEDED":
                case 11:
                    message.error = 11;
                    break;
                case "ERR_BEING_TRANSFERRED":
                case 12:
                    message.error = 12;
                    break;
                case "ERR_SCRATCH_LOCKED":
                case 13:
                    message.error = 13;
                    break;
                case "ERR_BINGO_REVENGE_LOCKED":
                case 14:
                    message.error = 14;
                    break;
                case "ERR_BINGO_ALREDY_LINKED":
                case 15:
                    message.error = 15;
                    break;
                case "ERR_BINGO_FINISHED":
                case 16:
                    message.error = 16;
                    break;
                case "ERR_BINGO_REACHED_MAX_USER":
                case 17:
                    message.error = 17;
                    break;
                case "ERR_CAR_NOT_FOUND":
                case 18:
                    message.error = 18;
                    break;
                case "ERR_BINGO_CARD_NOT_FOUND":
                case 19:
                    message.error = 19;
                    break;
                }
                if (object.data) {
                    if (!Array.isArray(object.data))
                        throw TypeError(".wm.protobuf.LoadPathsAndTuningsResponse.data: array expected");
                    message.data = [];
                    for (let i = 0; i < object.data.length; ++i) {
                        if (typeof object.data[i] !== "object")
                            throw TypeError(".wm.protobuf.LoadPathsAndTuningsResponse.data: object expected");
                        message.data[i] = $root.wm.protobuf.LoadPathsAndTuningsResponse.CarTuningsByPath.fromObject(object.data[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from a LoadPathsAndTuningsResponse message. Also converts values to other types if specified.
             * @function toObject
             * @memberof wm.protobuf.LoadPathsAndTuningsResponse
             * @static
             * @param {wm.protobuf.LoadPathsAndTuningsResponse} message LoadPathsAndTuningsResponse
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            LoadPathsAndTuningsResponse.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.data = [];
                if (options.defaults)
                    object.error = options.enums === String ? "ERR_SUCCESS" : 0;
                if (message.error != null && message.hasOwnProperty("error"))
                    object.error = options.enums === String ? $root.wm.protobuf.ErrorCode[message.error] === undefined ? message.error : $root.wm.protobuf.ErrorCode[message.error] : message.error;
                if (message.data && message.data.length) {
                    object.data = [];
                    for (let j = 0; j < message.data.length; ++j)
                        object.data[j] = $root.wm.protobuf.LoadPathsAndTuningsResponse.CarTuningsByPath.toObject(message.data[j], options);
                }
                return object;
            };

            /**
             * Converts this LoadPathsAndTuningsResponse to JSON.
             * @function toJSON
             * @memberof wm.protobuf.LoadPathsAndTuningsResponse
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            LoadPathsAndTuningsResponse.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for LoadPathsAndTuningsResponse
             * @function getTypeUrl
             * @memberof wm.protobuf.LoadPathsAndTuningsResponse
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            LoadPathsAndTuningsResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/wm.protobuf.LoadPathsAndTuningsResponse";
            };

            LoadPathsAndTuningsResponse.CarTuningsByPath = (function() {

                /**
                 * Properties of a CarTuningsByPath.
                 * @memberof wm.protobuf.LoadPathsAndTuningsResponse
                 * @interface ICarTuningsByPath
                 * @property {number} area CarTuningsByPath area
                 * @property {number} ramp CarTuningsByPath ramp
                 * @property {number} path CarTuningsByPath path
                 * @property {Array.<wm.protobuf.ICarTuning>|null} [carTunings] CarTuningsByPath carTunings
                 * @property {wm.protobuf.PathSelectionMethod} selectionMethod CarTuningsByPath selectionMethod
                 */

                /**
                 * Constructs a new CarTuningsByPath.
                 * @memberof wm.protobuf.LoadPathsAndTuningsResponse
                 * @classdesc Represents a CarTuningsByPath.
                 * @implements ICarTuningsByPath
                 * @constructor
                 * @param {wm.protobuf.LoadPathsAndTuningsResponse.ICarTuningsByPath=} [properties] Properties to set
                 */
                function CarTuningsByPath(properties) {
                    this.carTunings = [];
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * CarTuningsByPath area.
                 * @member {number} area
                 * @memberof wm.protobuf.LoadPathsAndTuningsResponse.CarTuningsByPath
                 * @instance
                 */
                CarTuningsByPath.prototype.area = 0;

                /**
                 * CarTuningsByPath ramp.
                 * @member {number} ramp
                 * @memberof wm.protobuf.LoadPathsAndTuningsResponse.CarTuningsByPath
                 * @instance
                 */
                CarTuningsByPath.prototype.ramp = 0;

                /**
                 * CarTuningsByPath path.
                 * @member {number} path
                 * @memberof wm.protobuf.LoadPathsAndTuningsResponse.CarTuningsByPath
                 * @instance
                 */
                CarTuningsByPath.prototype.path = 0;

                /**
                 * CarTuningsByPath carTunings.
                 * @member {Array.<wm.protobuf.ICarTuning>} carTunings
                 * @memberof wm.protobuf.LoadPathsAndTuningsResponse.CarTuningsByPath
                 * @instance
                 */
                CarTuningsByPath.prototype.carTunings = $util.emptyArray;

                /**
                 * CarTuningsByPath selectionMethod.
                 * @member {wm.protobuf.PathSelectionMethod} selectionMethod
                 * @memberof wm.protobuf.LoadPathsAndTuningsResponse.CarTuningsByPath
                 * @instance
                 */
                CarTuningsByPath.prototype.selectionMethod = 1;

                /**
                 * Creates a new CarTuningsByPath instance using the specified properties.
                 * @function create
                 * @memberof wm.protobuf.LoadPathsAndTuningsResponse.CarTuningsByPath
                 * @static
                 * @param {wm.protobuf.LoadPathsAndTuningsResponse.ICarTuningsByPath=} [properties] Properties to set
                 * @returns {wm.protobuf.LoadPathsAndTuningsResponse.CarTuningsByPath} CarTuningsByPath instance
                 */
                CarTuningsByPath.create = function create(properties) {
                    return new CarTuningsByPath(properties);
                };

                /**
                 * Encodes the specified CarTuningsByPath message. Does not implicitly {@link wm.protobuf.LoadPathsAndTuningsResponse.CarTuningsByPath.verify|verify} messages.
                 * @function encode
                 * @memberof wm.protobuf.LoadPathsAndTuningsResponse.CarTuningsByPath
                 * @static
                 * @param {wm.protobuf.LoadPathsAndTuningsResponse.ICarTuningsByPath} message CarTuningsByPath message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                CarTuningsByPath.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.area);
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.ramp);
                    writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.path);
                    if (message.carTunings != null && message.carTunings.length)
                        for (let i = 0; i < message.carTunings.length; ++i)
                            $root.wm.protobuf.CarTuning.encode(message.carTunings[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                    writer.uint32(/* id 5, wireType 0 =*/40).int32(message.selectionMethod);
                    return writer;
                };

                /**
                 * Encodes the specified CarTuningsByPath message, length delimited. Does not implicitly {@link wm.protobuf.LoadPathsAndTuningsResponse.CarTuningsByPath.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof wm.protobuf.LoadPathsAndTuningsResponse.CarTuningsByPath
                 * @static
                 * @param {wm.protobuf.LoadPathsAndTuningsResponse.ICarTuningsByPath} message CarTuningsByPath message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                CarTuningsByPath.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a CarTuningsByPath message from the specified reader or buffer.
                 * @function decode
                 * @memberof wm.protobuf.LoadPathsAndTuningsResponse.CarTuningsByPath
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {wm.protobuf.LoadPathsAndTuningsResponse.CarTuningsByPath} CarTuningsByPath
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                CarTuningsByPath.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.wm.protobuf.LoadPathsAndTuningsResponse.CarTuningsByPath();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.area = reader.uint32();
                                break;
                            }
                        case 2: {
                                message.ramp = reader.uint32();
                                break;
                            }
                        case 3: {
                                message.path = reader.uint32();
                                break;
                            }
                        case 4: {
                                if (!(message.carTunings && message.carTunings.length))
                                    message.carTunings = [];
                                message.carTunings.push($root.wm.protobuf.CarTuning.decode(reader, reader.uint32()));
                                break;
                            }
                        case 5: {
                                message.selectionMethod = reader.int32();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    if (!message.hasOwnProperty("area"))
                        throw $util.ProtocolError("missing required 'area'", { instance: message });
                    if (!message.hasOwnProperty("ramp"))
                        throw $util.ProtocolError("missing required 'ramp'", { instance: message });
                    if (!message.hasOwnProperty("path"))
                        throw $util.ProtocolError("missing required 'path'", { instance: message });
                    if (!message.hasOwnProperty("selectionMethod"))
                        throw $util.ProtocolError("missing required 'selectionMethod'", { instance: message });
                    return message;
                };

                /**
                 * Decodes a CarTuningsByPath message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof wm.protobuf.LoadPathsAndTuningsResponse.CarTuningsByPath
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {wm.protobuf.LoadPathsAndTuningsResponse.CarTuningsByPath} CarTuningsByPath
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                CarTuningsByPath.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a CarTuningsByPath message.
                 * @function verify
                 * @memberof wm.protobuf.LoadPathsAndTuningsResponse.CarTuningsByPath
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                CarTuningsByPath.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (!$util.isInteger(message.area))
                        return "area: integer expected";
                    if (!$util.isInteger(message.ramp))
                        return "ramp: integer expected";
                    if (!$util.isInteger(message.path))
                        return "path: integer expected";
                    if (message.carTunings != null && message.hasOwnProperty("carTunings")) {
                        if (!Array.isArray(message.carTunings))
                            return "carTunings: array expected";
                        for (let i = 0; i < message.carTunings.length; ++i) {
                            let error = $root.wm.protobuf.CarTuning.verify(message.carTunings[i]);
                            if (error)
                                return "carTunings." + error;
                        }
                    }
                    switch (message.selectionMethod) {
                    default:
                        return "selectionMethod: enum value expected";
                    case 1:
                    case 2:
                    case 3:
                    case 4:
                    case 5:
                        break;
                    }
                    return null;
                };

                /**
                 * Creates a CarTuningsByPath message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof wm.protobuf.LoadPathsAndTuningsResponse.CarTuningsByPath
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {wm.protobuf.LoadPathsAndTuningsResponse.CarTuningsByPath} CarTuningsByPath
                 */
                CarTuningsByPath.fromObject = function fromObject(object) {
                    if (object instanceof $root.wm.protobuf.LoadPathsAndTuningsResponse.CarTuningsByPath)
                        return object;
                    let message = new $root.wm.protobuf.LoadPathsAndTuningsResponse.CarTuningsByPath();
                    if (object.area != null)
                        message.area = object.area >>> 0;
                    if (object.ramp != null)
                        message.ramp = object.ramp >>> 0;
                    if (object.path != null)
                        message.path = object.path >>> 0;
                    if (object.carTunings) {
                        if (!Array.isArray(object.carTunings))
                            throw TypeError(".wm.protobuf.LoadPathsAndTuningsResponse.CarTuningsByPath.carTunings: array expected");
                        message.carTunings = [];
                        for (let i = 0; i < object.carTunings.length; ++i) {
                            if (typeof object.carTunings[i] !== "object")
                                throw TypeError(".wm.protobuf.LoadPathsAndTuningsResponse.CarTuningsByPath.carTunings: object expected");
                            message.carTunings[i] = $root.wm.protobuf.CarTuning.fromObject(object.carTunings[i]);
                        }
                    }
                    switch (object.selectionMethod) {
                    default:
                        if (typeof object.selectionMethod === "number") {
                            message.selectionMethod = object.selectionMethod;
                            break;
                        }
                        break;
                    case "PATH_NEW":
                    case 1:
                        message.selectionMethod = 1;
                        break;
                    case "PATH_PLAIN":
                    case 2:
                        message.selectionMethod = 2;
                        break;
                    case "PATH_FRIEND":
                    case 3:
                        message.selectionMethod = 3;
                        break;
                    case "PATH_NORMAL":
                    case 4:
                        message.selectionMethod = 4;
                        break;
                    case "PATH_CHALLENGER":
                    case 5:
                        message.selectionMethod = 5;
                        break;
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a CarTuningsByPath message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof wm.protobuf.LoadPathsAndTuningsResponse.CarTuningsByPath
                 * @static
                 * @param {wm.protobuf.LoadPathsAndTuningsResponse.CarTuningsByPath} message CarTuningsByPath
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                CarTuningsByPath.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.arrays || options.defaults)
                        object.carTunings = [];
                    if (options.defaults) {
                        object.area = 0;
                        object.ramp = 0;
                        object.path = 0;
                        object.selectionMethod = options.enums === String ? "PATH_NEW" : 1;
                    }
                    if (message.area != null && message.hasOwnProperty("area"))
                        object.area = message.area;
                    if (message.ramp != null && message.hasOwnProperty("ramp"))
                        object.ramp = message.ramp;
                    if (message.path != null && message.hasOwnProperty("path"))
                        object.path = message.path;
                    if (message.carTunings && message.carTunings.length) {
                        object.carTunings = [];
                        for (let j = 0; j < message.carTunings.length; ++j)
                            object.carTunings[j] = $root.wm.protobuf.CarTuning.toObject(message.carTunings[j], options);
                    }
                    if (message.selectionMethod != null && message.hasOwnProperty("selectionMethod"))
                        object.selectionMethod = options.enums === String ? $root.wm.protobuf.PathSelectionMethod[message.selectionMethod] === undefined ? message.selectionMethod : $root.wm.protobuf.PathSelectionMethod[message.selectionMethod] : message.selectionMethod;
                    return object;
                };

                /**
                 * Converts this CarTuningsByPath to JSON.
                 * @function toJSON
                 * @memberof wm.protobuf.LoadPathsAndTuningsResponse.CarTuningsByPath
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                CarTuningsByPath.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                /**
                 * Gets the default type url for CarTuningsByPath
                 * @function getTypeUrl
                 * @memberof wm.protobuf.LoadPathsAndTuningsResponse.CarTuningsByPath
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                CarTuningsByPath.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/wm.protobuf.LoadPathsAndTuningsResponse.CarTuningsByPath";
                };

                return CarTuningsByPath;
            })();

            return LoadPathsAndTuningsResponse;
        })();

        protobuf.LoadGhostDriveDataRequest = (function() {

            /**
             * Properties of a LoadGhostDriveDataRequest.
             * @memberof wm.protobuf
             * @interface ILoadGhostDriveDataRequest
             * @property {number} path LoadGhostDriveDataRequest path
             * @property {Array.<wm.protobuf.ICarTuning>|null} [carTunings] LoadGhostDriveDataRequest carTunings
             */

            /**
             * Constructs a new LoadGhostDriveDataRequest.
             * @memberof wm.protobuf
             * @classdesc Represents a LoadGhostDriveDataRequest.
             * @implements ILoadGhostDriveDataRequest
             * @constructor
             * @param {wm.protobuf.ILoadGhostDriveDataRequest=} [properties] Properties to set
             */
            function LoadGhostDriveDataRequest(properties) {
                this.carTunings = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * LoadGhostDriveDataRequest path.
             * @member {number} path
             * @memberof wm.protobuf.LoadGhostDriveDataRequest
             * @instance
             */
            LoadGhostDriveDataRequest.prototype.path = 0;

            /**
             * LoadGhostDriveDataRequest carTunings.
             * @member {Array.<wm.protobuf.ICarTuning>} carTunings
             * @memberof wm.protobuf.LoadGhostDriveDataRequest
             * @instance
             */
            LoadGhostDriveDataRequest.prototype.carTunings = $util.emptyArray;

            /**
             * Creates a new LoadGhostDriveDataRequest instance using the specified properties.
             * @function create
             * @memberof wm.protobuf.LoadGhostDriveDataRequest
             * @static
             * @param {wm.protobuf.ILoadGhostDriveDataRequest=} [properties] Properties to set
             * @returns {wm.protobuf.LoadGhostDriveDataRequest} LoadGhostDriveDataRequest instance
             */
            LoadGhostDriveDataRequest.create = function create(properties) {
                return new LoadGhostDriveDataRequest(properties);
            };

            /**
             * Encodes the specified LoadGhostDriveDataRequest message. Does not implicitly {@link wm.protobuf.LoadGhostDriveDataRequest.verify|verify} messages.
             * @function encode
             * @memberof wm.protobuf.LoadGhostDriveDataRequest
             * @static
             * @param {wm.protobuf.ILoadGhostDriveDataRequest} message LoadGhostDriveDataRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LoadGhostDriveDataRequest.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.path);
                if (message.carTunings != null && message.carTunings.length)
                    for (let i = 0; i < message.carTunings.length; ++i)
                        $root.wm.protobuf.CarTuning.encode(message.carTunings[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified LoadGhostDriveDataRequest message, length delimited. Does not implicitly {@link wm.protobuf.LoadGhostDriveDataRequest.verify|verify} messages.
             * @function encodeDelimited
             * @memberof wm.protobuf.LoadGhostDriveDataRequest
             * @static
             * @param {wm.protobuf.ILoadGhostDriveDataRequest} message LoadGhostDriveDataRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LoadGhostDriveDataRequest.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a LoadGhostDriveDataRequest message from the specified reader or buffer.
             * @function decode
             * @memberof wm.protobuf.LoadGhostDriveDataRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {wm.protobuf.LoadGhostDriveDataRequest} LoadGhostDriveDataRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LoadGhostDriveDataRequest.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.wm.protobuf.LoadGhostDriveDataRequest();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.path = reader.uint32();
                            break;
                        }
                    case 2: {
                            if (!(message.carTunings && message.carTunings.length))
                                message.carTunings = [];
                            message.carTunings.push($root.wm.protobuf.CarTuning.decode(reader, reader.uint32()));
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("path"))
                    throw $util.ProtocolError("missing required 'path'", { instance: message });
                return message;
            };

            /**
             * Decodes a LoadGhostDriveDataRequest message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof wm.protobuf.LoadGhostDriveDataRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {wm.protobuf.LoadGhostDriveDataRequest} LoadGhostDriveDataRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LoadGhostDriveDataRequest.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a LoadGhostDriveDataRequest message.
             * @function verify
             * @memberof wm.protobuf.LoadGhostDriveDataRequest
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            LoadGhostDriveDataRequest.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (!$util.isInteger(message.path))
                    return "path: integer expected";
                if (message.carTunings != null && message.hasOwnProperty("carTunings")) {
                    if (!Array.isArray(message.carTunings))
                        return "carTunings: array expected";
                    for (let i = 0; i < message.carTunings.length; ++i) {
                        let error = $root.wm.protobuf.CarTuning.verify(message.carTunings[i]);
                        if (error)
                            return "carTunings." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a LoadGhostDriveDataRequest message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof wm.protobuf.LoadGhostDriveDataRequest
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {wm.protobuf.LoadGhostDriveDataRequest} LoadGhostDriveDataRequest
             */
            LoadGhostDriveDataRequest.fromObject = function fromObject(object) {
                if (object instanceof $root.wm.protobuf.LoadGhostDriveDataRequest)
                    return object;
                let message = new $root.wm.protobuf.LoadGhostDriveDataRequest();
                if (object.path != null)
                    message.path = object.path >>> 0;
                if (object.carTunings) {
                    if (!Array.isArray(object.carTunings))
                        throw TypeError(".wm.protobuf.LoadGhostDriveDataRequest.carTunings: array expected");
                    message.carTunings = [];
                    for (let i = 0; i < object.carTunings.length; ++i) {
                        if (typeof object.carTunings[i] !== "object")
                            throw TypeError(".wm.protobuf.LoadGhostDriveDataRequest.carTunings: object expected");
                        message.carTunings[i] = $root.wm.protobuf.CarTuning.fromObject(object.carTunings[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from a LoadGhostDriveDataRequest message. Also converts values to other types if specified.
             * @function toObject
             * @memberof wm.protobuf.LoadGhostDriveDataRequest
             * @static
             * @param {wm.protobuf.LoadGhostDriveDataRequest} message LoadGhostDriveDataRequest
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            LoadGhostDriveDataRequest.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.carTunings = [];
                if (options.defaults)
                    object.path = 0;
                if (message.path != null && message.hasOwnProperty("path"))
                    object.path = message.path;
                if (message.carTunings && message.carTunings.length) {
                    object.carTunings = [];
                    for (let j = 0; j < message.carTunings.length; ++j)
                        object.carTunings[j] = $root.wm.protobuf.CarTuning.toObject(message.carTunings[j], options);
                }
                return object;
            };

            /**
             * Converts this LoadGhostDriveDataRequest to JSON.
             * @function toJSON
             * @memberof wm.protobuf.LoadGhostDriveDataRequest
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            LoadGhostDriveDataRequest.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for LoadGhostDriveDataRequest
             * @function getTypeUrl
             * @memberof wm.protobuf.LoadGhostDriveDataRequest
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            LoadGhostDriveDataRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/wm.protobuf.LoadGhostDriveDataRequest";
            };

            return LoadGhostDriveDataRequest;
        })();

        protobuf.LoadGhostDriveDataResponse = (function() {

            /**
             * Properties of a LoadGhostDriveDataResponse.
             * @memberof wm.protobuf
             * @interface ILoadGhostDriveDataResponse
             * @property {wm.protobuf.ErrorCode} error LoadGhostDriveDataResponse error
             * @property {Array.<wm.protobuf.LoadGhostDriveDataResponse.IGhostDriveData>|null} [data] LoadGhostDriveDataResponse data
             */

            /**
             * Constructs a new LoadGhostDriveDataResponse.
             * @memberof wm.protobuf
             * @classdesc Represents a LoadGhostDriveDataResponse.
             * @implements ILoadGhostDriveDataResponse
             * @constructor
             * @param {wm.protobuf.ILoadGhostDriveDataResponse=} [properties] Properties to set
             */
            function LoadGhostDriveDataResponse(properties) {
                this.data = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * LoadGhostDriveDataResponse error.
             * @member {wm.protobuf.ErrorCode} error
             * @memberof wm.protobuf.LoadGhostDriveDataResponse
             * @instance
             */
            LoadGhostDriveDataResponse.prototype.error = 0;

            /**
             * LoadGhostDriveDataResponse data.
             * @member {Array.<wm.protobuf.LoadGhostDriveDataResponse.IGhostDriveData>} data
             * @memberof wm.protobuf.LoadGhostDriveDataResponse
             * @instance
             */
            LoadGhostDriveDataResponse.prototype.data = $util.emptyArray;

            /**
             * Creates a new LoadGhostDriveDataResponse instance using the specified properties.
             * @function create
             * @memberof wm.protobuf.LoadGhostDriveDataResponse
             * @static
             * @param {wm.protobuf.ILoadGhostDriveDataResponse=} [properties] Properties to set
             * @returns {wm.protobuf.LoadGhostDriveDataResponse} LoadGhostDriveDataResponse instance
             */
            LoadGhostDriveDataResponse.create = function create(properties) {
                return new LoadGhostDriveDataResponse(properties);
            };

            /**
             * Encodes the specified LoadGhostDriveDataResponse message. Does not implicitly {@link wm.protobuf.LoadGhostDriveDataResponse.verify|verify} messages.
             * @function encode
             * @memberof wm.protobuf.LoadGhostDriveDataResponse
             * @static
             * @param {wm.protobuf.ILoadGhostDriveDataResponse} message LoadGhostDriveDataResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LoadGhostDriveDataResponse.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
                if (message.data != null && message.data.length)
                    for (let i = 0; i < message.data.length; ++i)
                        $root.wm.protobuf.LoadGhostDriveDataResponse.GhostDriveData.encode(message.data[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified LoadGhostDriveDataResponse message, length delimited. Does not implicitly {@link wm.protobuf.LoadGhostDriveDataResponse.verify|verify} messages.
             * @function encodeDelimited
             * @memberof wm.protobuf.LoadGhostDriveDataResponse
             * @static
             * @param {wm.protobuf.ILoadGhostDriveDataResponse} message LoadGhostDriveDataResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LoadGhostDriveDataResponse.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a LoadGhostDriveDataResponse message from the specified reader or buffer.
             * @function decode
             * @memberof wm.protobuf.LoadGhostDriveDataResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {wm.protobuf.LoadGhostDriveDataResponse} LoadGhostDriveDataResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LoadGhostDriveDataResponse.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.wm.protobuf.LoadGhostDriveDataResponse();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.error = reader.int32();
                            break;
                        }
                    case 2: {
                            if (!(message.data && message.data.length))
                                message.data = [];
                            message.data.push($root.wm.protobuf.LoadGhostDriveDataResponse.GhostDriveData.decode(reader, reader.uint32()));
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("error"))
                    throw $util.ProtocolError("missing required 'error'", { instance: message });
                return message;
            };

            /**
             * Decodes a LoadGhostDriveDataResponse message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof wm.protobuf.LoadGhostDriveDataResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {wm.protobuf.LoadGhostDriveDataResponse} LoadGhostDriveDataResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LoadGhostDriveDataResponse.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a LoadGhostDriveDataResponse message.
             * @function verify
             * @memberof wm.protobuf.LoadGhostDriveDataResponse
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            LoadGhostDriveDataResponse.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                switch (message.error) {
                default:
                    return "error: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 7:
                case 9:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 16:
                case 17:
                case 18:
                case 19:
                    break;
                }
                if (message.data != null && message.hasOwnProperty("data")) {
                    if (!Array.isArray(message.data))
                        return "data: array expected";
                    for (let i = 0; i < message.data.length; ++i) {
                        let error = $root.wm.protobuf.LoadGhostDriveDataResponse.GhostDriveData.verify(message.data[i]);
                        if (error)
                            return "data." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a LoadGhostDriveDataResponse message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof wm.protobuf.LoadGhostDriveDataResponse
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {wm.protobuf.LoadGhostDriveDataResponse} LoadGhostDriveDataResponse
             */
            LoadGhostDriveDataResponse.fromObject = function fromObject(object) {
                if (object instanceof $root.wm.protobuf.LoadGhostDriveDataResponse)
                    return object;
                let message = new $root.wm.protobuf.LoadGhostDriveDataResponse();
                switch (object.error) {
                default:
                    if (typeof object.error === "number") {
                        message.error = object.error;
                        break;
                    }
                    break;
                case "ERR_SUCCESS":
                case 0:
                    message.error = 0;
                    break;
                case "ERR_REQUEST":
                case 1:
                    message.error = 1;
                    break;
                case "ERR_NOT_FOUND":
                case 2:
                    message.error = 2;
                    break;
                case "ERR_ID_SERVER":
                case 3:
                    message.error = 3;
                    break;
                case "ERR_ID_BANNED":
                case 4:
                    message.error = 4;
                    break;
                case "ERR_USER_LOCKED":
                case 5:
                    message.error = 5;
                    break;
                case "ERR_USER_VERSION":
                case 6:
                    message.error = 6;
                    break;
                case "ERR_NAME_CONFLICTED":
                case 7:
                    message.error = 7;
                    break;
                case "ERR_FORBIDDEN":
                case 9:
                    message.error = 9;
                    break;
                case "ERR_USER_SUCCEEDED":
                case 11:
                    message.error = 11;
                    break;
                case "ERR_BEING_TRANSFERRED":
                case 12:
                    message.error = 12;
                    break;
                case "ERR_SCRATCH_LOCKED":
                case 13:
                    message.error = 13;
                    break;
                case "ERR_BINGO_REVENGE_LOCKED":
                case 14:
                    message.error = 14;
                    break;
                case "ERR_BINGO_ALREDY_LINKED":
                case 15:
                    message.error = 15;
                    break;
                case "ERR_BINGO_FINISHED":
                case 16:
                    message.error = 16;
                    break;
                case "ERR_BINGO_REACHED_MAX_USER":
                case 17:
                    message.error = 17;
                    break;
                case "ERR_CAR_NOT_FOUND":
                case 18:
                    message.error = 18;
                    break;
                case "ERR_BINGO_CARD_NOT_FOUND":
                case 19:
                    message.error = 19;
                    break;
                }
                if (object.data) {
                    if (!Array.isArray(object.data))
                        throw TypeError(".wm.protobuf.LoadGhostDriveDataResponse.data: array expected");
                    message.data = [];
                    for (let i = 0; i < object.data.length; ++i) {
                        if (typeof object.data[i] !== "object")
                            throw TypeError(".wm.protobuf.LoadGhostDriveDataResponse.data: object expected");
                        message.data[i] = $root.wm.protobuf.LoadGhostDriveDataResponse.GhostDriveData.fromObject(object.data[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from a LoadGhostDriveDataResponse message. Also converts values to other types if specified.
             * @function toObject
             * @memberof wm.protobuf.LoadGhostDriveDataResponse
             * @static
             * @param {wm.protobuf.LoadGhostDriveDataResponse} message LoadGhostDriveDataResponse
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            LoadGhostDriveDataResponse.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.data = [];
                if (options.defaults)
                    object.error = options.enums === String ? "ERR_SUCCESS" : 0;
                if (message.error != null && message.hasOwnProperty("error"))
                    object.error = options.enums === String ? $root.wm.protobuf.ErrorCode[message.error] === undefined ? message.error : $root.wm.protobuf.ErrorCode[message.error] : message.error;
                if (message.data && message.data.length) {
                    object.data = [];
                    for (let j = 0; j < message.data.length; ++j)
                        object.data[j] = $root.wm.protobuf.LoadGhostDriveDataResponse.GhostDriveData.toObject(message.data[j], options);
                }
                return object;
            };

            /**
             * Converts this LoadGhostDriveDataResponse to JSON.
             * @function toJSON
             * @memberof wm.protobuf.LoadGhostDriveDataResponse
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            LoadGhostDriveDataResponse.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for LoadGhostDriveDataResponse
             * @function getTypeUrl
             * @memberof wm.protobuf.LoadGhostDriveDataResponse
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            LoadGhostDriveDataResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/wm.protobuf.LoadGhostDriveDataResponse";
            };

            LoadGhostDriveDataResponse.GhostDriveData = (function() {

                /**
                 * Properties of a GhostDriveData.
                 * @memberof wm.protobuf.LoadGhostDriveDataResponse
                 * @interface IGhostDriveData
                 * @property {number} carId GhostDriveData carId
                 * @property {wm.protobuf.GhostType} type GhostDriveData type
                 * @property {wm.protobuf.IBinaryData|null} [driveData] GhostDriveData driveData
                 * @property {wm.protobuf.IBinaryData|null} [trendBinaryByUser] GhostDriveData trendBinaryByUser
                 * @property {wm.protobuf.IBinaryData|null} [trendBinaryByCar] GhostDriveData trendBinaryByCar
                 * @property {wm.protobuf.IBinaryData|null} [trendBinaryByArea] GhostDriveData trendBinaryByArea
                 */

                /**
                 * Constructs a new GhostDriveData.
                 * @memberof wm.protobuf.LoadGhostDriveDataResponse
                 * @classdesc Represents a GhostDriveData.
                 * @implements IGhostDriveData
                 * @constructor
                 * @param {wm.protobuf.LoadGhostDriveDataResponse.IGhostDriveData=} [properties] Properties to set
                 */
                function GhostDriveData(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * GhostDriveData carId.
                 * @member {number} carId
                 * @memberof wm.protobuf.LoadGhostDriveDataResponse.GhostDriveData
                 * @instance
                 */
                GhostDriveData.prototype.carId = 0;

                /**
                 * GhostDriveData type.
                 * @member {wm.protobuf.GhostType} type
                 * @memberof wm.protobuf.LoadGhostDriveDataResponse.GhostDriveData
                 * @instance
                 */
                GhostDriveData.prototype.type = 1;

                /**
                 * GhostDriveData driveData.
                 * @member {wm.protobuf.IBinaryData|null|undefined} driveData
                 * @memberof wm.protobuf.LoadGhostDriveDataResponse.GhostDriveData
                 * @instance
                 */
                GhostDriveData.prototype.driveData = null;

                /**
                 * GhostDriveData trendBinaryByUser.
                 * @member {wm.protobuf.IBinaryData|null|undefined} trendBinaryByUser
                 * @memberof wm.protobuf.LoadGhostDriveDataResponse.GhostDriveData
                 * @instance
                 */
                GhostDriveData.prototype.trendBinaryByUser = null;

                /**
                 * GhostDriveData trendBinaryByCar.
                 * @member {wm.protobuf.IBinaryData|null|undefined} trendBinaryByCar
                 * @memberof wm.protobuf.LoadGhostDriveDataResponse.GhostDriveData
                 * @instance
                 */
                GhostDriveData.prototype.trendBinaryByCar = null;

                /**
                 * GhostDriveData trendBinaryByArea.
                 * @member {wm.protobuf.IBinaryData|null|undefined} trendBinaryByArea
                 * @memberof wm.protobuf.LoadGhostDriveDataResponse.GhostDriveData
                 * @instance
                 */
                GhostDriveData.prototype.trendBinaryByArea = null;

                /**
                 * Creates a new GhostDriveData instance using the specified properties.
                 * @function create
                 * @memberof wm.protobuf.LoadGhostDriveDataResponse.GhostDriveData
                 * @static
                 * @param {wm.protobuf.LoadGhostDriveDataResponse.IGhostDriveData=} [properties] Properties to set
                 * @returns {wm.protobuf.LoadGhostDriveDataResponse.GhostDriveData} GhostDriveData instance
                 */
                GhostDriveData.create = function create(properties) {
                    return new GhostDriveData(properties);
                };

                /**
                 * Encodes the specified GhostDriveData message. Does not implicitly {@link wm.protobuf.LoadGhostDriveDataResponse.GhostDriveData.verify|verify} messages.
                 * @function encode
                 * @memberof wm.protobuf.LoadGhostDriveDataResponse.GhostDriveData
                 * @static
                 * @param {wm.protobuf.LoadGhostDriveDataResponse.IGhostDriveData} message GhostDriveData message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                GhostDriveData.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.carId);
                    writer.uint32(/* id 2, wireType 0 =*/16).int32(message.type);
                    if (message.driveData != null && Object.hasOwnProperty.call(message, "driveData"))
                        $root.wm.protobuf.BinaryData.encode(message.driveData, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    if (message.trendBinaryByUser != null && Object.hasOwnProperty.call(message, "trendBinaryByUser"))
                        $root.wm.protobuf.BinaryData.encode(message.trendBinaryByUser, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                    if (message.trendBinaryByCar != null && Object.hasOwnProperty.call(message, "trendBinaryByCar"))
                        $root.wm.protobuf.BinaryData.encode(message.trendBinaryByCar, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                    if (message.trendBinaryByArea != null && Object.hasOwnProperty.call(message, "trendBinaryByArea"))
                        $root.wm.protobuf.BinaryData.encode(message.trendBinaryByArea, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                    return writer;
                };

                /**
                 * Encodes the specified GhostDriveData message, length delimited. Does not implicitly {@link wm.protobuf.LoadGhostDriveDataResponse.GhostDriveData.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof wm.protobuf.LoadGhostDriveDataResponse.GhostDriveData
                 * @static
                 * @param {wm.protobuf.LoadGhostDriveDataResponse.IGhostDriveData} message GhostDriveData message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                GhostDriveData.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a GhostDriveData message from the specified reader or buffer.
                 * @function decode
                 * @memberof wm.protobuf.LoadGhostDriveDataResponse.GhostDriveData
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {wm.protobuf.LoadGhostDriveDataResponse.GhostDriveData} GhostDriveData
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                GhostDriveData.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.wm.protobuf.LoadGhostDriveDataResponse.GhostDriveData();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.carId = reader.uint32();
                                break;
                            }
                        case 2: {
                                message.type = reader.int32();
                                break;
                            }
                        case 3: {
                                message.driveData = $root.wm.protobuf.BinaryData.decode(reader, reader.uint32());
                                break;
                            }
                        case 4: {
                                message.trendBinaryByUser = $root.wm.protobuf.BinaryData.decode(reader, reader.uint32());
                                break;
                            }
                        case 5: {
                                message.trendBinaryByCar = $root.wm.protobuf.BinaryData.decode(reader, reader.uint32());
                                break;
                            }
                        case 6: {
                                message.trendBinaryByArea = $root.wm.protobuf.BinaryData.decode(reader, reader.uint32());
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    if (!message.hasOwnProperty("carId"))
                        throw $util.ProtocolError("missing required 'carId'", { instance: message });
                    if (!message.hasOwnProperty("type"))
                        throw $util.ProtocolError("missing required 'type'", { instance: message });
                    return message;
                };

                /**
                 * Decodes a GhostDriveData message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof wm.protobuf.LoadGhostDriveDataResponse.GhostDriveData
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {wm.protobuf.LoadGhostDriveDataResponse.GhostDriveData} GhostDriveData
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                GhostDriveData.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a GhostDriveData message.
                 * @function verify
                 * @memberof wm.protobuf.LoadGhostDriveDataResponse.GhostDriveData
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                GhostDriveData.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (!$util.isInteger(message.carId))
                        return "carId: integer expected";
                    switch (message.type) {
                    default:
                        return "type: enum value expected";
                    case 1:
                    case 2:
                    case 3:
                    case 4:
                    case 5:
                        break;
                    }
                    if (message.driveData != null && message.hasOwnProperty("driveData")) {
                        let error = $root.wm.protobuf.BinaryData.verify(message.driveData);
                        if (error)
                            return "driveData." + error;
                    }
                    if (message.trendBinaryByUser != null && message.hasOwnProperty("trendBinaryByUser")) {
                        let error = $root.wm.protobuf.BinaryData.verify(message.trendBinaryByUser);
                        if (error)
                            return "trendBinaryByUser." + error;
                    }
                    if (message.trendBinaryByCar != null && message.hasOwnProperty("trendBinaryByCar")) {
                        let error = $root.wm.protobuf.BinaryData.verify(message.trendBinaryByCar);
                        if (error)
                            return "trendBinaryByCar." + error;
                    }
                    if (message.trendBinaryByArea != null && message.hasOwnProperty("trendBinaryByArea")) {
                        let error = $root.wm.protobuf.BinaryData.verify(message.trendBinaryByArea);
                        if (error)
                            return "trendBinaryByArea." + error;
                    }
                    return null;
                };

                /**
                 * Creates a GhostDriveData message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof wm.protobuf.LoadGhostDriveDataResponse.GhostDriveData
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {wm.protobuf.LoadGhostDriveDataResponse.GhostDriveData} GhostDriveData
                 */
                GhostDriveData.fromObject = function fromObject(object) {
                    if (object instanceof $root.wm.protobuf.LoadGhostDriveDataResponse.GhostDriveData)
                        return object;
                    let message = new $root.wm.protobuf.LoadGhostDriveDataResponse.GhostDriveData();
                    if (object.carId != null)
                        message.carId = object.carId >>> 0;
                    switch (object.type) {
                    default:
                        if (typeof object.type === "number") {
                            message.type = object.type;
                            break;
                        }
                        break;
                    case "GHOST_NORMAL":
                    case 1:
                        message.type = 1;
                        break;
                    case "GHOST_PINCH_RUNNER":
                    case 2:
                        message.type = 2;
                        break;
                    case "GHOST_DEFAULT":
                    case 3:
                        message.type = 3;
                        break;
                    case "GHOST_REGION":
                    case 4:
                        message.type = 4;
                        break;
                    case "GHOST_REGION_PINCH_RUNNER":
                    case 5:
                        message.type = 5;
                        break;
                    }
                    if (object.driveData != null) {
                        if (typeof object.driveData !== "object")
                            throw TypeError(".wm.protobuf.LoadGhostDriveDataResponse.GhostDriveData.driveData: object expected");
                        message.driveData = $root.wm.protobuf.BinaryData.fromObject(object.driveData);
                    }
                    if (object.trendBinaryByUser != null) {
                        if (typeof object.trendBinaryByUser !== "object")
                            throw TypeError(".wm.protobuf.LoadGhostDriveDataResponse.GhostDriveData.trendBinaryByUser: object expected");
                        message.trendBinaryByUser = $root.wm.protobuf.BinaryData.fromObject(object.trendBinaryByUser);
                    }
                    if (object.trendBinaryByCar != null) {
                        if (typeof object.trendBinaryByCar !== "object")
                            throw TypeError(".wm.protobuf.LoadGhostDriveDataResponse.GhostDriveData.trendBinaryByCar: object expected");
                        message.trendBinaryByCar = $root.wm.protobuf.BinaryData.fromObject(object.trendBinaryByCar);
                    }
                    if (object.trendBinaryByArea != null) {
                        if (typeof object.trendBinaryByArea !== "object")
                            throw TypeError(".wm.protobuf.LoadGhostDriveDataResponse.GhostDriveData.trendBinaryByArea: object expected");
                        message.trendBinaryByArea = $root.wm.protobuf.BinaryData.fromObject(object.trendBinaryByArea);
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a GhostDriveData message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof wm.protobuf.LoadGhostDriveDataResponse.GhostDriveData
                 * @static
                 * @param {wm.protobuf.LoadGhostDriveDataResponse.GhostDriveData} message GhostDriveData
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                GhostDriveData.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        object.carId = 0;
                        object.type = options.enums === String ? "GHOST_NORMAL" : 1;
                        object.driveData = null;
                        object.trendBinaryByUser = null;
                        object.trendBinaryByCar = null;
                        object.trendBinaryByArea = null;
                    }
                    if (message.carId != null && message.hasOwnProperty("carId"))
                        object.carId = message.carId;
                    if (message.type != null && message.hasOwnProperty("type"))
                        object.type = options.enums === String ? $root.wm.protobuf.GhostType[message.type] === undefined ? message.type : $root.wm.protobuf.GhostType[message.type] : message.type;
                    if (message.driveData != null && message.hasOwnProperty("driveData"))
                        object.driveData = $root.wm.protobuf.BinaryData.toObject(message.driveData, options);
                    if (message.trendBinaryByUser != null && message.hasOwnProperty("trendBinaryByUser"))
                        object.trendBinaryByUser = $root.wm.protobuf.BinaryData.toObject(message.trendBinaryByUser, options);
                    if (message.trendBinaryByCar != null && message.hasOwnProperty("trendBinaryByCar"))
                        object.trendBinaryByCar = $root.wm.protobuf.BinaryData.toObject(message.trendBinaryByCar, options);
                    if (message.trendBinaryByArea != null && message.hasOwnProperty("trendBinaryByArea"))
                        object.trendBinaryByArea = $root.wm.protobuf.BinaryData.toObject(message.trendBinaryByArea, options);
                    return object;
                };

                /**
                 * Converts this GhostDriveData to JSON.
                 * @function toJSON
                 * @memberof wm.protobuf.LoadGhostDriveDataResponse.GhostDriveData
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                GhostDriveData.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                /**
                 * Gets the default type url for GhostDriveData
                 * @function getTypeUrl
                 * @memberof wm.protobuf.LoadGhostDriveDataResponse.GhostDriveData
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                GhostDriveData.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/wm.protobuf.LoadGhostDriveDataResponse.GhostDriveData";
                };

                return GhostDriveData;
            })();

            return LoadGhostDriveDataResponse;
        })();

        protobuf.LoadGhostExpeditionInfoRequest = (function() {

            /**
             * Properties of a LoadGhostExpeditionInfoRequest.
             * @memberof wm.protobuf
             * @interface ILoadGhostExpeditionInfoRequest
             * @property {number} ghostExpeditionId LoadGhostExpeditionInfoRequest ghostExpeditionId
             * @property {number} carId LoadGhostExpeditionInfoRequest carId
             */

            /**
             * Constructs a new LoadGhostExpeditionInfoRequest.
             * @memberof wm.protobuf
             * @classdesc Represents a LoadGhostExpeditionInfoRequest.
             * @implements ILoadGhostExpeditionInfoRequest
             * @constructor
             * @param {wm.protobuf.ILoadGhostExpeditionInfoRequest=} [properties] Properties to set
             */
            function LoadGhostExpeditionInfoRequest(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * LoadGhostExpeditionInfoRequest ghostExpeditionId.
             * @member {number} ghostExpeditionId
             * @memberof wm.protobuf.LoadGhostExpeditionInfoRequest
             * @instance
             */
            LoadGhostExpeditionInfoRequest.prototype.ghostExpeditionId = 0;

            /**
             * LoadGhostExpeditionInfoRequest carId.
             * @member {number} carId
             * @memberof wm.protobuf.LoadGhostExpeditionInfoRequest
             * @instance
             */
            LoadGhostExpeditionInfoRequest.prototype.carId = 0;

            /**
             * Creates a new LoadGhostExpeditionInfoRequest instance using the specified properties.
             * @function create
             * @memberof wm.protobuf.LoadGhostExpeditionInfoRequest
             * @static
             * @param {wm.protobuf.ILoadGhostExpeditionInfoRequest=} [properties] Properties to set
             * @returns {wm.protobuf.LoadGhostExpeditionInfoRequest} LoadGhostExpeditionInfoRequest instance
             */
            LoadGhostExpeditionInfoRequest.create = function create(properties) {
                return new LoadGhostExpeditionInfoRequest(properties);
            };

            /**
             * Encodes the specified LoadGhostExpeditionInfoRequest message. Does not implicitly {@link wm.protobuf.LoadGhostExpeditionInfoRequest.verify|verify} messages.
             * @function encode
             * @memberof wm.protobuf.LoadGhostExpeditionInfoRequest
             * @static
             * @param {wm.protobuf.ILoadGhostExpeditionInfoRequest} message LoadGhostExpeditionInfoRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LoadGhostExpeditionInfoRequest.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.ghostExpeditionId);
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.carId);
                return writer;
            };

            /**
             * Encodes the specified LoadGhostExpeditionInfoRequest message, length delimited. Does not implicitly {@link wm.protobuf.LoadGhostExpeditionInfoRequest.verify|verify} messages.
             * @function encodeDelimited
             * @memberof wm.protobuf.LoadGhostExpeditionInfoRequest
             * @static
             * @param {wm.protobuf.ILoadGhostExpeditionInfoRequest} message LoadGhostExpeditionInfoRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LoadGhostExpeditionInfoRequest.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a LoadGhostExpeditionInfoRequest message from the specified reader or buffer.
             * @function decode
             * @memberof wm.protobuf.LoadGhostExpeditionInfoRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {wm.protobuf.LoadGhostExpeditionInfoRequest} LoadGhostExpeditionInfoRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LoadGhostExpeditionInfoRequest.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.wm.protobuf.LoadGhostExpeditionInfoRequest();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.ghostExpeditionId = reader.uint32();
                            break;
                        }
                    case 2: {
                            message.carId = reader.uint32();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("ghostExpeditionId"))
                    throw $util.ProtocolError("missing required 'ghostExpeditionId'", { instance: message });
                if (!message.hasOwnProperty("carId"))
                    throw $util.ProtocolError("missing required 'carId'", { instance: message });
                return message;
            };

            /**
             * Decodes a LoadGhostExpeditionInfoRequest message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof wm.protobuf.LoadGhostExpeditionInfoRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {wm.protobuf.LoadGhostExpeditionInfoRequest} LoadGhostExpeditionInfoRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LoadGhostExpeditionInfoRequest.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a LoadGhostExpeditionInfoRequest message.
             * @function verify
             * @memberof wm.protobuf.LoadGhostExpeditionInfoRequest
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            LoadGhostExpeditionInfoRequest.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (!$util.isInteger(message.ghostExpeditionId))
                    return "ghostExpeditionId: integer expected";
                if (!$util.isInteger(message.carId))
                    return "carId: integer expected";
                return null;
            };

            /**
             * Creates a LoadGhostExpeditionInfoRequest message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof wm.protobuf.LoadGhostExpeditionInfoRequest
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {wm.protobuf.LoadGhostExpeditionInfoRequest} LoadGhostExpeditionInfoRequest
             */
            LoadGhostExpeditionInfoRequest.fromObject = function fromObject(object) {
                if (object instanceof $root.wm.protobuf.LoadGhostExpeditionInfoRequest)
                    return object;
                let message = new $root.wm.protobuf.LoadGhostExpeditionInfoRequest();
                if (object.ghostExpeditionId != null)
                    message.ghostExpeditionId = object.ghostExpeditionId >>> 0;
                if (object.carId != null)
                    message.carId = object.carId >>> 0;
                return message;
            };

            /**
             * Creates a plain object from a LoadGhostExpeditionInfoRequest message. Also converts values to other types if specified.
             * @function toObject
             * @memberof wm.protobuf.LoadGhostExpeditionInfoRequest
             * @static
             * @param {wm.protobuf.LoadGhostExpeditionInfoRequest} message LoadGhostExpeditionInfoRequest
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            LoadGhostExpeditionInfoRequest.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.ghostExpeditionId = 0;
                    object.carId = 0;
                }
                if (message.ghostExpeditionId != null && message.hasOwnProperty("ghostExpeditionId"))
                    object.ghostExpeditionId = message.ghostExpeditionId;
                if (message.carId != null && message.hasOwnProperty("carId"))
                    object.carId = message.carId;
                return object;
            };

            /**
             * Converts this LoadGhostExpeditionInfoRequest to JSON.
             * @function toJSON
             * @memberof wm.protobuf.LoadGhostExpeditionInfoRequest
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            LoadGhostExpeditionInfoRequest.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for LoadGhostExpeditionInfoRequest
             * @function getTypeUrl
             * @memberof wm.protobuf.LoadGhostExpeditionInfoRequest
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            LoadGhostExpeditionInfoRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/wm.protobuf.LoadGhostExpeditionInfoRequest";
            };

            return LoadGhostExpeditionInfoRequest;
        })();

        protobuf.LoadGhostExpeditionInfoResponse = (function() {

            /**
             * Properties of a LoadGhostExpeditionInfoResponse.
             * @memberof wm.protobuf
             * @interface ILoadGhostExpeditionInfoResponse
             * @property {wm.protobuf.ErrorCode} error LoadGhostExpeditionInfoResponse error
             * @property {number|null} [sugorokuPoint] LoadGhostExpeditionInfoResponse sugorokuPoint
             * @property {number|null} [score] LoadGhostExpeditionInfoResponse score
             * @property {number} localScore LoadGhostExpeditionInfoResponse localScore
             * @property {number|null} [consecutiveLosses] LoadGhostExpeditionInfoResponse consecutiveLosses
             * @property {number|null} [rescuedSugorokuPoint] LoadGhostExpeditionInfoResponse rescuedSugorokuPoint
             * @property {Array.<wm.protobuf.ICarEntry>|null} [rescuers] LoadGhostExpeditionInfoResponse rescuers
             * @property {Array.<number>|null} [aftereventBattledCars] LoadGhostExpeditionInfoResponse aftereventBattledCars
             */

            /**
             * Constructs a new LoadGhostExpeditionInfoResponse.
             * @memberof wm.protobuf
             * @classdesc Represents a LoadGhostExpeditionInfoResponse.
             * @implements ILoadGhostExpeditionInfoResponse
             * @constructor
             * @param {wm.protobuf.ILoadGhostExpeditionInfoResponse=} [properties] Properties to set
             */
            function LoadGhostExpeditionInfoResponse(properties) {
                this.rescuers = [];
                this.aftereventBattledCars = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * LoadGhostExpeditionInfoResponse error.
             * @member {wm.protobuf.ErrorCode} error
             * @memberof wm.protobuf.LoadGhostExpeditionInfoResponse
             * @instance
             */
            LoadGhostExpeditionInfoResponse.prototype.error = 0;

            /**
             * LoadGhostExpeditionInfoResponse sugorokuPoint.
             * @member {number} sugorokuPoint
             * @memberof wm.protobuf.LoadGhostExpeditionInfoResponse
             * @instance
             */
            LoadGhostExpeditionInfoResponse.prototype.sugorokuPoint = 0;

            /**
             * LoadGhostExpeditionInfoResponse score.
             * @member {number} score
             * @memberof wm.protobuf.LoadGhostExpeditionInfoResponse
             * @instance
             */
            LoadGhostExpeditionInfoResponse.prototype.score = 0;

            /**
             * LoadGhostExpeditionInfoResponse localScore.
             * @member {number} localScore
             * @memberof wm.protobuf.LoadGhostExpeditionInfoResponse
             * @instance
             */
            LoadGhostExpeditionInfoResponse.prototype.localScore = 0;

            /**
             * LoadGhostExpeditionInfoResponse consecutiveLosses.
             * @member {number} consecutiveLosses
             * @memberof wm.protobuf.LoadGhostExpeditionInfoResponse
             * @instance
             */
            LoadGhostExpeditionInfoResponse.prototype.consecutiveLosses = 0;

            /**
             * LoadGhostExpeditionInfoResponse rescuedSugorokuPoint.
             * @member {number} rescuedSugorokuPoint
             * @memberof wm.protobuf.LoadGhostExpeditionInfoResponse
             * @instance
             */
            LoadGhostExpeditionInfoResponse.prototype.rescuedSugorokuPoint = 0;

            /**
             * LoadGhostExpeditionInfoResponse rescuers.
             * @member {Array.<wm.protobuf.ICarEntry>} rescuers
             * @memberof wm.protobuf.LoadGhostExpeditionInfoResponse
             * @instance
             */
            LoadGhostExpeditionInfoResponse.prototype.rescuers = $util.emptyArray;

            /**
             * LoadGhostExpeditionInfoResponse aftereventBattledCars.
             * @member {Array.<number>} aftereventBattledCars
             * @memberof wm.protobuf.LoadGhostExpeditionInfoResponse
             * @instance
             */
            LoadGhostExpeditionInfoResponse.prototype.aftereventBattledCars = $util.emptyArray;

            /**
             * Creates a new LoadGhostExpeditionInfoResponse instance using the specified properties.
             * @function create
             * @memberof wm.protobuf.LoadGhostExpeditionInfoResponse
             * @static
             * @param {wm.protobuf.ILoadGhostExpeditionInfoResponse=} [properties] Properties to set
             * @returns {wm.protobuf.LoadGhostExpeditionInfoResponse} LoadGhostExpeditionInfoResponse instance
             */
            LoadGhostExpeditionInfoResponse.create = function create(properties) {
                return new LoadGhostExpeditionInfoResponse(properties);
            };

            /**
             * Encodes the specified LoadGhostExpeditionInfoResponse message. Does not implicitly {@link wm.protobuf.LoadGhostExpeditionInfoResponse.verify|verify} messages.
             * @function encode
             * @memberof wm.protobuf.LoadGhostExpeditionInfoResponse
             * @static
             * @param {wm.protobuf.ILoadGhostExpeditionInfoResponse} message LoadGhostExpeditionInfoResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LoadGhostExpeditionInfoResponse.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
                if (message.sugorokuPoint != null && Object.hasOwnProperty.call(message, "sugorokuPoint"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.sugorokuPoint);
                if (message.score != null && Object.hasOwnProperty.call(message, "score"))
                    writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.score);
                writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.localScore);
                if (message.consecutiveLosses != null && Object.hasOwnProperty.call(message, "consecutiveLosses"))
                    writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.consecutiveLosses);
                if (message.rescuedSugorokuPoint != null && Object.hasOwnProperty.call(message, "rescuedSugorokuPoint"))
                    writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.rescuedSugorokuPoint);
                if (message.rescuers != null && message.rescuers.length)
                    for (let i = 0; i < message.rescuers.length; ++i)
                        $root.wm.protobuf.CarEntry.encode(message.rescuers[i], writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                if (message.aftereventBattledCars != null && message.aftereventBattledCars.length)
                    for (let i = 0; i < message.aftereventBattledCars.length; ++i)
                        writer.uint32(/* id 9, wireType 0 =*/72).uint32(message.aftereventBattledCars[i]);
                return writer;
            };

            /**
             * Encodes the specified LoadGhostExpeditionInfoResponse message, length delimited. Does not implicitly {@link wm.protobuf.LoadGhostExpeditionInfoResponse.verify|verify} messages.
             * @function encodeDelimited
             * @memberof wm.protobuf.LoadGhostExpeditionInfoResponse
             * @static
             * @param {wm.protobuf.ILoadGhostExpeditionInfoResponse} message LoadGhostExpeditionInfoResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LoadGhostExpeditionInfoResponse.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a LoadGhostExpeditionInfoResponse message from the specified reader or buffer.
             * @function decode
             * @memberof wm.protobuf.LoadGhostExpeditionInfoResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {wm.protobuf.LoadGhostExpeditionInfoResponse} LoadGhostExpeditionInfoResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LoadGhostExpeditionInfoResponse.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.wm.protobuf.LoadGhostExpeditionInfoResponse();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.error = reader.int32();
                            break;
                        }
                    case 2: {
                            message.sugorokuPoint = reader.uint32();
                            break;
                        }
                    case 3: {
                            message.score = reader.uint32();
                            break;
                        }
                    case 4: {
                            message.localScore = reader.uint32();
                            break;
                        }
                    case 5: {
                            message.consecutiveLosses = reader.uint32();
                            break;
                        }
                    case 6: {
                            message.rescuedSugorokuPoint = reader.uint32();
                            break;
                        }
                    case 7: {
                            if (!(message.rescuers && message.rescuers.length))
                                message.rescuers = [];
                            message.rescuers.push($root.wm.protobuf.CarEntry.decode(reader, reader.uint32()));
                            break;
                        }
                    case 9: {
                            if (!(message.aftereventBattledCars && message.aftereventBattledCars.length))
                                message.aftereventBattledCars = [];
                            if ((tag & 7) === 2) {
                                let end2 = reader.uint32() + reader.pos;
                                while (reader.pos < end2)
                                    message.aftereventBattledCars.push(reader.uint32());
                            } else
                                message.aftereventBattledCars.push(reader.uint32());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("error"))
                    throw $util.ProtocolError("missing required 'error'", { instance: message });
                if (!message.hasOwnProperty("localScore"))
                    throw $util.ProtocolError("missing required 'localScore'", { instance: message });
                return message;
            };

            /**
             * Decodes a LoadGhostExpeditionInfoResponse message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof wm.protobuf.LoadGhostExpeditionInfoResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {wm.protobuf.LoadGhostExpeditionInfoResponse} LoadGhostExpeditionInfoResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LoadGhostExpeditionInfoResponse.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a LoadGhostExpeditionInfoResponse message.
             * @function verify
             * @memberof wm.protobuf.LoadGhostExpeditionInfoResponse
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            LoadGhostExpeditionInfoResponse.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                switch (message.error) {
                default:
                    return "error: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 7:
                case 9:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 16:
                case 17:
                case 18:
                case 19:
                    break;
                }
                if (message.sugorokuPoint != null && message.hasOwnProperty("sugorokuPoint"))
                    if (!$util.isInteger(message.sugorokuPoint))
                        return "sugorokuPoint: integer expected";
                if (message.score != null && message.hasOwnProperty("score"))
                    if (!$util.isInteger(message.score))
                        return "score: integer expected";
                if (!$util.isInteger(message.localScore))
                    return "localScore: integer expected";
                if (message.consecutiveLosses != null && message.hasOwnProperty("consecutiveLosses"))
                    if (!$util.isInteger(message.consecutiveLosses))
                        return "consecutiveLosses: integer expected";
                if (message.rescuedSugorokuPoint != null && message.hasOwnProperty("rescuedSugorokuPoint"))
                    if (!$util.isInteger(message.rescuedSugorokuPoint))
                        return "rescuedSugorokuPoint: integer expected";
                if (message.rescuers != null && message.hasOwnProperty("rescuers")) {
                    if (!Array.isArray(message.rescuers))
                        return "rescuers: array expected";
                    for (let i = 0; i < message.rescuers.length; ++i) {
                        let error = $root.wm.protobuf.CarEntry.verify(message.rescuers[i]);
                        if (error)
                            return "rescuers." + error;
                    }
                }
                if (message.aftereventBattledCars != null && message.hasOwnProperty("aftereventBattledCars")) {
                    if (!Array.isArray(message.aftereventBattledCars))
                        return "aftereventBattledCars: array expected";
                    for (let i = 0; i < message.aftereventBattledCars.length; ++i)
                        if (!$util.isInteger(message.aftereventBattledCars[i]))
                            return "aftereventBattledCars: integer[] expected";
                }
                return null;
            };

            /**
             * Creates a LoadGhostExpeditionInfoResponse message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof wm.protobuf.LoadGhostExpeditionInfoResponse
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {wm.protobuf.LoadGhostExpeditionInfoResponse} LoadGhostExpeditionInfoResponse
             */
            LoadGhostExpeditionInfoResponse.fromObject = function fromObject(object) {
                if (object instanceof $root.wm.protobuf.LoadGhostExpeditionInfoResponse)
                    return object;
                let message = new $root.wm.protobuf.LoadGhostExpeditionInfoResponse();
                switch (object.error) {
                default:
                    if (typeof object.error === "number") {
                        message.error = object.error;
                        break;
                    }
                    break;
                case "ERR_SUCCESS":
                case 0:
                    message.error = 0;
                    break;
                case "ERR_REQUEST":
                case 1:
                    message.error = 1;
                    break;
                case "ERR_NOT_FOUND":
                case 2:
                    message.error = 2;
                    break;
                case "ERR_ID_SERVER":
                case 3:
                    message.error = 3;
                    break;
                case "ERR_ID_BANNED":
                case 4:
                    message.error = 4;
                    break;
                case "ERR_USER_LOCKED":
                case 5:
                    message.error = 5;
                    break;
                case "ERR_USER_VERSION":
                case 6:
                    message.error = 6;
                    break;
                case "ERR_NAME_CONFLICTED":
                case 7:
                    message.error = 7;
                    break;
                case "ERR_FORBIDDEN":
                case 9:
                    message.error = 9;
                    break;
                case "ERR_USER_SUCCEEDED":
                case 11:
                    message.error = 11;
                    break;
                case "ERR_BEING_TRANSFERRED":
                case 12:
                    message.error = 12;
                    break;
                case "ERR_SCRATCH_LOCKED":
                case 13:
                    message.error = 13;
                    break;
                case "ERR_BINGO_REVENGE_LOCKED":
                case 14:
                    message.error = 14;
                    break;
                case "ERR_BINGO_ALREDY_LINKED":
                case 15:
                    message.error = 15;
                    break;
                case "ERR_BINGO_FINISHED":
                case 16:
                    message.error = 16;
                    break;
                case "ERR_BINGO_REACHED_MAX_USER":
                case 17:
                    message.error = 17;
                    break;
                case "ERR_CAR_NOT_FOUND":
                case 18:
                    message.error = 18;
                    break;
                case "ERR_BINGO_CARD_NOT_FOUND":
                case 19:
                    message.error = 19;
                    break;
                }
                if (object.sugorokuPoint != null)
                    message.sugorokuPoint = object.sugorokuPoint >>> 0;
                if (object.score != null)
                    message.score = object.score >>> 0;
                if (object.localScore != null)
                    message.localScore = object.localScore >>> 0;
                if (object.consecutiveLosses != null)
                    message.consecutiveLosses = object.consecutiveLosses >>> 0;
                if (object.rescuedSugorokuPoint != null)
                    message.rescuedSugorokuPoint = object.rescuedSugorokuPoint >>> 0;
                if (object.rescuers) {
                    if (!Array.isArray(object.rescuers))
                        throw TypeError(".wm.protobuf.LoadGhostExpeditionInfoResponse.rescuers: array expected");
                    message.rescuers = [];
                    for (let i = 0; i < object.rescuers.length; ++i) {
                        if (typeof object.rescuers[i] !== "object")
                            throw TypeError(".wm.protobuf.LoadGhostExpeditionInfoResponse.rescuers: object expected");
                        message.rescuers[i] = $root.wm.protobuf.CarEntry.fromObject(object.rescuers[i]);
                    }
                }
                if (object.aftereventBattledCars) {
                    if (!Array.isArray(object.aftereventBattledCars))
                        throw TypeError(".wm.protobuf.LoadGhostExpeditionInfoResponse.aftereventBattledCars: array expected");
                    message.aftereventBattledCars = [];
                    for (let i = 0; i < object.aftereventBattledCars.length; ++i)
                        message.aftereventBattledCars[i] = object.aftereventBattledCars[i] >>> 0;
                }
                return message;
            };

            /**
             * Creates a plain object from a LoadGhostExpeditionInfoResponse message. Also converts values to other types if specified.
             * @function toObject
             * @memberof wm.protobuf.LoadGhostExpeditionInfoResponse
             * @static
             * @param {wm.protobuf.LoadGhostExpeditionInfoResponse} message LoadGhostExpeditionInfoResponse
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            LoadGhostExpeditionInfoResponse.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults) {
                    object.rescuers = [];
                    object.aftereventBattledCars = [];
                }
                if (options.defaults) {
                    object.error = options.enums === String ? "ERR_SUCCESS" : 0;
                    object.sugorokuPoint = 0;
                    object.score = 0;
                    object.localScore = 0;
                    object.consecutiveLosses = 0;
                    object.rescuedSugorokuPoint = 0;
                }
                if (message.error != null && message.hasOwnProperty("error"))
                    object.error = options.enums === String ? $root.wm.protobuf.ErrorCode[message.error] === undefined ? message.error : $root.wm.protobuf.ErrorCode[message.error] : message.error;
                if (message.sugorokuPoint != null && message.hasOwnProperty("sugorokuPoint"))
                    object.sugorokuPoint = message.sugorokuPoint;
                if (message.score != null && message.hasOwnProperty("score"))
                    object.score = message.score;
                if (message.localScore != null && message.hasOwnProperty("localScore"))
                    object.localScore = message.localScore;
                if (message.consecutiveLosses != null && message.hasOwnProperty("consecutiveLosses"))
                    object.consecutiveLosses = message.consecutiveLosses;
                if (message.rescuedSugorokuPoint != null && message.hasOwnProperty("rescuedSugorokuPoint"))
                    object.rescuedSugorokuPoint = message.rescuedSugorokuPoint;
                if (message.rescuers && message.rescuers.length) {
                    object.rescuers = [];
                    for (let j = 0; j < message.rescuers.length; ++j)
                        object.rescuers[j] = $root.wm.protobuf.CarEntry.toObject(message.rescuers[j], options);
                }
                if (message.aftereventBattledCars && message.aftereventBattledCars.length) {
                    object.aftereventBattledCars = [];
                    for (let j = 0; j < message.aftereventBattledCars.length; ++j)
                        object.aftereventBattledCars[j] = message.aftereventBattledCars[j];
                }
                return object;
            };

            /**
             * Converts this LoadGhostExpeditionInfoResponse to JSON.
             * @function toJSON
             * @memberof wm.protobuf.LoadGhostExpeditionInfoResponse
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            LoadGhostExpeditionInfoResponse.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for LoadGhostExpeditionInfoResponse
             * @function getTypeUrl
             * @memberof wm.protobuf.LoadGhostExpeditionInfoResponse
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            LoadGhostExpeditionInfoResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/wm.protobuf.LoadGhostExpeditionInfoResponse";
            };

            return LoadGhostExpeditionInfoResponse;
        })();

        protobuf.LoadGhostExpeditionTargetByPathRequest = (function() {

            /**
             * Properties of a LoadGhostExpeditionTargetByPathRequest.
             * @memberof wm.protobuf
             * @interface ILoadGhostExpeditionTargetByPathRequest
             * @property {number} ghostExpeditionId LoadGhostExpeditionTargetByPathRequest ghostExpeditionId
             * @property {number} carId LoadGhostExpeditionTargetByPathRequest carId
             */

            /**
             * Constructs a new LoadGhostExpeditionTargetByPathRequest.
             * @memberof wm.protobuf
             * @classdesc Represents a LoadGhostExpeditionTargetByPathRequest.
             * @implements ILoadGhostExpeditionTargetByPathRequest
             * @constructor
             * @param {wm.protobuf.ILoadGhostExpeditionTargetByPathRequest=} [properties] Properties to set
             */
            function LoadGhostExpeditionTargetByPathRequest(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * LoadGhostExpeditionTargetByPathRequest ghostExpeditionId.
             * @member {number} ghostExpeditionId
             * @memberof wm.protobuf.LoadGhostExpeditionTargetByPathRequest
             * @instance
             */
            LoadGhostExpeditionTargetByPathRequest.prototype.ghostExpeditionId = 0;

            /**
             * LoadGhostExpeditionTargetByPathRequest carId.
             * @member {number} carId
             * @memberof wm.protobuf.LoadGhostExpeditionTargetByPathRequest
             * @instance
             */
            LoadGhostExpeditionTargetByPathRequest.prototype.carId = 0;

            /**
             * Creates a new LoadGhostExpeditionTargetByPathRequest instance using the specified properties.
             * @function create
             * @memberof wm.protobuf.LoadGhostExpeditionTargetByPathRequest
             * @static
             * @param {wm.protobuf.ILoadGhostExpeditionTargetByPathRequest=} [properties] Properties to set
             * @returns {wm.protobuf.LoadGhostExpeditionTargetByPathRequest} LoadGhostExpeditionTargetByPathRequest instance
             */
            LoadGhostExpeditionTargetByPathRequest.create = function create(properties) {
                return new LoadGhostExpeditionTargetByPathRequest(properties);
            };

            /**
             * Encodes the specified LoadGhostExpeditionTargetByPathRequest message. Does not implicitly {@link wm.protobuf.LoadGhostExpeditionTargetByPathRequest.verify|verify} messages.
             * @function encode
             * @memberof wm.protobuf.LoadGhostExpeditionTargetByPathRequest
             * @static
             * @param {wm.protobuf.ILoadGhostExpeditionTargetByPathRequest} message LoadGhostExpeditionTargetByPathRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LoadGhostExpeditionTargetByPathRequest.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.ghostExpeditionId);
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.carId);
                return writer;
            };

            /**
             * Encodes the specified LoadGhostExpeditionTargetByPathRequest message, length delimited. Does not implicitly {@link wm.protobuf.LoadGhostExpeditionTargetByPathRequest.verify|verify} messages.
             * @function encodeDelimited
             * @memberof wm.protobuf.LoadGhostExpeditionTargetByPathRequest
             * @static
             * @param {wm.protobuf.ILoadGhostExpeditionTargetByPathRequest} message LoadGhostExpeditionTargetByPathRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LoadGhostExpeditionTargetByPathRequest.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a LoadGhostExpeditionTargetByPathRequest message from the specified reader or buffer.
             * @function decode
             * @memberof wm.protobuf.LoadGhostExpeditionTargetByPathRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {wm.protobuf.LoadGhostExpeditionTargetByPathRequest} LoadGhostExpeditionTargetByPathRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LoadGhostExpeditionTargetByPathRequest.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.wm.protobuf.LoadGhostExpeditionTargetByPathRequest();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.ghostExpeditionId = reader.uint32();
                            break;
                        }
                    case 2: {
                            message.carId = reader.uint32();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("ghostExpeditionId"))
                    throw $util.ProtocolError("missing required 'ghostExpeditionId'", { instance: message });
                if (!message.hasOwnProperty("carId"))
                    throw $util.ProtocolError("missing required 'carId'", { instance: message });
                return message;
            };

            /**
             * Decodes a LoadGhostExpeditionTargetByPathRequest message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof wm.protobuf.LoadGhostExpeditionTargetByPathRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {wm.protobuf.LoadGhostExpeditionTargetByPathRequest} LoadGhostExpeditionTargetByPathRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LoadGhostExpeditionTargetByPathRequest.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a LoadGhostExpeditionTargetByPathRequest message.
             * @function verify
             * @memberof wm.protobuf.LoadGhostExpeditionTargetByPathRequest
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            LoadGhostExpeditionTargetByPathRequest.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (!$util.isInteger(message.ghostExpeditionId))
                    return "ghostExpeditionId: integer expected";
                if (!$util.isInteger(message.carId))
                    return "carId: integer expected";
                return null;
            };

            /**
             * Creates a LoadGhostExpeditionTargetByPathRequest message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof wm.protobuf.LoadGhostExpeditionTargetByPathRequest
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {wm.protobuf.LoadGhostExpeditionTargetByPathRequest} LoadGhostExpeditionTargetByPathRequest
             */
            LoadGhostExpeditionTargetByPathRequest.fromObject = function fromObject(object) {
                if (object instanceof $root.wm.protobuf.LoadGhostExpeditionTargetByPathRequest)
                    return object;
                let message = new $root.wm.protobuf.LoadGhostExpeditionTargetByPathRequest();
                if (object.ghostExpeditionId != null)
                    message.ghostExpeditionId = object.ghostExpeditionId >>> 0;
                if (object.carId != null)
                    message.carId = object.carId >>> 0;
                return message;
            };

            /**
             * Creates a plain object from a LoadGhostExpeditionTargetByPathRequest message. Also converts values to other types if specified.
             * @function toObject
             * @memberof wm.protobuf.LoadGhostExpeditionTargetByPathRequest
             * @static
             * @param {wm.protobuf.LoadGhostExpeditionTargetByPathRequest} message LoadGhostExpeditionTargetByPathRequest
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            LoadGhostExpeditionTargetByPathRequest.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.ghostExpeditionId = 0;
                    object.carId = 0;
                }
                if (message.ghostExpeditionId != null && message.hasOwnProperty("ghostExpeditionId"))
                    object.ghostExpeditionId = message.ghostExpeditionId;
                if (message.carId != null && message.hasOwnProperty("carId"))
                    object.carId = message.carId;
                return object;
            };

            /**
             * Converts this LoadGhostExpeditionTargetByPathRequest to JSON.
             * @function toJSON
             * @memberof wm.protobuf.LoadGhostExpeditionTargetByPathRequest
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            LoadGhostExpeditionTargetByPathRequest.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for LoadGhostExpeditionTargetByPathRequest
             * @function getTypeUrl
             * @memberof wm.protobuf.LoadGhostExpeditionTargetByPathRequest
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            LoadGhostExpeditionTargetByPathRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/wm.protobuf.LoadGhostExpeditionTargetByPathRequest";
            };

            return LoadGhostExpeditionTargetByPathRequest;
        })();

        protobuf.LoadGhostExpeditionTargetByPathResponse = (function() {

            /**
             * Properties of a LoadGhostExpeditionTargetByPathResponse.
             * @memberof wm.protobuf
             * @interface ILoadGhostExpeditionTargetByPathResponse
             * @property {wm.protobuf.ErrorCode} error LoadGhostExpeditionTargetByPathResponse error
             * @property {Array.<wm.protobuf.LoadGhostExpeditionTargetByPathResponse.IAreaStats>|null} [areas] LoadGhostExpeditionTargetByPathResponse areas
             * @property {wm.protobuf.PathSelectionMethod|null} [selectionMethod] LoadGhostExpeditionTargetByPathResponse selectionMethod
             */

            /**
             * Constructs a new LoadGhostExpeditionTargetByPathResponse.
             * @memberof wm.protobuf
             * @classdesc Represents a LoadGhostExpeditionTargetByPathResponse.
             * @implements ILoadGhostExpeditionTargetByPathResponse
             * @constructor
             * @param {wm.protobuf.ILoadGhostExpeditionTargetByPathResponse=} [properties] Properties to set
             */
            function LoadGhostExpeditionTargetByPathResponse(properties) {
                this.areas = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * LoadGhostExpeditionTargetByPathResponse error.
             * @member {wm.protobuf.ErrorCode} error
             * @memberof wm.protobuf.LoadGhostExpeditionTargetByPathResponse
             * @instance
             */
            LoadGhostExpeditionTargetByPathResponse.prototype.error = 0;

            /**
             * LoadGhostExpeditionTargetByPathResponse areas.
             * @member {Array.<wm.protobuf.LoadGhostExpeditionTargetByPathResponse.IAreaStats>} areas
             * @memberof wm.protobuf.LoadGhostExpeditionTargetByPathResponse
             * @instance
             */
            LoadGhostExpeditionTargetByPathResponse.prototype.areas = $util.emptyArray;

            /**
             * LoadGhostExpeditionTargetByPathResponse selectionMethod.
             * @member {wm.protobuf.PathSelectionMethod} selectionMethod
             * @memberof wm.protobuf.LoadGhostExpeditionTargetByPathResponse
             * @instance
             */
            LoadGhostExpeditionTargetByPathResponse.prototype.selectionMethod = 1;

            /**
             * Creates a new LoadGhostExpeditionTargetByPathResponse instance using the specified properties.
             * @function create
             * @memberof wm.protobuf.LoadGhostExpeditionTargetByPathResponse
             * @static
             * @param {wm.protobuf.ILoadGhostExpeditionTargetByPathResponse=} [properties] Properties to set
             * @returns {wm.protobuf.LoadGhostExpeditionTargetByPathResponse} LoadGhostExpeditionTargetByPathResponse instance
             */
            LoadGhostExpeditionTargetByPathResponse.create = function create(properties) {
                return new LoadGhostExpeditionTargetByPathResponse(properties);
            };

            /**
             * Encodes the specified LoadGhostExpeditionTargetByPathResponse message. Does not implicitly {@link wm.protobuf.LoadGhostExpeditionTargetByPathResponse.verify|verify} messages.
             * @function encode
             * @memberof wm.protobuf.LoadGhostExpeditionTargetByPathResponse
             * @static
             * @param {wm.protobuf.ILoadGhostExpeditionTargetByPathResponse} message LoadGhostExpeditionTargetByPathResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LoadGhostExpeditionTargetByPathResponse.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
                if (message.areas != null && message.areas.length)
                    for (let i = 0; i < message.areas.length; ++i)
                        $root.wm.protobuf.LoadGhostExpeditionTargetByPathResponse.AreaStats.encode(message.areas[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                if (message.selectionMethod != null && Object.hasOwnProperty.call(message, "selectionMethod"))
                    writer.uint32(/* id 3, wireType 0 =*/24).int32(message.selectionMethod);
                return writer;
            };

            /**
             * Encodes the specified LoadGhostExpeditionTargetByPathResponse message, length delimited. Does not implicitly {@link wm.protobuf.LoadGhostExpeditionTargetByPathResponse.verify|verify} messages.
             * @function encodeDelimited
             * @memberof wm.protobuf.LoadGhostExpeditionTargetByPathResponse
             * @static
             * @param {wm.protobuf.ILoadGhostExpeditionTargetByPathResponse} message LoadGhostExpeditionTargetByPathResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LoadGhostExpeditionTargetByPathResponse.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a LoadGhostExpeditionTargetByPathResponse message from the specified reader or buffer.
             * @function decode
             * @memberof wm.protobuf.LoadGhostExpeditionTargetByPathResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {wm.protobuf.LoadGhostExpeditionTargetByPathResponse} LoadGhostExpeditionTargetByPathResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LoadGhostExpeditionTargetByPathResponse.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.wm.protobuf.LoadGhostExpeditionTargetByPathResponse();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.error = reader.int32();
                            break;
                        }
                    case 2: {
                            if (!(message.areas && message.areas.length))
                                message.areas = [];
                            message.areas.push($root.wm.protobuf.LoadGhostExpeditionTargetByPathResponse.AreaStats.decode(reader, reader.uint32()));
                            break;
                        }
                    case 3: {
                            message.selectionMethod = reader.int32();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("error"))
                    throw $util.ProtocolError("missing required 'error'", { instance: message });
                return message;
            };

            /**
             * Decodes a LoadGhostExpeditionTargetByPathResponse message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof wm.protobuf.LoadGhostExpeditionTargetByPathResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {wm.protobuf.LoadGhostExpeditionTargetByPathResponse} LoadGhostExpeditionTargetByPathResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LoadGhostExpeditionTargetByPathResponse.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a LoadGhostExpeditionTargetByPathResponse message.
             * @function verify
             * @memberof wm.protobuf.LoadGhostExpeditionTargetByPathResponse
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            LoadGhostExpeditionTargetByPathResponse.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                switch (message.error) {
                default:
                    return "error: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 7:
                case 9:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 16:
                case 17:
                case 18:
                case 19:
                    break;
                }
                if (message.areas != null && message.hasOwnProperty("areas")) {
                    if (!Array.isArray(message.areas))
                        return "areas: array expected";
                    for (let i = 0; i < message.areas.length; ++i) {
                        let error = $root.wm.protobuf.LoadGhostExpeditionTargetByPathResponse.AreaStats.verify(message.areas[i]);
                        if (error)
                            return "areas." + error;
                    }
                }
                if (message.selectionMethod != null && message.hasOwnProperty("selectionMethod"))
                    switch (message.selectionMethod) {
                    default:
                        return "selectionMethod: enum value expected";
                    case 1:
                    case 2:
                    case 3:
                    case 4:
                    case 5:
                        break;
                    }
                return null;
            };

            /**
             * Creates a LoadGhostExpeditionTargetByPathResponse message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof wm.protobuf.LoadGhostExpeditionTargetByPathResponse
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {wm.protobuf.LoadGhostExpeditionTargetByPathResponse} LoadGhostExpeditionTargetByPathResponse
             */
            LoadGhostExpeditionTargetByPathResponse.fromObject = function fromObject(object) {
                if (object instanceof $root.wm.protobuf.LoadGhostExpeditionTargetByPathResponse)
                    return object;
                let message = new $root.wm.protobuf.LoadGhostExpeditionTargetByPathResponse();
                switch (object.error) {
                default:
                    if (typeof object.error === "number") {
                        message.error = object.error;
                        break;
                    }
                    break;
                case "ERR_SUCCESS":
                case 0:
                    message.error = 0;
                    break;
                case "ERR_REQUEST":
                case 1:
                    message.error = 1;
                    break;
                case "ERR_NOT_FOUND":
                case 2:
                    message.error = 2;
                    break;
                case "ERR_ID_SERVER":
                case 3:
                    message.error = 3;
                    break;
                case "ERR_ID_BANNED":
                case 4:
                    message.error = 4;
                    break;
                case "ERR_USER_LOCKED":
                case 5:
                    message.error = 5;
                    break;
                case "ERR_USER_VERSION":
                case 6:
                    message.error = 6;
                    break;
                case "ERR_NAME_CONFLICTED":
                case 7:
                    message.error = 7;
                    break;
                case "ERR_FORBIDDEN":
                case 9:
                    message.error = 9;
                    break;
                case "ERR_USER_SUCCEEDED":
                case 11:
                    message.error = 11;
                    break;
                case "ERR_BEING_TRANSFERRED":
                case 12:
                    message.error = 12;
                    break;
                case "ERR_SCRATCH_LOCKED":
                case 13:
                    message.error = 13;
                    break;
                case "ERR_BINGO_REVENGE_LOCKED":
                case 14:
                    message.error = 14;
                    break;
                case "ERR_BINGO_ALREDY_LINKED":
                case 15:
                    message.error = 15;
                    break;
                case "ERR_BINGO_FINISHED":
                case 16:
                    message.error = 16;
                    break;
                case "ERR_BINGO_REACHED_MAX_USER":
                case 17:
                    message.error = 17;
                    break;
                case "ERR_CAR_NOT_FOUND":
                case 18:
                    message.error = 18;
                    break;
                case "ERR_BINGO_CARD_NOT_FOUND":
                case 19:
                    message.error = 19;
                    break;
                }
                if (object.areas) {
                    if (!Array.isArray(object.areas))
                        throw TypeError(".wm.protobuf.LoadGhostExpeditionTargetByPathResponse.areas: array expected");
                    message.areas = [];
                    for (let i = 0; i < object.areas.length; ++i) {
                        if (typeof object.areas[i] !== "object")
                            throw TypeError(".wm.protobuf.LoadGhostExpeditionTargetByPathResponse.areas: object expected");
                        message.areas[i] = $root.wm.protobuf.LoadGhostExpeditionTargetByPathResponse.AreaStats.fromObject(object.areas[i]);
                    }
                }
                switch (object.selectionMethod) {
                default:
                    if (typeof object.selectionMethod === "number") {
                        message.selectionMethod = object.selectionMethod;
                        break;
                    }
                    break;
                case "PATH_NEW":
                case 1:
                    message.selectionMethod = 1;
                    break;
                case "PATH_PLAIN":
                case 2:
                    message.selectionMethod = 2;
                    break;
                case "PATH_FRIEND":
                case 3:
                    message.selectionMethod = 3;
                    break;
                case "PATH_NORMAL":
                case 4:
                    message.selectionMethod = 4;
                    break;
                case "PATH_CHALLENGER":
                case 5:
                    message.selectionMethod = 5;
                    break;
                }
                return message;
            };

            /**
             * Creates a plain object from a LoadGhostExpeditionTargetByPathResponse message. Also converts values to other types if specified.
             * @function toObject
             * @memberof wm.protobuf.LoadGhostExpeditionTargetByPathResponse
             * @static
             * @param {wm.protobuf.LoadGhostExpeditionTargetByPathResponse} message LoadGhostExpeditionTargetByPathResponse
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            LoadGhostExpeditionTargetByPathResponse.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.areas = [];
                if (options.defaults) {
                    object.error = options.enums === String ? "ERR_SUCCESS" : 0;
                    object.selectionMethod = options.enums === String ? "PATH_NEW" : 1;
                }
                if (message.error != null && message.hasOwnProperty("error"))
                    object.error = options.enums === String ? $root.wm.protobuf.ErrorCode[message.error] === undefined ? message.error : $root.wm.protobuf.ErrorCode[message.error] : message.error;
                if (message.areas && message.areas.length) {
                    object.areas = [];
                    for (let j = 0; j < message.areas.length; ++j)
                        object.areas[j] = $root.wm.protobuf.LoadGhostExpeditionTargetByPathResponse.AreaStats.toObject(message.areas[j], options);
                }
                if (message.selectionMethod != null && message.hasOwnProperty("selectionMethod"))
                    object.selectionMethod = options.enums === String ? $root.wm.protobuf.PathSelectionMethod[message.selectionMethod] === undefined ? message.selectionMethod : $root.wm.protobuf.PathSelectionMethod[message.selectionMethod] : message.selectionMethod;
                return object;
            };

            /**
             * Converts this LoadGhostExpeditionTargetByPathResponse to JSON.
             * @function toJSON
             * @memberof wm.protobuf.LoadGhostExpeditionTargetByPathResponse
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            LoadGhostExpeditionTargetByPathResponse.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for LoadGhostExpeditionTargetByPathResponse
             * @function getTypeUrl
             * @memberof wm.protobuf.LoadGhostExpeditionTargetByPathResponse
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            LoadGhostExpeditionTargetByPathResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/wm.protobuf.LoadGhostExpeditionTargetByPathResponse";
            };

            LoadGhostExpeditionTargetByPathResponse.AreaStats = (function() {

                /**
                 * Properties of an AreaStats.
                 * @memberof wm.protobuf.LoadGhostExpeditionTargetByPathResponse
                 * @interface IAreaStats
                 * @property {number} area AreaStats area
                 * @property {number} path AreaStats path
                 * @property {Array.<wm.protobuf.LoadGhostExpeditionTargetByPathResponse.AreaStats.IWantedInfo>|null} [wantedInfo] AreaStats wantedInfo
                 */

                /**
                 * Constructs a new AreaStats.
                 * @memberof wm.protobuf.LoadGhostExpeditionTargetByPathResponse
                 * @classdesc Represents an AreaStats.
                 * @implements IAreaStats
                 * @constructor
                 * @param {wm.protobuf.LoadGhostExpeditionTargetByPathResponse.IAreaStats=} [properties] Properties to set
                 */
                function AreaStats(properties) {
                    this.wantedInfo = [];
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * AreaStats area.
                 * @member {number} area
                 * @memberof wm.protobuf.LoadGhostExpeditionTargetByPathResponse.AreaStats
                 * @instance
                 */
                AreaStats.prototype.area = 0;

                /**
                 * AreaStats path.
                 * @member {number} path
                 * @memberof wm.protobuf.LoadGhostExpeditionTargetByPathResponse.AreaStats
                 * @instance
                 */
                AreaStats.prototype.path = 0;

                /**
                 * AreaStats wantedInfo.
                 * @member {Array.<wm.protobuf.LoadGhostExpeditionTargetByPathResponse.AreaStats.IWantedInfo>} wantedInfo
                 * @memberof wm.protobuf.LoadGhostExpeditionTargetByPathResponse.AreaStats
                 * @instance
                 */
                AreaStats.prototype.wantedInfo = $util.emptyArray;

                /**
                 * Creates a new AreaStats instance using the specified properties.
                 * @function create
                 * @memberof wm.protobuf.LoadGhostExpeditionTargetByPathResponse.AreaStats
                 * @static
                 * @param {wm.protobuf.LoadGhostExpeditionTargetByPathResponse.IAreaStats=} [properties] Properties to set
                 * @returns {wm.protobuf.LoadGhostExpeditionTargetByPathResponse.AreaStats} AreaStats instance
                 */
                AreaStats.create = function create(properties) {
                    return new AreaStats(properties);
                };

                /**
                 * Encodes the specified AreaStats message. Does not implicitly {@link wm.protobuf.LoadGhostExpeditionTargetByPathResponse.AreaStats.verify|verify} messages.
                 * @function encode
                 * @memberof wm.protobuf.LoadGhostExpeditionTargetByPathResponse.AreaStats
                 * @static
                 * @param {wm.protobuf.LoadGhostExpeditionTargetByPathResponse.IAreaStats} message AreaStats message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                AreaStats.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.area);
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.path);
                    if (message.wantedInfo != null && message.wantedInfo.length)
                        for (let i = 0; i < message.wantedInfo.length; ++i)
                            $root.wm.protobuf.LoadGhostExpeditionTargetByPathResponse.AreaStats.WantedInfo.encode(message.wantedInfo[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    return writer;
                };

                /**
                 * Encodes the specified AreaStats message, length delimited. Does not implicitly {@link wm.protobuf.LoadGhostExpeditionTargetByPathResponse.AreaStats.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof wm.protobuf.LoadGhostExpeditionTargetByPathResponse.AreaStats
                 * @static
                 * @param {wm.protobuf.LoadGhostExpeditionTargetByPathResponse.IAreaStats} message AreaStats message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                AreaStats.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes an AreaStats message from the specified reader or buffer.
                 * @function decode
                 * @memberof wm.protobuf.LoadGhostExpeditionTargetByPathResponse.AreaStats
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {wm.protobuf.LoadGhostExpeditionTargetByPathResponse.AreaStats} AreaStats
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                AreaStats.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.wm.protobuf.LoadGhostExpeditionTargetByPathResponse.AreaStats();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.area = reader.uint32();
                                break;
                            }
                        case 2: {
                                message.path = reader.uint32();
                                break;
                            }
                        case 3: {
                                if (!(message.wantedInfo && message.wantedInfo.length))
                                    message.wantedInfo = [];
                                message.wantedInfo.push($root.wm.protobuf.LoadGhostExpeditionTargetByPathResponse.AreaStats.WantedInfo.decode(reader, reader.uint32()));
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    if (!message.hasOwnProperty("area"))
                        throw $util.ProtocolError("missing required 'area'", { instance: message });
                    if (!message.hasOwnProperty("path"))
                        throw $util.ProtocolError("missing required 'path'", { instance: message });
                    return message;
                };

                /**
                 * Decodes an AreaStats message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof wm.protobuf.LoadGhostExpeditionTargetByPathResponse.AreaStats
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {wm.protobuf.LoadGhostExpeditionTargetByPathResponse.AreaStats} AreaStats
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                AreaStats.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies an AreaStats message.
                 * @function verify
                 * @memberof wm.protobuf.LoadGhostExpeditionTargetByPathResponse.AreaStats
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                AreaStats.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (!$util.isInteger(message.area))
                        return "area: integer expected";
                    if (!$util.isInteger(message.path))
                        return "path: integer expected";
                    if (message.wantedInfo != null && message.hasOwnProperty("wantedInfo")) {
                        if (!Array.isArray(message.wantedInfo))
                            return "wantedInfo: array expected";
                        for (let i = 0; i < message.wantedInfo.length; ++i) {
                            let error = $root.wm.protobuf.LoadGhostExpeditionTargetByPathResponse.AreaStats.WantedInfo.verify(message.wantedInfo[i]);
                            if (error)
                                return "wantedInfo." + error;
                        }
                    }
                    return null;
                };

                /**
                 * Creates an AreaStats message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof wm.protobuf.LoadGhostExpeditionTargetByPathResponse.AreaStats
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {wm.protobuf.LoadGhostExpeditionTargetByPathResponse.AreaStats} AreaStats
                 */
                AreaStats.fromObject = function fromObject(object) {
                    if (object instanceof $root.wm.protobuf.LoadGhostExpeditionTargetByPathResponse.AreaStats)
                        return object;
                    let message = new $root.wm.protobuf.LoadGhostExpeditionTargetByPathResponse.AreaStats();
                    if (object.area != null)
                        message.area = object.area >>> 0;
                    if (object.path != null)
                        message.path = object.path >>> 0;
                    if (object.wantedInfo) {
                        if (!Array.isArray(object.wantedInfo))
                            throw TypeError(".wm.protobuf.LoadGhostExpeditionTargetByPathResponse.AreaStats.wantedInfo: array expected");
                        message.wantedInfo = [];
                        for (let i = 0; i < object.wantedInfo.length; ++i) {
                            if (typeof object.wantedInfo[i] !== "object")
                                throw TypeError(".wm.protobuf.LoadGhostExpeditionTargetByPathResponse.AreaStats.wantedInfo: object expected");
                            message.wantedInfo[i] = $root.wm.protobuf.LoadGhostExpeditionTargetByPathResponse.AreaStats.WantedInfo.fromObject(object.wantedInfo[i]);
                        }
                    }
                    return message;
                };

                /**
                 * Creates a plain object from an AreaStats message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof wm.protobuf.LoadGhostExpeditionTargetByPathResponse.AreaStats
                 * @static
                 * @param {wm.protobuf.LoadGhostExpeditionTargetByPathResponse.AreaStats} message AreaStats
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                AreaStats.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.arrays || options.defaults)
                        object.wantedInfo = [];
                    if (options.defaults) {
                        object.area = 0;
                        object.path = 0;
                    }
                    if (message.area != null && message.hasOwnProperty("area"))
                        object.area = message.area;
                    if (message.path != null && message.hasOwnProperty("path"))
                        object.path = message.path;
                    if (message.wantedInfo && message.wantedInfo.length) {
                        object.wantedInfo = [];
                        for (let j = 0; j < message.wantedInfo.length; ++j)
                            object.wantedInfo[j] = $root.wm.protobuf.LoadGhostExpeditionTargetByPathResponse.AreaStats.WantedInfo.toObject(message.wantedInfo[j], options);
                    }
                    return object;
                };

                /**
                 * Converts this AreaStats to JSON.
                 * @function toJSON
                 * @memberof wm.protobuf.LoadGhostExpeditionTargetByPathResponse.AreaStats
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                AreaStats.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                /**
                 * Gets the default type url for AreaStats
                 * @function getTypeUrl
                 * @memberof wm.protobuf.LoadGhostExpeditionTargetByPathResponse.AreaStats
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                AreaStats.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/wm.protobuf.LoadGhostExpeditionTargetByPathResponse.AreaStats";
                };

                AreaStats.WantedInfo = (function() {

                    /**
                     * Properties of a WantedInfo.
                     * @memberof wm.protobuf.LoadGhostExpeditionTargetByPathResponse.AreaStats
                     * @interface IWantedInfo
                     * @property {number} wantedLevel WantedInfo wantedLevel
                     * @property {number} numOfWantedCars WantedInfo numOfWantedCars
                     */

                    /**
                     * Constructs a new WantedInfo.
                     * @memberof wm.protobuf.LoadGhostExpeditionTargetByPathResponse.AreaStats
                     * @classdesc Represents a WantedInfo.
                     * @implements IWantedInfo
                     * @constructor
                     * @param {wm.protobuf.LoadGhostExpeditionTargetByPathResponse.AreaStats.IWantedInfo=} [properties] Properties to set
                     */
                    function WantedInfo(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * WantedInfo wantedLevel.
                     * @member {number} wantedLevel
                     * @memberof wm.protobuf.LoadGhostExpeditionTargetByPathResponse.AreaStats.WantedInfo
                     * @instance
                     */
                    WantedInfo.prototype.wantedLevel = 0;

                    /**
                     * WantedInfo numOfWantedCars.
                     * @member {number} numOfWantedCars
                     * @memberof wm.protobuf.LoadGhostExpeditionTargetByPathResponse.AreaStats.WantedInfo
                     * @instance
                     */
                    WantedInfo.prototype.numOfWantedCars = 0;

                    /**
                     * Creates a new WantedInfo instance using the specified properties.
                     * @function create
                     * @memberof wm.protobuf.LoadGhostExpeditionTargetByPathResponse.AreaStats.WantedInfo
                     * @static
                     * @param {wm.protobuf.LoadGhostExpeditionTargetByPathResponse.AreaStats.IWantedInfo=} [properties] Properties to set
                     * @returns {wm.protobuf.LoadGhostExpeditionTargetByPathResponse.AreaStats.WantedInfo} WantedInfo instance
                     */
                    WantedInfo.create = function create(properties) {
                        return new WantedInfo(properties);
                    };

                    /**
                     * Encodes the specified WantedInfo message. Does not implicitly {@link wm.protobuf.LoadGhostExpeditionTargetByPathResponse.AreaStats.WantedInfo.verify|verify} messages.
                     * @function encode
                     * @memberof wm.protobuf.LoadGhostExpeditionTargetByPathResponse.AreaStats.WantedInfo
                     * @static
                     * @param {wm.protobuf.LoadGhostExpeditionTargetByPathResponse.AreaStats.IWantedInfo} message WantedInfo message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    WantedInfo.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.wantedLevel);
                        writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.numOfWantedCars);
                        return writer;
                    };

                    /**
                     * Encodes the specified WantedInfo message, length delimited. Does not implicitly {@link wm.protobuf.LoadGhostExpeditionTargetByPathResponse.AreaStats.WantedInfo.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof wm.protobuf.LoadGhostExpeditionTargetByPathResponse.AreaStats.WantedInfo
                     * @static
                     * @param {wm.protobuf.LoadGhostExpeditionTargetByPathResponse.AreaStats.IWantedInfo} message WantedInfo message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    WantedInfo.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a WantedInfo message from the specified reader or buffer.
                     * @function decode
                     * @memberof wm.protobuf.LoadGhostExpeditionTargetByPathResponse.AreaStats.WantedInfo
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {wm.protobuf.LoadGhostExpeditionTargetByPathResponse.AreaStats.WantedInfo} WantedInfo
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    WantedInfo.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.wm.protobuf.LoadGhostExpeditionTargetByPathResponse.AreaStats.WantedInfo();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.wantedLevel = reader.uint32();
                                    break;
                                }
                            case 2: {
                                    message.numOfWantedCars = reader.uint32();
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        if (!message.hasOwnProperty("wantedLevel"))
                            throw $util.ProtocolError("missing required 'wantedLevel'", { instance: message });
                        if (!message.hasOwnProperty("numOfWantedCars"))
                            throw $util.ProtocolError("missing required 'numOfWantedCars'", { instance: message });
                        return message;
                    };

                    /**
                     * Decodes a WantedInfo message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof wm.protobuf.LoadGhostExpeditionTargetByPathResponse.AreaStats.WantedInfo
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {wm.protobuf.LoadGhostExpeditionTargetByPathResponse.AreaStats.WantedInfo} WantedInfo
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    WantedInfo.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a WantedInfo message.
                     * @function verify
                     * @memberof wm.protobuf.LoadGhostExpeditionTargetByPathResponse.AreaStats.WantedInfo
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    WantedInfo.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (!$util.isInteger(message.wantedLevel))
                            return "wantedLevel: integer expected";
                        if (!$util.isInteger(message.numOfWantedCars))
                            return "numOfWantedCars: integer expected";
                        return null;
                    };

                    /**
                     * Creates a WantedInfo message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof wm.protobuf.LoadGhostExpeditionTargetByPathResponse.AreaStats.WantedInfo
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {wm.protobuf.LoadGhostExpeditionTargetByPathResponse.AreaStats.WantedInfo} WantedInfo
                     */
                    WantedInfo.fromObject = function fromObject(object) {
                        if (object instanceof $root.wm.protobuf.LoadGhostExpeditionTargetByPathResponse.AreaStats.WantedInfo)
                            return object;
                        let message = new $root.wm.protobuf.LoadGhostExpeditionTargetByPathResponse.AreaStats.WantedInfo();
                        if (object.wantedLevel != null)
                            message.wantedLevel = object.wantedLevel >>> 0;
                        if (object.numOfWantedCars != null)
                            message.numOfWantedCars = object.numOfWantedCars >>> 0;
                        return message;
                    };

                    /**
                     * Creates a plain object from a WantedInfo message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof wm.protobuf.LoadGhostExpeditionTargetByPathResponse.AreaStats.WantedInfo
                     * @static
                     * @param {wm.protobuf.LoadGhostExpeditionTargetByPathResponse.AreaStats.WantedInfo} message WantedInfo
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    WantedInfo.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            object.wantedLevel = 0;
                            object.numOfWantedCars = 0;
                        }
                        if (message.wantedLevel != null && message.hasOwnProperty("wantedLevel"))
                            object.wantedLevel = message.wantedLevel;
                        if (message.numOfWantedCars != null && message.hasOwnProperty("numOfWantedCars"))
                            object.numOfWantedCars = message.numOfWantedCars;
                        return object;
                    };

                    /**
                     * Converts this WantedInfo to JSON.
                     * @function toJSON
                     * @memberof wm.protobuf.LoadGhostExpeditionTargetByPathResponse.AreaStats.WantedInfo
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    WantedInfo.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    /**
                     * Gets the default type url for WantedInfo
                     * @function getTypeUrl
                     * @memberof wm.protobuf.LoadGhostExpeditionTargetByPathResponse.AreaStats.WantedInfo
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    WantedInfo.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/wm.protobuf.LoadGhostExpeditionTargetByPathResponse.AreaStats.WantedInfo";
                    };

                    return WantedInfo;
                })();

                return AreaStats;
            })();

            return LoadGhostExpeditionTargetByPathResponse;
        })();

        protobuf.LoadGhostExpeditionTargetsRequest = (function() {

            /**
             * Properties of a LoadGhostExpeditionTargetsRequest.
             * @memberof wm.protobuf
             * @interface ILoadGhostExpeditionTargetsRequest
             * @property {number} ghostExpeditionId LoadGhostExpeditionTargetsRequest ghostExpeditionId
             * @property {number} carId LoadGhostExpeditionTargetsRequest carId
             * @property {number} path LoadGhostExpeditionTargetsRequest path
             */

            /**
             * Constructs a new LoadGhostExpeditionTargetsRequest.
             * @memberof wm.protobuf
             * @classdesc Represents a LoadGhostExpeditionTargetsRequest.
             * @implements ILoadGhostExpeditionTargetsRequest
             * @constructor
             * @param {wm.protobuf.ILoadGhostExpeditionTargetsRequest=} [properties] Properties to set
             */
            function LoadGhostExpeditionTargetsRequest(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * LoadGhostExpeditionTargetsRequest ghostExpeditionId.
             * @member {number} ghostExpeditionId
             * @memberof wm.protobuf.LoadGhostExpeditionTargetsRequest
             * @instance
             */
            LoadGhostExpeditionTargetsRequest.prototype.ghostExpeditionId = 0;

            /**
             * LoadGhostExpeditionTargetsRequest carId.
             * @member {number} carId
             * @memberof wm.protobuf.LoadGhostExpeditionTargetsRequest
             * @instance
             */
            LoadGhostExpeditionTargetsRequest.prototype.carId = 0;

            /**
             * LoadGhostExpeditionTargetsRequest path.
             * @member {number} path
             * @memberof wm.protobuf.LoadGhostExpeditionTargetsRequest
             * @instance
             */
            LoadGhostExpeditionTargetsRequest.prototype.path = 0;

            /**
             * Creates a new LoadGhostExpeditionTargetsRequest instance using the specified properties.
             * @function create
             * @memberof wm.protobuf.LoadGhostExpeditionTargetsRequest
             * @static
             * @param {wm.protobuf.ILoadGhostExpeditionTargetsRequest=} [properties] Properties to set
             * @returns {wm.protobuf.LoadGhostExpeditionTargetsRequest} LoadGhostExpeditionTargetsRequest instance
             */
            LoadGhostExpeditionTargetsRequest.create = function create(properties) {
                return new LoadGhostExpeditionTargetsRequest(properties);
            };

            /**
             * Encodes the specified LoadGhostExpeditionTargetsRequest message. Does not implicitly {@link wm.protobuf.LoadGhostExpeditionTargetsRequest.verify|verify} messages.
             * @function encode
             * @memberof wm.protobuf.LoadGhostExpeditionTargetsRequest
             * @static
             * @param {wm.protobuf.ILoadGhostExpeditionTargetsRequest} message LoadGhostExpeditionTargetsRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LoadGhostExpeditionTargetsRequest.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.ghostExpeditionId);
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.carId);
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.path);
                return writer;
            };

            /**
             * Encodes the specified LoadGhostExpeditionTargetsRequest message, length delimited. Does not implicitly {@link wm.protobuf.LoadGhostExpeditionTargetsRequest.verify|verify} messages.
             * @function encodeDelimited
             * @memberof wm.protobuf.LoadGhostExpeditionTargetsRequest
             * @static
             * @param {wm.protobuf.ILoadGhostExpeditionTargetsRequest} message LoadGhostExpeditionTargetsRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LoadGhostExpeditionTargetsRequest.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a LoadGhostExpeditionTargetsRequest message from the specified reader or buffer.
             * @function decode
             * @memberof wm.protobuf.LoadGhostExpeditionTargetsRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {wm.protobuf.LoadGhostExpeditionTargetsRequest} LoadGhostExpeditionTargetsRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LoadGhostExpeditionTargetsRequest.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.wm.protobuf.LoadGhostExpeditionTargetsRequest();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.ghostExpeditionId = reader.uint32();
                            break;
                        }
                    case 2: {
                            message.carId = reader.uint32();
                            break;
                        }
                    case 3: {
                            message.path = reader.uint32();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("ghostExpeditionId"))
                    throw $util.ProtocolError("missing required 'ghostExpeditionId'", { instance: message });
                if (!message.hasOwnProperty("carId"))
                    throw $util.ProtocolError("missing required 'carId'", { instance: message });
                if (!message.hasOwnProperty("path"))
                    throw $util.ProtocolError("missing required 'path'", { instance: message });
                return message;
            };

            /**
             * Decodes a LoadGhostExpeditionTargetsRequest message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof wm.protobuf.LoadGhostExpeditionTargetsRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {wm.protobuf.LoadGhostExpeditionTargetsRequest} LoadGhostExpeditionTargetsRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LoadGhostExpeditionTargetsRequest.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a LoadGhostExpeditionTargetsRequest message.
             * @function verify
             * @memberof wm.protobuf.LoadGhostExpeditionTargetsRequest
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            LoadGhostExpeditionTargetsRequest.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (!$util.isInteger(message.ghostExpeditionId))
                    return "ghostExpeditionId: integer expected";
                if (!$util.isInteger(message.carId))
                    return "carId: integer expected";
                if (!$util.isInteger(message.path))
                    return "path: integer expected";
                return null;
            };

            /**
             * Creates a LoadGhostExpeditionTargetsRequest message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof wm.protobuf.LoadGhostExpeditionTargetsRequest
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {wm.protobuf.LoadGhostExpeditionTargetsRequest} LoadGhostExpeditionTargetsRequest
             */
            LoadGhostExpeditionTargetsRequest.fromObject = function fromObject(object) {
                if (object instanceof $root.wm.protobuf.LoadGhostExpeditionTargetsRequest)
                    return object;
                let message = new $root.wm.protobuf.LoadGhostExpeditionTargetsRequest();
                if (object.ghostExpeditionId != null)
                    message.ghostExpeditionId = object.ghostExpeditionId >>> 0;
                if (object.carId != null)
                    message.carId = object.carId >>> 0;
                if (object.path != null)
                    message.path = object.path >>> 0;
                return message;
            };

            /**
             * Creates a plain object from a LoadGhostExpeditionTargetsRequest message. Also converts values to other types if specified.
             * @function toObject
             * @memberof wm.protobuf.LoadGhostExpeditionTargetsRequest
             * @static
             * @param {wm.protobuf.LoadGhostExpeditionTargetsRequest} message LoadGhostExpeditionTargetsRequest
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            LoadGhostExpeditionTargetsRequest.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.ghostExpeditionId = 0;
                    object.carId = 0;
                    object.path = 0;
                }
                if (message.ghostExpeditionId != null && message.hasOwnProperty("ghostExpeditionId"))
                    object.ghostExpeditionId = message.ghostExpeditionId;
                if (message.carId != null && message.hasOwnProperty("carId"))
                    object.carId = message.carId;
                if (message.path != null && message.hasOwnProperty("path"))
                    object.path = message.path;
                return object;
            };

            /**
             * Converts this LoadGhostExpeditionTargetsRequest to JSON.
             * @function toJSON
             * @memberof wm.protobuf.LoadGhostExpeditionTargetsRequest
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            LoadGhostExpeditionTargetsRequest.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for LoadGhostExpeditionTargetsRequest
             * @function getTypeUrl
             * @memberof wm.protobuf.LoadGhostExpeditionTargetsRequest
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            LoadGhostExpeditionTargetsRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/wm.protobuf.LoadGhostExpeditionTargetsRequest";
            };

            return LoadGhostExpeditionTargetsRequest;
        })();

        protobuf.LoadGhostExpeditionTargetsResponse = (function() {

            /**
             * Properties of a LoadGhostExpeditionTargetsResponse.
             * @memberof wm.protobuf
             * @interface ILoadGhostExpeditionTargetsResponse
             * @property {wm.protobuf.ErrorCode} error LoadGhostExpeditionTargetsResponse error
             * @property {Array.<wm.protobuf.IGhostCar>|null} [candidates] LoadGhostExpeditionTargetsResponse candidates
             * @property {Array.<wm.protobuf.IWantedCar>|null} [wantedCars] LoadGhostExpeditionTargetsResponse wantedCars
             * @property {number} localScore LoadGhostExpeditionTargetsResponse localScore
             * @property {Array.<wm.protobuf.ICarEntry>|null} [recentWinners] LoadGhostExpeditionTargetsResponse recentWinners
             */

            /**
             * Constructs a new LoadGhostExpeditionTargetsResponse.
             * @memberof wm.protobuf
             * @classdesc Represents a LoadGhostExpeditionTargetsResponse.
             * @implements ILoadGhostExpeditionTargetsResponse
             * @constructor
             * @param {wm.protobuf.ILoadGhostExpeditionTargetsResponse=} [properties] Properties to set
             */
            function LoadGhostExpeditionTargetsResponse(properties) {
                this.candidates = [];
                this.wantedCars = [];
                this.recentWinners = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * LoadGhostExpeditionTargetsResponse error.
             * @member {wm.protobuf.ErrorCode} error
             * @memberof wm.protobuf.LoadGhostExpeditionTargetsResponse
             * @instance
             */
            LoadGhostExpeditionTargetsResponse.prototype.error = 0;

            /**
             * LoadGhostExpeditionTargetsResponse candidates.
             * @member {Array.<wm.protobuf.IGhostCar>} candidates
             * @memberof wm.protobuf.LoadGhostExpeditionTargetsResponse
             * @instance
             */
            LoadGhostExpeditionTargetsResponse.prototype.candidates = $util.emptyArray;

            /**
             * LoadGhostExpeditionTargetsResponse wantedCars.
             * @member {Array.<wm.protobuf.IWantedCar>} wantedCars
             * @memberof wm.protobuf.LoadGhostExpeditionTargetsResponse
             * @instance
             */
            LoadGhostExpeditionTargetsResponse.prototype.wantedCars = $util.emptyArray;

            /**
             * LoadGhostExpeditionTargetsResponse localScore.
             * @member {number} localScore
             * @memberof wm.protobuf.LoadGhostExpeditionTargetsResponse
             * @instance
             */
            LoadGhostExpeditionTargetsResponse.prototype.localScore = 0;

            /**
             * LoadGhostExpeditionTargetsResponse recentWinners.
             * @member {Array.<wm.protobuf.ICarEntry>} recentWinners
             * @memberof wm.protobuf.LoadGhostExpeditionTargetsResponse
             * @instance
             */
            LoadGhostExpeditionTargetsResponse.prototype.recentWinners = $util.emptyArray;

            /**
             * Creates a new LoadGhostExpeditionTargetsResponse instance using the specified properties.
             * @function create
             * @memberof wm.protobuf.LoadGhostExpeditionTargetsResponse
             * @static
             * @param {wm.protobuf.ILoadGhostExpeditionTargetsResponse=} [properties] Properties to set
             * @returns {wm.protobuf.LoadGhostExpeditionTargetsResponse} LoadGhostExpeditionTargetsResponse instance
             */
            LoadGhostExpeditionTargetsResponse.create = function create(properties) {
                return new LoadGhostExpeditionTargetsResponse(properties);
            };

            /**
             * Encodes the specified LoadGhostExpeditionTargetsResponse message. Does not implicitly {@link wm.protobuf.LoadGhostExpeditionTargetsResponse.verify|verify} messages.
             * @function encode
             * @memberof wm.protobuf.LoadGhostExpeditionTargetsResponse
             * @static
             * @param {wm.protobuf.ILoadGhostExpeditionTargetsResponse} message LoadGhostExpeditionTargetsResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LoadGhostExpeditionTargetsResponse.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
                if (message.candidates != null && message.candidates.length)
                    for (let i = 0; i < message.candidates.length; ++i)
                        $root.wm.protobuf.GhostCar.encode(message.candidates[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                if (message.wantedCars != null && message.wantedCars.length)
                    for (let i = 0; i < message.wantedCars.length; ++i)
                        $root.wm.protobuf.WantedCar.encode(message.wantedCars[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.localScore);
                if (message.recentWinners != null && message.recentWinners.length)
                    for (let i = 0; i < message.recentWinners.length; ++i)
                        $root.wm.protobuf.CarEntry.encode(message.recentWinners[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified LoadGhostExpeditionTargetsResponse message, length delimited. Does not implicitly {@link wm.protobuf.LoadGhostExpeditionTargetsResponse.verify|verify} messages.
             * @function encodeDelimited
             * @memberof wm.protobuf.LoadGhostExpeditionTargetsResponse
             * @static
             * @param {wm.protobuf.ILoadGhostExpeditionTargetsResponse} message LoadGhostExpeditionTargetsResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LoadGhostExpeditionTargetsResponse.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a LoadGhostExpeditionTargetsResponse message from the specified reader or buffer.
             * @function decode
             * @memberof wm.protobuf.LoadGhostExpeditionTargetsResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {wm.protobuf.LoadGhostExpeditionTargetsResponse} LoadGhostExpeditionTargetsResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LoadGhostExpeditionTargetsResponse.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.wm.protobuf.LoadGhostExpeditionTargetsResponse();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.error = reader.int32();
                            break;
                        }
                    case 2: {
                            if (!(message.candidates && message.candidates.length))
                                message.candidates = [];
                            message.candidates.push($root.wm.protobuf.GhostCar.decode(reader, reader.uint32()));
                            break;
                        }
                    case 3: {
                            if (!(message.wantedCars && message.wantedCars.length))
                                message.wantedCars = [];
                            message.wantedCars.push($root.wm.protobuf.WantedCar.decode(reader, reader.uint32()));
                            break;
                        }
                    case 4: {
                            message.localScore = reader.uint32();
                            break;
                        }
                    case 5: {
                            if (!(message.recentWinners && message.recentWinners.length))
                                message.recentWinners = [];
                            message.recentWinners.push($root.wm.protobuf.CarEntry.decode(reader, reader.uint32()));
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("error"))
                    throw $util.ProtocolError("missing required 'error'", { instance: message });
                if (!message.hasOwnProperty("localScore"))
                    throw $util.ProtocolError("missing required 'localScore'", { instance: message });
                return message;
            };

            /**
             * Decodes a LoadGhostExpeditionTargetsResponse message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof wm.protobuf.LoadGhostExpeditionTargetsResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {wm.protobuf.LoadGhostExpeditionTargetsResponse} LoadGhostExpeditionTargetsResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LoadGhostExpeditionTargetsResponse.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a LoadGhostExpeditionTargetsResponse message.
             * @function verify
             * @memberof wm.protobuf.LoadGhostExpeditionTargetsResponse
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            LoadGhostExpeditionTargetsResponse.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                switch (message.error) {
                default:
                    return "error: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 7:
                case 9:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 16:
                case 17:
                case 18:
                case 19:
                    break;
                }
                if (message.candidates != null && message.hasOwnProperty("candidates")) {
                    if (!Array.isArray(message.candidates))
                        return "candidates: array expected";
                    for (let i = 0; i < message.candidates.length; ++i) {
                        let error = $root.wm.protobuf.GhostCar.verify(message.candidates[i]);
                        if (error)
                            return "candidates." + error;
                    }
                }
                if (message.wantedCars != null && message.hasOwnProperty("wantedCars")) {
                    if (!Array.isArray(message.wantedCars))
                        return "wantedCars: array expected";
                    for (let i = 0; i < message.wantedCars.length; ++i) {
                        let error = $root.wm.protobuf.WantedCar.verify(message.wantedCars[i]);
                        if (error)
                            return "wantedCars." + error;
                    }
                }
                if (!$util.isInteger(message.localScore))
                    return "localScore: integer expected";
                if (message.recentWinners != null && message.hasOwnProperty("recentWinners")) {
                    if (!Array.isArray(message.recentWinners))
                        return "recentWinners: array expected";
                    for (let i = 0; i < message.recentWinners.length; ++i) {
                        let error = $root.wm.protobuf.CarEntry.verify(message.recentWinners[i]);
                        if (error)
                            return "recentWinners." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a LoadGhostExpeditionTargetsResponse message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof wm.protobuf.LoadGhostExpeditionTargetsResponse
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {wm.protobuf.LoadGhostExpeditionTargetsResponse} LoadGhostExpeditionTargetsResponse
             */
            LoadGhostExpeditionTargetsResponse.fromObject = function fromObject(object) {
                if (object instanceof $root.wm.protobuf.LoadGhostExpeditionTargetsResponse)
                    return object;
                let message = new $root.wm.protobuf.LoadGhostExpeditionTargetsResponse();
                switch (object.error) {
                default:
                    if (typeof object.error === "number") {
                        message.error = object.error;
                        break;
                    }
                    break;
                case "ERR_SUCCESS":
                case 0:
                    message.error = 0;
                    break;
                case "ERR_REQUEST":
                case 1:
                    message.error = 1;
                    break;
                case "ERR_NOT_FOUND":
                case 2:
                    message.error = 2;
                    break;
                case "ERR_ID_SERVER":
                case 3:
                    message.error = 3;
                    break;
                case "ERR_ID_BANNED":
                case 4:
                    message.error = 4;
                    break;
                case "ERR_USER_LOCKED":
                case 5:
                    message.error = 5;
                    break;
                case "ERR_USER_VERSION":
                case 6:
                    message.error = 6;
                    break;
                case "ERR_NAME_CONFLICTED":
                case 7:
                    message.error = 7;
                    break;
                case "ERR_FORBIDDEN":
                case 9:
                    message.error = 9;
                    break;
                case "ERR_USER_SUCCEEDED":
                case 11:
                    message.error = 11;
                    break;
                case "ERR_BEING_TRANSFERRED":
                case 12:
                    message.error = 12;
                    break;
                case "ERR_SCRATCH_LOCKED":
                case 13:
                    message.error = 13;
                    break;
                case "ERR_BINGO_REVENGE_LOCKED":
                case 14:
                    message.error = 14;
                    break;
                case "ERR_BINGO_ALREDY_LINKED":
                case 15:
                    message.error = 15;
                    break;
                case "ERR_BINGO_FINISHED":
                case 16:
                    message.error = 16;
                    break;
                case "ERR_BINGO_REACHED_MAX_USER":
                case 17:
                    message.error = 17;
                    break;
                case "ERR_CAR_NOT_FOUND":
                case 18:
                    message.error = 18;
                    break;
                case "ERR_BINGO_CARD_NOT_FOUND":
                case 19:
                    message.error = 19;
                    break;
                }
                if (object.candidates) {
                    if (!Array.isArray(object.candidates))
                        throw TypeError(".wm.protobuf.LoadGhostExpeditionTargetsResponse.candidates: array expected");
                    message.candidates = [];
                    for (let i = 0; i < object.candidates.length; ++i) {
                        if (typeof object.candidates[i] !== "object")
                            throw TypeError(".wm.protobuf.LoadGhostExpeditionTargetsResponse.candidates: object expected");
                        message.candidates[i] = $root.wm.protobuf.GhostCar.fromObject(object.candidates[i]);
                    }
                }
                if (object.wantedCars) {
                    if (!Array.isArray(object.wantedCars))
                        throw TypeError(".wm.protobuf.LoadGhostExpeditionTargetsResponse.wantedCars: array expected");
                    message.wantedCars = [];
                    for (let i = 0; i < object.wantedCars.length; ++i) {
                        if (typeof object.wantedCars[i] !== "object")
                            throw TypeError(".wm.protobuf.LoadGhostExpeditionTargetsResponse.wantedCars: object expected");
                        message.wantedCars[i] = $root.wm.protobuf.WantedCar.fromObject(object.wantedCars[i]);
                    }
                }
                if (object.localScore != null)
                    message.localScore = object.localScore >>> 0;
                if (object.recentWinners) {
                    if (!Array.isArray(object.recentWinners))
                        throw TypeError(".wm.protobuf.LoadGhostExpeditionTargetsResponse.recentWinners: array expected");
                    message.recentWinners = [];
                    for (let i = 0; i < object.recentWinners.length; ++i) {
                        if (typeof object.recentWinners[i] !== "object")
                            throw TypeError(".wm.protobuf.LoadGhostExpeditionTargetsResponse.recentWinners: object expected");
                        message.recentWinners[i] = $root.wm.protobuf.CarEntry.fromObject(object.recentWinners[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from a LoadGhostExpeditionTargetsResponse message. Also converts values to other types if specified.
             * @function toObject
             * @memberof wm.protobuf.LoadGhostExpeditionTargetsResponse
             * @static
             * @param {wm.protobuf.LoadGhostExpeditionTargetsResponse} message LoadGhostExpeditionTargetsResponse
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            LoadGhostExpeditionTargetsResponse.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults) {
                    object.candidates = [];
                    object.wantedCars = [];
                    object.recentWinners = [];
                }
                if (options.defaults) {
                    object.error = options.enums === String ? "ERR_SUCCESS" : 0;
                    object.localScore = 0;
                }
                if (message.error != null && message.hasOwnProperty("error"))
                    object.error = options.enums === String ? $root.wm.protobuf.ErrorCode[message.error] === undefined ? message.error : $root.wm.protobuf.ErrorCode[message.error] : message.error;
                if (message.candidates && message.candidates.length) {
                    object.candidates = [];
                    for (let j = 0; j < message.candidates.length; ++j)
                        object.candidates[j] = $root.wm.protobuf.GhostCar.toObject(message.candidates[j], options);
                }
                if (message.wantedCars && message.wantedCars.length) {
                    object.wantedCars = [];
                    for (let j = 0; j < message.wantedCars.length; ++j)
                        object.wantedCars[j] = $root.wm.protobuf.WantedCar.toObject(message.wantedCars[j], options);
                }
                if (message.localScore != null && message.hasOwnProperty("localScore"))
                    object.localScore = message.localScore;
                if (message.recentWinners && message.recentWinners.length) {
                    object.recentWinners = [];
                    for (let j = 0; j < message.recentWinners.length; ++j)
                        object.recentWinners[j] = $root.wm.protobuf.CarEntry.toObject(message.recentWinners[j], options);
                }
                return object;
            };

            /**
             * Converts this LoadGhostExpeditionTargetsResponse to JSON.
             * @function toJSON
             * @memberof wm.protobuf.LoadGhostExpeditionTargetsResponse
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            LoadGhostExpeditionTargetsResponse.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for LoadGhostExpeditionTargetsResponse
             * @function getTypeUrl
             * @memberof wm.protobuf.LoadGhostExpeditionTargetsResponse
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            LoadGhostExpeditionTargetsResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/wm.protobuf.LoadGhostExpeditionTargetsResponse";
            };

            return LoadGhostExpeditionTargetsResponse;
        })();

        protobuf.LoadGhostExpeditionResultRequest = (function() {

            /**
             * Properties of a LoadGhostExpeditionResultRequest.
             * @memberof wm.protobuf
             * @interface ILoadGhostExpeditionResultRequest
             * @property {number} ghostExpeditionId LoadGhostExpeditionResultRequest ghostExpeditionId
             * @property {number} carId LoadGhostExpeditionResultRequest carId
             */

            /**
             * Constructs a new LoadGhostExpeditionResultRequest.
             * @memberof wm.protobuf
             * @classdesc Represents a LoadGhostExpeditionResultRequest.
             * @implements ILoadGhostExpeditionResultRequest
             * @constructor
             * @param {wm.protobuf.ILoadGhostExpeditionResultRequest=} [properties] Properties to set
             */
            function LoadGhostExpeditionResultRequest(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * LoadGhostExpeditionResultRequest ghostExpeditionId.
             * @member {number} ghostExpeditionId
             * @memberof wm.protobuf.LoadGhostExpeditionResultRequest
             * @instance
             */
            LoadGhostExpeditionResultRequest.prototype.ghostExpeditionId = 0;

            /**
             * LoadGhostExpeditionResultRequest carId.
             * @member {number} carId
             * @memberof wm.protobuf.LoadGhostExpeditionResultRequest
             * @instance
             */
            LoadGhostExpeditionResultRequest.prototype.carId = 0;

            /**
             * Creates a new LoadGhostExpeditionResultRequest instance using the specified properties.
             * @function create
             * @memberof wm.protobuf.LoadGhostExpeditionResultRequest
             * @static
             * @param {wm.protobuf.ILoadGhostExpeditionResultRequest=} [properties] Properties to set
             * @returns {wm.protobuf.LoadGhostExpeditionResultRequest} LoadGhostExpeditionResultRequest instance
             */
            LoadGhostExpeditionResultRequest.create = function create(properties) {
                return new LoadGhostExpeditionResultRequest(properties);
            };

            /**
             * Encodes the specified LoadGhostExpeditionResultRequest message. Does not implicitly {@link wm.protobuf.LoadGhostExpeditionResultRequest.verify|verify} messages.
             * @function encode
             * @memberof wm.protobuf.LoadGhostExpeditionResultRequest
             * @static
             * @param {wm.protobuf.ILoadGhostExpeditionResultRequest} message LoadGhostExpeditionResultRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LoadGhostExpeditionResultRequest.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.ghostExpeditionId);
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.carId);
                return writer;
            };

            /**
             * Encodes the specified LoadGhostExpeditionResultRequest message, length delimited. Does not implicitly {@link wm.protobuf.LoadGhostExpeditionResultRequest.verify|verify} messages.
             * @function encodeDelimited
             * @memberof wm.protobuf.LoadGhostExpeditionResultRequest
             * @static
             * @param {wm.protobuf.ILoadGhostExpeditionResultRequest} message LoadGhostExpeditionResultRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LoadGhostExpeditionResultRequest.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a LoadGhostExpeditionResultRequest message from the specified reader or buffer.
             * @function decode
             * @memberof wm.protobuf.LoadGhostExpeditionResultRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {wm.protobuf.LoadGhostExpeditionResultRequest} LoadGhostExpeditionResultRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LoadGhostExpeditionResultRequest.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.wm.protobuf.LoadGhostExpeditionResultRequest();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.ghostExpeditionId = reader.uint32();
                            break;
                        }
                    case 2: {
                            message.carId = reader.uint32();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("ghostExpeditionId"))
                    throw $util.ProtocolError("missing required 'ghostExpeditionId'", { instance: message });
                if (!message.hasOwnProperty("carId"))
                    throw $util.ProtocolError("missing required 'carId'", { instance: message });
                return message;
            };

            /**
             * Decodes a LoadGhostExpeditionResultRequest message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof wm.protobuf.LoadGhostExpeditionResultRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {wm.protobuf.LoadGhostExpeditionResultRequest} LoadGhostExpeditionResultRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LoadGhostExpeditionResultRequest.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a LoadGhostExpeditionResultRequest message.
             * @function verify
             * @memberof wm.protobuf.LoadGhostExpeditionResultRequest
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            LoadGhostExpeditionResultRequest.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (!$util.isInteger(message.ghostExpeditionId))
                    return "ghostExpeditionId: integer expected";
                if (!$util.isInteger(message.carId))
                    return "carId: integer expected";
                return null;
            };

            /**
             * Creates a LoadGhostExpeditionResultRequest message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof wm.protobuf.LoadGhostExpeditionResultRequest
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {wm.protobuf.LoadGhostExpeditionResultRequest} LoadGhostExpeditionResultRequest
             */
            LoadGhostExpeditionResultRequest.fromObject = function fromObject(object) {
                if (object instanceof $root.wm.protobuf.LoadGhostExpeditionResultRequest)
                    return object;
                let message = new $root.wm.protobuf.LoadGhostExpeditionResultRequest();
                if (object.ghostExpeditionId != null)
                    message.ghostExpeditionId = object.ghostExpeditionId >>> 0;
                if (object.carId != null)
                    message.carId = object.carId >>> 0;
                return message;
            };

            /**
             * Creates a plain object from a LoadGhostExpeditionResultRequest message. Also converts values to other types if specified.
             * @function toObject
             * @memberof wm.protobuf.LoadGhostExpeditionResultRequest
             * @static
             * @param {wm.protobuf.LoadGhostExpeditionResultRequest} message LoadGhostExpeditionResultRequest
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            LoadGhostExpeditionResultRequest.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.ghostExpeditionId = 0;
                    object.carId = 0;
                }
                if (message.ghostExpeditionId != null && message.hasOwnProperty("ghostExpeditionId"))
                    object.ghostExpeditionId = message.ghostExpeditionId;
                if (message.carId != null && message.hasOwnProperty("carId"))
                    object.carId = message.carId;
                return object;
            };

            /**
             * Converts this LoadGhostExpeditionResultRequest to JSON.
             * @function toJSON
             * @memberof wm.protobuf.LoadGhostExpeditionResultRequest
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            LoadGhostExpeditionResultRequest.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for LoadGhostExpeditionResultRequest
             * @function getTypeUrl
             * @memberof wm.protobuf.LoadGhostExpeditionResultRequest
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            LoadGhostExpeditionResultRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/wm.protobuf.LoadGhostExpeditionResultRequest";
            };

            return LoadGhostExpeditionResultRequest;
        })();

        protobuf.LoadGhostExpeditionResultResponse = (function() {

            /**
             * Properties of a LoadGhostExpeditionResultResponse.
             * @memberof wm.protobuf
             * @interface ILoadGhostExpeditionResultResponse
             * @property {wm.protobuf.ErrorCode} error LoadGhostExpeditionResultResponse error
             * @property {number} score LoadGhostExpeditionResultResponse score
             * @property {number} localScore LoadGhostExpeditionResultResponse localScore
             * @property {Array.<wm.protobuf.IGhostExpeditionRankingEntry>|null} [localRanking] LoadGhostExpeditionResultResponse localRanking
             */

            /**
             * Constructs a new LoadGhostExpeditionResultResponse.
             * @memberof wm.protobuf
             * @classdesc Represents a LoadGhostExpeditionResultResponse.
             * @implements ILoadGhostExpeditionResultResponse
             * @constructor
             * @param {wm.protobuf.ILoadGhostExpeditionResultResponse=} [properties] Properties to set
             */
            function LoadGhostExpeditionResultResponse(properties) {
                this.localRanking = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * LoadGhostExpeditionResultResponse error.
             * @member {wm.protobuf.ErrorCode} error
             * @memberof wm.protobuf.LoadGhostExpeditionResultResponse
             * @instance
             */
            LoadGhostExpeditionResultResponse.prototype.error = 0;

            /**
             * LoadGhostExpeditionResultResponse score.
             * @member {number} score
             * @memberof wm.protobuf.LoadGhostExpeditionResultResponse
             * @instance
             */
            LoadGhostExpeditionResultResponse.prototype.score = 0;

            /**
             * LoadGhostExpeditionResultResponse localScore.
             * @member {number} localScore
             * @memberof wm.protobuf.LoadGhostExpeditionResultResponse
             * @instance
             */
            LoadGhostExpeditionResultResponse.prototype.localScore = 0;

            /**
             * LoadGhostExpeditionResultResponse localRanking.
             * @member {Array.<wm.protobuf.IGhostExpeditionRankingEntry>} localRanking
             * @memberof wm.protobuf.LoadGhostExpeditionResultResponse
             * @instance
             */
            LoadGhostExpeditionResultResponse.prototype.localRanking = $util.emptyArray;

            /**
             * Creates a new LoadGhostExpeditionResultResponse instance using the specified properties.
             * @function create
             * @memberof wm.protobuf.LoadGhostExpeditionResultResponse
             * @static
             * @param {wm.protobuf.ILoadGhostExpeditionResultResponse=} [properties] Properties to set
             * @returns {wm.protobuf.LoadGhostExpeditionResultResponse} LoadGhostExpeditionResultResponse instance
             */
            LoadGhostExpeditionResultResponse.create = function create(properties) {
                return new LoadGhostExpeditionResultResponse(properties);
            };

            /**
             * Encodes the specified LoadGhostExpeditionResultResponse message. Does not implicitly {@link wm.protobuf.LoadGhostExpeditionResultResponse.verify|verify} messages.
             * @function encode
             * @memberof wm.protobuf.LoadGhostExpeditionResultResponse
             * @static
             * @param {wm.protobuf.ILoadGhostExpeditionResultResponse} message LoadGhostExpeditionResultResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LoadGhostExpeditionResultResponse.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.score);
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.localScore);
                if (message.localRanking != null && message.localRanking.length)
                    for (let i = 0; i < message.localRanking.length; ++i)
                        $root.wm.protobuf.GhostExpeditionRankingEntry.encode(message.localRanking[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified LoadGhostExpeditionResultResponse message, length delimited. Does not implicitly {@link wm.protobuf.LoadGhostExpeditionResultResponse.verify|verify} messages.
             * @function encodeDelimited
             * @memberof wm.protobuf.LoadGhostExpeditionResultResponse
             * @static
             * @param {wm.protobuf.ILoadGhostExpeditionResultResponse} message LoadGhostExpeditionResultResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LoadGhostExpeditionResultResponse.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a LoadGhostExpeditionResultResponse message from the specified reader or buffer.
             * @function decode
             * @memberof wm.protobuf.LoadGhostExpeditionResultResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {wm.protobuf.LoadGhostExpeditionResultResponse} LoadGhostExpeditionResultResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LoadGhostExpeditionResultResponse.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.wm.protobuf.LoadGhostExpeditionResultResponse();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.error = reader.int32();
                            break;
                        }
                    case 2: {
                            message.score = reader.uint32();
                            break;
                        }
                    case 3: {
                            message.localScore = reader.uint32();
                            break;
                        }
                    case 4: {
                            if (!(message.localRanking && message.localRanking.length))
                                message.localRanking = [];
                            message.localRanking.push($root.wm.protobuf.GhostExpeditionRankingEntry.decode(reader, reader.uint32()));
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("error"))
                    throw $util.ProtocolError("missing required 'error'", { instance: message });
                if (!message.hasOwnProperty("score"))
                    throw $util.ProtocolError("missing required 'score'", { instance: message });
                if (!message.hasOwnProperty("localScore"))
                    throw $util.ProtocolError("missing required 'localScore'", { instance: message });
                return message;
            };

            /**
             * Decodes a LoadGhostExpeditionResultResponse message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof wm.protobuf.LoadGhostExpeditionResultResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {wm.protobuf.LoadGhostExpeditionResultResponse} LoadGhostExpeditionResultResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LoadGhostExpeditionResultResponse.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a LoadGhostExpeditionResultResponse message.
             * @function verify
             * @memberof wm.protobuf.LoadGhostExpeditionResultResponse
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            LoadGhostExpeditionResultResponse.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                switch (message.error) {
                default:
                    return "error: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 7:
                case 9:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 16:
                case 17:
                case 18:
                case 19:
                    break;
                }
                if (!$util.isInteger(message.score))
                    return "score: integer expected";
                if (!$util.isInteger(message.localScore))
                    return "localScore: integer expected";
                if (message.localRanking != null && message.hasOwnProperty("localRanking")) {
                    if (!Array.isArray(message.localRanking))
                        return "localRanking: array expected";
                    for (let i = 0; i < message.localRanking.length; ++i) {
                        let error = $root.wm.protobuf.GhostExpeditionRankingEntry.verify(message.localRanking[i]);
                        if (error)
                            return "localRanking." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a LoadGhostExpeditionResultResponse message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof wm.protobuf.LoadGhostExpeditionResultResponse
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {wm.protobuf.LoadGhostExpeditionResultResponse} LoadGhostExpeditionResultResponse
             */
            LoadGhostExpeditionResultResponse.fromObject = function fromObject(object) {
                if (object instanceof $root.wm.protobuf.LoadGhostExpeditionResultResponse)
                    return object;
                let message = new $root.wm.protobuf.LoadGhostExpeditionResultResponse();
                switch (object.error) {
                default:
                    if (typeof object.error === "number") {
                        message.error = object.error;
                        break;
                    }
                    break;
                case "ERR_SUCCESS":
                case 0:
                    message.error = 0;
                    break;
                case "ERR_REQUEST":
                case 1:
                    message.error = 1;
                    break;
                case "ERR_NOT_FOUND":
                case 2:
                    message.error = 2;
                    break;
                case "ERR_ID_SERVER":
                case 3:
                    message.error = 3;
                    break;
                case "ERR_ID_BANNED":
                case 4:
                    message.error = 4;
                    break;
                case "ERR_USER_LOCKED":
                case 5:
                    message.error = 5;
                    break;
                case "ERR_USER_VERSION":
                case 6:
                    message.error = 6;
                    break;
                case "ERR_NAME_CONFLICTED":
                case 7:
                    message.error = 7;
                    break;
                case "ERR_FORBIDDEN":
                case 9:
                    message.error = 9;
                    break;
                case "ERR_USER_SUCCEEDED":
                case 11:
                    message.error = 11;
                    break;
                case "ERR_BEING_TRANSFERRED":
                case 12:
                    message.error = 12;
                    break;
                case "ERR_SCRATCH_LOCKED":
                case 13:
                    message.error = 13;
                    break;
                case "ERR_BINGO_REVENGE_LOCKED":
                case 14:
                    message.error = 14;
                    break;
                case "ERR_BINGO_ALREDY_LINKED":
                case 15:
                    message.error = 15;
                    break;
                case "ERR_BINGO_FINISHED":
                case 16:
                    message.error = 16;
                    break;
                case "ERR_BINGO_REACHED_MAX_USER":
                case 17:
                    message.error = 17;
                    break;
                case "ERR_CAR_NOT_FOUND":
                case 18:
                    message.error = 18;
                    break;
                case "ERR_BINGO_CARD_NOT_FOUND":
                case 19:
                    message.error = 19;
                    break;
                }
                if (object.score != null)
                    message.score = object.score >>> 0;
                if (object.localScore != null)
                    message.localScore = object.localScore >>> 0;
                if (object.localRanking) {
                    if (!Array.isArray(object.localRanking))
                        throw TypeError(".wm.protobuf.LoadGhostExpeditionResultResponse.localRanking: array expected");
                    message.localRanking = [];
                    for (let i = 0; i < object.localRanking.length; ++i) {
                        if (typeof object.localRanking[i] !== "object")
                            throw TypeError(".wm.protobuf.LoadGhostExpeditionResultResponse.localRanking: object expected");
                        message.localRanking[i] = $root.wm.protobuf.GhostExpeditionRankingEntry.fromObject(object.localRanking[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from a LoadGhostExpeditionResultResponse message. Also converts values to other types if specified.
             * @function toObject
             * @memberof wm.protobuf.LoadGhostExpeditionResultResponse
             * @static
             * @param {wm.protobuf.LoadGhostExpeditionResultResponse} message LoadGhostExpeditionResultResponse
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            LoadGhostExpeditionResultResponse.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.localRanking = [];
                if (options.defaults) {
                    object.error = options.enums === String ? "ERR_SUCCESS" : 0;
                    object.score = 0;
                    object.localScore = 0;
                }
                if (message.error != null && message.hasOwnProperty("error"))
                    object.error = options.enums === String ? $root.wm.protobuf.ErrorCode[message.error] === undefined ? message.error : $root.wm.protobuf.ErrorCode[message.error] : message.error;
                if (message.score != null && message.hasOwnProperty("score"))
                    object.score = message.score;
                if (message.localScore != null && message.hasOwnProperty("localScore"))
                    object.localScore = message.localScore;
                if (message.localRanking && message.localRanking.length) {
                    object.localRanking = [];
                    for (let j = 0; j < message.localRanking.length; ++j)
                        object.localRanking[j] = $root.wm.protobuf.GhostExpeditionRankingEntry.toObject(message.localRanking[j], options);
                }
                return object;
            };

            /**
             * Converts this LoadGhostExpeditionResultResponse to JSON.
             * @function toJSON
             * @memberof wm.protobuf.LoadGhostExpeditionResultResponse
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            LoadGhostExpeditionResultResponse.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for LoadGhostExpeditionResultResponse
             * @function getTypeUrl
             * @memberof wm.protobuf.LoadGhostExpeditionResultResponse
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            LoadGhostExpeditionResultResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/wm.protobuf.LoadGhostExpeditionResultResponse";
            };

            return LoadGhostExpeditionResultResponse;
        })();

        protobuf.SaveNetworkStatRequest = (function() {

            /**
             * Properties of a SaveNetworkStatRequest.
             * @memberof wm.protobuf
             * @interface ISaveNetworkStatRequest
             * @property {number} rtt SaveNetworkStatRequest rtt
             * @property {number} request SaveNetworkStatRequest request
             * @property {number} timedOut SaveNetworkStatRequest timedOut
             * @property {number} retry SaveNetworkStatRequest retry
             * @property {number} failed SaveNetworkStatRequest failed
             * @property {number} timestamp SaveNetworkStatRequest timestamp
             * @property {number} pingFailed SaveNetworkStatRequest pingFailed
             * @property {Array.<wm.protobuf.SaveNetworkStatRequest.IRequestLog>|null} [logs] SaveNetworkStatRequest logs
             */

            /**
             * Constructs a new SaveNetworkStatRequest.
             * @memberof wm.protobuf
             * @classdesc Represents a SaveNetworkStatRequest.
             * @implements ISaveNetworkStatRequest
             * @constructor
             * @param {wm.protobuf.ISaveNetworkStatRequest=} [properties] Properties to set
             */
            function SaveNetworkStatRequest(properties) {
                this.logs = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * SaveNetworkStatRequest rtt.
             * @member {number} rtt
             * @memberof wm.protobuf.SaveNetworkStatRequest
             * @instance
             */
            SaveNetworkStatRequest.prototype.rtt = 0;

            /**
             * SaveNetworkStatRequest request.
             * @member {number} request
             * @memberof wm.protobuf.SaveNetworkStatRequest
             * @instance
             */
            SaveNetworkStatRequest.prototype.request = 0;

            /**
             * SaveNetworkStatRequest timedOut.
             * @member {number} timedOut
             * @memberof wm.protobuf.SaveNetworkStatRequest
             * @instance
             */
            SaveNetworkStatRequest.prototype.timedOut = 0;

            /**
             * SaveNetworkStatRequest retry.
             * @member {number} retry
             * @memberof wm.protobuf.SaveNetworkStatRequest
             * @instance
             */
            SaveNetworkStatRequest.prototype.retry = 0;

            /**
             * SaveNetworkStatRequest failed.
             * @member {number} failed
             * @memberof wm.protobuf.SaveNetworkStatRequest
             * @instance
             */
            SaveNetworkStatRequest.prototype.failed = 0;

            /**
             * SaveNetworkStatRequest timestamp.
             * @member {number} timestamp
             * @memberof wm.protobuf.SaveNetworkStatRequest
             * @instance
             */
            SaveNetworkStatRequest.prototype.timestamp = 0;

            /**
             * SaveNetworkStatRequest pingFailed.
             * @member {number} pingFailed
             * @memberof wm.protobuf.SaveNetworkStatRequest
             * @instance
             */
            SaveNetworkStatRequest.prototype.pingFailed = 0;

            /**
             * SaveNetworkStatRequest logs.
             * @member {Array.<wm.protobuf.SaveNetworkStatRequest.IRequestLog>} logs
             * @memberof wm.protobuf.SaveNetworkStatRequest
             * @instance
             */
            SaveNetworkStatRequest.prototype.logs = $util.emptyArray;

            /**
             * Creates a new SaveNetworkStatRequest instance using the specified properties.
             * @function create
             * @memberof wm.protobuf.SaveNetworkStatRequest
             * @static
             * @param {wm.protobuf.ISaveNetworkStatRequest=} [properties] Properties to set
             * @returns {wm.protobuf.SaveNetworkStatRequest} SaveNetworkStatRequest instance
             */
            SaveNetworkStatRequest.create = function create(properties) {
                return new SaveNetworkStatRequest(properties);
            };

            /**
             * Encodes the specified SaveNetworkStatRequest message. Does not implicitly {@link wm.protobuf.SaveNetworkStatRequest.verify|verify} messages.
             * @function encode
             * @memberof wm.protobuf.SaveNetworkStatRequest
             * @static
             * @param {wm.protobuf.ISaveNetworkStatRequest} message SaveNetworkStatRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SaveNetworkStatRequest.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.rtt);
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.request);
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.timedOut);
                writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.timestamp);
                writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.pingFailed);
                if (message.logs != null && message.logs.length)
                    for (let i = 0; i < message.logs.length; ++i)
                        $root.wm.protobuf.SaveNetworkStatRequest.RequestLog.encode(message.logs[i], writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                writer.uint32(/* id 7, wireType 0 =*/56).uint32(message.retry);
                writer.uint32(/* id 8, wireType 0 =*/64).uint32(message.failed);
                return writer;
            };

            /**
             * Encodes the specified SaveNetworkStatRequest message, length delimited. Does not implicitly {@link wm.protobuf.SaveNetworkStatRequest.verify|verify} messages.
             * @function encodeDelimited
             * @memberof wm.protobuf.SaveNetworkStatRequest
             * @static
             * @param {wm.protobuf.ISaveNetworkStatRequest} message SaveNetworkStatRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SaveNetworkStatRequest.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a SaveNetworkStatRequest message from the specified reader or buffer.
             * @function decode
             * @memberof wm.protobuf.SaveNetworkStatRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {wm.protobuf.SaveNetworkStatRequest} SaveNetworkStatRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SaveNetworkStatRequest.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.wm.protobuf.SaveNetworkStatRequest();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.rtt = reader.uint32();
                            break;
                        }
                    case 2: {
                            message.request = reader.uint32();
                            break;
                        }
                    case 3: {
                            message.timedOut = reader.uint32();
                            break;
                        }
                    case 7: {
                            message.retry = reader.uint32();
                            break;
                        }
                    case 8: {
                            message.failed = reader.uint32();
                            break;
                        }
                    case 4: {
                            message.timestamp = reader.uint32();
                            break;
                        }
                    case 5: {
                            message.pingFailed = reader.uint32();
                            break;
                        }
                    case 6: {
                            if (!(message.logs && message.logs.length))
                                message.logs = [];
                            message.logs.push($root.wm.protobuf.SaveNetworkStatRequest.RequestLog.decode(reader, reader.uint32()));
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("rtt"))
                    throw $util.ProtocolError("missing required 'rtt'", { instance: message });
                if (!message.hasOwnProperty("request"))
                    throw $util.ProtocolError("missing required 'request'", { instance: message });
                if (!message.hasOwnProperty("timedOut"))
                    throw $util.ProtocolError("missing required 'timedOut'", { instance: message });
                if (!message.hasOwnProperty("retry"))
                    throw $util.ProtocolError("missing required 'retry'", { instance: message });
                if (!message.hasOwnProperty("failed"))
                    throw $util.ProtocolError("missing required 'failed'", { instance: message });
                if (!message.hasOwnProperty("timestamp"))
                    throw $util.ProtocolError("missing required 'timestamp'", { instance: message });
                if (!message.hasOwnProperty("pingFailed"))
                    throw $util.ProtocolError("missing required 'pingFailed'", { instance: message });
                return message;
            };

            /**
             * Decodes a SaveNetworkStatRequest message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof wm.protobuf.SaveNetworkStatRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {wm.protobuf.SaveNetworkStatRequest} SaveNetworkStatRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SaveNetworkStatRequest.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a SaveNetworkStatRequest message.
             * @function verify
             * @memberof wm.protobuf.SaveNetworkStatRequest
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            SaveNetworkStatRequest.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (!$util.isInteger(message.rtt))
                    return "rtt: integer expected";
                if (!$util.isInteger(message.request))
                    return "request: integer expected";
                if (!$util.isInteger(message.timedOut))
                    return "timedOut: integer expected";
                if (!$util.isInteger(message.retry))
                    return "retry: integer expected";
                if (!$util.isInteger(message.failed))
                    return "failed: integer expected";
                if (!$util.isInteger(message.timestamp))
                    return "timestamp: integer expected";
                if (!$util.isInteger(message.pingFailed))
                    return "pingFailed: integer expected";
                if (message.logs != null && message.hasOwnProperty("logs")) {
                    if (!Array.isArray(message.logs))
                        return "logs: array expected";
                    for (let i = 0; i < message.logs.length; ++i) {
                        let error = $root.wm.protobuf.SaveNetworkStatRequest.RequestLog.verify(message.logs[i]);
                        if (error)
                            return "logs." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a SaveNetworkStatRequest message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof wm.protobuf.SaveNetworkStatRequest
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {wm.protobuf.SaveNetworkStatRequest} SaveNetworkStatRequest
             */
            SaveNetworkStatRequest.fromObject = function fromObject(object) {
                if (object instanceof $root.wm.protobuf.SaveNetworkStatRequest)
                    return object;
                let message = new $root.wm.protobuf.SaveNetworkStatRequest();
                if (object.rtt != null)
                    message.rtt = object.rtt >>> 0;
                if (object.request != null)
                    message.request = object.request >>> 0;
                if (object.timedOut != null)
                    message.timedOut = object.timedOut >>> 0;
                if (object.retry != null)
                    message.retry = object.retry >>> 0;
                if (object.failed != null)
                    message.failed = object.failed >>> 0;
                if (object.timestamp != null)
                    message.timestamp = object.timestamp >>> 0;
                if (object.pingFailed != null)
                    message.pingFailed = object.pingFailed >>> 0;
                if (object.logs) {
                    if (!Array.isArray(object.logs))
                        throw TypeError(".wm.protobuf.SaveNetworkStatRequest.logs: array expected");
                    message.logs = [];
                    for (let i = 0; i < object.logs.length; ++i) {
                        if (typeof object.logs[i] !== "object")
                            throw TypeError(".wm.protobuf.SaveNetworkStatRequest.logs: object expected");
                        message.logs[i] = $root.wm.protobuf.SaveNetworkStatRequest.RequestLog.fromObject(object.logs[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from a SaveNetworkStatRequest message. Also converts values to other types if specified.
             * @function toObject
             * @memberof wm.protobuf.SaveNetworkStatRequest
             * @static
             * @param {wm.protobuf.SaveNetworkStatRequest} message SaveNetworkStatRequest
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            SaveNetworkStatRequest.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.logs = [];
                if (options.defaults) {
                    object.rtt = 0;
                    object.request = 0;
                    object.timedOut = 0;
                    object.timestamp = 0;
                    object.pingFailed = 0;
                    object.retry = 0;
                    object.failed = 0;
                }
                if (message.rtt != null && message.hasOwnProperty("rtt"))
                    object.rtt = message.rtt;
                if (message.request != null && message.hasOwnProperty("request"))
                    object.request = message.request;
                if (message.timedOut != null && message.hasOwnProperty("timedOut"))
                    object.timedOut = message.timedOut;
                if (message.timestamp != null && message.hasOwnProperty("timestamp"))
                    object.timestamp = message.timestamp;
                if (message.pingFailed != null && message.hasOwnProperty("pingFailed"))
                    object.pingFailed = message.pingFailed;
                if (message.logs && message.logs.length) {
                    object.logs = [];
                    for (let j = 0; j < message.logs.length; ++j)
                        object.logs[j] = $root.wm.protobuf.SaveNetworkStatRequest.RequestLog.toObject(message.logs[j], options);
                }
                if (message.retry != null && message.hasOwnProperty("retry"))
                    object.retry = message.retry;
                if (message.failed != null && message.hasOwnProperty("failed"))
                    object.failed = message.failed;
                return object;
            };

            /**
             * Converts this SaveNetworkStatRequest to JSON.
             * @function toJSON
             * @memberof wm.protobuf.SaveNetworkStatRequest
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            SaveNetworkStatRequest.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for SaveNetworkStatRequest
             * @function getTypeUrl
             * @memberof wm.protobuf.SaveNetworkStatRequest
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            SaveNetworkStatRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/wm.protobuf.SaveNetworkStatRequest";
            };

            SaveNetworkStatRequest.RequestLog = (function() {

                /**
                 * Properties of a RequestLog.
                 * @memberof wm.protobuf.SaveNetworkStatRequest
                 * @interface IRequestLog
                 * @property {wm.protobuf.MethodType} type RequestLog type
                 * @property {number} request RequestLog request
                 * @property {number} timedOut RequestLog timedOut
                 * @property {number} retry RequestLog retry
                 * @property {number} failed RequestLog failed
                 * @property {number} retryMaxReached RequestLog retryMaxReached
                 * @property {number} responseAverage RequestLog responseAverage
                 */

                /**
                 * Constructs a new RequestLog.
                 * @memberof wm.protobuf.SaveNetworkStatRequest
                 * @classdesc Represents a RequestLog.
                 * @implements IRequestLog
                 * @constructor
                 * @param {wm.protobuf.SaveNetworkStatRequest.IRequestLog=} [properties] Properties to set
                 */
                function RequestLog(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * RequestLog type.
                 * @member {wm.protobuf.MethodType} type
                 * @memberof wm.protobuf.SaveNetworkStatRequest.RequestLog
                 * @instance
                 */
                RequestLog.prototype.type = 1;

                /**
                 * RequestLog request.
                 * @member {number} request
                 * @memberof wm.protobuf.SaveNetworkStatRequest.RequestLog
                 * @instance
                 */
                RequestLog.prototype.request = 0;

                /**
                 * RequestLog timedOut.
                 * @member {number} timedOut
                 * @memberof wm.protobuf.SaveNetworkStatRequest.RequestLog
                 * @instance
                 */
                RequestLog.prototype.timedOut = 0;

                /**
                 * RequestLog retry.
                 * @member {number} retry
                 * @memberof wm.protobuf.SaveNetworkStatRequest.RequestLog
                 * @instance
                 */
                RequestLog.prototype.retry = 0;

                /**
                 * RequestLog failed.
                 * @member {number} failed
                 * @memberof wm.protobuf.SaveNetworkStatRequest.RequestLog
                 * @instance
                 */
                RequestLog.prototype.failed = 0;

                /**
                 * RequestLog retryMaxReached.
                 * @member {number} retryMaxReached
                 * @memberof wm.protobuf.SaveNetworkStatRequest.RequestLog
                 * @instance
                 */
                RequestLog.prototype.retryMaxReached = 0;

                /**
                 * RequestLog responseAverage.
                 * @member {number} responseAverage
                 * @memberof wm.protobuf.SaveNetworkStatRequest.RequestLog
                 * @instance
                 */
                RequestLog.prototype.responseAverage = 0;

                /**
                 * Creates a new RequestLog instance using the specified properties.
                 * @function create
                 * @memberof wm.protobuf.SaveNetworkStatRequest.RequestLog
                 * @static
                 * @param {wm.protobuf.SaveNetworkStatRequest.IRequestLog=} [properties] Properties to set
                 * @returns {wm.protobuf.SaveNetworkStatRequest.RequestLog} RequestLog instance
                 */
                RequestLog.create = function create(properties) {
                    return new RequestLog(properties);
                };

                /**
                 * Encodes the specified RequestLog message. Does not implicitly {@link wm.protobuf.SaveNetworkStatRequest.RequestLog.verify|verify} messages.
                 * @function encode
                 * @memberof wm.protobuf.SaveNetworkStatRequest.RequestLog
                 * @static
                 * @param {wm.protobuf.SaveNetworkStatRequest.IRequestLog} message RequestLog message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RequestLog.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.type);
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.request);
                    writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.timedOut);
                    writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.retryMaxReached);
                    writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.responseAverage);
                    writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.retry);
                    writer.uint32(/* id 7, wireType 0 =*/56).uint32(message.failed);
                    return writer;
                };

                /**
                 * Encodes the specified RequestLog message, length delimited. Does not implicitly {@link wm.protobuf.SaveNetworkStatRequest.RequestLog.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof wm.protobuf.SaveNetworkStatRequest.RequestLog
                 * @static
                 * @param {wm.protobuf.SaveNetworkStatRequest.IRequestLog} message RequestLog message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RequestLog.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a RequestLog message from the specified reader or buffer.
                 * @function decode
                 * @memberof wm.protobuf.SaveNetworkStatRequest.RequestLog
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {wm.protobuf.SaveNetworkStatRequest.RequestLog} RequestLog
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RequestLog.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.wm.protobuf.SaveNetworkStatRequest.RequestLog();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.type = reader.int32();
                                break;
                            }
                        case 2: {
                                message.request = reader.uint32();
                                break;
                            }
                        case 3: {
                                message.timedOut = reader.uint32();
                                break;
                            }
                        case 6: {
                                message.retry = reader.uint32();
                                break;
                            }
                        case 7: {
                                message.failed = reader.uint32();
                                break;
                            }
                        case 4: {
                                message.retryMaxReached = reader.uint32();
                                break;
                            }
                        case 5: {
                                message.responseAverage = reader.uint32();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    if (!message.hasOwnProperty("type"))
                        throw $util.ProtocolError("missing required 'type'", { instance: message });
                    if (!message.hasOwnProperty("request"))
                        throw $util.ProtocolError("missing required 'request'", { instance: message });
                    if (!message.hasOwnProperty("timedOut"))
                        throw $util.ProtocolError("missing required 'timedOut'", { instance: message });
                    if (!message.hasOwnProperty("retry"))
                        throw $util.ProtocolError("missing required 'retry'", { instance: message });
                    if (!message.hasOwnProperty("failed"))
                        throw $util.ProtocolError("missing required 'failed'", { instance: message });
                    if (!message.hasOwnProperty("retryMaxReached"))
                        throw $util.ProtocolError("missing required 'retryMaxReached'", { instance: message });
                    if (!message.hasOwnProperty("responseAverage"))
                        throw $util.ProtocolError("missing required 'responseAverage'", { instance: message });
                    return message;
                };

                /**
                 * Decodes a RequestLog message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof wm.protobuf.SaveNetworkStatRequest.RequestLog
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {wm.protobuf.SaveNetworkStatRequest.RequestLog} RequestLog
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RequestLog.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a RequestLog message.
                 * @function verify
                 * @memberof wm.protobuf.SaveNetworkStatRequest.RequestLog
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                RequestLog.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    switch (message.type) {
                    default:
                        return "type: enum value expected";
                    case 1:
                    case 2:
                    case 3:
                    case 4:
                    case 5:
                    case 6:
                    case 7:
                    case 8:
                    case 9:
                        break;
                    }
                    if (!$util.isInteger(message.request))
                        return "request: integer expected";
                    if (!$util.isInteger(message.timedOut))
                        return "timedOut: integer expected";
                    if (!$util.isInteger(message.retry))
                        return "retry: integer expected";
                    if (!$util.isInteger(message.failed))
                        return "failed: integer expected";
                    if (!$util.isInteger(message.retryMaxReached))
                        return "retryMaxReached: integer expected";
                    if (!$util.isInteger(message.responseAverage))
                        return "responseAverage: integer expected";
                    return null;
                };

                /**
                 * Creates a RequestLog message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof wm.protobuf.SaveNetworkStatRequest.RequestLog
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {wm.protobuf.SaveNetworkStatRequest.RequestLog} RequestLog
                 */
                RequestLog.fromObject = function fromObject(object) {
                    if (object instanceof $root.wm.protobuf.SaveNetworkStatRequest.RequestLog)
                        return object;
                    let message = new $root.wm.protobuf.SaveNetworkStatRequest.RequestLog();
                    switch (object.type) {
                    default:
                        if (typeof object.type === "number") {
                            message.type = object.type;
                            break;
                        }
                        break;
                    case "MT_LOAD_CAR":
                    case 1:
                        message.type = 1;
                        break;
                    case "MT_LOAD_GHOST_DRIVE_DATA":
                    case 2:
                        message.type = 2;
                        break;
                    case "MT_LOAD_USER":
                    case 3:
                        message.type = 3;
                        break;
                    case "MT_REGISTER_GHOST_TRAIL":
                    case 4:
                        message.type = 4;
                        break;
                    case "MT_REGISTER_SYSTEM_INFO":
                    case 5:
                        message.type = 5;
                        break;
                    case "MT_SAVE_CHARGE":
                    case 6:
                        message.type = 6;
                        break;
                    case "MT_SAVE_GAME_RESULT":
                    case 7:
                        message.type = 7;
                        break;
                    case "MT_SAVE_SCREENSHOT":
                    case 8:
                        message.type = 8;
                        break;
                    case "RS_GHOST_TRAIL":
                    case 9:
                        message.type = 9;
                        break;
                    }
                    if (object.request != null)
                        message.request = object.request >>> 0;
                    if (object.timedOut != null)
                        message.timedOut = object.timedOut >>> 0;
                    if (object.retry != null)
                        message.retry = object.retry >>> 0;
                    if (object.failed != null)
                        message.failed = object.failed >>> 0;
                    if (object.retryMaxReached != null)
                        message.retryMaxReached = object.retryMaxReached >>> 0;
                    if (object.responseAverage != null)
                        message.responseAverage = object.responseAverage >>> 0;
                    return message;
                };

                /**
                 * Creates a plain object from a RequestLog message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof wm.protobuf.SaveNetworkStatRequest.RequestLog
                 * @static
                 * @param {wm.protobuf.SaveNetworkStatRequest.RequestLog} message RequestLog
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                RequestLog.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        object.type = options.enums === String ? "MT_LOAD_CAR" : 1;
                        object.request = 0;
                        object.timedOut = 0;
                        object.retryMaxReached = 0;
                        object.responseAverage = 0;
                        object.retry = 0;
                        object.failed = 0;
                    }
                    if (message.type != null && message.hasOwnProperty("type"))
                        object.type = options.enums === String ? $root.wm.protobuf.MethodType[message.type] === undefined ? message.type : $root.wm.protobuf.MethodType[message.type] : message.type;
                    if (message.request != null && message.hasOwnProperty("request"))
                        object.request = message.request;
                    if (message.timedOut != null && message.hasOwnProperty("timedOut"))
                        object.timedOut = message.timedOut;
                    if (message.retryMaxReached != null && message.hasOwnProperty("retryMaxReached"))
                        object.retryMaxReached = message.retryMaxReached;
                    if (message.responseAverage != null && message.hasOwnProperty("responseAverage"))
                        object.responseAverage = message.responseAverage;
                    if (message.retry != null && message.hasOwnProperty("retry"))
                        object.retry = message.retry;
                    if (message.failed != null && message.hasOwnProperty("failed"))
                        object.failed = message.failed;
                    return object;
                };

                /**
                 * Converts this RequestLog to JSON.
                 * @function toJSON
                 * @memberof wm.protobuf.SaveNetworkStatRequest.RequestLog
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                RequestLog.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                /**
                 * Gets the default type url for RequestLog
                 * @function getTypeUrl
                 * @memberof wm.protobuf.SaveNetworkStatRequest.RequestLog
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                RequestLog.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/wm.protobuf.SaveNetworkStatRequest.RequestLog";
                };

                return RequestLog;
            })();

            return SaveNetworkStatRequest;
        })();

        protobuf.SaveNetworkStatResponse = (function() {

            /**
             * Properties of a SaveNetworkStatResponse.
             * @memberof wm.protobuf
             * @interface ISaveNetworkStatResponse
             * @property {wm.protobuf.ErrorCode} error SaveNetworkStatResponse error
             */

            /**
             * Constructs a new SaveNetworkStatResponse.
             * @memberof wm.protobuf
             * @classdesc Represents a SaveNetworkStatResponse.
             * @implements ISaveNetworkStatResponse
             * @constructor
             * @param {wm.protobuf.ISaveNetworkStatResponse=} [properties] Properties to set
             */
            function SaveNetworkStatResponse(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * SaveNetworkStatResponse error.
             * @member {wm.protobuf.ErrorCode} error
             * @memberof wm.protobuf.SaveNetworkStatResponse
             * @instance
             */
            SaveNetworkStatResponse.prototype.error = 0;

            /**
             * Creates a new SaveNetworkStatResponse instance using the specified properties.
             * @function create
             * @memberof wm.protobuf.SaveNetworkStatResponse
             * @static
             * @param {wm.protobuf.ISaveNetworkStatResponse=} [properties] Properties to set
             * @returns {wm.protobuf.SaveNetworkStatResponse} SaveNetworkStatResponse instance
             */
            SaveNetworkStatResponse.create = function create(properties) {
                return new SaveNetworkStatResponse(properties);
            };

            /**
             * Encodes the specified SaveNetworkStatResponse message. Does not implicitly {@link wm.protobuf.SaveNetworkStatResponse.verify|verify} messages.
             * @function encode
             * @memberof wm.protobuf.SaveNetworkStatResponse
             * @static
             * @param {wm.protobuf.ISaveNetworkStatResponse} message SaveNetworkStatResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SaveNetworkStatResponse.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
                return writer;
            };

            /**
             * Encodes the specified SaveNetworkStatResponse message, length delimited. Does not implicitly {@link wm.protobuf.SaveNetworkStatResponse.verify|verify} messages.
             * @function encodeDelimited
             * @memberof wm.protobuf.SaveNetworkStatResponse
             * @static
             * @param {wm.protobuf.ISaveNetworkStatResponse} message SaveNetworkStatResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SaveNetworkStatResponse.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a SaveNetworkStatResponse message from the specified reader or buffer.
             * @function decode
             * @memberof wm.protobuf.SaveNetworkStatResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {wm.protobuf.SaveNetworkStatResponse} SaveNetworkStatResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SaveNetworkStatResponse.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.wm.protobuf.SaveNetworkStatResponse();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.error = reader.int32();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("error"))
                    throw $util.ProtocolError("missing required 'error'", { instance: message });
                return message;
            };

            /**
             * Decodes a SaveNetworkStatResponse message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof wm.protobuf.SaveNetworkStatResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {wm.protobuf.SaveNetworkStatResponse} SaveNetworkStatResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SaveNetworkStatResponse.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a SaveNetworkStatResponse message.
             * @function verify
             * @memberof wm.protobuf.SaveNetworkStatResponse
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            SaveNetworkStatResponse.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                switch (message.error) {
                default:
                    return "error: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 7:
                case 9:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 16:
                case 17:
                case 18:
                case 19:
                    break;
                }
                return null;
            };

            /**
             * Creates a SaveNetworkStatResponse message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof wm.protobuf.SaveNetworkStatResponse
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {wm.protobuf.SaveNetworkStatResponse} SaveNetworkStatResponse
             */
            SaveNetworkStatResponse.fromObject = function fromObject(object) {
                if (object instanceof $root.wm.protobuf.SaveNetworkStatResponse)
                    return object;
                let message = new $root.wm.protobuf.SaveNetworkStatResponse();
                switch (object.error) {
                default:
                    if (typeof object.error === "number") {
                        message.error = object.error;
                        break;
                    }
                    break;
                case "ERR_SUCCESS":
                case 0:
                    message.error = 0;
                    break;
                case "ERR_REQUEST":
                case 1:
                    message.error = 1;
                    break;
                case "ERR_NOT_FOUND":
                case 2:
                    message.error = 2;
                    break;
                case "ERR_ID_SERVER":
                case 3:
                    message.error = 3;
                    break;
                case "ERR_ID_BANNED":
                case 4:
                    message.error = 4;
                    break;
                case "ERR_USER_LOCKED":
                case 5:
                    message.error = 5;
                    break;
                case "ERR_USER_VERSION":
                case 6:
                    message.error = 6;
                    break;
                case "ERR_NAME_CONFLICTED":
                case 7:
                    message.error = 7;
                    break;
                case "ERR_FORBIDDEN":
                case 9:
                    message.error = 9;
                    break;
                case "ERR_USER_SUCCEEDED":
                case 11:
                    message.error = 11;
                    break;
                case "ERR_BEING_TRANSFERRED":
                case 12:
                    message.error = 12;
                    break;
                case "ERR_SCRATCH_LOCKED":
                case 13:
                    message.error = 13;
                    break;
                case "ERR_BINGO_REVENGE_LOCKED":
                case 14:
                    message.error = 14;
                    break;
                case "ERR_BINGO_ALREDY_LINKED":
                case 15:
                    message.error = 15;
                    break;
                case "ERR_BINGO_FINISHED":
                case 16:
                    message.error = 16;
                    break;
                case "ERR_BINGO_REACHED_MAX_USER":
                case 17:
                    message.error = 17;
                    break;
                case "ERR_CAR_NOT_FOUND":
                case 18:
                    message.error = 18;
                    break;
                case "ERR_BINGO_CARD_NOT_FOUND":
                case 19:
                    message.error = 19;
                    break;
                }
                return message;
            };

            /**
             * Creates a plain object from a SaveNetworkStatResponse message. Also converts values to other types if specified.
             * @function toObject
             * @memberof wm.protobuf.SaveNetworkStatResponse
             * @static
             * @param {wm.protobuf.SaveNetworkStatResponse} message SaveNetworkStatResponse
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            SaveNetworkStatResponse.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults)
                    object.error = options.enums === String ? "ERR_SUCCESS" : 0;
                if (message.error != null && message.hasOwnProperty("error"))
                    object.error = options.enums === String ? $root.wm.protobuf.ErrorCode[message.error] === undefined ? message.error : $root.wm.protobuf.ErrorCode[message.error] : message.error;
                return object;
            };

            /**
             * Converts this SaveNetworkStatResponse to JSON.
             * @function toJSON
             * @memberof wm.protobuf.SaveNetworkStatResponse
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            SaveNetworkStatResponse.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for SaveNetworkStatResponse
             * @function getTypeUrl
             * @memberof wm.protobuf.SaveNetworkStatResponse
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            SaveNetworkStatResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/wm.protobuf.SaveNetworkStatResponse";
            };

            return SaveNetworkStatResponse;
        })();

        protobuf.LoadGhostBingoTargetsRequest = (function() {

            /**
             * Properties of a LoadGhostBingoTargetsRequest.
             * @memberof wm.protobuf
             * @interface ILoadGhostBingoTargetsRequest
             * @property {number} carId LoadGhostBingoTargetsRequest carId
             * @property {number} area LoadGhostBingoTargetsRequest area
             */

            /**
             * Constructs a new LoadGhostBingoTargetsRequest.
             * @memberof wm.protobuf
             * @classdesc Represents a LoadGhostBingoTargetsRequest.
             * @implements ILoadGhostBingoTargetsRequest
             * @constructor
             * @param {wm.protobuf.ILoadGhostBingoTargetsRequest=} [properties] Properties to set
             */
            function LoadGhostBingoTargetsRequest(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * LoadGhostBingoTargetsRequest carId.
             * @member {number} carId
             * @memberof wm.protobuf.LoadGhostBingoTargetsRequest
             * @instance
             */
            LoadGhostBingoTargetsRequest.prototype.carId = 0;

            /**
             * LoadGhostBingoTargetsRequest area.
             * @member {number} area
             * @memberof wm.protobuf.LoadGhostBingoTargetsRequest
             * @instance
             */
            LoadGhostBingoTargetsRequest.prototype.area = 0;

            /**
             * Creates a new LoadGhostBingoTargetsRequest instance using the specified properties.
             * @function create
             * @memberof wm.protobuf.LoadGhostBingoTargetsRequest
             * @static
             * @param {wm.protobuf.ILoadGhostBingoTargetsRequest=} [properties] Properties to set
             * @returns {wm.protobuf.LoadGhostBingoTargetsRequest} LoadGhostBingoTargetsRequest instance
             */
            LoadGhostBingoTargetsRequest.create = function create(properties) {
                return new LoadGhostBingoTargetsRequest(properties);
            };

            /**
             * Encodes the specified LoadGhostBingoTargetsRequest message. Does not implicitly {@link wm.protobuf.LoadGhostBingoTargetsRequest.verify|verify} messages.
             * @function encode
             * @memberof wm.protobuf.LoadGhostBingoTargetsRequest
             * @static
             * @param {wm.protobuf.ILoadGhostBingoTargetsRequest} message LoadGhostBingoTargetsRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LoadGhostBingoTargetsRequest.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.carId);
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.area);
                return writer;
            };

            /**
             * Encodes the specified LoadGhostBingoTargetsRequest message, length delimited. Does not implicitly {@link wm.protobuf.LoadGhostBingoTargetsRequest.verify|verify} messages.
             * @function encodeDelimited
             * @memberof wm.protobuf.LoadGhostBingoTargetsRequest
             * @static
             * @param {wm.protobuf.ILoadGhostBingoTargetsRequest} message LoadGhostBingoTargetsRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LoadGhostBingoTargetsRequest.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a LoadGhostBingoTargetsRequest message from the specified reader or buffer.
             * @function decode
             * @memberof wm.protobuf.LoadGhostBingoTargetsRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {wm.protobuf.LoadGhostBingoTargetsRequest} LoadGhostBingoTargetsRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LoadGhostBingoTargetsRequest.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.wm.protobuf.LoadGhostBingoTargetsRequest();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.carId = reader.uint32();
                            break;
                        }
                    case 3: {
                            message.area = reader.uint32();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("carId"))
                    throw $util.ProtocolError("missing required 'carId'", { instance: message });
                if (!message.hasOwnProperty("area"))
                    throw $util.ProtocolError("missing required 'area'", { instance: message });
                return message;
            };

            /**
             * Decodes a LoadGhostBingoTargetsRequest message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof wm.protobuf.LoadGhostBingoTargetsRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {wm.protobuf.LoadGhostBingoTargetsRequest} LoadGhostBingoTargetsRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LoadGhostBingoTargetsRequest.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a LoadGhostBingoTargetsRequest message.
             * @function verify
             * @memberof wm.protobuf.LoadGhostBingoTargetsRequest
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            LoadGhostBingoTargetsRequest.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (!$util.isInteger(message.carId))
                    return "carId: integer expected";
                if (!$util.isInteger(message.area))
                    return "area: integer expected";
                return null;
            };

            /**
             * Creates a LoadGhostBingoTargetsRequest message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof wm.protobuf.LoadGhostBingoTargetsRequest
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {wm.protobuf.LoadGhostBingoTargetsRequest} LoadGhostBingoTargetsRequest
             */
            LoadGhostBingoTargetsRequest.fromObject = function fromObject(object) {
                if (object instanceof $root.wm.protobuf.LoadGhostBingoTargetsRequest)
                    return object;
                let message = new $root.wm.protobuf.LoadGhostBingoTargetsRequest();
                if (object.carId != null)
                    message.carId = object.carId >>> 0;
                if (object.area != null)
                    message.area = object.area >>> 0;
                return message;
            };

            /**
             * Creates a plain object from a LoadGhostBingoTargetsRequest message. Also converts values to other types if specified.
             * @function toObject
             * @memberof wm.protobuf.LoadGhostBingoTargetsRequest
             * @static
             * @param {wm.protobuf.LoadGhostBingoTargetsRequest} message LoadGhostBingoTargetsRequest
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            LoadGhostBingoTargetsRequest.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.carId = 0;
                    object.area = 0;
                }
                if (message.carId != null && message.hasOwnProperty("carId"))
                    object.carId = message.carId;
                if (message.area != null && message.hasOwnProperty("area"))
                    object.area = message.area;
                return object;
            };

            /**
             * Converts this LoadGhostBingoTargetsRequest to JSON.
             * @function toJSON
             * @memberof wm.protobuf.LoadGhostBingoTargetsRequest
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            LoadGhostBingoTargetsRequest.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for LoadGhostBingoTargetsRequest
             * @function getTypeUrl
             * @memberof wm.protobuf.LoadGhostBingoTargetsRequest
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            LoadGhostBingoTargetsRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/wm.protobuf.LoadGhostBingoTargetsRequest";
            };

            return LoadGhostBingoTargetsRequest;
        })();

        protobuf.LoadGhostBingoTargetsResponse = (function() {

            /**
             * Properties of a LoadGhostBingoTargetsResponse.
             * @memberof wm.protobuf
             * @interface ILoadGhostBingoTargetsResponse
             * @property {wm.protobuf.ErrorCode} error LoadGhostBingoTargetsResponse error
             * @property {Array.<wm.protobuf.IGhostCar>|null} [ghosts] LoadGhostBingoTargetsResponse ghosts
             * @property {wm.protobuf.PathSelectionMethod} selectionMethod LoadGhostBingoTargetsResponse selectionMethod
             * @property {Array.<wm.protobuf.LoadGhostBingoTargetsResponse.IRate>|null} [rates] LoadGhostBingoTargetsResponse rates
             */

            /**
             * Constructs a new LoadGhostBingoTargetsResponse.
             * @memberof wm.protobuf
             * @classdesc Represents a LoadGhostBingoTargetsResponse.
             * @implements ILoadGhostBingoTargetsResponse
             * @constructor
             * @param {wm.protobuf.ILoadGhostBingoTargetsResponse=} [properties] Properties to set
             */
            function LoadGhostBingoTargetsResponse(properties) {
                this.ghosts = [];
                this.rates = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * LoadGhostBingoTargetsResponse error.
             * @member {wm.protobuf.ErrorCode} error
             * @memberof wm.protobuf.LoadGhostBingoTargetsResponse
             * @instance
             */
            LoadGhostBingoTargetsResponse.prototype.error = 0;

            /**
             * LoadGhostBingoTargetsResponse ghosts.
             * @member {Array.<wm.protobuf.IGhostCar>} ghosts
             * @memberof wm.protobuf.LoadGhostBingoTargetsResponse
             * @instance
             */
            LoadGhostBingoTargetsResponse.prototype.ghosts = $util.emptyArray;

            /**
             * LoadGhostBingoTargetsResponse selectionMethod.
             * @member {wm.protobuf.PathSelectionMethod} selectionMethod
             * @memberof wm.protobuf.LoadGhostBingoTargetsResponse
             * @instance
             */
            LoadGhostBingoTargetsResponse.prototype.selectionMethod = 1;

            /**
             * LoadGhostBingoTargetsResponse rates.
             * @member {Array.<wm.protobuf.LoadGhostBingoTargetsResponse.IRate>} rates
             * @memberof wm.protobuf.LoadGhostBingoTargetsResponse
             * @instance
             */
            LoadGhostBingoTargetsResponse.prototype.rates = $util.emptyArray;

            /**
             * Creates a new LoadGhostBingoTargetsResponse instance using the specified properties.
             * @function create
             * @memberof wm.protobuf.LoadGhostBingoTargetsResponse
             * @static
             * @param {wm.protobuf.ILoadGhostBingoTargetsResponse=} [properties] Properties to set
             * @returns {wm.protobuf.LoadGhostBingoTargetsResponse} LoadGhostBingoTargetsResponse instance
             */
            LoadGhostBingoTargetsResponse.create = function create(properties) {
                return new LoadGhostBingoTargetsResponse(properties);
            };

            /**
             * Encodes the specified LoadGhostBingoTargetsResponse message. Does not implicitly {@link wm.protobuf.LoadGhostBingoTargetsResponse.verify|verify} messages.
             * @function encode
             * @memberof wm.protobuf.LoadGhostBingoTargetsResponse
             * @static
             * @param {wm.protobuf.ILoadGhostBingoTargetsResponse} message LoadGhostBingoTargetsResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LoadGhostBingoTargetsResponse.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
                if (message.ghosts != null && message.ghosts.length)
                    for (let i = 0; i < message.ghosts.length; ++i)
                        $root.wm.protobuf.GhostCar.encode(message.ghosts[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.selectionMethod);
                if (message.rates != null && message.rates.length)
                    for (let i = 0; i < message.rates.length; ++i)
                        $root.wm.protobuf.LoadGhostBingoTargetsResponse.Rate.encode(message.rates[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified LoadGhostBingoTargetsResponse message, length delimited. Does not implicitly {@link wm.protobuf.LoadGhostBingoTargetsResponse.verify|verify} messages.
             * @function encodeDelimited
             * @memberof wm.protobuf.LoadGhostBingoTargetsResponse
             * @static
             * @param {wm.protobuf.ILoadGhostBingoTargetsResponse} message LoadGhostBingoTargetsResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LoadGhostBingoTargetsResponse.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a LoadGhostBingoTargetsResponse message from the specified reader or buffer.
             * @function decode
             * @memberof wm.protobuf.LoadGhostBingoTargetsResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {wm.protobuf.LoadGhostBingoTargetsResponse} LoadGhostBingoTargetsResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LoadGhostBingoTargetsResponse.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.wm.protobuf.LoadGhostBingoTargetsResponse();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.error = reader.int32();
                            break;
                        }
                    case 2: {
                            if (!(message.ghosts && message.ghosts.length))
                                message.ghosts = [];
                            message.ghosts.push($root.wm.protobuf.GhostCar.decode(reader, reader.uint32()));
                            break;
                        }
                    case 4: {
                            message.selectionMethod = reader.int32();
                            break;
                        }
                    case 5: {
                            if (!(message.rates && message.rates.length))
                                message.rates = [];
                            message.rates.push($root.wm.protobuf.LoadGhostBingoTargetsResponse.Rate.decode(reader, reader.uint32()));
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("error"))
                    throw $util.ProtocolError("missing required 'error'", { instance: message });
                if (!message.hasOwnProperty("selectionMethod"))
                    throw $util.ProtocolError("missing required 'selectionMethod'", { instance: message });
                return message;
            };

            /**
             * Decodes a LoadGhostBingoTargetsResponse message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof wm.protobuf.LoadGhostBingoTargetsResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {wm.protobuf.LoadGhostBingoTargetsResponse} LoadGhostBingoTargetsResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LoadGhostBingoTargetsResponse.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a LoadGhostBingoTargetsResponse message.
             * @function verify
             * @memberof wm.protobuf.LoadGhostBingoTargetsResponse
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            LoadGhostBingoTargetsResponse.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                switch (message.error) {
                default:
                    return "error: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 7:
                case 9:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 16:
                case 17:
                case 18:
                case 19:
                    break;
                }
                if (message.ghosts != null && message.hasOwnProperty("ghosts")) {
                    if (!Array.isArray(message.ghosts))
                        return "ghosts: array expected";
                    for (let i = 0; i < message.ghosts.length; ++i) {
                        let error = $root.wm.protobuf.GhostCar.verify(message.ghosts[i]);
                        if (error)
                            return "ghosts." + error;
                    }
                }
                switch (message.selectionMethod) {
                default:
                    return "selectionMethod: enum value expected";
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                    break;
                }
                if (message.rates != null && message.hasOwnProperty("rates")) {
                    if (!Array.isArray(message.rates))
                        return "rates: array expected";
                    for (let i = 0; i < message.rates.length; ++i) {
                        let error = $root.wm.protobuf.LoadGhostBingoTargetsResponse.Rate.verify(message.rates[i]);
                        if (error)
                            return "rates." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a LoadGhostBingoTargetsResponse message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof wm.protobuf.LoadGhostBingoTargetsResponse
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {wm.protobuf.LoadGhostBingoTargetsResponse} LoadGhostBingoTargetsResponse
             */
            LoadGhostBingoTargetsResponse.fromObject = function fromObject(object) {
                if (object instanceof $root.wm.protobuf.LoadGhostBingoTargetsResponse)
                    return object;
                let message = new $root.wm.protobuf.LoadGhostBingoTargetsResponse();
                switch (object.error) {
                default:
                    if (typeof object.error === "number") {
                        message.error = object.error;
                        break;
                    }
                    break;
                case "ERR_SUCCESS":
                case 0:
                    message.error = 0;
                    break;
                case "ERR_REQUEST":
                case 1:
                    message.error = 1;
                    break;
                case "ERR_NOT_FOUND":
                case 2:
                    message.error = 2;
                    break;
                case "ERR_ID_SERVER":
                case 3:
                    message.error = 3;
                    break;
                case "ERR_ID_BANNED":
                case 4:
                    message.error = 4;
                    break;
                case "ERR_USER_LOCKED":
                case 5:
                    message.error = 5;
                    break;
                case "ERR_USER_VERSION":
                case 6:
                    message.error = 6;
                    break;
                case "ERR_NAME_CONFLICTED":
                case 7:
                    message.error = 7;
                    break;
                case "ERR_FORBIDDEN":
                case 9:
                    message.error = 9;
                    break;
                case "ERR_USER_SUCCEEDED":
                case 11:
                    message.error = 11;
                    break;
                case "ERR_BEING_TRANSFERRED":
                case 12:
                    message.error = 12;
                    break;
                case "ERR_SCRATCH_LOCKED":
                case 13:
                    message.error = 13;
                    break;
                case "ERR_BINGO_REVENGE_LOCKED":
                case 14:
                    message.error = 14;
                    break;
                case "ERR_BINGO_ALREDY_LINKED":
                case 15:
                    message.error = 15;
                    break;
                case "ERR_BINGO_FINISHED":
                case 16:
                    message.error = 16;
                    break;
                case "ERR_BINGO_REACHED_MAX_USER":
                case 17:
                    message.error = 17;
                    break;
                case "ERR_CAR_NOT_FOUND":
                case 18:
                    message.error = 18;
                    break;
                case "ERR_BINGO_CARD_NOT_FOUND":
                case 19:
                    message.error = 19;
                    break;
                }
                if (object.ghosts) {
                    if (!Array.isArray(object.ghosts))
                        throw TypeError(".wm.protobuf.LoadGhostBingoTargetsResponse.ghosts: array expected");
                    message.ghosts = [];
                    for (let i = 0; i < object.ghosts.length; ++i) {
                        if (typeof object.ghosts[i] !== "object")
                            throw TypeError(".wm.protobuf.LoadGhostBingoTargetsResponse.ghosts: object expected");
                        message.ghosts[i] = $root.wm.protobuf.GhostCar.fromObject(object.ghosts[i]);
                    }
                }
                switch (object.selectionMethod) {
                default:
                    if (typeof object.selectionMethod === "number") {
                        message.selectionMethod = object.selectionMethod;
                        break;
                    }
                    break;
                case "PATH_NEW":
                case 1:
                    message.selectionMethod = 1;
                    break;
                case "PATH_PLAIN":
                case 2:
                    message.selectionMethod = 2;
                    break;
                case "PATH_FRIEND":
                case 3:
                    message.selectionMethod = 3;
                    break;
                case "PATH_NORMAL":
                case 4:
                    message.selectionMethod = 4;
                    break;
                case "PATH_CHALLENGER":
                case 5:
                    message.selectionMethod = 5;
                    break;
                }
                if (object.rates) {
                    if (!Array.isArray(object.rates))
                        throw TypeError(".wm.protobuf.LoadGhostBingoTargetsResponse.rates: array expected");
                    message.rates = [];
                    for (let i = 0; i < object.rates.length; ++i) {
                        if (typeof object.rates[i] !== "object")
                            throw TypeError(".wm.protobuf.LoadGhostBingoTargetsResponse.rates: object expected");
                        message.rates[i] = $root.wm.protobuf.LoadGhostBingoTargetsResponse.Rate.fromObject(object.rates[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from a LoadGhostBingoTargetsResponse message. Also converts values to other types if specified.
             * @function toObject
             * @memberof wm.protobuf.LoadGhostBingoTargetsResponse
             * @static
             * @param {wm.protobuf.LoadGhostBingoTargetsResponse} message LoadGhostBingoTargetsResponse
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            LoadGhostBingoTargetsResponse.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults) {
                    object.ghosts = [];
                    object.rates = [];
                }
                if (options.defaults) {
                    object.error = options.enums === String ? "ERR_SUCCESS" : 0;
                    object.selectionMethod = options.enums === String ? "PATH_NEW" : 1;
                }
                if (message.error != null && message.hasOwnProperty("error"))
                    object.error = options.enums === String ? $root.wm.protobuf.ErrorCode[message.error] === undefined ? message.error : $root.wm.protobuf.ErrorCode[message.error] : message.error;
                if (message.ghosts && message.ghosts.length) {
                    object.ghosts = [];
                    for (let j = 0; j < message.ghosts.length; ++j)
                        object.ghosts[j] = $root.wm.protobuf.GhostCar.toObject(message.ghosts[j], options);
                }
                if (message.selectionMethod != null && message.hasOwnProperty("selectionMethod"))
                    object.selectionMethod = options.enums === String ? $root.wm.protobuf.PathSelectionMethod[message.selectionMethod] === undefined ? message.selectionMethod : $root.wm.protobuf.PathSelectionMethod[message.selectionMethod] : message.selectionMethod;
                if (message.rates && message.rates.length) {
                    object.rates = [];
                    for (let j = 0; j < message.rates.length; ++j)
                        object.rates[j] = $root.wm.protobuf.LoadGhostBingoTargetsResponse.Rate.toObject(message.rates[j], options);
                }
                return object;
            };

            /**
             * Converts this LoadGhostBingoTargetsResponse to JSON.
             * @function toJSON
             * @memberof wm.protobuf.LoadGhostBingoTargetsResponse
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            LoadGhostBingoTargetsResponse.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for LoadGhostBingoTargetsResponse
             * @function getTypeUrl
             * @memberof wm.protobuf.LoadGhostBingoTargetsResponse
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            LoadGhostBingoTargetsResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/wm.protobuf.LoadGhostBingoTargetsResponse";
            };

            LoadGhostBingoTargetsResponse.Rate = (function() {

                /**
                 * Properties of a Rate.
                 * @memberof wm.protobuf.LoadGhostBingoTargetsResponse
                 * @interface IRate
                 * @property {number} carId Rate carId
                 * @property {wm.protobuf.GhostRateType} type Rate type
                 * @property {number|null} [rate] Rate rate
                 */

                /**
                 * Constructs a new Rate.
                 * @memberof wm.protobuf.LoadGhostBingoTargetsResponse
                 * @classdesc Represents a Rate.
                 * @implements IRate
                 * @constructor
                 * @param {wm.protobuf.LoadGhostBingoTargetsResponse.IRate=} [properties] Properties to set
                 */
                function Rate(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * Rate carId.
                 * @member {number} carId
                 * @memberof wm.protobuf.LoadGhostBingoTargetsResponse.Rate
                 * @instance
                 */
                Rate.prototype.carId = 0;

                /**
                 * Rate type.
                 * @member {wm.protobuf.GhostRateType} type
                 * @memberof wm.protobuf.LoadGhostBingoTargetsResponse.Rate
                 * @instance
                 */
                Rate.prototype.type = 1;

                /**
                 * Rate rate.
                 * @member {number} rate
                 * @memberof wm.protobuf.LoadGhostBingoTargetsResponse.Rate
                 * @instance
                 */
                Rate.prototype.rate = 0;

                /**
                 * Creates a new Rate instance using the specified properties.
                 * @function create
                 * @memberof wm.protobuf.LoadGhostBingoTargetsResponse.Rate
                 * @static
                 * @param {wm.protobuf.LoadGhostBingoTargetsResponse.IRate=} [properties] Properties to set
                 * @returns {wm.protobuf.LoadGhostBingoTargetsResponse.Rate} Rate instance
                 */
                Rate.create = function create(properties) {
                    return new Rate(properties);
                };

                /**
                 * Encodes the specified Rate message. Does not implicitly {@link wm.protobuf.LoadGhostBingoTargetsResponse.Rate.verify|verify} messages.
                 * @function encode
                 * @memberof wm.protobuf.LoadGhostBingoTargetsResponse.Rate
                 * @static
                 * @param {wm.protobuf.LoadGhostBingoTargetsResponse.IRate} message Rate message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Rate.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.carId);
                    writer.uint32(/* id 2, wireType 0 =*/16).int32(message.type);
                    if (message.rate != null && Object.hasOwnProperty.call(message, "rate"))
                        writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.rate);
                    return writer;
                };

                /**
                 * Encodes the specified Rate message, length delimited. Does not implicitly {@link wm.protobuf.LoadGhostBingoTargetsResponse.Rate.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof wm.protobuf.LoadGhostBingoTargetsResponse.Rate
                 * @static
                 * @param {wm.protobuf.LoadGhostBingoTargetsResponse.IRate} message Rate message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Rate.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a Rate message from the specified reader or buffer.
                 * @function decode
                 * @memberof wm.protobuf.LoadGhostBingoTargetsResponse.Rate
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {wm.protobuf.LoadGhostBingoTargetsResponse.Rate} Rate
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Rate.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.wm.protobuf.LoadGhostBingoTargetsResponse.Rate();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.carId = reader.uint32();
                                break;
                            }
                        case 2: {
                                message.type = reader.int32();
                                break;
                            }
                        case 3: {
                                message.rate = reader.uint32();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    if (!message.hasOwnProperty("carId"))
                        throw $util.ProtocolError("missing required 'carId'", { instance: message });
                    if (!message.hasOwnProperty("type"))
                        throw $util.ProtocolError("missing required 'type'", { instance: message });
                    return message;
                };

                /**
                 * Decodes a Rate message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof wm.protobuf.LoadGhostBingoTargetsResponse.Rate
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {wm.protobuf.LoadGhostBingoTargetsResponse.Rate} Rate
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Rate.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a Rate message.
                 * @function verify
                 * @memberof wm.protobuf.LoadGhostBingoTargetsResponse.Rate
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Rate.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (!$util.isInteger(message.carId))
                        return "carId: integer expected";
                    switch (message.type) {
                    default:
                        return "type: enum value expected";
                    case 1:
                    case 2:
                    case 3:
                        break;
                    }
                    if (message.rate != null && message.hasOwnProperty("rate"))
                        if (!$util.isInteger(message.rate))
                            return "rate: integer expected";
                    return null;
                };

                /**
                 * Creates a Rate message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof wm.protobuf.LoadGhostBingoTargetsResponse.Rate
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {wm.protobuf.LoadGhostBingoTargetsResponse.Rate} Rate
                 */
                Rate.fromObject = function fromObject(object) {
                    if (object instanceof $root.wm.protobuf.LoadGhostBingoTargetsResponse.Rate)
                        return object;
                    let message = new $root.wm.protobuf.LoadGhostBingoTargetsResponse.Rate();
                    if (object.carId != null)
                        message.carId = object.carId >>> 0;
                    switch (object.type) {
                    default:
                        if (typeof object.type === "number") {
                            message.type = object.type;
                            break;
                        }
                        break;
                    case "GHOST_RATE_UNKNOWN":
                    case 1:
                        message.type = 1;
                        break;
                    case "GHOST_RATE_INVALID":
                    case 2:
                        message.type = 2;
                        break;
                    case "GHOST_RATE_VALID":
                    case 3:
                        message.type = 3;
                        break;
                    }
                    if (object.rate != null)
                        message.rate = object.rate >>> 0;
                    return message;
                };

                /**
                 * Creates a plain object from a Rate message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof wm.protobuf.LoadGhostBingoTargetsResponse.Rate
                 * @static
                 * @param {wm.protobuf.LoadGhostBingoTargetsResponse.Rate} message Rate
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Rate.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        object.carId = 0;
                        object.type = options.enums === String ? "GHOST_RATE_UNKNOWN" : 1;
                        object.rate = 0;
                    }
                    if (message.carId != null && message.hasOwnProperty("carId"))
                        object.carId = message.carId;
                    if (message.type != null && message.hasOwnProperty("type"))
                        object.type = options.enums === String ? $root.wm.protobuf.GhostRateType[message.type] === undefined ? message.type : $root.wm.protobuf.GhostRateType[message.type] : message.type;
                    if (message.rate != null && message.hasOwnProperty("rate"))
                        object.rate = message.rate;
                    return object;
                };

                /**
                 * Converts this Rate to JSON.
                 * @function toJSON
                 * @memberof wm.protobuf.LoadGhostBingoTargetsResponse.Rate
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Rate.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                /**
                 * Gets the default type url for Rate
                 * @function getTypeUrl
                 * @memberof wm.protobuf.LoadGhostBingoTargetsResponse.Rate
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                Rate.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/wm.protobuf.LoadGhostBingoTargetsResponse.Rate";
                };

                return Rate;
            })();

            return LoadGhostBingoTargetsResponse;
        })();

        protobuf.LoadBingoStatsRequest = (function() {

            /**
             * Properties of a LoadBingoStatsRequest.
             * @memberof wm.protobuf
             * @interface ILoadBingoStatsRequest
             * @property {number} userId LoadBingoStatsRequest userId
             */

            /**
             * Constructs a new LoadBingoStatsRequest.
             * @memberof wm.protobuf
             * @classdesc Represents a LoadBingoStatsRequest.
             * @implements ILoadBingoStatsRequest
             * @constructor
             * @param {wm.protobuf.ILoadBingoStatsRequest=} [properties] Properties to set
             */
            function LoadBingoStatsRequest(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * LoadBingoStatsRequest userId.
             * @member {number} userId
             * @memberof wm.protobuf.LoadBingoStatsRequest
             * @instance
             */
            LoadBingoStatsRequest.prototype.userId = 0;

            /**
             * Creates a new LoadBingoStatsRequest instance using the specified properties.
             * @function create
             * @memberof wm.protobuf.LoadBingoStatsRequest
             * @static
             * @param {wm.protobuf.ILoadBingoStatsRequest=} [properties] Properties to set
             * @returns {wm.protobuf.LoadBingoStatsRequest} LoadBingoStatsRequest instance
             */
            LoadBingoStatsRequest.create = function create(properties) {
                return new LoadBingoStatsRequest(properties);
            };

            /**
             * Encodes the specified LoadBingoStatsRequest message. Does not implicitly {@link wm.protobuf.LoadBingoStatsRequest.verify|verify} messages.
             * @function encode
             * @memberof wm.protobuf.LoadBingoStatsRequest
             * @static
             * @param {wm.protobuf.ILoadBingoStatsRequest} message LoadBingoStatsRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LoadBingoStatsRequest.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.userId);
                return writer;
            };

            /**
             * Encodes the specified LoadBingoStatsRequest message, length delimited. Does not implicitly {@link wm.protobuf.LoadBingoStatsRequest.verify|verify} messages.
             * @function encodeDelimited
             * @memberof wm.protobuf.LoadBingoStatsRequest
             * @static
             * @param {wm.protobuf.ILoadBingoStatsRequest} message LoadBingoStatsRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LoadBingoStatsRequest.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a LoadBingoStatsRequest message from the specified reader or buffer.
             * @function decode
             * @memberof wm.protobuf.LoadBingoStatsRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {wm.protobuf.LoadBingoStatsRequest} LoadBingoStatsRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LoadBingoStatsRequest.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.wm.protobuf.LoadBingoStatsRequest();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.userId = reader.uint32();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("userId"))
                    throw $util.ProtocolError("missing required 'userId'", { instance: message });
                return message;
            };

            /**
             * Decodes a LoadBingoStatsRequest message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof wm.protobuf.LoadBingoStatsRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {wm.protobuf.LoadBingoStatsRequest} LoadBingoStatsRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LoadBingoStatsRequest.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a LoadBingoStatsRequest message.
             * @function verify
             * @memberof wm.protobuf.LoadBingoStatsRequest
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            LoadBingoStatsRequest.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (!$util.isInteger(message.userId))
                    return "userId: integer expected";
                return null;
            };

            /**
             * Creates a LoadBingoStatsRequest message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof wm.protobuf.LoadBingoStatsRequest
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {wm.protobuf.LoadBingoStatsRequest} LoadBingoStatsRequest
             */
            LoadBingoStatsRequest.fromObject = function fromObject(object) {
                if (object instanceof $root.wm.protobuf.LoadBingoStatsRequest)
                    return object;
                let message = new $root.wm.protobuf.LoadBingoStatsRequest();
                if (object.userId != null)
                    message.userId = object.userId >>> 0;
                return message;
            };

            /**
             * Creates a plain object from a LoadBingoStatsRequest message. Also converts values to other types if specified.
             * @function toObject
             * @memberof wm.protobuf.LoadBingoStatsRequest
             * @static
             * @param {wm.protobuf.LoadBingoStatsRequest} message LoadBingoStatsRequest
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            LoadBingoStatsRequest.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults)
                    object.userId = 0;
                if (message.userId != null && message.hasOwnProperty("userId"))
                    object.userId = message.userId;
                return object;
            };

            /**
             * Converts this LoadBingoStatsRequest to JSON.
             * @function toJSON
             * @memberof wm.protobuf.LoadBingoStatsRequest
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            LoadBingoStatsRequest.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for LoadBingoStatsRequest
             * @function getTypeUrl
             * @memberof wm.protobuf.LoadBingoStatsRequest
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            LoadBingoStatsRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/wm.protobuf.LoadBingoStatsRequest";
            };

            return LoadBingoStatsRequest;
        })();

        protobuf.LoadBingoStatsResponse = (function() {

            /**
             * Properties of a LoadBingoStatsResponse.
             * @memberof wm.protobuf
             * @interface ILoadBingoStatsResponse
             * @property {wm.protobuf.ErrorCode} error LoadBingoStatsResponse error
             * @property {Array.<number>|null} [acquiredBingoNumbers] LoadBingoStatsResponse acquiredBingoNumbers
             * @property {number} receivedNumOfItems LoadBingoStatsResponse receivedNumOfItems
             * @property {boolean} unreceivedItems LoadBingoStatsResponse unreceivedItems
             */

            /**
             * Constructs a new LoadBingoStatsResponse.
             * @memberof wm.protobuf
             * @classdesc Represents a LoadBingoStatsResponse.
             * @implements ILoadBingoStatsResponse
             * @constructor
             * @param {wm.protobuf.ILoadBingoStatsResponse=} [properties] Properties to set
             */
            function LoadBingoStatsResponse(properties) {
                this.acquiredBingoNumbers = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * LoadBingoStatsResponse error.
             * @member {wm.protobuf.ErrorCode} error
             * @memberof wm.protobuf.LoadBingoStatsResponse
             * @instance
             */
            LoadBingoStatsResponse.prototype.error = 0;

            /**
             * LoadBingoStatsResponse acquiredBingoNumbers.
             * @member {Array.<number>} acquiredBingoNumbers
             * @memberof wm.protobuf.LoadBingoStatsResponse
             * @instance
             */
            LoadBingoStatsResponse.prototype.acquiredBingoNumbers = $util.emptyArray;

            /**
             * LoadBingoStatsResponse receivedNumOfItems.
             * @member {number} receivedNumOfItems
             * @memberof wm.protobuf.LoadBingoStatsResponse
             * @instance
             */
            LoadBingoStatsResponse.prototype.receivedNumOfItems = 0;

            /**
             * LoadBingoStatsResponse unreceivedItems.
             * @member {boolean} unreceivedItems
             * @memberof wm.protobuf.LoadBingoStatsResponse
             * @instance
             */
            LoadBingoStatsResponse.prototype.unreceivedItems = false;

            /**
             * Creates a new LoadBingoStatsResponse instance using the specified properties.
             * @function create
             * @memberof wm.protobuf.LoadBingoStatsResponse
             * @static
             * @param {wm.protobuf.ILoadBingoStatsResponse=} [properties] Properties to set
             * @returns {wm.protobuf.LoadBingoStatsResponse} LoadBingoStatsResponse instance
             */
            LoadBingoStatsResponse.create = function create(properties) {
                return new LoadBingoStatsResponse(properties);
            };

            /**
             * Encodes the specified LoadBingoStatsResponse message. Does not implicitly {@link wm.protobuf.LoadBingoStatsResponse.verify|verify} messages.
             * @function encode
             * @memberof wm.protobuf.LoadBingoStatsResponse
             * @static
             * @param {wm.protobuf.ILoadBingoStatsResponse} message LoadBingoStatsResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LoadBingoStatsResponse.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
                if (message.acquiredBingoNumbers != null && message.acquiredBingoNumbers.length)
                    for (let i = 0; i < message.acquiredBingoNumbers.length; ++i)
                        writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.acquiredBingoNumbers[i]);
                writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.receivedNumOfItems);
                writer.uint32(/* id 6, wireType 0 =*/48).bool(message.unreceivedItems);
                return writer;
            };

            /**
             * Encodes the specified LoadBingoStatsResponse message, length delimited. Does not implicitly {@link wm.protobuf.LoadBingoStatsResponse.verify|verify} messages.
             * @function encodeDelimited
             * @memberof wm.protobuf.LoadBingoStatsResponse
             * @static
             * @param {wm.protobuf.ILoadBingoStatsResponse} message LoadBingoStatsResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LoadBingoStatsResponse.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a LoadBingoStatsResponse message from the specified reader or buffer.
             * @function decode
             * @memberof wm.protobuf.LoadBingoStatsResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {wm.protobuf.LoadBingoStatsResponse} LoadBingoStatsResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LoadBingoStatsResponse.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.wm.protobuf.LoadBingoStatsResponse();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.error = reader.int32();
                            break;
                        }
                    case 3: {
                            if (!(message.acquiredBingoNumbers && message.acquiredBingoNumbers.length))
                                message.acquiredBingoNumbers = [];
                            if ((tag & 7) === 2) {
                                let end2 = reader.uint32() + reader.pos;
                                while (reader.pos < end2)
                                    message.acquiredBingoNumbers.push(reader.uint32());
                            } else
                                message.acquiredBingoNumbers.push(reader.uint32());
                            break;
                        }
                    case 5: {
                            message.receivedNumOfItems = reader.uint32();
                            break;
                        }
                    case 6: {
                            message.unreceivedItems = reader.bool();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("error"))
                    throw $util.ProtocolError("missing required 'error'", { instance: message });
                if (!message.hasOwnProperty("receivedNumOfItems"))
                    throw $util.ProtocolError("missing required 'receivedNumOfItems'", { instance: message });
                if (!message.hasOwnProperty("unreceivedItems"))
                    throw $util.ProtocolError("missing required 'unreceivedItems'", { instance: message });
                return message;
            };

            /**
             * Decodes a LoadBingoStatsResponse message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof wm.protobuf.LoadBingoStatsResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {wm.protobuf.LoadBingoStatsResponse} LoadBingoStatsResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LoadBingoStatsResponse.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a LoadBingoStatsResponse message.
             * @function verify
             * @memberof wm.protobuf.LoadBingoStatsResponse
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            LoadBingoStatsResponse.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                switch (message.error) {
                default:
                    return "error: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 7:
                case 9:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 16:
                case 17:
                case 18:
                case 19:
                    break;
                }
                if (message.acquiredBingoNumbers != null && message.hasOwnProperty("acquiredBingoNumbers")) {
                    if (!Array.isArray(message.acquiredBingoNumbers))
                        return "acquiredBingoNumbers: array expected";
                    for (let i = 0; i < message.acquiredBingoNumbers.length; ++i)
                        if (!$util.isInteger(message.acquiredBingoNumbers[i]))
                            return "acquiredBingoNumbers: integer[] expected";
                }
                if (!$util.isInteger(message.receivedNumOfItems))
                    return "receivedNumOfItems: integer expected";
                if (typeof message.unreceivedItems !== "boolean")
                    return "unreceivedItems: boolean expected";
                return null;
            };

            /**
             * Creates a LoadBingoStatsResponse message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof wm.protobuf.LoadBingoStatsResponse
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {wm.protobuf.LoadBingoStatsResponse} LoadBingoStatsResponse
             */
            LoadBingoStatsResponse.fromObject = function fromObject(object) {
                if (object instanceof $root.wm.protobuf.LoadBingoStatsResponse)
                    return object;
                let message = new $root.wm.protobuf.LoadBingoStatsResponse();
                switch (object.error) {
                default:
                    if (typeof object.error === "number") {
                        message.error = object.error;
                        break;
                    }
                    break;
                case "ERR_SUCCESS":
                case 0:
                    message.error = 0;
                    break;
                case "ERR_REQUEST":
                case 1:
                    message.error = 1;
                    break;
                case "ERR_NOT_FOUND":
                case 2:
                    message.error = 2;
                    break;
                case "ERR_ID_SERVER":
                case 3:
                    message.error = 3;
                    break;
                case "ERR_ID_BANNED":
                case 4:
                    message.error = 4;
                    break;
                case "ERR_USER_LOCKED":
                case 5:
                    message.error = 5;
                    break;
                case "ERR_USER_VERSION":
                case 6:
                    message.error = 6;
                    break;
                case "ERR_NAME_CONFLICTED":
                case 7:
                    message.error = 7;
                    break;
                case "ERR_FORBIDDEN":
                case 9:
                    message.error = 9;
                    break;
                case "ERR_USER_SUCCEEDED":
                case 11:
                    message.error = 11;
                    break;
                case "ERR_BEING_TRANSFERRED":
                case 12:
                    message.error = 12;
                    break;
                case "ERR_SCRATCH_LOCKED":
                case 13:
                    message.error = 13;
                    break;
                case "ERR_BINGO_REVENGE_LOCKED":
                case 14:
                    message.error = 14;
                    break;
                case "ERR_BINGO_ALREDY_LINKED":
                case 15:
                    message.error = 15;
                    break;
                case "ERR_BINGO_FINISHED":
                case 16:
                    message.error = 16;
                    break;
                case "ERR_BINGO_REACHED_MAX_USER":
                case 17:
                    message.error = 17;
                    break;
                case "ERR_CAR_NOT_FOUND":
                case 18:
                    message.error = 18;
                    break;
                case "ERR_BINGO_CARD_NOT_FOUND":
                case 19:
                    message.error = 19;
                    break;
                }
                if (object.acquiredBingoNumbers) {
                    if (!Array.isArray(object.acquiredBingoNumbers))
                        throw TypeError(".wm.protobuf.LoadBingoStatsResponse.acquiredBingoNumbers: array expected");
                    message.acquiredBingoNumbers = [];
                    for (let i = 0; i < object.acquiredBingoNumbers.length; ++i)
                        message.acquiredBingoNumbers[i] = object.acquiredBingoNumbers[i] >>> 0;
                }
                if (object.receivedNumOfItems != null)
                    message.receivedNumOfItems = object.receivedNumOfItems >>> 0;
                if (object.unreceivedItems != null)
                    message.unreceivedItems = Boolean(object.unreceivedItems);
                return message;
            };

            /**
             * Creates a plain object from a LoadBingoStatsResponse message. Also converts values to other types if specified.
             * @function toObject
             * @memberof wm.protobuf.LoadBingoStatsResponse
             * @static
             * @param {wm.protobuf.LoadBingoStatsResponse} message LoadBingoStatsResponse
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            LoadBingoStatsResponse.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.acquiredBingoNumbers = [];
                if (options.defaults) {
                    object.error = options.enums === String ? "ERR_SUCCESS" : 0;
                    object.receivedNumOfItems = 0;
                    object.unreceivedItems = false;
                }
                if (message.error != null && message.hasOwnProperty("error"))
                    object.error = options.enums === String ? $root.wm.protobuf.ErrorCode[message.error] === undefined ? message.error : $root.wm.protobuf.ErrorCode[message.error] : message.error;
                if (message.acquiredBingoNumbers && message.acquiredBingoNumbers.length) {
                    object.acquiredBingoNumbers = [];
                    for (let j = 0; j < message.acquiredBingoNumbers.length; ++j)
                        object.acquiredBingoNumbers[j] = message.acquiredBingoNumbers[j];
                }
                if (message.receivedNumOfItems != null && message.hasOwnProperty("receivedNumOfItems"))
                    object.receivedNumOfItems = message.receivedNumOfItems;
                if (message.unreceivedItems != null && message.hasOwnProperty("unreceivedItems"))
                    object.unreceivedItems = message.unreceivedItems;
                return object;
            };

            /**
             * Converts this LoadBingoStatsResponse to JSON.
             * @function toJSON
             * @memberof wm.protobuf.LoadBingoStatsResponse
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            LoadBingoStatsResponse.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for LoadBingoStatsResponse
             * @function getTypeUrl
             * @memberof wm.protobuf.LoadBingoStatsResponse
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            LoadBingoStatsResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/wm.protobuf.LoadBingoStatsResponse";
            };

            return LoadBingoStatsResponse;
        })();

        protobuf.BingoReceivableItemsRequest = (function() {

            /**
             * Properties of a BingoReceivableItemsRequest.
             * @memberof wm.protobuf
             * @interface IBingoReceivableItemsRequest
             * @property {number} userId BingoReceivableItemsRequest userId
             */

            /**
             * Constructs a new BingoReceivableItemsRequest.
             * @memberof wm.protobuf
             * @classdesc Represents a BingoReceivableItemsRequest.
             * @implements IBingoReceivableItemsRequest
             * @constructor
             * @param {wm.protobuf.IBingoReceivableItemsRequest=} [properties] Properties to set
             */
            function BingoReceivableItemsRequest(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * BingoReceivableItemsRequest userId.
             * @member {number} userId
             * @memberof wm.protobuf.BingoReceivableItemsRequest
             * @instance
             */
            BingoReceivableItemsRequest.prototype.userId = 0;

            /**
             * Creates a new BingoReceivableItemsRequest instance using the specified properties.
             * @function create
             * @memberof wm.protobuf.BingoReceivableItemsRequest
             * @static
             * @param {wm.protobuf.IBingoReceivableItemsRequest=} [properties] Properties to set
             * @returns {wm.protobuf.BingoReceivableItemsRequest} BingoReceivableItemsRequest instance
             */
            BingoReceivableItemsRequest.create = function create(properties) {
                return new BingoReceivableItemsRequest(properties);
            };

            /**
             * Encodes the specified BingoReceivableItemsRequest message. Does not implicitly {@link wm.protobuf.BingoReceivableItemsRequest.verify|verify} messages.
             * @function encode
             * @memberof wm.protobuf.BingoReceivableItemsRequest
             * @static
             * @param {wm.protobuf.IBingoReceivableItemsRequest} message BingoReceivableItemsRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            BingoReceivableItemsRequest.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.userId);
                return writer;
            };

            /**
             * Encodes the specified BingoReceivableItemsRequest message, length delimited. Does not implicitly {@link wm.protobuf.BingoReceivableItemsRequest.verify|verify} messages.
             * @function encodeDelimited
             * @memberof wm.protobuf.BingoReceivableItemsRequest
             * @static
             * @param {wm.protobuf.IBingoReceivableItemsRequest} message BingoReceivableItemsRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            BingoReceivableItemsRequest.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a BingoReceivableItemsRequest message from the specified reader or buffer.
             * @function decode
             * @memberof wm.protobuf.BingoReceivableItemsRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {wm.protobuf.BingoReceivableItemsRequest} BingoReceivableItemsRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            BingoReceivableItemsRequest.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.wm.protobuf.BingoReceivableItemsRequest();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.userId = reader.uint32();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("userId"))
                    throw $util.ProtocolError("missing required 'userId'", { instance: message });
                return message;
            };

            /**
             * Decodes a BingoReceivableItemsRequest message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof wm.protobuf.BingoReceivableItemsRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {wm.protobuf.BingoReceivableItemsRequest} BingoReceivableItemsRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            BingoReceivableItemsRequest.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a BingoReceivableItemsRequest message.
             * @function verify
             * @memberof wm.protobuf.BingoReceivableItemsRequest
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            BingoReceivableItemsRequest.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (!$util.isInteger(message.userId))
                    return "userId: integer expected";
                return null;
            };

            /**
             * Creates a BingoReceivableItemsRequest message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof wm.protobuf.BingoReceivableItemsRequest
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {wm.protobuf.BingoReceivableItemsRequest} BingoReceivableItemsRequest
             */
            BingoReceivableItemsRequest.fromObject = function fromObject(object) {
                if (object instanceof $root.wm.protobuf.BingoReceivableItemsRequest)
                    return object;
                let message = new $root.wm.protobuf.BingoReceivableItemsRequest();
                if (object.userId != null)
                    message.userId = object.userId >>> 0;
                return message;
            };

            /**
             * Creates a plain object from a BingoReceivableItemsRequest message. Also converts values to other types if specified.
             * @function toObject
             * @memberof wm.protobuf.BingoReceivableItemsRequest
             * @static
             * @param {wm.protobuf.BingoReceivableItemsRequest} message BingoReceivableItemsRequest
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            BingoReceivableItemsRequest.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults)
                    object.userId = 0;
                if (message.userId != null && message.hasOwnProperty("userId"))
                    object.userId = message.userId;
                return object;
            };

            /**
             * Converts this BingoReceivableItemsRequest to JSON.
             * @function toJSON
             * @memberof wm.protobuf.BingoReceivableItemsRequest
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            BingoReceivableItemsRequest.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for BingoReceivableItemsRequest
             * @function getTypeUrl
             * @memberof wm.protobuf.BingoReceivableItemsRequest
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            BingoReceivableItemsRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/wm.protobuf.BingoReceivableItemsRequest";
            };

            return BingoReceivableItemsRequest;
        })();

        protobuf.BingoReceivableItemsResponse = (function() {

            /**
             * Properties of a BingoReceivableItemsResponse.
             * @memberof wm.protobuf
             * @interface IBingoReceivableItemsResponse
             * @property {wm.protobuf.ErrorCode} error BingoReceivableItemsResponse error
             * @property {Array.<wm.protobuf.IUserItem>|null} [ownedUserItems] BingoReceivableItemsResponse ownedUserItems
             */

            /**
             * Constructs a new BingoReceivableItemsResponse.
             * @memberof wm.protobuf
             * @classdesc Represents a BingoReceivableItemsResponse.
             * @implements IBingoReceivableItemsResponse
             * @constructor
             * @param {wm.protobuf.IBingoReceivableItemsResponse=} [properties] Properties to set
             */
            function BingoReceivableItemsResponse(properties) {
                this.ownedUserItems = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * BingoReceivableItemsResponse error.
             * @member {wm.protobuf.ErrorCode} error
             * @memberof wm.protobuf.BingoReceivableItemsResponse
             * @instance
             */
            BingoReceivableItemsResponse.prototype.error = 0;

            /**
             * BingoReceivableItemsResponse ownedUserItems.
             * @member {Array.<wm.protobuf.IUserItem>} ownedUserItems
             * @memberof wm.protobuf.BingoReceivableItemsResponse
             * @instance
             */
            BingoReceivableItemsResponse.prototype.ownedUserItems = $util.emptyArray;

            /**
             * Creates a new BingoReceivableItemsResponse instance using the specified properties.
             * @function create
             * @memberof wm.protobuf.BingoReceivableItemsResponse
             * @static
             * @param {wm.protobuf.IBingoReceivableItemsResponse=} [properties] Properties to set
             * @returns {wm.protobuf.BingoReceivableItemsResponse} BingoReceivableItemsResponse instance
             */
            BingoReceivableItemsResponse.create = function create(properties) {
                return new BingoReceivableItemsResponse(properties);
            };

            /**
             * Encodes the specified BingoReceivableItemsResponse message. Does not implicitly {@link wm.protobuf.BingoReceivableItemsResponse.verify|verify} messages.
             * @function encode
             * @memberof wm.protobuf.BingoReceivableItemsResponse
             * @static
             * @param {wm.protobuf.IBingoReceivableItemsResponse} message BingoReceivableItemsResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            BingoReceivableItemsResponse.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
                if (message.ownedUserItems != null && message.ownedUserItems.length)
                    for (let i = 0; i < message.ownedUserItems.length; ++i)
                        $root.wm.protobuf.UserItem.encode(message.ownedUserItems[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified BingoReceivableItemsResponse message, length delimited. Does not implicitly {@link wm.protobuf.BingoReceivableItemsResponse.verify|verify} messages.
             * @function encodeDelimited
             * @memberof wm.protobuf.BingoReceivableItemsResponse
             * @static
             * @param {wm.protobuf.IBingoReceivableItemsResponse} message BingoReceivableItemsResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            BingoReceivableItemsResponse.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a BingoReceivableItemsResponse message from the specified reader or buffer.
             * @function decode
             * @memberof wm.protobuf.BingoReceivableItemsResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {wm.protobuf.BingoReceivableItemsResponse} BingoReceivableItemsResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            BingoReceivableItemsResponse.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.wm.protobuf.BingoReceivableItemsResponse();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.error = reader.int32();
                            break;
                        }
                    case 2: {
                            if (!(message.ownedUserItems && message.ownedUserItems.length))
                                message.ownedUserItems = [];
                            message.ownedUserItems.push($root.wm.protobuf.UserItem.decode(reader, reader.uint32()));
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("error"))
                    throw $util.ProtocolError("missing required 'error'", { instance: message });
                return message;
            };

            /**
             * Decodes a BingoReceivableItemsResponse message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof wm.protobuf.BingoReceivableItemsResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {wm.protobuf.BingoReceivableItemsResponse} BingoReceivableItemsResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            BingoReceivableItemsResponse.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a BingoReceivableItemsResponse message.
             * @function verify
             * @memberof wm.protobuf.BingoReceivableItemsResponse
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            BingoReceivableItemsResponse.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                switch (message.error) {
                default:
                    return "error: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 7:
                case 9:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 16:
                case 17:
                case 18:
                case 19:
                    break;
                }
                if (message.ownedUserItems != null && message.hasOwnProperty("ownedUserItems")) {
                    if (!Array.isArray(message.ownedUserItems))
                        return "ownedUserItems: array expected";
                    for (let i = 0; i < message.ownedUserItems.length; ++i) {
                        let error = $root.wm.protobuf.UserItem.verify(message.ownedUserItems[i]);
                        if (error)
                            return "ownedUserItems." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a BingoReceivableItemsResponse message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof wm.protobuf.BingoReceivableItemsResponse
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {wm.protobuf.BingoReceivableItemsResponse} BingoReceivableItemsResponse
             */
            BingoReceivableItemsResponse.fromObject = function fromObject(object) {
                if (object instanceof $root.wm.protobuf.BingoReceivableItemsResponse)
                    return object;
                let message = new $root.wm.protobuf.BingoReceivableItemsResponse();
                switch (object.error) {
                default:
                    if (typeof object.error === "number") {
                        message.error = object.error;
                        break;
                    }
                    break;
                case "ERR_SUCCESS":
                case 0:
                    message.error = 0;
                    break;
                case "ERR_REQUEST":
                case 1:
                    message.error = 1;
                    break;
                case "ERR_NOT_FOUND":
                case 2:
                    message.error = 2;
                    break;
                case "ERR_ID_SERVER":
                case 3:
                    message.error = 3;
                    break;
                case "ERR_ID_BANNED":
                case 4:
                    message.error = 4;
                    break;
                case "ERR_USER_LOCKED":
                case 5:
                    message.error = 5;
                    break;
                case "ERR_USER_VERSION":
                case 6:
                    message.error = 6;
                    break;
                case "ERR_NAME_CONFLICTED":
                case 7:
                    message.error = 7;
                    break;
                case "ERR_FORBIDDEN":
                case 9:
                    message.error = 9;
                    break;
                case "ERR_USER_SUCCEEDED":
                case 11:
                    message.error = 11;
                    break;
                case "ERR_BEING_TRANSFERRED":
                case 12:
                    message.error = 12;
                    break;
                case "ERR_SCRATCH_LOCKED":
                case 13:
                    message.error = 13;
                    break;
                case "ERR_BINGO_REVENGE_LOCKED":
                case 14:
                    message.error = 14;
                    break;
                case "ERR_BINGO_ALREDY_LINKED":
                case 15:
                    message.error = 15;
                    break;
                case "ERR_BINGO_FINISHED":
                case 16:
                    message.error = 16;
                    break;
                case "ERR_BINGO_REACHED_MAX_USER":
                case 17:
                    message.error = 17;
                    break;
                case "ERR_CAR_NOT_FOUND":
                case 18:
                    message.error = 18;
                    break;
                case "ERR_BINGO_CARD_NOT_FOUND":
                case 19:
                    message.error = 19;
                    break;
                }
                if (object.ownedUserItems) {
                    if (!Array.isArray(object.ownedUserItems))
                        throw TypeError(".wm.protobuf.BingoReceivableItemsResponse.ownedUserItems: array expected");
                    message.ownedUserItems = [];
                    for (let i = 0; i < object.ownedUserItems.length; ++i) {
                        if (typeof object.ownedUserItems[i] !== "object")
                            throw TypeError(".wm.protobuf.BingoReceivableItemsResponse.ownedUserItems: object expected");
                        message.ownedUserItems[i] = $root.wm.protobuf.UserItem.fromObject(object.ownedUserItems[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from a BingoReceivableItemsResponse message. Also converts values to other types if specified.
             * @function toObject
             * @memberof wm.protobuf.BingoReceivableItemsResponse
             * @static
             * @param {wm.protobuf.BingoReceivableItemsResponse} message BingoReceivableItemsResponse
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            BingoReceivableItemsResponse.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.ownedUserItems = [];
                if (options.defaults)
                    object.error = options.enums === String ? "ERR_SUCCESS" : 0;
                if (message.error != null && message.hasOwnProperty("error"))
                    object.error = options.enums === String ? $root.wm.protobuf.ErrorCode[message.error] === undefined ? message.error : $root.wm.protobuf.ErrorCode[message.error] : message.error;
                if (message.ownedUserItems && message.ownedUserItems.length) {
                    object.ownedUserItems = [];
                    for (let j = 0; j < message.ownedUserItems.length; ++j)
                        object.ownedUserItems[j] = $root.wm.protobuf.UserItem.toObject(message.ownedUserItems[j], options);
                }
                return object;
            };

            /**
             * Converts this BingoReceivableItemsResponse to JSON.
             * @function toJSON
             * @memberof wm.protobuf.BingoReceivableItemsResponse
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            BingoReceivableItemsResponse.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for BingoReceivableItemsResponse
             * @function getTypeUrl
             * @memberof wm.protobuf.BingoReceivableItemsResponse
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            BingoReceivableItemsResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/wm.protobuf.BingoReceivableItemsResponse";
            };

            return BingoReceivableItemsResponse;
        })();

        protobuf.MergeBingoCardRequest = (function() {

            /**
             * Properties of a MergeBingoCardRequest.
             * @memberof wm.protobuf
             * @interface IMergeBingoCardRequest
             * @property {Array.<wm.protobuf.MergeBingoCardRequest.IUser>|null} [userList] MergeBingoCardRequest userList
             */

            /**
             * Constructs a new MergeBingoCardRequest.
             * @memberof wm.protobuf
             * @classdesc Represents a MergeBingoCardRequest.
             * @implements IMergeBingoCardRequest
             * @constructor
             * @param {wm.protobuf.IMergeBingoCardRequest=} [properties] Properties to set
             */
            function MergeBingoCardRequest(properties) {
                this.userList = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * MergeBingoCardRequest userList.
             * @member {Array.<wm.protobuf.MergeBingoCardRequest.IUser>} userList
             * @memberof wm.protobuf.MergeBingoCardRequest
             * @instance
             */
            MergeBingoCardRequest.prototype.userList = $util.emptyArray;

            /**
             * Creates a new MergeBingoCardRequest instance using the specified properties.
             * @function create
             * @memberof wm.protobuf.MergeBingoCardRequest
             * @static
             * @param {wm.protobuf.IMergeBingoCardRequest=} [properties] Properties to set
             * @returns {wm.protobuf.MergeBingoCardRequest} MergeBingoCardRequest instance
             */
            MergeBingoCardRequest.create = function create(properties) {
                return new MergeBingoCardRequest(properties);
            };

            /**
             * Encodes the specified MergeBingoCardRequest message. Does not implicitly {@link wm.protobuf.MergeBingoCardRequest.verify|verify} messages.
             * @function encode
             * @memberof wm.protobuf.MergeBingoCardRequest
             * @static
             * @param {wm.protobuf.IMergeBingoCardRequest} message MergeBingoCardRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            MergeBingoCardRequest.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.userList != null && message.userList.length)
                    for (let i = 0; i < message.userList.length; ++i)
                        $root.wm.protobuf.MergeBingoCardRequest.User.encode(message.userList[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified MergeBingoCardRequest message, length delimited. Does not implicitly {@link wm.protobuf.MergeBingoCardRequest.verify|verify} messages.
             * @function encodeDelimited
             * @memberof wm.protobuf.MergeBingoCardRequest
             * @static
             * @param {wm.protobuf.IMergeBingoCardRequest} message MergeBingoCardRequest message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            MergeBingoCardRequest.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a MergeBingoCardRequest message from the specified reader or buffer.
             * @function decode
             * @memberof wm.protobuf.MergeBingoCardRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {wm.protobuf.MergeBingoCardRequest} MergeBingoCardRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            MergeBingoCardRequest.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.wm.protobuf.MergeBingoCardRequest();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            if (!(message.userList && message.userList.length))
                                message.userList = [];
                            message.userList.push($root.wm.protobuf.MergeBingoCardRequest.User.decode(reader, reader.uint32()));
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a MergeBingoCardRequest message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof wm.protobuf.MergeBingoCardRequest
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {wm.protobuf.MergeBingoCardRequest} MergeBingoCardRequest
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            MergeBingoCardRequest.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a MergeBingoCardRequest message.
             * @function verify
             * @memberof wm.protobuf.MergeBingoCardRequest
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            MergeBingoCardRequest.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.userList != null && message.hasOwnProperty("userList")) {
                    if (!Array.isArray(message.userList))
                        return "userList: array expected";
                    for (let i = 0; i < message.userList.length; ++i) {
                        let error = $root.wm.protobuf.MergeBingoCardRequest.User.verify(message.userList[i]);
                        if (error)
                            return "userList." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a MergeBingoCardRequest message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof wm.protobuf.MergeBingoCardRequest
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {wm.protobuf.MergeBingoCardRequest} MergeBingoCardRequest
             */
            MergeBingoCardRequest.fromObject = function fromObject(object) {
                if (object instanceof $root.wm.protobuf.MergeBingoCardRequest)
                    return object;
                let message = new $root.wm.protobuf.MergeBingoCardRequest();
                if (object.userList) {
                    if (!Array.isArray(object.userList))
                        throw TypeError(".wm.protobuf.MergeBingoCardRequest.userList: array expected");
                    message.userList = [];
                    for (let i = 0; i < object.userList.length; ++i) {
                        if (typeof object.userList[i] !== "object")
                            throw TypeError(".wm.protobuf.MergeBingoCardRequest.userList: object expected");
                        message.userList[i] = $root.wm.protobuf.MergeBingoCardRequest.User.fromObject(object.userList[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from a MergeBingoCardRequest message. Also converts values to other types if specified.
             * @function toObject
             * @memberof wm.protobuf.MergeBingoCardRequest
             * @static
             * @param {wm.protobuf.MergeBingoCardRequest} message MergeBingoCardRequest
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            MergeBingoCardRequest.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.userList = [];
                if (message.userList && message.userList.length) {
                    object.userList = [];
                    for (let j = 0; j < message.userList.length; ++j)
                        object.userList[j] = $root.wm.protobuf.MergeBingoCardRequest.User.toObject(message.userList[j], options);
                }
                return object;
            };

            /**
             * Converts this MergeBingoCardRequest to JSON.
             * @function toJSON
             * @memberof wm.protobuf.MergeBingoCardRequest
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            MergeBingoCardRequest.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for MergeBingoCardRequest
             * @function getTypeUrl
             * @memberof wm.protobuf.MergeBingoCardRequest
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            MergeBingoCardRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/wm.protobuf.MergeBingoCardRequest";
            };

            MergeBingoCardRequest.User = (function() {

                /**
                 * Properties of a User.
                 * @memberof wm.protobuf.MergeBingoCardRequest
                 * @interface IUser
                 * @property {string|null} [cardChipId] User cardChipId
                 * @property {string|null} [accessCode] User accessCode
                 * @property {number|null} [cardTypeCode] User cardTypeCode
                 * @property {number|null} [cardRegionCode] User cardRegionCode
                 * @property {wm.protobuf.DeviceType|null} [device] User device
                 */

                /**
                 * Constructs a new User.
                 * @memberof wm.protobuf.MergeBingoCardRequest
                 * @classdesc Represents a User.
                 * @implements IUser
                 * @constructor
                 * @param {wm.protobuf.MergeBingoCardRequest.IUser=} [properties] Properties to set
                 */
                function User(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * User cardChipId.
                 * @member {string} cardChipId
                 * @memberof wm.protobuf.MergeBingoCardRequest.User
                 * @instance
                 */
                User.prototype.cardChipId = "";

                /**
                 * User accessCode.
                 * @member {string} accessCode
                 * @memberof wm.protobuf.MergeBingoCardRequest.User
                 * @instance
                 */
                User.prototype.accessCode = "";

                /**
                 * User cardTypeCode.
                 * @member {number} cardTypeCode
                 * @memberof wm.protobuf.MergeBingoCardRequest.User
                 * @instance
                 */
                User.prototype.cardTypeCode = 0;

                /**
                 * User cardRegionCode.
                 * @member {number} cardRegionCode
                 * @memberof wm.protobuf.MergeBingoCardRequest.User
                 * @instance
                 */
                User.prototype.cardRegionCode = 0;

                /**
                 * User device.
                 * @member {wm.protobuf.DeviceType} device
                 * @memberof wm.protobuf.MergeBingoCardRequest.User
                 * @instance
                 */
                User.prototype.device = 0;

                /**
                 * Creates a new User instance using the specified properties.
                 * @function create
                 * @memberof wm.protobuf.MergeBingoCardRequest.User
                 * @static
                 * @param {wm.protobuf.MergeBingoCardRequest.IUser=} [properties] Properties to set
                 * @returns {wm.protobuf.MergeBingoCardRequest.User} User instance
                 */
                User.create = function create(properties) {
                    return new User(properties);
                };

                /**
                 * Encodes the specified User message. Does not implicitly {@link wm.protobuf.MergeBingoCardRequest.User.verify|verify} messages.
                 * @function encode
                 * @memberof wm.protobuf.MergeBingoCardRequest.User
                 * @static
                 * @param {wm.protobuf.MergeBingoCardRequest.IUser} message User message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                User.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.cardChipId != null && Object.hasOwnProperty.call(message, "cardChipId"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.cardChipId);
                    if (message.accessCode != null && Object.hasOwnProperty.call(message, "accessCode"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.accessCode);
                    if (message.cardTypeCode != null && Object.hasOwnProperty.call(message, "cardTypeCode"))
                        writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.cardTypeCode);
                    if (message.cardRegionCode != null && Object.hasOwnProperty.call(message, "cardRegionCode"))
                        writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.cardRegionCode);
                    if (message.device != null && Object.hasOwnProperty.call(message, "device"))
                        writer.uint32(/* id 5, wireType 0 =*/40).int32(message.device);
                    return writer;
                };

                /**
                 * Encodes the specified User message, length delimited. Does not implicitly {@link wm.protobuf.MergeBingoCardRequest.User.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof wm.protobuf.MergeBingoCardRequest.User
                 * @static
                 * @param {wm.protobuf.MergeBingoCardRequest.IUser} message User message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                User.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a User message from the specified reader or buffer.
                 * @function decode
                 * @memberof wm.protobuf.MergeBingoCardRequest.User
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {wm.protobuf.MergeBingoCardRequest.User} User
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                User.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.wm.protobuf.MergeBingoCardRequest.User();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.cardChipId = reader.string();
                                break;
                            }
                        case 2: {
                                message.accessCode = reader.string();
                                break;
                            }
                        case 3: {
                                message.cardTypeCode = reader.uint32();
                                break;
                            }
                        case 4: {
                                message.cardRegionCode = reader.uint32();
                                break;
                            }
                        case 5: {
                                message.device = reader.int32();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a User message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof wm.protobuf.MergeBingoCardRequest.User
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {wm.protobuf.MergeBingoCardRequest.User} User
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                User.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a User message.
                 * @function verify
                 * @memberof wm.protobuf.MergeBingoCardRequest.User
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                User.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.cardChipId != null && message.hasOwnProperty("cardChipId"))
                        if (!$util.isString(message.cardChipId))
                            return "cardChipId: string expected";
                    if (message.accessCode != null && message.hasOwnProperty("accessCode"))
                        if (!$util.isString(message.accessCode))
                            return "accessCode: string expected";
                    if (message.cardTypeCode != null && message.hasOwnProperty("cardTypeCode"))
                        if (!$util.isInteger(message.cardTypeCode))
                            return "cardTypeCode: integer expected";
                    if (message.cardRegionCode != null && message.hasOwnProperty("cardRegionCode"))
                        if (!$util.isInteger(message.cardRegionCode))
                            return "cardRegionCode: integer expected";
                    if (message.device != null && message.hasOwnProperty("device"))
                        switch (message.device) {
                        default:
                            return "device: enum value expected";
                        case 0:
                        case 1:
                            break;
                        }
                    return null;
                };

                /**
                 * Creates a User message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof wm.protobuf.MergeBingoCardRequest.User
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {wm.protobuf.MergeBingoCardRequest.User} User
                 */
                User.fromObject = function fromObject(object) {
                    if (object instanceof $root.wm.protobuf.MergeBingoCardRequest.User)
                        return object;
                    let message = new $root.wm.protobuf.MergeBingoCardRequest.User();
                    if (object.cardChipId != null)
                        message.cardChipId = String(object.cardChipId);
                    if (object.accessCode != null)
                        message.accessCode = String(object.accessCode);
                    if (object.cardTypeCode != null)
                        message.cardTypeCode = object.cardTypeCode >>> 0;
                    if (object.cardRegionCode != null)
                        message.cardRegionCode = object.cardRegionCode >>> 0;
                    switch (object.device) {
                    default:
                        if (typeof object.device === "number") {
                            message.device = object.device;
                            break;
                        }
                        break;
                    case "DEVICE_CARD":
                    case 0:
                        message.device = 0;
                        break;
                    case "DEVICE_PHONE":
                    case 1:
                        message.device = 1;
                        break;
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a User message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof wm.protobuf.MergeBingoCardRequest.User
                 * @static
                 * @param {wm.protobuf.MergeBingoCardRequest.User} message User
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                User.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        object.cardChipId = "";
                        object.accessCode = "";
                        object.cardTypeCode = 0;
                        object.cardRegionCode = 0;
                        object.device = options.enums === String ? "DEVICE_CARD" : 0;
                    }
                    if (message.cardChipId != null && message.hasOwnProperty("cardChipId"))
                        object.cardChipId = message.cardChipId;
                    if (message.accessCode != null && message.hasOwnProperty("accessCode"))
                        object.accessCode = message.accessCode;
                    if (message.cardTypeCode != null && message.hasOwnProperty("cardTypeCode"))
                        object.cardTypeCode = message.cardTypeCode;
                    if (message.cardRegionCode != null && message.hasOwnProperty("cardRegionCode"))
                        object.cardRegionCode = message.cardRegionCode;
                    if (message.device != null && message.hasOwnProperty("device"))
                        object.device = options.enums === String ? $root.wm.protobuf.DeviceType[message.device] === undefined ? message.device : $root.wm.protobuf.DeviceType[message.device] : message.device;
                    return object;
                };

                /**
                 * Converts this User to JSON.
                 * @function toJSON
                 * @memberof wm.protobuf.MergeBingoCardRequest.User
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                User.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                /**
                 * Gets the default type url for User
                 * @function getTypeUrl
                 * @memberof wm.protobuf.MergeBingoCardRequest.User
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                User.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/wm.protobuf.MergeBingoCardRequest.User";
                };

                return User;
            })();

            return MergeBingoCardRequest;
        })();

        protobuf.MergeBingoCardResponse = (function() {

            /**
             * Properties of a MergeBingoCardResponse.
             * @memberof wm.protobuf
             * @interface IMergeBingoCardResponse
             * @property {wm.protobuf.ErrorCode} error MergeBingoCardResponse error
             * @property {Array.<wm.protobuf.MergeBingoCardResponse.ICardBeforeMerge>|null} [cardBeforeMergeList] MergeBingoCardResponse cardBeforeMergeList
             * @property {Array.<number>|null} [acquiredBingoNumbers] MergeBingoCardResponse acquiredBingoNumbers
             */

            /**
             * Constructs a new MergeBingoCardResponse.
             * @memberof wm.protobuf
             * @classdesc Represents a MergeBingoCardResponse.
             * @implements IMergeBingoCardResponse
             * @constructor
             * @param {wm.protobuf.IMergeBingoCardResponse=} [properties] Properties to set
             */
            function MergeBingoCardResponse(properties) {
                this.cardBeforeMergeList = [];
                this.acquiredBingoNumbers = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * MergeBingoCardResponse error.
             * @member {wm.protobuf.ErrorCode} error
             * @memberof wm.protobuf.MergeBingoCardResponse
             * @instance
             */
            MergeBingoCardResponse.prototype.error = 0;

            /**
             * MergeBingoCardResponse cardBeforeMergeList.
             * @member {Array.<wm.protobuf.MergeBingoCardResponse.ICardBeforeMerge>} cardBeforeMergeList
             * @memberof wm.protobuf.MergeBingoCardResponse
             * @instance
             */
            MergeBingoCardResponse.prototype.cardBeforeMergeList = $util.emptyArray;

            /**
             * MergeBingoCardResponse acquiredBingoNumbers.
             * @member {Array.<number>} acquiredBingoNumbers
             * @memberof wm.protobuf.MergeBingoCardResponse
             * @instance
             */
            MergeBingoCardResponse.prototype.acquiredBingoNumbers = $util.emptyArray;

            /**
             * Creates a new MergeBingoCardResponse instance using the specified properties.
             * @function create
             * @memberof wm.protobuf.MergeBingoCardResponse
             * @static
             * @param {wm.protobuf.IMergeBingoCardResponse=} [properties] Properties to set
             * @returns {wm.protobuf.MergeBingoCardResponse} MergeBingoCardResponse instance
             */
            MergeBingoCardResponse.create = function create(properties) {
                return new MergeBingoCardResponse(properties);
            };

            /**
             * Encodes the specified MergeBingoCardResponse message. Does not implicitly {@link wm.protobuf.MergeBingoCardResponse.verify|verify} messages.
             * @function encode
             * @memberof wm.protobuf.MergeBingoCardResponse
             * @static
             * @param {wm.protobuf.IMergeBingoCardResponse} message MergeBingoCardResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            MergeBingoCardResponse.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
                if (message.cardBeforeMergeList != null && message.cardBeforeMergeList.length)
                    for (let i = 0; i < message.cardBeforeMergeList.length; ++i)
                        $root.wm.protobuf.MergeBingoCardResponse.CardBeforeMerge.encode(message.cardBeforeMergeList[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                if (message.acquiredBingoNumbers != null && message.acquiredBingoNumbers.length)
                    for (let i = 0; i < message.acquiredBingoNumbers.length; ++i)
                        writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.acquiredBingoNumbers[i]);
                return writer;
            };

            /**
             * Encodes the specified MergeBingoCardResponse message, length delimited. Does not implicitly {@link wm.protobuf.MergeBingoCardResponse.verify|verify} messages.
             * @function encodeDelimited
             * @memberof wm.protobuf.MergeBingoCardResponse
             * @static
             * @param {wm.protobuf.IMergeBingoCardResponse} message MergeBingoCardResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            MergeBingoCardResponse.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a MergeBingoCardResponse message from the specified reader or buffer.
             * @function decode
             * @memberof wm.protobuf.MergeBingoCardResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {wm.protobuf.MergeBingoCardResponse} MergeBingoCardResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            MergeBingoCardResponse.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.wm.protobuf.MergeBingoCardResponse();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.error = reader.int32();
                            break;
                        }
                    case 2: {
                            if (!(message.cardBeforeMergeList && message.cardBeforeMergeList.length))
                                message.cardBeforeMergeList = [];
                            message.cardBeforeMergeList.push($root.wm.protobuf.MergeBingoCardResponse.CardBeforeMerge.decode(reader, reader.uint32()));
                            break;
                        }
                    case 3: {
                            if (!(message.acquiredBingoNumbers && message.acquiredBingoNumbers.length))
                                message.acquiredBingoNumbers = [];
                            if ((tag & 7) === 2) {
                                let end2 = reader.uint32() + reader.pos;
                                while (reader.pos < end2)
                                    message.acquiredBingoNumbers.push(reader.uint32());
                            } else
                                message.acquiredBingoNumbers.push(reader.uint32());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("error"))
                    throw $util.ProtocolError("missing required 'error'", { instance: message });
                return message;
            };

            /**
             * Decodes a MergeBingoCardResponse message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof wm.protobuf.MergeBingoCardResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {wm.protobuf.MergeBingoCardResponse} MergeBingoCardResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            MergeBingoCardResponse.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a MergeBingoCardResponse message.
             * @function verify
             * @memberof wm.protobuf.MergeBingoCardResponse
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            MergeBingoCardResponse.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                switch (message.error) {
                default:
                    return "error: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 7:
                case 9:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 16:
                case 17:
                case 18:
                case 19:
                    break;
                }
                if (message.cardBeforeMergeList != null && message.hasOwnProperty("cardBeforeMergeList")) {
                    if (!Array.isArray(message.cardBeforeMergeList))
                        return "cardBeforeMergeList: array expected";
                    for (let i = 0; i < message.cardBeforeMergeList.length; ++i) {
                        let error = $root.wm.protobuf.MergeBingoCardResponse.CardBeforeMerge.verify(message.cardBeforeMergeList[i]);
                        if (error)
                            return "cardBeforeMergeList." + error;
                    }
                }
                if (message.acquiredBingoNumbers != null && message.hasOwnProperty("acquiredBingoNumbers")) {
                    if (!Array.isArray(message.acquiredBingoNumbers))
                        return "acquiredBingoNumbers: array expected";
                    for (let i = 0; i < message.acquiredBingoNumbers.length; ++i)
                        if (!$util.isInteger(message.acquiredBingoNumbers[i]))
                            return "acquiredBingoNumbers: integer[] expected";
                }
                return null;
            };

            /**
             * Creates a MergeBingoCardResponse message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof wm.protobuf.MergeBingoCardResponse
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {wm.protobuf.MergeBingoCardResponse} MergeBingoCardResponse
             */
            MergeBingoCardResponse.fromObject = function fromObject(object) {
                if (object instanceof $root.wm.protobuf.MergeBingoCardResponse)
                    return object;
                let message = new $root.wm.protobuf.MergeBingoCardResponse();
                switch (object.error) {
                default:
                    if (typeof object.error === "number") {
                        message.error = object.error;
                        break;
                    }
                    break;
                case "ERR_SUCCESS":
                case 0:
                    message.error = 0;
                    break;
                case "ERR_REQUEST":
                case 1:
                    message.error = 1;
                    break;
                case "ERR_NOT_FOUND":
                case 2:
                    message.error = 2;
                    break;
                case "ERR_ID_SERVER":
                case 3:
                    message.error = 3;
                    break;
                case "ERR_ID_BANNED":
                case 4:
                    message.error = 4;
                    break;
                case "ERR_USER_LOCKED":
                case 5:
                    message.error = 5;
                    break;
                case "ERR_USER_VERSION":
                case 6:
                    message.error = 6;
                    break;
                case "ERR_NAME_CONFLICTED":
                case 7:
                    message.error = 7;
                    break;
                case "ERR_FORBIDDEN":
                case 9:
                    message.error = 9;
                    break;
                case "ERR_USER_SUCCEEDED":
                case 11:
                    message.error = 11;
                    break;
                case "ERR_BEING_TRANSFERRED":
                case 12:
                    message.error = 12;
                    break;
                case "ERR_SCRATCH_LOCKED":
                case 13:
                    message.error = 13;
                    break;
                case "ERR_BINGO_REVENGE_LOCKED":
                case 14:
                    message.error = 14;
                    break;
                case "ERR_BINGO_ALREDY_LINKED":
                case 15:
                    message.error = 15;
                    break;
                case "ERR_BINGO_FINISHED":
                case 16:
                    message.error = 16;
                    break;
                case "ERR_BINGO_REACHED_MAX_USER":
                case 17:
                    message.error = 17;
                    break;
                case "ERR_CAR_NOT_FOUND":
                case 18:
                    message.error = 18;
                    break;
                case "ERR_BINGO_CARD_NOT_FOUND":
                case 19:
                    message.error = 19;
                    break;
                }
                if (object.cardBeforeMergeList) {
                    if (!Array.isArray(object.cardBeforeMergeList))
                        throw TypeError(".wm.protobuf.MergeBingoCardResponse.cardBeforeMergeList: array expected");
                    message.cardBeforeMergeList = [];
                    for (let i = 0; i < object.cardBeforeMergeList.length; ++i) {
                        if (typeof object.cardBeforeMergeList[i] !== "object")
                            throw TypeError(".wm.protobuf.MergeBingoCardResponse.cardBeforeMergeList: object expected");
                        message.cardBeforeMergeList[i] = $root.wm.protobuf.MergeBingoCardResponse.CardBeforeMerge.fromObject(object.cardBeforeMergeList[i]);
                    }
                }
                if (object.acquiredBingoNumbers) {
                    if (!Array.isArray(object.acquiredBingoNumbers))
                        throw TypeError(".wm.protobuf.MergeBingoCardResponse.acquiredBingoNumbers: array expected");
                    message.acquiredBingoNumbers = [];
                    for (let i = 0; i < object.acquiredBingoNumbers.length; ++i)
                        message.acquiredBingoNumbers[i] = object.acquiredBingoNumbers[i] >>> 0;
                }
                return message;
            };

            /**
             * Creates a plain object from a MergeBingoCardResponse message. Also converts values to other types if specified.
             * @function toObject
             * @memberof wm.protobuf.MergeBingoCardResponse
             * @static
             * @param {wm.protobuf.MergeBingoCardResponse} message MergeBingoCardResponse
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            MergeBingoCardResponse.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults) {
                    object.cardBeforeMergeList = [];
                    object.acquiredBingoNumbers = [];
                }
                if (options.defaults)
                    object.error = options.enums === String ? "ERR_SUCCESS" : 0;
                if (message.error != null && message.hasOwnProperty("error"))
                    object.error = options.enums === String ? $root.wm.protobuf.ErrorCode[message.error] === undefined ? message.error : $root.wm.protobuf.ErrorCode[message.error] : message.error;
                if (message.cardBeforeMergeList && message.cardBeforeMergeList.length) {
                    object.cardBeforeMergeList = [];
                    for (let j = 0; j < message.cardBeforeMergeList.length; ++j)
                        object.cardBeforeMergeList[j] = $root.wm.protobuf.MergeBingoCardResponse.CardBeforeMerge.toObject(message.cardBeforeMergeList[j], options);
                }
                if (message.acquiredBingoNumbers && message.acquiredBingoNumbers.length) {
                    object.acquiredBingoNumbers = [];
                    for (let j = 0; j < message.acquiredBingoNumbers.length; ++j)
                        object.acquiredBingoNumbers[j] = message.acquiredBingoNumbers[j];
                }
                return object;
            };

            /**
             * Converts this MergeBingoCardResponse to JSON.
             * @function toJSON
             * @memberof wm.protobuf.MergeBingoCardResponse
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            MergeBingoCardResponse.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for MergeBingoCardResponse
             * @function getTypeUrl
             * @memberof wm.protobuf.MergeBingoCardResponse
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            MergeBingoCardResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/wm.protobuf.MergeBingoCardResponse";
            };

            MergeBingoCardResponse.CardBeforeMerge = (function() {

                /**
                 * Properties of a CardBeforeMerge.
                 * @memberof wm.protobuf.MergeBingoCardResponse
                 * @interface ICardBeforeMerge
                 * @property {wm.protobuf.ErrorCode} error CardBeforeMerge error
                 * @property {wm.protobuf.TransferState|null} [transferState] CardBeforeMerge transferState
                 * @property {number|null} [carId] CardBeforeMerge carId
                 * @property {string|null} [carName] CardBeforeMerge carName
                 * @property {number|null} [unlockAt] CardBeforeMerge unlockAt
                 * @property {Array.<number>|null} [acquiredBingoNumbers] CardBeforeMerge acquiredBingoNumbers
                 */

                /**
                 * Constructs a new CardBeforeMerge.
                 * @memberof wm.protobuf.MergeBingoCardResponse
                 * @classdesc Represents a CardBeforeMerge.
                 * @implements ICardBeforeMerge
                 * @constructor
                 * @param {wm.protobuf.MergeBingoCardResponse.ICardBeforeMerge=} [properties] Properties to set
                 */
                function CardBeforeMerge(properties) {
                    this.acquiredBingoNumbers = [];
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * CardBeforeMerge error.
                 * @member {wm.protobuf.ErrorCode} error
                 * @memberof wm.protobuf.MergeBingoCardResponse.CardBeforeMerge
                 * @instance
                 */
                CardBeforeMerge.prototype.error = 0;

                /**
                 * CardBeforeMerge transferState.
                 * @member {wm.protobuf.TransferState} transferState
                 * @memberof wm.protobuf.MergeBingoCardResponse.CardBeforeMerge
                 * @instance
                 */
                CardBeforeMerge.prototype.transferState = 0;

                /**
                 * CardBeforeMerge carId.
                 * @member {number} carId
                 * @memberof wm.protobuf.MergeBingoCardResponse.CardBeforeMerge
                 * @instance
                 */
                CardBeforeMerge.prototype.carId = 0;

                /**
                 * CardBeforeMerge carName.
                 * @member {string} carName
                 * @memberof wm.protobuf.MergeBingoCardResponse.CardBeforeMerge
                 * @instance
                 */
                CardBeforeMerge.prototype.carName = "";

                /**
                 * CardBeforeMerge unlockAt.
                 * @member {number} unlockAt
                 * @memberof wm.protobuf.MergeBingoCardResponse.CardBeforeMerge
                 * @instance
                 */
                CardBeforeMerge.prototype.unlockAt = 0;

                /**
                 * CardBeforeMerge acquiredBingoNumbers.
                 * @member {Array.<number>} acquiredBingoNumbers
                 * @memberof wm.protobuf.MergeBingoCardResponse.CardBeforeMerge
                 * @instance
                 */
                CardBeforeMerge.prototype.acquiredBingoNumbers = $util.emptyArray;

                /**
                 * Creates a new CardBeforeMerge instance using the specified properties.
                 * @function create
                 * @memberof wm.protobuf.MergeBingoCardResponse.CardBeforeMerge
                 * @static
                 * @param {wm.protobuf.MergeBingoCardResponse.ICardBeforeMerge=} [properties] Properties to set
                 * @returns {wm.protobuf.MergeBingoCardResponse.CardBeforeMerge} CardBeforeMerge instance
                 */
                CardBeforeMerge.create = function create(properties) {
                    return new CardBeforeMerge(properties);
                };

                /**
                 * Encodes the specified CardBeforeMerge message. Does not implicitly {@link wm.protobuf.MergeBingoCardResponse.CardBeforeMerge.verify|verify} messages.
                 * @function encode
                 * @memberof wm.protobuf.MergeBingoCardResponse.CardBeforeMerge
                 * @static
                 * @param {wm.protobuf.MergeBingoCardResponse.ICardBeforeMerge} message CardBeforeMerge message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                CardBeforeMerge.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.error);
                    if (message.transferState != null && Object.hasOwnProperty.call(message, "transferState"))
                        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.transferState);
                    if (message.carId != null && Object.hasOwnProperty.call(message, "carId"))
                        writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.carId);
                    if (message.carName != null && Object.hasOwnProperty.call(message, "carName"))
                        writer.uint32(/* id 4, wireType 2 =*/34).string(message.carName);
                    if (message.unlockAt != null && Object.hasOwnProperty.call(message, "unlockAt"))
                        writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.unlockAt);
                    if (message.acquiredBingoNumbers != null && message.acquiredBingoNumbers.length)
                        for (let i = 0; i < message.acquiredBingoNumbers.length; ++i)
                            writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.acquiredBingoNumbers[i]);
                    return writer;
                };

                /**
                 * Encodes the specified CardBeforeMerge message, length delimited. Does not implicitly {@link wm.protobuf.MergeBingoCardResponse.CardBeforeMerge.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof wm.protobuf.MergeBingoCardResponse.CardBeforeMerge
                 * @static
                 * @param {wm.protobuf.MergeBingoCardResponse.ICardBeforeMerge} message CardBeforeMerge message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                CardBeforeMerge.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a CardBeforeMerge message from the specified reader or buffer.
                 * @function decode
                 * @memberof wm.protobuf.MergeBingoCardResponse.CardBeforeMerge
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {wm.protobuf.MergeBingoCardResponse.CardBeforeMerge} CardBeforeMerge
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                CardBeforeMerge.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.wm.protobuf.MergeBingoCardResponse.CardBeforeMerge();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.error = reader.int32();
                                break;
                            }
                        case 2: {
                                message.transferState = reader.int32();
                                break;
                            }
                        case 3: {
                                message.carId = reader.uint32();
                                break;
                            }
                        case 4: {
                                message.carName = reader.string();
                                break;
                            }
                        case 5: {
                                message.unlockAt = reader.uint32();
                                break;
                            }
                        case 6: {
                                if (!(message.acquiredBingoNumbers && message.acquiredBingoNumbers.length))
                                    message.acquiredBingoNumbers = [];
                                if ((tag & 7) === 2) {
                                    let end2 = reader.uint32() + reader.pos;
                                    while (reader.pos < end2)
                                        message.acquiredBingoNumbers.push(reader.uint32());
                                } else
                                    message.acquiredBingoNumbers.push(reader.uint32());
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    if (!message.hasOwnProperty("error"))
                        throw $util.ProtocolError("missing required 'error'", { instance: message });
                    return message;
                };

                /**
                 * Decodes a CardBeforeMerge message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof wm.protobuf.MergeBingoCardResponse.CardBeforeMerge
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {wm.protobuf.MergeBingoCardResponse.CardBeforeMerge} CardBeforeMerge
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                CardBeforeMerge.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a CardBeforeMerge message.
                 * @function verify
                 * @memberof wm.protobuf.MergeBingoCardResponse.CardBeforeMerge
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                CardBeforeMerge.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    switch (message.error) {
                    default:
                        return "error: enum value expected";
                    case 0:
                    case 1:
                    case 2:
                    case 3:
                    case 4:
                    case 5:
                    case 6:
                    case 7:
                    case 9:
                    case 11:
                    case 12:
                    case 13:
                    case 14:
                    case 15:
                    case 16:
                    case 17:
                    case 18:
                    case 19:
                        break;
                    }
                    if (message.transferState != null && message.hasOwnProperty("transferState"))
                        switch (message.transferState) {
                        default:
                            return "transferState: enum value expected";
                        case 0:
                        case 1:
                        case 2:
                        case 3:
                        case 4:
                            break;
                        }
                    if (message.carId != null && message.hasOwnProperty("carId"))
                        if (!$util.isInteger(message.carId))
                            return "carId: integer expected";
                    if (message.carName != null && message.hasOwnProperty("carName"))
                        if (!$util.isString(message.carName))
                            return "carName: string expected";
                    if (message.unlockAt != null && message.hasOwnProperty("unlockAt"))
                        if (!$util.isInteger(message.unlockAt))
                            return "unlockAt: integer expected";
                    if (message.acquiredBingoNumbers != null && message.hasOwnProperty("acquiredBingoNumbers")) {
                        if (!Array.isArray(message.acquiredBingoNumbers))
                            return "acquiredBingoNumbers: array expected";
                        for (let i = 0; i < message.acquiredBingoNumbers.length; ++i)
                            if (!$util.isInteger(message.acquiredBingoNumbers[i]))
                                return "acquiredBingoNumbers: integer[] expected";
                    }
                    return null;
                };

                /**
                 * Creates a CardBeforeMerge message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof wm.protobuf.MergeBingoCardResponse.CardBeforeMerge
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {wm.protobuf.MergeBingoCardResponse.CardBeforeMerge} CardBeforeMerge
                 */
                CardBeforeMerge.fromObject = function fromObject(object) {
                    if (object instanceof $root.wm.protobuf.MergeBingoCardResponse.CardBeforeMerge)
                        return object;
                    let message = new $root.wm.protobuf.MergeBingoCardResponse.CardBeforeMerge();
                    switch (object.error) {
                    default:
                        if (typeof object.error === "number") {
                            message.error = object.error;
                            break;
                        }
                        break;
                    case "ERR_SUCCESS":
                    case 0:
                        message.error = 0;
                        break;
                    case "ERR_REQUEST":
                    case 1:
                        message.error = 1;
                        break;
                    case "ERR_NOT_FOUND":
                    case 2:
                        message.error = 2;
                        break;
                    case "ERR_ID_SERVER":
                    case 3:
                        message.error = 3;
                        break;
                    case "ERR_ID_BANNED":
                    case 4:
                        message.error = 4;
                        break;
                    case "ERR_USER_LOCKED":
                    case 5:
                        message.error = 5;
                        break;
                    case "ERR_USER_VERSION":
                    case 6:
                        message.error = 6;
                        break;
                    case "ERR_NAME_CONFLICTED":
                    case 7:
                        message.error = 7;
                        break;
                    case "ERR_FORBIDDEN":
                    case 9:
                        message.error = 9;
                        break;
                    case "ERR_USER_SUCCEEDED":
                    case 11:
                        message.error = 11;
                        break;
                    case "ERR_BEING_TRANSFERRED":
                    case 12:
                        message.error = 12;
                        break;
                    case "ERR_SCRATCH_LOCKED":
                    case 13:
                        message.error = 13;
                        break;
                    case "ERR_BINGO_REVENGE_LOCKED":
                    case 14:
                        message.error = 14;
                        break;
                    case "ERR_BINGO_ALREDY_LINKED":
                    case 15:
                        message.error = 15;
                        break;
                    case "ERR_BINGO_FINISHED":
                    case 16:
                        message.error = 16;
                        break;
                    case "ERR_BINGO_REACHED_MAX_USER":
                    case 17:
                        message.error = 17;
                        break;
                    case "ERR_CAR_NOT_FOUND":
                    case 18:
                        message.error = 18;
                        break;
                    case "ERR_BINGO_CARD_NOT_FOUND":
                    case 19:
                        message.error = 19;
                        break;
                    }
                    switch (object.transferState) {
                    default:
                        if (typeof object.transferState === "number") {
                            message.transferState = object.transferState;
                            break;
                        }
                        break;
                    case "NOT_REGISTERED":
                    case 0:
                        message.transferState = 0;
                        break;
                    case "NEW_REGISTRATION":
                    case 1:
                        message.transferState = 1;
                        break;
                    case "TRANSFER_REQUIRED":
                    case 2:
                        message.transferState = 2;
                        break;
                    case "TRANSFERRING":
                    case 3:
                        message.transferState = 3;
                        break;
                    case "TRANSFERRED":
                    case 4:
                        message.transferState = 4;
                        break;
                    }
                    if (object.carId != null)
                        message.carId = object.carId >>> 0;
                    if (object.carName != null)
                        message.carName = String(object.carName);
                    if (object.unlockAt != null)
                        message.unlockAt = object.unlockAt >>> 0;
                    if (object.acquiredBingoNumbers) {
                        if (!Array.isArray(object.acquiredBingoNumbers))
                            throw TypeError(".wm.protobuf.MergeBingoCardResponse.CardBeforeMerge.acquiredBingoNumbers: array expected");
                        message.acquiredBingoNumbers = [];
                        for (let i = 0; i < object.acquiredBingoNumbers.length; ++i)
                            message.acquiredBingoNumbers[i] = object.acquiredBingoNumbers[i] >>> 0;
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a CardBeforeMerge message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof wm.protobuf.MergeBingoCardResponse.CardBeforeMerge
                 * @static
                 * @param {wm.protobuf.MergeBingoCardResponse.CardBeforeMerge} message CardBeforeMerge
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                CardBeforeMerge.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.arrays || options.defaults)
                        object.acquiredBingoNumbers = [];
                    if (options.defaults) {
                        object.error = options.enums === String ? "ERR_SUCCESS" : 0;
                        object.transferState = options.enums === String ? "NOT_REGISTERED" : 0;
                        object.carId = 0;
                        object.carName = "";
                        object.unlockAt = 0;
                    }
                    if (message.error != null && message.hasOwnProperty("error"))
                        object.error = options.enums === String ? $root.wm.protobuf.ErrorCode[message.error] === undefined ? message.error : $root.wm.protobuf.ErrorCode[message.error] : message.error;
                    if (message.transferState != null && message.hasOwnProperty("transferState"))
                        object.transferState = options.enums === String ? $root.wm.protobuf.TransferState[message.transferState] === undefined ? message.transferState : $root.wm.protobuf.TransferState[message.transferState] : message.transferState;
                    if (message.carId != null && message.hasOwnProperty("carId"))
                        object.carId = message.carId;
                    if (message.carName != null && message.hasOwnProperty("carName"))
                        object.carName = message.carName;
                    if (message.unlockAt != null && message.hasOwnProperty("unlockAt"))
                        object.unlockAt = message.unlockAt;
                    if (message.acquiredBingoNumbers && message.acquiredBingoNumbers.length) {
                        object.acquiredBingoNumbers = [];
                        for (let j = 0; j < message.acquiredBingoNumbers.length; ++j)
                            object.acquiredBingoNumbers[j] = message.acquiredBingoNumbers[j];
                    }
                    return object;
                };

                /**
                 * Converts this CardBeforeMerge to JSON.
                 * @function toJSON
                 * @memberof wm.protobuf.MergeBingoCardResponse.CardBeforeMerge
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                CardBeforeMerge.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                /**
                 * Gets the default type url for CardBeforeMerge
                 * @function getTypeUrl
                 * @memberof wm.protobuf.MergeBingoCardResponse.CardBeforeMerge
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                CardBeforeMerge.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/wm.protobuf.MergeBingoCardResponse.CardBeforeMerge";
                };

                return CardBeforeMerge;
            })();

            return MergeBingoCardResponse;
        })();

        protobuf.Car = (function() {

            /**
             * Properties of a Car.
             * @memberof wm.protobuf
             * @interface ICar
             * @property {number|null} [carId] Car carId
             * @property {number|null} [userId] Car userId
             * @property {number|null} [regionId] Car regionId
             * @property {string|null} [name] Car name
             * @property {number|null} [manufacturer] Car manufacturer
             * @property {number|null} [model] Car model
             * @property {number|null} [visualModel] Car visualModel
             * @property {number|null} [defaultColor] Car defaultColor
             * @property {number} customColor Car customColor
             * @property {number} wheel Car wheel
             * @property {number} wheelColor Car wheelColor
             * @property {number} aero Car aero
             * @property {number} bonnet Car bonnet
             * @property {number} wing Car wing
             * @property {wm.protobuf.IGTWing|null} [gtWing] Car gtWing
             * @property {number} mirror Car mirror
             * @property {number} neon Car neon
             * @property {number} trunk Car trunk
             * @property {number} plate Car plate
             * @property {number} plateColor Car plateColor
             * @property {number} plateNumber Car plateNumber
             * @property {number} tunePower Car tunePower
             * @property {number} tuneHandling Car tuneHandling
             * @property {string} title Car title
             * @property {number} level Car level
             * @property {boolean|null} [windowSticker] Car windowSticker
             * @property {string|null} [windowStickerString] Car windowStickerString
             * @property {number|null} [windowStickerFont] Car windowStickerFont
             * @property {number|null} [windowDecoration] Car windowDecoration
             * @property {number|null} [rivalMarker] Car rivalMarker
             * @property {number|null} [lastPlayedAt] Car lastPlayedAt
             * @property {wm.protobuf.IPlace|null} [lastPlayedPlace] Car lastPlayedPlace
             * @property {number|null} [aura] Car aura
             * @property {number|null} [auraMotif] Car auraMotif
             * @property {number|null} [ghostLevel] Car ghostLevel
             * @property {string|null} [country] Car country
             * @property {string|null} [searchCode] Car searchCode
             * @property {number|null} [customFrame] Car customFrame
             */

            /**
             * Constructs a new Car.
             * @memberof wm.protobuf
             * @classdesc Represents a Car.
             * @implements ICar
             * @constructor
             * @param {wm.protobuf.ICar=} [properties] Properties to set
             */
            function Car(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Car carId.
             * @member {number} carId
             * @memberof wm.protobuf.Car
             * @instance
             */
            Car.prototype.carId = 0;

            /**
             * Car userId.
             * @member {number} userId
             * @memberof wm.protobuf.Car
             * @instance
             */
            Car.prototype.userId = 0;

            /**
             * Car regionId.
             * @member {number} regionId
             * @memberof wm.protobuf.Car
             * @instance
             */
            Car.prototype.regionId = 0;

            /**
             * Car name.
             * @member {string} name
             * @memberof wm.protobuf.Car
             * @instance
             */
            Car.prototype.name = "";

            /**
             * Car manufacturer.
             * @member {number} manufacturer
             * @memberof wm.protobuf.Car
             * @instance
             */
            Car.prototype.manufacturer = 0;

            /**
             * Car model.
             * @member {number} model
             * @memberof wm.protobuf.Car
             * @instance
             */
            Car.prototype.model = 0;

            /**
             * Car visualModel.
             * @member {number} visualModel
             * @memberof wm.protobuf.Car
             * @instance
             */
            Car.prototype.visualModel = 0;

            /**
             * Car defaultColor.
             * @member {number} defaultColor
             * @memberof wm.protobuf.Car
             * @instance
             */
            Car.prototype.defaultColor = 0;

            /**
             * Car customColor.
             * @member {number} customColor
             * @memberof wm.protobuf.Car
             * @instance
             */
            Car.prototype.customColor = 0;

            /**
             * Car wheel.
             * @member {number} wheel
             * @memberof wm.protobuf.Car
             * @instance
             */
            Car.prototype.wheel = 0;

            /**
             * Car wheelColor.
             * @member {number} wheelColor
             * @memberof wm.protobuf.Car
             * @instance
             */
            Car.prototype.wheelColor = 0;

            /**
             * Car aero.
             * @member {number} aero
             * @memberof wm.protobuf.Car
             * @instance
             */
            Car.prototype.aero = 0;

            /**
             * Car bonnet.
             * @member {number} bonnet
             * @memberof wm.protobuf.Car
             * @instance
             */
            Car.prototype.bonnet = 0;

            /**
             * Car wing.
             * @member {number} wing
             * @memberof wm.protobuf.Car
             * @instance
             */
            Car.prototype.wing = 0;

            /**
             * Car gtWing.
             * @member {wm.protobuf.IGTWing|null|undefined} gtWing
             * @memberof wm.protobuf.Car
             * @instance
             */
            Car.prototype.gtWing = null;

            /**
             * Car mirror.
             * @member {number} mirror
             * @memberof wm.protobuf.Car
             * @instance
             */
            Car.prototype.mirror = 0;

            /**
             * Car neon.
             * @member {number} neon
             * @memberof wm.protobuf.Car
             * @instance
             */
            Car.prototype.neon = 0;

            /**
             * Car trunk.
             * @member {number} trunk
             * @memberof wm.protobuf.Car
             * @instance
             */
            Car.prototype.trunk = 0;

            /**
             * Car plate.
             * @member {number} plate
             * @memberof wm.protobuf.Car
             * @instance
             */
            Car.prototype.plate = 0;

            /**
             * Car plateColor.
             * @member {number} plateColor
             * @memberof wm.protobuf.Car
             * @instance
             */
            Car.prototype.plateColor = 0;

            /**
             * Car plateNumber.
             * @member {number} plateNumber
             * @memberof wm.protobuf.Car
             * @instance
             */
            Car.prototype.plateNumber = 0;

            /**
             * Car tunePower.
             * @member {number} tunePower
             * @memberof wm.protobuf.Car
             * @instance
             */
            Car.prototype.tunePower = 0;

            /**
             * Car tuneHandling.
             * @member {number} tuneHandling
             * @memberof wm.protobuf.Car
             * @instance
             */
            Car.prototype.tuneHandling = 0;

            /**
             * Car title.
             * @member {string} title
             * @memberof wm.protobuf.Car
             * @instance
             */
            Car.prototype.title = "";

            /**
             * Car level.
             * @member {number} level
             * @memberof wm.protobuf.Car
             * @instance
             */
            Car.prototype.level = 0;

            /**
             * Car windowSticker.
             * @member {boolean} windowSticker
             * @memberof wm.protobuf.Car
             * @instance
             */
            Car.prototype.windowSticker = false;

            /**
             * Car windowStickerString.
             * @member {string} windowStickerString
             * @memberof wm.protobuf.Car
             * @instance
             */
            Car.prototype.windowStickerString = "";

            /**
             * Car windowStickerFont.
             * @member {number} windowStickerFont
             * @memberof wm.protobuf.Car
             * @instance
             */
            Car.prototype.windowStickerFont = 0;

            /**
             * Car windowDecoration.
             * @member {number} windowDecoration
             * @memberof wm.protobuf.Car
             * @instance
             */
            Car.prototype.windowDecoration = 0;

            /**
             * Car rivalMarker.
             * @member {number} rivalMarker
             * @memberof wm.protobuf.Car
             * @instance
             */
            Car.prototype.rivalMarker = 0;

            /**
             * Car lastPlayedAt.
             * @member {number} lastPlayedAt
             * @memberof wm.protobuf.Car
             * @instance
             */
            Car.prototype.lastPlayedAt = 0;

            /**
             * Car lastPlayedPlace.
             * @member {wm.protobuf.IPlace|null|undefined} lastPlayedPlace
             * @memberof wm.protobuf.Car
             * @instance
             */
            Car.prototype.lastPlayedPlace = null;

            /**
             * Car aura.
             * @member {number} aura
             * @memberof wm.protobuf.Car
             * @instance
             */
            Car.prototype.aura = 0;

            /**
             * Car auraMotif.
             * @member {number} auraMotif
             * @memberof wm.protobuf.Car
             * @instance
             */
            Car.prototype.auraMotif = 0;

            /**
             * Car ghostLevel.
             * @member {number} ghostLevel
             * @memberof wm.protobuf.Car
             * @instance
             */
            Car.prototype.ghostLevel = 0;

            /**
             * Car country.
             * @member {string} country
             * @memberof wm.protobuf.Car
             * @instance
             */
            Car.prototype.country = "";

            /**
             * Car searchCode.
             * @member {string} searchCode
             * @memberof wm.protobuf.Car
             * @instance
             */
            Car.prototype.searchCode = "";

            /**
             * Car customFrame.
             * @member {number} customFrame
             * @memberof wm.protobuf.Car
             * @instance
             */
            Car.prototype.customFrame = 0;

            /**
             * Creates a new Car instance using the specified properties.
             * @function create
             * @memberof wm.protobuf.Car
             * @static
             * @param {wm.protobuf.ICar=} [properties] Properties to set
             * @returns {wm.protobuf.Car} Car instance
             */
            Car.create = function create(properties) {
                return new Car(properties);
            };

            /**
             * Encodes the specified Car message. Does not implicitly {@link wm.protobuf.Car.verify|verify} messages.
             * @function encode
             * @memberof wm.protobuf.Car
             * @static
             * @param {wm.protobuf.ICar} message Car message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Car.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.carId != null && Object.hasOwnProperty.call(message, "carId"))
                    writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.carId);
                if (message.userId != null && Object.hasOwnProperty.call(message, "userId"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.userId);
                if (message.regionId != null && Object.hasOwnProperty.call(message, "regionId"))
                    writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.regionId);
                if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                    writer.uint32(/* id 4, wireType 2 =*/34).string(message.name);
                if (message.manufacturer != null && Object.hasOwnProperty.call(message, "manufacturer"))
                    writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.manufacturer);
                if (message.model != null && Object.hasOwnProperty.call(message, "model"))
                    writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.model);
                if (message.visualModel != null && Object.hasOwnProperty.call(message, "visualModel"))
                    writer.uint32(/* id 7, wireType 0 =*/56).uint32(message.visualModel);
                if (message.defaultColor != null && Object.hasOwnProperty.call(message, "defaultColor"))
                    writer.uint32(/* id 8, wireType 0 =*/64).uint32(message.defaultColor);
                writer.uint32(/* id 9, wireType 0 =*/72).uint32(message.customColor);
                writer.uint32(/* id 10, wireType 0 =*/80).uint32(message.wheel);
                writer.uint32(/* id 11, wireType 0 =*/88).uint32(message.wheelColor);
                writer.uint32(/* id 12, wireType 0 =*/96).uint32(message.aero);
                writer.uint32(/* id 13, wireType 0 =*/104).uint32(message.bonnet);
                writer.uint32(/* id 14, wireType 0 =*/112).uint32(message.wing);
                if (message.gtWing != null && Object.hasOwnProperty.call(message, "gtWing"))
                    $root.wm.protobuf.GTWing.encode(message.gtWing, writer.uint32(/* id 15, wireType 2 =*/122).fork()).ldelim();
                writer.uint32(/* id 16, wireType 0 =*/128).uint32(message.mirror);
                writer.uint32(/* id 24, wireType 0 =*/192).uint32(message.neon);
                writer.uint32(/* id 25, wireType 0 =*/200).uint32(message.trunk);
                writer.uint32(/* id 26, wireType 0 =*/208).uint32(message.plate);
                writer.uint32(/* id 27, wireType 0 =*/216).uint32(message.plateColor);
                writer.uint32(/* id 28, wireType 0 =*/224).uint32(message.plateNumber);
                writer.uint32(/* id 31, wireType 0 =*/248).uint32(message.tunePower);
                writer.uint32(/* id 32, wireType 0 =*/256).uint32(message.tuneHandling);
                writer.uint32(/* id 33, wireType 2 =*/266).string(message.title);
                writer.uint32(/* id 34, wireType 0 =*/272).uint32(message.level);
                if (message.windowSticker != null && Object.hasOwnProperty.call(message, "windowSticker"))
                    writer.uint32(/* id 35, wireType 0 =*/280).bool(message.windowSticker);
                if (message.windowStickerString != null && Object.hasOwnProperty.call(message, "windowStickerString"))
                    writer.uint32(/* id 37, wireType 2 =*/298).string(message.windowStickerString);
                if (message.windowStickerFont != null && Object.hasOwnProperty.call(message, "windowStickerFont"))
                    writer.uint32(/* id 38, wireType 0 =*/304).uint32(message.windowStickerFont);
                if (message.windowDecoration != null && Object.hasOwnProperty.call(message, "windowDecoration"))
                    writer.uint32(/* id 39, wireType 0 =*/312).uint32(message.windowDecoration);
                if (message.rivalMarker != null && Object.hasOwnProperty.call(message, "rivalMarker"))
                    writer.uint32(/* id 41, wireType 0 =*/328).uint32(message.rivalMarker);
                if (message.lastPlayedAt != null && Object.hasOwnProperty.call(message, "lastPlayedAt"))
                    writer.uint32(/* id 45, wireType 0 =*/360).uint32(message.lastPlayedAt);
                if (message.lastPlayedPlace != null && Object.hasOwnProperty.call(message, "lastPlayedPlace"))
                    $root.wm.protobuf.Place.encode(message.lastPlayedPlace, writer.uint32(/* id 46, wireType 2 =*/370).fork()).ldelim();
                if (message.aura != null && Object.hasOwnProperty.call(message, "aura"))
                    writer.uint32(/* id 47, wireType 0 =*/376).uint32(message.aura);
                if (message.auraMotif != null && Object.hasOwnProperty.call(message, "auraMotif"))
                    writer.uint32(/* id 48, wireType 0 =*/384).uint32(message.auraMotif);
                if (message.ghostLevel != null && Object.hasOwnProperty.call(message, "ghostLevel"))
                    writer.uint32(/* id 49, wireType 0 =*/392).uint32(message.ghostLevel);
                if (message.country != null && Object.hasOwnProperty.call(message, "country"))
                    writer.uint32(/* id 50, wireType 2 =*/402).string(message.country);
                if (message.searchCode != null && Object.hasOwnProperty.call(message, "searchCode"))
                    writer.uint32(/* id 51, wireType 2 =*/410).string(message.searchCode);
                if (message.customFrame != null && Object.hasOwnProperty.call(message, "customFrame"))
                    writer.uint32(/* id 52, wireType 0 =*/416).uint32(message.customFrame);
                return writer;
            };

            /**
             * Encodes the specified Car message, length delimited. Does not implicitly {@link wm.protobuf.Car.verify|verify} messages.
             * @function encodeDelimited
             * @memberof wm.protobuf.Car
             * @static
             * @param {wm.protobuf.ICar} message Car message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Car.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a Car message from the specified reader or buffer.
             * @function decode
             * @memberof wm.protobuf.Car
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {wm.protobuf.Car} Car
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Car.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.wm.protobuf.Car();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.carId = reader.uint32();
                            break;
                        }
                    case 2: {
                            message.userId = reader.uint32();
                            break;
                        }
                    case 3: {
                            message.regionId = reader.uint32();
                            break;
                        }
                    case 4: {
                            message.name = reader.string();
                            break;
                        }
                    case 5: {
                            message.manufacturer = reader.uint32();
                            break;
                        }
                    case 6: {
                            message.model = reader.uint32();
                            break;
                        }
                    case 7: {
                            message.visualModel = reader.uint32();
                            break;
                        }
                    case 8: {
                            message.defaultColor = reader.uint32();
                            break;
                        }
                    case 9: {
                            message.customColor = reader.uint32();
                            break;
                        }
                    case 10: {
                            message.wheel = reader.uint32();
                            break;
                        }
                    case 11: {
                            message.wheelColor = reader.uint32();
                            break;
                        }
                    case 12: {
                            message.aero = reader.uint32();
                            break;
                        }
                    case 13: {
                            message.bonnet = reader.uint32();
                            break;
                        }
                    case 14: {
                            message.wing = reader.uint32();
                            break;
                        }
                    case 15: {
                            message.gtWing = $root.wm.protobuf.GTWing.decode(reader, reader.uint32());
                            break;
                        }
                    case 16: {
                            message.mirror = reader.uint32();
                            break;
                        }
                    case 24: {
                            message.neon = reader.uint32();
                            break;
                        }
                    case 25: {
                            message.trunk = reader.uint32();
                            break;
                        }
                    case 26: {
                            message.plate = reader.uint32();
                            break;
                        }
                    case 27: {
                            message.plateColor = reader.uint32();
                            break;
                        }
                    case 28: {
                            message.plateNumber = reader.uint32();
                            break;
                        }
                    case 31: {
                            message.tunePower = reader.uint32();
                            break;
                        }
                    case 32: {
                            message.tuneHandling = reader.uint32();
                            break;
                        }
                    case 33: {
                            message.title = reader.string();
                            break;
                        }
                    case 34: {
                            message.level = reader.uint32();
                            break;
                        }
                    case 35: {
                            message.windowSticker = reader.bool();
                            break;
                        }
                    case 37: {
                            message.windowStickerString = reader.string();
                            break;
                        }
                    case 38: {
                            message.windowStickerFont = reader.uint32();
                            break;
                        }
                    case 39: {
                            message.windowDecoration = reader.uint32();
                            break;
                        }
                    case 41: {
                            message.rivalMarker = reader.uint32();
                            break;
                        }
                    case 45: {
                            message.lastPlayedAt = reader.uint32();
                            break;
                        }
                    case 46: {
                            message.lastPlayedPlace = $root.wm.protobuf.Place.decode(reader, reader.uint32());
                            break;
                        }
                    case 47: {
                            message.aura = reader.uint32();
                            break;
                        }
                    case 48: {
                            message.auraMotif = reader.uint32();
                            break;
                        }
                    case 49: {
                            message.ghostLevel = reader.uint32();
                            break;
                        }
                    case 50: {
                            message.country = reader.string();
                            break;
                        }
                    case 51: {
                            message.searchCode = reader.string();
                            break;
                        }
                    case 52: {
                            message.customFrame = reader.uint32();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("customColor"))
                    throw $util.ProtocolError("missing required 'customColor'", { instance: message });
                if (!message.hasOwnProperty("wheel"))
                    throw $util.ProtocolError("missing required 'wheel'", { instance: message });
                if (!message.hasOwnProperty("wheelColor"))
                    throw $util.ProtocolError("missing required 'wheelColor'", { instance: message });
                if (!message.hasOwnProperty("aero"))
                    throw $util.ProtocolError("missing required 'aero'", { instance: message });
                if (!message.hasOwnProperty("bonnet"))
                    throw $util.ProtocolError("missing required 'bonnet'", { instance: message });
                if (!message.hasOwnProperty("wing"))
                    throw $util.ProtocolError("missing required 'wing'", { instance: message });
                if (!message.hasOwnProperty("mirror"))
                    throw $util.ProtocolError("missing required 'mirror'", { instance: message });
                if (!message.hasOwnProperty("neon"))
                    throw $util.ProtocolError("missing required 'neon'", { instance: message });
                if (!message.hasOwnProperty("trunk"))
                    throw $util.ProtocolError("missing required 'trunk'", { instance: message });
                if (!message.hasOwnProperty("plate"))
                    throw $util.ProtocolError("missing required 'plate'", { instance: message });
                if (!message.hasOwnProperty("plateColor"))
                    throw $util.ProtocolError("missing required 'plateColor'", { instance: message });
                if (!message.hasOwnProperty("plateNumber"))
                    throw $util.ProtocolError("missing required 'plateNumber'", { instance: message });
                if (!message.hasOwnProperty("tunePower"))
                    throw $util.ProtocolError("missing required 'tunePower'", { instance: message });
                if (!message.hasOwnProperty("tuneHandling"))
                    throw $util.ProtocolError("missing required 'tuneHandling'", { instance: message });
                if (!message.hasOwnProperty("title"))
                    throw $util.ProtocolError("missing required 'title'", { instance: message });
                if (!message.hasOwnProperty("level"))
                    throw $util.ProtocolError("missing required 'level'", { instance: message });
                return message;
            };

            /**
             * Decodes a Car message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof wm.protobuf.Car
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {wm.protobuf.Car} Car
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Car.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a Car message.
             * @function verify
             * @memberof wm.protobuf.Car
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Car.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.carId != null && message.hasOwnProperty("carId"))
                    if (!$util.isInteger(message.carId))
                        return "carId: integer expected";
                if (message.userId != null && message.hasOwnProperty("userId"))
                    if (!$util.isInteger(message.userId))
                        return "userId: integer expected";
                if (message.regionId != null && message.hasOwnProperty("regionId"))
                    if (!$util.isInteger(message.regionId))
                        return "regionId: integer expected";
                if (message.name != null && message.hasOwnProperty("name"))
                    if (!$util.isString(message.name))
                        return "name: string expected";
                if (message.manufacturer != null && message.hasOwnProperty("manufacturer"))
                    if (!$util.isInteger(message.manufacturer))
                        return "manufacturer: integer expected";
                if (message.model != null && message.hasOwnProperty("model"))
                    if (!$util.isInteger(message.model))
                        return "model: integer expected";
                if (message.visualModel != null && message.hasOwnProperty("visualModel"))
                    if (!$util.isInteger(message.visualModel))
                        return "visualModel: integer expected";
                if (message.defaultColor != null && message.hasOwnProperty("defaultColor"))
                    if (!$util.isInteger(message.defaultColor))
                        return "defaultColor: integer expected";
                if (!$util.isInteger(message.customColor))
                    return "customColor: integer expected";
                if (!$util.isInteger(message.wheel))
                    return "wheel: integer expected";
                if (!$util.isInteger(message.wheelColor))
                    return "wheelColor: integer expected";
                if (!$util.isInteger(message.aero))
                    return "aero: integer expected";
                if (!$util.isInteger(message.bonnet))
                    return "bonnet: integer expected";
                if (!$util.isInteger(message.wing))
                    return "wing: integer expected";
                if (message.gtWing != null && message.hasOwnProperty("gtWing")) {
                    let error = $root.wm.protobuf.GTWing.verify(message.gtWing);
                    if (error)
                        return "gtWing." + error;
                }
                if (!$util.isInteger(message.mirror))
                    return "mirror: integer expected";
                if (!$util.isInteger(message.neon))
                    return "neon: integer expected";
                if (!$util.isInteger(message.trunk))
                    return "trunk: integer expected";
                if (!$util.isInteger(message.plate))
                    return "plate: integer expected";
                if (!$util.isInteger(message.plateColor))
                    return "plateColor: integer expected";
                if (!$util.isInteger(message.plateNumber))
                    return "plateNumber: integer expected";
                if (!$util.isInteger(message.tunePower))
                    return "tunePower: integer expected";
                if (!$util.isInteger(message.tuneHandling))
                    return "tuneHandling: integer expected";
                if (!$util.isString(message.title))
                    return "title: string expected";
                if (!$util.isInteger(message.level))
                    return "level: integer expected";
                if (message.windowSticker != null && message.hasOwnProperty("windowSticker"))
                    if (typeof message.windowSticker !== "boolean")
                        return "windowSticker: boolean expected";
                if (message.windowStickerString != null && message.hasOwnProperty("windowStickerString"))
                    if (!$util.isString(message.windowStickerString))
                        return "windowStickerString: string expected";
                if (message.windowStickerFont != null && message.hasOwnProperty("windowStickerFont"))
                    if (!$util.isInteger(message.windowStickerFont))
                        return "windowStickerFont: integer expected";
                if (message.windowDecoration != null && message.hasOwnProperty("windowDecoration"))
                    if (!$util.isInteger(message.windowDecoration))
                        return "windowDecoration: integer expected";
                if (message.rivalMarker != null && message.hasOwnProperty("rivalMarker"))
                    if (!$util.isInteger(message.rivalMarker))
                        return "rivalMarker: integer expected";
                if (message.lastPlayedAt != null && message.hasOwnProperty("lastPlayedAt"))
                    if (!$util.isInteger(message.lastPlayedAt))
                        return "lastPlayedAt: integer expected";
                if (message.lastPlayedPlace != null && message.hasOwnProperty("lastPlayedPlace")) {
                    let error = $root.wm.protobuf.Place.verify(message.lastPlayedPlace);
                    if (error)
                        return "lastPlayedPlace." + error;
                }
                if (message.aura != null && message.hasOwnProperty("aura"))
                    if (!$util.isInteger(message.aura))
                        return "aura: integer expected";
                if (message.auraMotif != null && message.hasOwnProperty("auraMotif"))
                    if (!$util.isInteger(message.auraMotif))
                        return "auraMotif: integer expected";
                if (message.ghostLevel != null && message.hasOwnProperty("ghostLevel"))
                    if (!$util.isInteger(message.ghostLevel))
                        return "ghostLevel: integer expected";
                if (message.country != null && message.hasOwnProperty("country"))
                    if (!$util.isString(message.country))
                        return "country: string expected";
                if (message.searchCode != null && message.hasOwnProperty("searchCode"))
                    if (!$util.isString(message.searchCode))
                        return "searchCode: string expected";
                if (message.customFrame != null && message.hasOwnProperty("customFrame"))
                    if (!$util.isInteger(message.customFrame))
                        return "customFrame: integer expected";
                return null;
            };

            /**
             * Creates a Car message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof wm.protobuf.Car
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {wm.protobuf.Car} Car
             */
            Car.fromObject = function fromObject(object) {
                if (object instanceof $root.wm.protobuf.Car)
                    return object;
                let message = new $root.wm.protobuf.Car();
                if (object.carId != null)
                    message.carId = object.carId >>> 0;
                if (object.userId != null)
                    message.userId = object.userId >>> 0;
                if (object.regionId != null)
                    message.regionId = object.regionId >>> 0;
                if (object.name != null)
                    message.name = String(object.name);
                if (object.manufacturer != null)
                    message.manufacturer = object.manufacturer >>> 0;
                if (object.model != null)
                    message.model = object.model >>> 0;
                if (object.visualModel != null)
                    message.visualModel = object.visualModel >>> 0;
                if (object.defaultColor != null)
                    message.defaultColor = object.defaultColor >>> 0;
                if (object.customColor != null)
                    message.customColor = object.customColor >>> 0;
                if (object.wheel != null)
                    message.wheel = object.wheel >>> 0;
                if (object.wheelColor != null)
                    message.wheelColor = object.wheelColor >>> 0;
                if (object.aero != null)
                    message.aero = object.aero >>> 0;
                if (object.bonnet != null)
                    message.bonnet = object.bonnet >>> 0;
                if (object.wing != null)
                    message.wing = object.wing >>> 0;
                if (object.gtWing != null) {
                    if (typeof object.gtWing !== "object")
                        throw TypeError(".wm.protobuf.Car.gtWing: object expected");
                    message.gtWing = $root.wm.protobuf.GTWing.fromObject(object.gtWing);
                }
                if (object.mirror != null)
                    message.mirror = object.mirror >>> 0;
                if (object.neon != null)
                    message.neon = object.neon >>> 0;
                if (object.trunk != null)
                    message.trunk = object.trunk >>> 0;
                if (object.plate != null)
                    message.plate = object.plate >>> 0;
                if (object.plateColor != null)
                    message.plateColor = object.plateColor >>> 0;
                if (object.plateNumber != null)
                    message.plateNumber = object.plateNumber >>> 0;
                if (object.tunePower != null)
                    message.tunePower = object.tunePower >>> 0;
                if (object.tuneHandling != null)
                    message.tuneHandling = object.tuneHandling >>> 0;
                if (object.title != null)
                    message.title = String(object.title);
                if (object.level != null)
                    message.level = object.level >>> 0;
                if (object.windowSticker != null)
                    message.windowSticker = Boolean(object.windowSticker);
                if (object.windowStickerString != null)
                    message.windowStickerString = String(object.windowStickerString);
                if (object.windowStickerFont != null)
                    message.windowStickerFont = object.windowStickerFont >>> 0;
                if (object.windowDecoration != null)
                    message.windowDecoration = object.windowDecoration >>> 0;
                if (object.rivalMarker != null)
                    message.rivalMarker = object.rivalMarker >>> 0;
                if (object.lastPlayedAt != null)
                    message.lastPlayedAt = object.lastPlayedAt >>> 0;
                if (object.lastPlayedPlace != null) {
                    if (typeof object.lastPlayedPlace !== "object")
                        throw TypeError(".wm.protobuf.Car.lastPlayedPlace: object expected");
                    message.lastPlayedPlace = $root.wm.protobuf.Place.fromObject(object.lastPlayedPlace);
                }
                if (object.aura != null)
                    message.aura = object.aura >>> 0;
                if (object.auraMotif != null)
                    message.auraMotif = object.auraMotif >>> 0;
                if (object.ghostLevel != null)
                    message.ghostLevel = object.ghostLevel >>> 0;
                if (object.country != null)
                    message.country = String(object.country);
                if (object.searchCode != null)
                    message.searchCode = String(object.searchCode);
                if (object.customFrame != null)
                    message.customFrame = object.customFrame >>> 0;
                return message;
            };

            /**
             * Creates a plain object from a Car message. Also converts values to other types if specified.
             * @function toObject
             * @memberof wm.protobuf.Car
             * @static
             * @param {wm.protobuf.Car} message Car
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Car.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.carId = 0;
                    object.userId = 0;
                    object.regionId = 0;
                    object.name = "";
                    object.manufacturer = 0;
                    object.model = 0;
                    object.visualModel = 0;
                    object.defaultColor = 0;
                    object.customColor = 0;
                    object.wheel = 0;
                    object.wheelColor = 0;
                    object.aero = 0;
                    object.bonnet = 0;
                    object.wing = 0;
                    object.gtWing = null;
                    object.mirror = 0;
                    object.neon = 0;
                    object.trunk = 0;
                    object.plate = 0;
                    object.plateColor = 0;
                    object.plateNumber = 0;
                    object.tunePower = 0;
                    object.tuneHandling = 0;
                    object.title = "";
                    object.level = 0;
                    object.windowSticker = false;
                    object.windowStickerString = "";
                    object.windowStickerFont = 0;
                    object.windowDecoration = 0;
                    object.rivalMarker = 0;
                    object.lastPlayedAt = 0;
                    object.lastPlayedPlace = null;
                    object.aura = 0;
                    object.auraMotif = 0;
                    object.ghostLevel = 0;
                    object.country = "";
                    object.searchCode = "";
                    object.customFrame = 0;
                }
                if (message.carId != null && message.hasOwnProperty("carId"))
                    object.carId = message.carId;
                if (message.userId != null && message.hasOwnProperty("userId"))
                    object.userId = message.userId;
                if (message.regionId != null && message.hasOwnProperty("regionId"))
                    object.regionId = message.regionId;
                if (message.name != null && message.hasOwnProperty("name"))
                    object.name = message.name;
                if (message.manufacturer != null && message.hasOwnProperty("manufacturer"))
                    object.manufacturer = message.manufacturer;
                if (message.model != null && message.hasOwnProperty("model"))
                    object.model = message.model;
                if (message.visualModel != null && message.hasOwnProperty("visualModel"))
                    object.visualModel = message.visualModel;
                if (message.defaultColor != null && message.hasOwnProperty("defaultColor"))
                    object.defaultColor = message.defaultColor;
                if (message.customColor != null && message.hasOwnProperty("customColor"))
                    object.customColor = message.customColor;
                if (message.wheel != null && message.hasOwnProperty("wheel"))
                    object.wheel = message.wheel;
                if (message.wheelColor != null && message.hasOwnProperty("wheelColor"))
                    object.wheelColor = message.wheelColor;
                if (message.aero != null && message.hasOwnProperty("aero"))
                    object.aero = message.aero;
                if (message.bonnet != null && message.hasOwnProperty("bonnet"))
                    object.bonnet = message.bonnet;
                if (message.wing != null && message.hasOwnProperty("wing"))
                    object.wing = message.wing;
                if (message.gtWing != null && message.hasOwnProperty("gtWing"))
                    object.gtWing = $root.wm.protobuf.GTWing.toObject(message.gtWing, options);
                if (message.mirror != null && message.hasOwnProperty("mirror"))
                    object.mirror = message.mirror;
                if (message.neon != null && message.hasOwnProperty("neon"))
                    object.neon = message.neon;
                if (message.trunk != null && message.hasOwnProperty("trunk"))
                    object.trunk = message.trunk;
                if (message.plate != null && message.hasOwnProperty("plate"))
                    object.plate = message.plate;
                if (message.plateColor != null && message.hasOwnProperty("plateColor"))
                    object.plateColor = message.plateColor;
                if (message.plateNumber != null && message.hasOwnProperty("plateNumber"))
                    object.plateNumber = message.plateNumber;
                if (message.tunePower != null && message.hasOwnProperty("tunePower"))
                    object.tunePower = message.tunePower;
                if (message.tuneHandling != null && message.hasOwnProperty("tuneHandling"))
                    object.tuneHandling = message.tuneHandling;
                if (message.title != null && message.hasOwnProperty("title"))
                    object.title = message.title;
                if (message.level != null && message.hasOwnProperty("level"))
                    object.level = message.level;
                if (message.windowSticker != null && message.hasOwnProperty("windowSticker"))
                    object.windowSticker = message.windowSticker;
                if (message.windowStickerString != null && message.hasOwnProperty("windowStickerString"))
                    object.windowStickerString = message.windowStickerString;
                if (message.windowStickerFont != null && message.hasOwnProperty("windowStickerFont"))
                    object.windowStickerFont = message.windowStickerFont;
                if (message.windowDecoration != null && message.hasOwnProperty("windowDecoration"))
                    object.windowDecoration = message.windowDecoration;
                if (message.rivalMarker != null && message.hasOwnProperty("rivalMarker"))
                    object.rivalMarker = message.rivalMarker;
                if (message.lastPlayedAt != null && message.hasOwnProperty("lastPlayedAt"))
                    object.lastPlayedAt = message.lastPlayedAt;
                if (message.lastPlayedPlace != null && message.hasOwnProperty("lastPlayedPlace"))
                    object.lastPlayedPlace = $root.wm.protobuf.Place.toObject(message.lastPlayedPlace, options);
                if (message.aura != null && message.hasOwnProperty("aura"))
                    object.aura = message.aura;
                if (message.auraMotif != null && message.hasOwnProperty("auraMotif"))
                    object.auraMotif = message.auraMotif;
                if (message.ghostLevel != null && message.hasOwnProperty("ghostLevel"))
                    object.ghostLevel = message.ghostLevel;
                if (message.country != null && message.hasOwnProperty("country"))
                    object.country = message.country;
                if (message.searchCode != null && message.hasOwnProperty("searchCode"))
                    object.searchCode = message.searchCode;
                if (message.customFrame != null && message.hasOwnProperty("customFrame"))
                    object.customFrame = message.customFrame;
                return object;
            };

            /**
             * Converts this Car to JSON.
             * @function toJSON
             * @memberof wm.protobuf.Car
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Car.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for Car
             * @function getTypeUrl
             * @memberof wm.protobuf.Car
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            Car.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/wm.protobuf.Car";
            };

            return Car;
        })();

        protobuf.CarSetting = (function() {

            /**
             * Properties of a CarSetting.
             * @memberof wm.protobuf
             * @interface ICarSetting
             * @property {number|null} [carId] CarSetting carId
             * @property {boolean} view CarSetting view
             * @property {boolean} transmission CarSetting transmission
             * @property {boolean} retire CarSetting retire
             * @property {number} meter CarSetting meter
             * @property {boolean} navigationMap CarSetting navigationMap
             * @property {number} volume CarSetting volume
             * @property {number} bgm CarSetting bgm
             * @property {number} nameplate CarSetting nameplate
             * @property {number} nameplateColor CarSetting nameplateColor
             * @property {number} terminalBackground CarSetting terminalBackground
             */

            /**
             * Constructs a new CarSetting.
             * @memberof wm.protobuf
             * @classdesc Represents a CarSetting.
             * @implements ICarSetting
             * @constructor
             * @param {wm.protobuf.ICarSetting=} [properties] Properties to set
             */
            function CarSetting(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * CarSetting carId.
             * @member {number} carId
             * @memberof wm.protobuf.CarSetting
             * @instance
             */
            CarSetting.prototype.carId = 0;

            /**
             * CarSetting view.
             * @member {boolean} view
             * @memberof wm.protobuf.CarSetting
             * @instance
             */
            CarSetting.prototype.view = false;

            /**
             * CarSetting transmission.
             * @member {boolean} transmission
             * @memberof wm.protobuf.CarSetting
             * @instance
             */
            CarSetting.prototype.transmission = false;

            /**
             * CarSetting retire.
             * @member {boolean} retire
             * @memberof wm.protobuf.CarSetting
             * @instance
             */
            CarSetting.prototype.retire = false;

            /**
             * CarSetting meter.
             * @member {number} meter
             * @memberof wm.protobuf.CarSetting
             * @instance
             */
            CarSetting.prototype.meter = 0;

            /**
             * CarSetting navigationMap.
             * @member {boolean} navigationMap
             * @memberof wm.protobuf.CarSetting
             * @instance
             */
            CarSetting.prototype.navigationMap = false;

            /**
             * CarSetting volume.
             * @member {number} volume
             * @memberof wm.protobuf.CarSetting
             * @instance
             */
            CarSetting.prototype.volume = 0;

            /**
             * CarSetting bgm.
             * @member {number} bgm
             * @memberof wm.protobuf.CarSetting
             * @instance
             */
            CarSetting.prototype.bgm = 0;

            /**
             * CarSetting nameplate.
             * @member {number} nameplate
             * @memberof wm.protobuf.CarSetting
             * @instance
             */
            CarSetting.prototype.nameplate = 0;

            /**
             * CarSetting nameplateColor.
             * @member {number} nameplateColor
             * @memberof wm.protobuf.CarSetting
             * @instance
             */
            CarSetting.prototype.nameplateColor = 0;

            /**
             * CarSetting terminalBackground.
             * @member {number} terminalBackground
             * @memberof wm.protobuf.CarSetting
             * @instance
             */
            CarSetting.prototype.terminalBackground = 0;

            /**
             * Creates a new CarSetting instance using the specified properties.
             * @function create
             * @memberof wm.protobuf.CarSetting
             * @static
             * @param {wm.protobuf.ICarSetting=} [properties] Properties to set
             * @returns {wm.protobuf.CarSetting} CarSetting instance
             */
            CarSetting.create = function create(properties) {
                return new CarSetting(properties);
            };

            /**
             * Encodes the specified CarSetting message. Does not implicitly {@link wm.protobuf.CarSetting.verify|verify} messages.
             * @function encode
             * @memberof wm.protobuf.CarSetting
             * @static
             * @param {wm.protobuf.ICarSetting} message CarSetting message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            CarSetting.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.carId != null && Object.hasOwnProperty.call(message, "carId"))
                    writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.carId);
                writer.uint32(/* id 2, wireType 0 =*/16).bool(message.view);
                writer.uint32(/* id 3, wireType 0 =*/24).bool(message.transmission);
                writer.uint32(/* id 4, wireType 0 =*/32).bool(message.retire);
                writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.meter);
                writer.uint32(/* id 6, wireType 0 =*/48).bool(message.navigationMap);
                writer.uint32(/* id 7, wireType 0 =*/56).uint32(message.volume);
                writer.uint32(/* id 8, wireType 0 =*/64).uint32(message.bgm);
                writer.uint32(/* id 9, wireType 0 =*/72).uint32(message.nameplate);
                writer.uint32(/* id 10, wireType 0 =*/80).uint32(message.nameplateColor);
                writer.uint32(/* id 13, wireType 0 =*/104).uint32(message.terminalBackground);
                return writer;
            };

            /**
             * Encodes the specified CarSetting message, length delimited. Does not implicitly {@link wm.protobuf.CarSetting.verify|verify} messages.
             * @function encodeDelimited
             * @memberof wm.protobuf.CarSetting
             * @static
             * @param {wm.protobuf.ICarSetting} message CarSetting message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            CarSetting.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a CarSetting message from the specified reader or buffer.
             * @function decode
             * @memberof wm.protobuf.CarSetting
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {wm.protobuf.CarSetting} CarSetting
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            CarSetting.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.wm.protobuf.CarSetting();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.carId = reader.uint32();
                            break;
                        }
                    case 2: {
                            message.view = reader.bool();
                            break;
                        }
                    case 3: {
                            message.transmission = reader.bool();
                            break;
                        }
                    case 4: {
                            message.retire = reader.bool();
                            break;
                        }
                    case 5: {
                            message.meter = reader.uint32();
                            break;
                        }
                    case 6: {
                            message.navigationMap = reader.bool();
                            break;
                        }
                    case 7: {
                            message.volume = reader.uint32();
                            break;
                        }
                    case 8: {
                            message.bgm = reader.uint32();
                            break;
                        }
                    case 9: {
                            message.nameplate = reader.uint32();
                            break;
                        }
                    case 10: {
                            message.nameplateColor = reader.uint32();
                            break;
                        }
                    case 13: {
                            message.terminalBackground = reader.uint32();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("view"))
                    throw $util.ProtocolError("missing required 'view'", { instance: message });
                if (!message.hasOwnProperty("transmission"))
                    throw $util.ProtocolError("missing required 'transmission'", { instance: message });
                if (!message.hasOwnProperty("retire"))
                    throw $util.ProtocolError("missing required 'retire'", { instance: message });
                if (!message.hasOwnProperty("meter"))
                    throw $util.ProtocolError("missing required 'meter'", { instance: message });
                if (!message.hasOwnProperty("navigationMap"))
                    throw $util.ProtocolError("missing required 'navigationMap'", { instance: message });
                if (!message.hasOwnProperty("volume"))
                    throw $util.ProtocolError("missing required 'volume'", { instance: message });
                if (!message.hasOwnProperty("bgm"))
                    throw $util.ProtocolError("missing required 'bgm'", { instance: message });
                if (!message.hasOwnProperty("nameplate"))
                    throw $util.ProtocolError("missing required 'nameplate'", { instance: message });
                if (!message.hasOwnProperty("nameplateColor"))
                    throw $util.ProtocolError("missing required 'nameplateColor'", { instance: message });
                if (!message.hasOwnProperty("terminalBackground"))
                    throw $util.ProtocolError("missing required 'terminalBackground'", { instance: message });
                return message;
            };

            /**
             * Decodes a CarSetting message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof wm.protobuf.CarSetting
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {wm.protobuf.CarSetting} CarSetting
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            CarSetting.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a CarSetting message.
             * @function verify
             * @memberof wm.protobuf.CarSetting
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            CarSetting.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.carId != null && message.hasOwnProperty("carId"))
                    if (!$util.isInteger(message.carId))
                        return "carId: integer expected";
                if (typeof message.view !== "boolean")
                    return "view: boolean expected";
                if (typeof message.transmission !== "boolean")
                    return "transmission: boolean expected";
                if (typeof message.retire !== "boolean")
                    return "retire: boolean expected";
                if (!$util.isInteger(message.meter))
                    return "meter: integer expected";
                if (typeof message.navigationMap !== "boolean")
                    return "navigationMap: boolean expected";
                if (!$util.isInteger(message.volume))
                    return "volume: integer expected";
                if (!$util.isInteger(message.bgm))
                    return "bgm: integer expected";
                if (!$util.isInteger(message.nameplate))
                    return "nameplate: integer expected";
                if (!$util.isInteger(message.nameplateColor))
                    return "nameplateColor: integer expected";
                if (!$util.isInteger(message.terminalBackground))
                    return "terminalBackground: integer expected";
                return null;
            };

            /**
             * Creates a CarSetting message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof wm.protobuf.CarSetting
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {wm.protobuf.CarSetting} CarSetting
             */
            CarSetting.fromObject = function fromObject(object) {
                if (object instanceof $root.wm.protobuf.CarSetting)
                    return object;
                let message = new $root.wm.protobuf.CarSetting();
                if (object.carId != null)
                    message.carId = object.carId >>> 0;
                if (object.view != null)
                    message.view = Boolean(object.view);
                if (object.transmission != null)
                    message.transmission = Boolean(object.transmission);
                if (object.retire != null)
                    message.retire = Boolean(object.retire);
                if (object.meter != null)
                    message.meter = object.meter >>> 0;
                if (object.navigationMap != null)
                    message.navigationMap = Boolean(object.navigationMap);
                if (object.volume != null)
                    message.volume = object.volume >>> 0;
                if (object.bgm != null)
                    message.bgm = object.bgm >>> 0;
                if (object.nameplate != null)
                    message.nameplate = object.nameplate >>> 0;
                if (object.nameplateColor != null)
                    message.nameplateColor = object.nameplateColor >>> 0;
                if (object.terminalBackground != null)
                    message.terminalBackground = object.terminalBackground >>> 0;
                return message;
            };

            /**
             * Creates a plain object from a CarSetting message. Also converts values to other types if specified.
             * @function toObject
             * @memberof wm.protobuf.CarSetting
             * @static
             * @param {wm.protobuf.CarSetting} message CarSetting
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            CarSetting.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.carId = 0;
                    object.view = false;
                    object.transmission = false;
                    object.retire = false;
                    object.meter = 0;
                    object.navigationMap = false;
                    object.volume = 0;
                    object.bgm = 0;
                    object.nameplate = 0;
                    object.nameplateColor = 0;
                    object.terminalBackground = 0;
                }
                if (message.carId != null && message.hasOwnProperty("carId"))
                    object.carId = message.carId;
                if (message.view != null && message.hasOwnProperty("view"))
                    object.view = message.view;
                if (message.transmission != null && message.hasOwnProperty("transmission"))
                    object.transmission = message.transmission;
                if (message.retire != null && message.hasOwnProperty("retire"))
                    object.retire = message.retire;
                if (message.meter != null && message.hasOwnProperty("meter"))
                    object.meter = message.meter;
                if (message.navigationMap != null && message.hasOwnProperty("navigationMap"))
                    object.navigationMap = message.navigationMap;
                if (message.volume != null && message.hasOwnProperty("volume"))
                    object.volume = message.volume;
                if (message.bgm != null && message.hasOwnProperty("bgm"))
                    object.bgm = message.bgm;
                if (message.nameplate != null && message.hasOwnProperty("nameplate"))
                    object.nameplate = message.nameplate;
                if (message.nameplateColor != null && message.hasOwnProperty("nameplateColor"))
                    object.nameplateColor = message.nameplateColor;
                if (message.terminalBackground != null && message.hasOwnProperty("terminalBackground"))
                    object.terminalBackground = message.terminalBackground;
                return object;
            };

            /**
             * Converts this CarSetting to JSON.
             * @function toJSON
             * @memberof wm.protobuf.CarSetting
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            CarSetting.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for CarSetting
             * @function getTypeUrl
             * @memberof wm.protobuf.CarSetting
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            CarSetting.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/wm.protobuf.CarSetting";
            };

            return CarSetting;
        })();

        protobuf.GTWing = (function() {

            /**
             * Properties of a GTWing.
             * @memberof wm.protobuf
             * @interface IGTWing
             * @property {number} pillar GTWing pillar
             * @property {number} pillarMaterial GTWing pillarMaterial
             * @property {number} mainWing GTWing mainWing
             * @property {number} mainWingColor GTWing mainWingColor
             * @property {number} wingTip GTWing wingTip
             * @property {number} material GTWing material
             */

            /**
             * Constructs a new GTWing.
             * @memberof wm.protobuf
             * @classdesc Represents a GTWing.
             * @implements IGTWing
             * @constructor
             * @param {wm.protobuf.IGTWing=} [properties] Properties to set
             */
            function GTWing(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * GTWing pillar.
             * @member {number} pillar
             * @memberof wm.protobuf.GTWing
             * @instance
             */
            GTWing.prototype.pillar = 0;

            /**
             * GTWing pillarMaterial.
             * @member {number} pillarMaterial
             * @memberof wm.protobuf.GTWing
             * @instance
             */
            GTWing.prototype.pillarMaterial = 0;

            /**
             * GTWing mainWing.
             * @member {number} mainWing
             * @memberof wm.protobuf.GTWing
             * @instance
             */
            GTWing.prototype.mainWing = 0;

            /**
             * GTWing mainWingColor.
             * @member {number} mainWingColor
             * @memberof wm.protobuf.GTWing
             * @instance
             */
            GTWing.prototype.mainWingColor = 0;

            /**
             * GTWing wingTip.
             * @member {number} wingTip
             * @memberof wm.protobuf.GTWing
             * @instance
             */
            GTWing.prototype.wingTip = 0;

            /**
             * GTWing material.
             * @member {number} material
             * @memberof wm.protobuf.GTWing
             * @instance
             */
            GTWing.prototype.material = 0;

            /**
             * Creates a new GTWing instance using the specified properties.
             * @function create
             * @memberof wm.protobuf.GTWing
             * @static
             * @param {wm.protobuf.IGTWing=} [properties] Properties to set
             * @returns {wm.protobuf.GTWing} GTWing instance
             */
            GTWing.create = function create(properties) {
                return new GTWing(properties);
            };

            /**
             * Encodes the specified GTWing message. Does not implicitly {@link wm.protobuf.GTWing.verify|verify} messages.
             * @function encode
             * @memberof wm.protobuf.GTWing
             * @static
             * @param {wm.protobuf.IGTWing} message GTWing message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GTWing.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.pillar);
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.pillarMaterial);
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.mainWing);
                writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.mainWingColor);
                writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.wingTip);
                writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.material);
                return writer;
            };

            /**
             * Encodes the specified GTWing message, length delimited. Does not implicitly {@link wm.protobuf.GTWing.verify|verify} messages.
             * @function encodeDelimited
             * @memberof wm.protobuf.GTWing
             * @static
             * @param {wm.protobuf.IGTWing} message GTWing message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GTWing.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a GTWing message from the specified reader or buffer.
             * @function decode
             * @memberof wm.protobuf.GTWing
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {wm.protobuf.GTWing} GTWing
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GTWing.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.wm.protobuf.GTWing();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.pillar = reader.uint32();
                            break;
                        }
                    case 2: {
                            message.pillarMaterial = reader.uint32();
                            break;
                        }
                    case 3: {
                            message.mainWing = reader.uint32();
                            break;
                        }
                    case 4: {
                            message.mainWingColor = reader.uint32();
                            break;
                        }
                    case 5: {
                            message.wingTip = reader.uint32();
                            break;
                        }
                    case 6: {
                            message.material = reader.uint32();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("pillar"))
                    throw $util.ProtocolError("missing required 'pillar'", { instance: message });
                if (!message.hasOwnProperty("pillarMaterial"))
                    throw $util.ProtocolError("missing required 'pillarMaterial'", { instance: message });
                if (!message.hasOwnProperty("mainWing"))
                    throw $util.ProtocolError("missing required 'mainWing'", { instance: message });
                if (!message.hasOwnProperty("mainWingColor"))
                    throw $util.ProtocolError("missing required 'mainWingColor'", { instance: message });
                if (!message.hasOwnProperty("wingTip"))
                    throw $util.ProtocolError("missing required 'wingTip'", { instance: message });
                if (!message.hasOwnProperty("material"))
                    throw $util.ProtocolError("missing required 'material'", { instance: message });
                return message;
            };

            /**
             * Decodes a GTWing message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof wm.protobuf.GTWing
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {wm.protobuf.GTWing} GTWing
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GTWing.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a GTWing message.
             * @function verify
             * @memberof wm.protobuf.GTWing
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            GTWing.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (!$util.isInteger(message.pillar))
                    return "pillar: integer expected";
                if (!$util.isInteger(message.pillarMaterial))
                    return "pillarMaterial: integer expected";
                if (!$util.isInteger(message.mainWing))
                    return "mainWing: integer expected";
                if (!$util.isInteger(message.mainWingColor))
                    return "mainWingColor: integer expected";
                if (!$util.isInteger(message.wingTip))
                    return "wingTip: integer expected";
                if (!$util.isInteger(message.material))
                    return "material: integer expected";
                return null;
            };

            /**
             * Creates a GTWing message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof wm.protobuf.GTWing
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {wm.protobuf.GTWing} GTWing
             */
            GTWing.fromObject = function fromObject(object) {
                if (object instanceof $root.wm.protobuf.GTWing)
                    return object;
                let message = new $root.wm.protobuf.GTWing();
                if (object.pillar != null)
                    message.pillar = object.pillar >>> 0;
                if (object.pillarMaterial != null)
                    message.pillarMaterial = object.pillarMaterial >>> 0;
                if (object.mainWing != null)
                    message.mainWing = object.mainWing >>> 0;
                if (object.mainWingColor != null)
                    message.mainWingColor = object.mainWingColor >>> 0;
                if (object.wingTip != null)
                    message.wingTip = object.wingTip >>> 0;
                if (object.material != null)
                    message.material = object.material >>> 0;
                return message;
            };

            /**
             * Creates a plain object from a GTWing message. Also converts values to other types if specified.
             * @function toObject
             * @memberof wm.protobuf.GTWing
             * @static
             * @param {wm.protobuf.GTWing} message GTWing
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            GTWing.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.pillar = 0;
                    object.pillarMaterial = 0;
                    object.mainWing = 0;
                    object.mainWingColor = 0;
                    object.wingTip = 0;
                    object.material = 0;
                }
                if (message.pillar != null && message.hasOwnProperty("pillar"))
                    object.pillar = message.pillar;
                if (message.pillarMaterial != null && message.hasOwnProperty("pillarMaterial"))
                    object.pillarMaterial = message.pillarMaterial;
                if (message.mainWing != null && message.hasOwnProperty("mainWing"))
                    object.mainWing = message.mainWing;
                if (message.mainWingColor != null && message.hasOwnProperty("mainWingColor"))
                    object.mainWingColor = message.mainWingColor;
                if (message.wingTip != null && message.hasOwnProperty("wingTip"))
                    object.wingTip = message.wingTip;
                if (message.material != null && message.hasOwnProperty("material"))
                    object.material = message.material;
                return object;
            };

            /**
             * Converts this GTWing to JSON.
             * @function toJSON
             * @memberof wm.protobuf.GTWing
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            GTWing.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for GTWing
             * @function getTypeUrl
             * @memberof wm.protobuf.GTWing
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            GTWing.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/wm.protobuf.GTWing";
            };

            return GTWing;
        })();

        protobuf.CarItem = (function() {

            /**
             * Properties of a CarItem.
             * @memberof wm.protobuf
             * @interface ICarItem
             * @property {wm.protobuf.ItemCategory} category CarItem category
             * @property {number} itemId CarItem itemId
             * @property {number|null} [amount] CarItem amount
             */

            /**
             * Constructs a new CarItem.
             * @memberof wm.protobuf
             * @classdesc Represents a CarItem.
             * @implements ICarItem
             * @constructor
             * @param {wm.protobuf.ICarItem=} [properties] Properties to set
             */
            function CarItem(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * CarItem category.
             * @member {wm.protobuf.ItemCategory} category
             * @memberof wm.protobuf.CarItem
             * @instance
             */
            CarItem.prototype.category = 1;

            /**
             * CarItem itemId.
             * @member {number} itemId
             * @memberof wm.protobuf.CarItem
             * @instance
             */
            CarItem.prototype.itemId = 0;

            /**
             * CarItem amount.
             * @member {number} amount
             * @memberof wm.protobuf.CarItem
             * @instance
             */
            CarItem.prototype.amount = 0;

            /**
             * Creates a new CarItem instance using the specified properties.
             * @function create
             * @memberof wm.protobuf.CarItem
             * @static
             * @param {wm.protobuf.ICarItem=} [properties] Properties to set
             * @returns {wm.protobuf.CarItem} CarItem instance
             */
            CarItem.create = function create(properties) {
                return new CarItem(properties);
            };

            /**
             * Encodes the specified CarItem message. Does not implicitly {@link wm.protobuf.CarItem.verify|verify} messages.
             * @function encode
             * @memberof wm.protobuf.CarItem
             * @static
             * @param {wm.protobuf.ICarItem} message CarItem message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            CarItem.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.category);
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.itemId);
                if (message.amount != null && Object.hasOwnProperty.call(message, "amount"))
                    writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.amount);
                return writer;
            };

            /**
             * Encodes the specified CarItem message, length delimited. Does not implicitly {@link wm.protobuf.CarItem.verify|verify} messages.
             * @function encodeDelimited
             * @memberof wm.protobuf.CarItem
             * @static
             * @param {wm.protobuf.ICarItem} message CarItem message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            CarItem.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a CarItem message from the specified reader or buffer.
             * @function decode
             * @memberof wm.protobuf.CarItem
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {wm.protobuf.CarItem} CarItem
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            CarItem.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.wm.protobuf.CarItem();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.category = reader.int32();
                            break;
                        }
                    case 2: {
                            message.itemId = reader.uint32();
                            break;
                        }
                    case 3: {
                            message.amount = reader.uint32();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("category"))
                    throw $util.ProtocolError("missing required 'category'", { instance: message });
                if (!message.hasOwnProperty("itemId"))
                    throw $util.ProtocolError("missing required 'itemId'", { instance: message });
                return message;
            };

            /**
             * Decodes a CarItem message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof wm.protobuf.CarItem
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {wm.protobuf.CarItem} CarItem
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            CarItem.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a CarItem message.
             * @function verify
             * @memberof wm.protobuf.CarItem
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            CarItem.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                switch (message.category) {
                default:
                    return "category: enum value expected";
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 8:
                case 9:
                case 10:
                case 12:
                case 14:
                case 15:
                case 16:
                case 17:
                case 18:
                case 19:
                case 22:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 201:
                case 202:
                case 203:
                case 400:
                case 300:
                case 301:
                    break;
                }
                if (!$util.isInteger(message.itemId))
                    return "itemId: integer expected";
                if (message.amount != null && message.hasOwnProperty("amount"))
                    if (!$util.isInteger(message.amount))
                        return "amount: integer expected";
                return null;
            };

            /**
             * Creates a CarItem message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof wm.protobuf.CarItem
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {wm.protobuf.CarItem} CarItem
             */
            CarItem.fromObject = function fromObject(object) {
                if (object instanceof $root.wm.protobuf.CarItem)
                    return object;
                let message = new $root.wm.protobuf.CarItem();
                switch (object.category) {
                default:
                    if (typeof object.category === "number") {
                        message.category = object.category;
                        break;
                    }
                    break;
                case "CAT_CUSTOM_COLOR":
                case 1:
                    message.category = 1;
                    break;
                case "CAT_WHEEL":
                case 2:
                    message.category = 2;
                    break;
                case "CAT_AERO":
                case 3:
                    message.category = 3;
                    break;
                case "CAT_BONNET":
                case 4:
                    message.category = 4;
                    break;
                case "CAT_WING":
                case 5:
                    message.category = 5;
                    break;
                case "CAT_MIRROR":
                case 6:
                    message.category = 6;
                    break;
                case "CAT_NEON":
                case 8:
                    message.category = 8;
                    break;
                case "CAT_TRUNK":
                case 9:
                    message.category = 9;
                    break;
                case "CAT_NUMBER_PLATE":
                case 10:
                    message.category = 10;
                    break;
                case "CAT_GT_WING":
                case 12:
                    message.category = 12;
                    break;
                case "CAT_AURA_MOTIF":
                case 14:
                    message.category = 14;
                    break;
                case "CAT_METER":
                case 15:
                    message.category = 15;
                    break;
                case "CAT_BGM":
                case 16:
                    message.category = 16;
                    break;
                case "CAT_NAME_PLATE":
                case 17:
                    message.category = 17;
                    break;
                case "CAT_CUSTOM_FRAME":
                case 18:
                    message.category = 18;
                    break;
                case "CAT_NUMBER":
                case 19:
                    message.category = 19;
                    break;
                case "CAT_BGM_TRACK":
                case 22:
                    message.category = 22;
                    break;
                case "CAT_WINDOW_STICKER_FONT":
                case 24:
                    message.category = 24;
                    break;
                case "CAT_WINDOW_DECORATION":
                case 25:
                    message.category = 25;
                    break;
                case "CAT_RIVAL_MARKER":
                case 26:
                    message.category = 26;
                    break;
                case "CAT_STAMP":
                case 27:
                    message.category = 27;
                    break;
                case "CAT_TERMINAL_BACKGROUND":
                case 28:
                    message.category = 28;
                    break;
                case "CAT_CAR_TICKET":
                case 201:
                    message.category = 201;
                    break;
                case "CAT_CONSUMPTION_ITEM":
                case 202:
                    message.category = 202;
                    break;
                case "CAT_CAR_TICKET_FREE":
                case 203:
                    message.category = 203;
                    break;
                case "CAT_CAR_TITLE":
                case 400:
                    message.category = 400;
                    break;
                case "CAT_AERO_FULLSET":
                case 300:
                    message.category = 300;
                    break;
                case "CAT_AERO_LIMITED":
                case 301:
                    message.category = 301;
                    break;
                }
                if (object.itemId != null)
                    message.itemId = object.itemId >>> 0;
                if (object.amount != null)
                    message.amount = object.amount >>> 0;
                return message;
            };

            /**
             * Creates a plain object from a CarItem message. Also converts values to other types if specified.
             * @function toObject
             * @memberof wm.protobuf.CarItem
             * @static
             * @param {wm.protobuf.CarItem} message CarItem
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            CarItem.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.category = options.enums === String ? "CAT_CUSTOM_COLOR" : 1;
                    object.itemId = 0;
                    object.amount = 0;
                }
                if (message.category != null && message.hasOwnProperty("category"))
                    object.category = options.enums === String ? $root.wm.protobuf.ItemCategory[message.category] === undefined ? message.category : $root.wm.protobuf.ItemCategory[message.category] : message.category;
                if (message.itemId != null && message.hasOwnProperty("itemId"))
                    object.itemId = message.itemId;
                if (message.amount != null && message.hasOwnProperty("amount"))
                    object.amount = message.amount;
                return object;
            };

            /**
             * Converts this CarItem to JSON.
             * @function toJSON
             * @memberof wm.protobuf.CarItem
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            CarItem.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for CarItem
             * @function getTypeUrl
             * @memberof wm.protobuf.CarItem
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            CarItem.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/wm.protobuf.CarItem";
            };

            return CarItem;
        })();

        protobuf.CopiedCar = (function() {

            /**
             * Properties of a CopiedCar.
             * @memberof wm.protobuf
             * @interface ICopiedCar
             * @property {wm.protobuf.ICar} car CopiedCar car
             * @property {number} remainingPlayCounts CopiedCar remainingPlayCounts
             */

            /**
             * Constructs a new CopiedCar.
             * @memberof wm.protobuf
             * @classdesc Represents a CopiedCar.
             * @implements ICopiedCar
             * @constructor
             * @param {wm.protobuf.ICopiedCar=} [properties] Properties to set
             */
            function CopiedCar(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * CopiedCar car.
             * @member {wm.protobuf.ICar} car
             * @memberof wm.protobuf.CopiedCar
             * @instance
             */
            CopiedCar.prototype.car = null;

            /**
             * CopiedCar remainingPlayCounts.
             * @member {number} remainingPlayCounts
             * @memberof wm.protobuf.CopiedCar
             * @instance
             */
            CopiedCar.prototype.remainingPlayCounts = 0;

            /**
             * Creates a new CopiedCar instance using the specified properties.
             * @function create
             * @memberof wm.protobuf.CopiedCar
             * @static
             * @param {wm.protobuf.ICopiedCar=} [properties] Properties to set
             * @returns {wm.protobuf.CopiedCar} CopiedCar instance
             */
            CopiedCar.create = function create(properties) {
                return new CopiedCar(properties);
            };

            /**
             * Encodes the specified CopiedCar message. Does not implicitly {@link wm.protobuf.CopiedCar.verify|verify} messages.
             * @function encode
             * @memberof wm.protobuf.CopiedCar
             * @static
             * @param {wm.protobuf.ICopiedCar} message CopiedCar message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            CopiedCar.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                $root.wm.protobuf.Car.encode(message.car, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.remainingPlayCounts);
                return writer;
            };

            /**
             * Encodes the specified CopiedCar message, length delimited. Does not implicitly {@link wm.protobuf.CopiedCar.verify|verify} messages.
             * @function encodeDelimited
             * @memberof wm.protobuf.CopiedCar
             * @static
             * @param {wm.protobuf.ICopiedCar} message CopiedCar message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            CopiedCar.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a CopiedCar message from the specified reader or buffer.
             * @function decode
             * @memberof wm.protobuf.CopiedCar
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {wm.protobuf.CopiedCar} CopiedCar
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            CopiedCar.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.wm.protobuf.CopiedCar();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.car = $root.wm.protobuf.Car.decode(reader, reader.uint32());
                            break;
                        }
                    case 2: {
                            message.remainingPlayCounts = reader.uint32();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("car"))
                    throw $util.ProtocolError("missing required 'car'", { instance: message });
                if (!message.hasOwnProperty("remainingPlayCounts"))
                    throw $util.ProtocolError("missing required 'remainingPlayCounts'", { instance: message });
                return message;
            };

            /**
             * Decodes a CopiedCar message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof wm.protobuf.CopiedCar
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {wm.protobuf.CopiedCar} CopiedCar
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            CopiedCar.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a CopiedCar message.
             * @function verify
             * @memberof wm.protobuf.CopiedCar
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            CopiedCar.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                {
                    let error = $root.wm.protobuf.Car.verify(message.car);
                    if (error)
                        return "car." + error;
                }
                if (!$util.isInteger(message.remainingPlayCounts))
                    return "remainingPlayCounts: integer expected";
                return null;
            };

            /**
             * Creates a CopiedCar message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof wm.protobuf.CopiedCar
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {wm.protobuf.CopiedCar} CopiedCar
             */
            CopiedCar.fromObject = function fromObject(object) {
                if (object instanceof $root.wm.protobuf.CopiedCar)
                    return object;
                let message = new $root.wm.protobuf.CopiedCar();
                if (object.car != null) {
                    if (typeof object.car !== "object")
                        throw TypeError(".wm.protobuf.CopiedCar.car: object expected");
                    message.car = $root.wm.protobuf.Car.fromObject(object.car);
                }
                if (object.remainingPlayCounts != null)
                    message.remainingPlayCounts = object.remainingPlayCounts >>> 0;
                return message;
            };

            /**
             * Creates a plain object from a CopiedCar message. Also converts values to other types if specified.
             * @function toObject
             * @memberof wm.protobuf.CopiedCar
             * @static
             * @param {wm.protobuf.CopiedCar} message CopiedCar
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            CopiedCar.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.car = null;
                    object.remainingPlayCounts = 0;
                }
                if (message.car != null && message.hasOwnProperty("car"))
                    object.car = $root.wm.protobuf.Car.toObject(message.car, options);
                if (message.remainingPlayCounts != null && message.hasOwnProperty("remainingPlayCounts"))
                    object.remainingPlayCounts = message.remainingPlayCounts;
                return object;
            };

            /**
             * Converts this CopiedCar to JSON.
             * @function toJSON
             * @memberof wm.protobuf.CopiedCar
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            CopiedCar.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for CopiedCar
             * @function getTypeUrl
             * @memberof wm.protobuf.CopiedCar
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            CopiedCar.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/wm.protobuf.CopiedCar";
            };

            return CopiedCar;
        })();

        protobuf.FriendCar = (function() {

            /**
             * Properties of a FriendCar.
             * @memberof wm.protobuf
             * @interface IFriendCar
             * @property {wm.protobuf.ICar} car FriendCar car
             * @property {number|null} [friendshipLevel] FriendCar friendshipLevel
             * @property {boolean} nonhuman FriendCar nonhuman
             */

            /**
             * Constructs a new FriendCar.
             * @memberof wm.protobuf
             * @classdesc Represents a FriendCar.
             * @implements IFriendCar
             * @constructor
             * @param {wm.protobuf.IFriendCar=} [properties] Properties to set
             */
            function FriendCar(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * FriendCar car.
             * @member {wm.protobuf.ICar} car
             * @memberof wm.protobuf.FriendCar
             * @instance
             */
            FriendCar.prototype.car = null;

            /**
             * FriendCar friendshipLevel.
             * @member {number} friendshipLevel
             * @memberof wm.protobuf.FriendCar
             * @instance
             */
            FriendCar.prototype.friendshipLevel = 0;

            /**
             * FriendCar nonhuman.
             * @member {boolean} nonhuman
             * @memberof wm.protobuf.FriendCar
             * @instance
             */
            FriendCar.prototype.nonhuman = false;

            /**
             * Creates a new FriendCar instance using the specified properties.
             * @function create
             * @memberof wm.protobuf.FriendCar
             * @static
             * @param {wm.protobuf.IFriendCar=} [properties] Properties to set
             * @returns {wm.protobuf.FriendCar} FriendCar instance
             */
            FriendCar.create = function create(properties) {
                return new FriendCar(properties);
            };

            /**
             * Encodes the specified FriendCar message. Does not implicitly {@link wm.protobuf.FriendCar.verify|verify} messages.
             * @function encode
             * @memberof wm.protobuf.FriendCar
             * @static
             * @param {wm.protobuf.IFriendCar} message FriendCar message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FriendCar.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                $root.wm.protobuf.Car.encode(message.car, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.friendshipLevel != null && Object.hasOwnProperty.call(message, "friendshipLevel"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.friendshipLevel);
                writer.uint32(/* id 3, wireType 0 =*/24).bool(message.nonhuman);
                return writer;
            };

            /**
             * Encodes the specified FriendCar message, length delimited. Does not implicitly {@link wm.protobuf.FriendCar.verify|verify} messages.
             * @function encodeDelimited
             * @memberof wm.protobuf.FriendCar
             * @static
             * @param {wm.protobuf.IFriendCar} message FriendCar message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FriendCar.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a FriendCar message from the specified reader or buffer.
             * @function decode
             * @memberof wm.protobuf.FriendCar
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {wm.protobuf.FriendCar} FriendCar
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FriendCar.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.wm.protobuf.FriendCar();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.car = $root.wm.protobuf.Car.decode(reader, reader.uint32());
                            break;
                        }
                    case 2: {
                            message.friendshipLevel = reader.uint32();
                            break;
                        }
                    case 3: {
                            message.nonhuman = reader.bool();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("car"))
                    throw $util.ProtocolError("missing required 'car'", { instance: message });
                if (!message.hasOwnProperty("nonhuman"))
                    throw $util.ProtocolError("missing required 'nonhuman'", { instance: message });
                return message;
            };

            /**
             * Decodes a FriendCar message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof wm.protobuf.FriendCar
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {wm.protobuf.FriendCar} FriendCar
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FriendCar.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a FriendCar message.
             * @function verify
             * @memberof wm.protobuf.FriendCar
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            FriendCar.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                {
                    let error = $root.wm.protobuf.Car.verify(message.car);
                    if (error)
                        return "car." + error;
                }
                if (message.friendshipLevel != null && message.hasOwnProperty("friendshipLevel"))
                    if (!$util.isInteger(message.friendshipLevel))
                        return "friendshipLevel: integer expected";
                if (typeof message.nonhuman !== "boolean")
                    return "nonhuman: boolean expected";
                return null;
            };

            /**
             * Creates a FriendCar message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof wm.protobuf.FriendCar
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {wm.protobuf.FriendCar} FriendCar
             */
            FriendCar.fromObject = function fromObject(object) {
                if (object instanceof $root.wm.protobuf.FriendCar)
                    return object;
                let message = new $root.wm.protobuf.FriendCar();
                if (object.car != null) {
                    if (typeof object.car !== "object")
                        throw TypeError(".wm.protobuf.FriendCar.car: object expected");
                    message.car = $root.wm.protobuf.Car.fromObject(object.car);
                }
                if (object.friendshipLevel != null)
                    message.friendshipLevel = object.friendshipLevel >>> 0;
                if (object.nonhuman != null)
                    message.nonhuman = Boolean(object.nonhuman);
                return message;
            };

            /**
             * Creates a plain object from a FriendCar message. Also converts values to other types if specified.
             * @function toObject
             * @memberof wm.protobuf.FriendCar
             * @static
             * @param {wm.protobuf.FriendCar} message FriendCar
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            FriendCar.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.car = null;
                    object.friendshipLevel = 0;
                    object.nonhuman = false;
                }
                if (message.car != null && message.hasOwnProperty("car"))
                    object.car = $root.wm.protobuf.Car.toObject(message.car, options);
                if (message.friendshipLevel != null && message.hasOwnProperty("friendshipLevel"))
                    object.friendshipLevel = message.friendshipLevel;
                if (message.nonhuman != null && message.hasOwnProperty("nonhuman"))
                    object.nonhuman = message.nonhuman;
                return object;
            };

            /**
             * Converts this FriendCar to JSON.
             * @function toJSON
             * @memberof wm.protobuf.FriendCar
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            FriendCar.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for FriendCar
             * @function getTypeUrl
             * @memberof wm.protobuf.FriendCar
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            FriendCar.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/wm.protobuf.FriendCar";
            };

            return FriendCar;
        })();

        protobuf.ChallengerCar = (function() {

            /**
             * Properties of a ChallengerCar.
             * @memberof wm.protobuf
             * @interface IChallengerCar
             * @property {wm.protobuf.ICar} car ChallengerCar car
             * @property {number} stamp ChallengerCar stamp
             * @property {number} result ChallengerCar result
             * @property {number} area ChallengerCar area
             */

            /**
             * Constructs a new ChallengerCar.
             * @memberof wm.protobuf
             * @classdesc Represents a ChallengerCar.
             * @implements IChallengerCar
             * @constructor
             * @param {wm.protobuf.IChallengerCar=} [properties] Properties to set
             */
            function ChallengerCar(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * ChallengerCar car.
             * @member {wm.protobuf.ICar} car
             * @memberof wm.protobuf.ChallengerCar
             * @instance
             */
            ChallengerCar.prototype.car = null;

            /**
             * ChallengerCar stamp.
             * @member {number} stamp
             * @memberof wm.protobuf.ChallengerCar
             * @instance
             */
            ChallengerCar.prototype.stamp = 0;

            /**
             * ChallengerCar result.
             * @member {number} result
             * @memberof wm.protobuf.ChallengerCar
             * @instance
             */
            ChallengerCar.prototype.result = 0;

            /**
             * ChallengerCar area.
             * @member {number} area
             * @memberof wm.protobuf.ChallengerCar
             * @instance
             */
            ChallengerCar.prototype.area = 0;

            /**
             * Creates a new ChallengerCar instance using the specified properties.
             * @function create
             * @memberof wm.protobuf.ChallengerCar
             * @static
             * @param {wm.protobuf.IChallengerCar=} [properties] Properties to set
             * @returns {wm.protobuf.ChallengerCar} ChallengerCar instance
             */
            ChallengerCar.create = function create(properties) {
                return new ChallengerCar(properties);
            };

            /**
             * Encodes the specified ChallengerCar message. Does not implicitly {@link wm.protobuf.ChallengerCar.verify|verify} messages.
             * @function encode
             * @memberof wm.protobuf.ChallengerCar
             * @static
             * @param {wm.protobuf.IChallengerCar} message ChallengerCar message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ChallengerCar.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                $root.wm.protobuf.Car.encode(message.car, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.stamp);
                writer.uint32(/* id 4, wireType 0 =*/32).sint32(message.result);
                writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.area);
                return writer;
            };

            /**
             * Encodes the specified ChallengerCar message, length delimited. Does not implicitly {@link wm.protobuf.ChallengerCar.verify|verify} messages.
             * @function encodeDelimited
             * @memberof wm.protobuf.ChallengerCar
             * @static
             * @param {wm.protobuf.IChallengerCar} message ChallengerCar message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ChallengerCar.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a ChallengerCar message from the specified reader or buffer.
             * @function decode
             * @memberof wm.protobuf.ChallengerCar
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {wm.protobuf.ChallengerCar} ChallengerCar
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ChallengerCar.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.wm.protobuf.ChallengerCar();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.car = $root.wm.protobuf.Car.decode(reader, reader.uint32());
                            break;
                        }
                    case 3: {
                            message.stamp = reader.uint32();
                            break;
                        }
                    case 4: {
                            message.result = reader.sint32();
                            break;
                        }
                    case 5: {
                            message.area = reader.uint32();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("car"))
                    throw $util.ProtocolError("missing required 'car'", { instance: message });
                if (!message.hasOwnProperty("stamp"))
                    throw $util.ProtocolError("missing required 'stamp'", { instance: message });
                if (!message.hasOwnProperty("result"))
                    throw $util.ProtocolError("missing required 'result'", { instance: message });
                if (!message.hasOwnProperty("area"))
                    throw $util.ProtocolError("missing required 'area'", { instance: message });
                return message;
            };

            /**
             * Decodes a ChallengerCar message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof wm.protobuf.ChallengerCar
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {wm.protobuf.ChallengerCar} ChallengerCar
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ChallengerCar.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a ChallengerCar message.
             * @function verify
             * @memberof wm.protobuf.ChallengerCar
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ChallengerCar.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                {
                    let error = $root.wm.protobuf.Car.verify(message.car);
                    if (error)
                        return "car." + error;
                }
                if (!$util.isInteger(message.stamp))
                    return "stamp: integer expected";
                if (!$util.isInteger(message.result))
                    return "result: integer expected";
                if (!$util.isInteger(message.area))
                    return "area: integer expected";
                return null;
            };

            /**
             * Creates a ChallengerCar message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof wm.protobuf.ChallengerCar
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {wm.protobuf.ChallengerCar} ChallengerCar
             */
            ChallengerCar.fromObject = function fromObject(object) {
                if (object instanceof $root.wm.protobuf.ChallengerCar)
                    return object;
                let message = new $root.wm.protobuf.ChallengerCar();
                if (object.car != null) {
                    if (typeof object.car !== "object")
                        throw TypeError(".wm.protobuf.ChallengerCar.car: object expected");
                    message.car = $root.wm.protobuf.Car.fromObject(object.car);
                }
                if (object.stamp != null)
                    message.stamp = object.stamp >>> 0;
                if (object.result != null)
                    message.result = object.result | 0;
                if (object.area != null)
                    message.area = object.area >>> 0;
                return message;
            };

            /**
             * Creates a plain object from a ChallengerCar message. Also converts values to other types if specified.
             * @function toObject
             * @memberof wm.protobuf.ChallengerCar
             * @static
             * @param {wm.protobuf.ChallengerCar} message ChallengerCar
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ChallengerCar.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.car = null;
                    object.stamp = 0;
                    object.result = 0;
                    object.area = 0;
                }
                if (message.car != null && message.hasOwnProperty("car"))
                    object.car = $root.wm.protobuf.Car.toObject(message.car, options);
                if (message.stamp != null && message.hasOwnProperty("stamp"))
                    object.stamp = message.stamp;
                if (message.result != null && message.hasOwnProperty("result"))
                    object.result = message.result;
                if (message.area != null && message.hasOwnProperty("area"))
                    object.area = message.area;
                return object;
            };

            /**
             * Converts this ChallengerCar to JSON.
             * @function toJSON
             * @memberof wm.protobuf.ChallengerCar
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ChallengerCar.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for ChallengerCar
             * @function getTypeUrl
             * @memberof wm.protobuf.ChallengerCar
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            ChallengerCar.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/wm.protobuf.ChallengerCar";
            };

            return ChallengerCar;
        })();

        protobuf.StampTargetCar = (function() {

            /**
             * Properties of a StampTargetCar.
             * @memberof wm.protobuf
             * @interface IStampTargetCar
             * @property {wm.protobuf.ICar} car StampTargetCar car
             * @property {number} returnCount StampTargetCar returnCount
             * @property {boolean} locked StampTargetCar locked
             */

            /**
             * Constructs a new StampTargetCar.
             * @memberof wm.protobuf
             * @classdesc Represents a StampTargetCar.
             * @implements IStampTargetCar
             * @constructor
             * @param {wm.protobuf.IStampTargetCar=} [properties] Properties to set
             */
            function StampTargetCar(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * StampTargetCar car.
             * @member {wm.protobuf.ICar} car
             * @memberof wm.protobuf.StampTargetCar
             * @instance
             */
            StampTargetCar.prototype.car = null;

            /**
             * StampTargetCar returnCount.
             * @member {number} returnCount
             * @memberof wm.protobuf.StampTargetCar
             * @instance
             */
            StampTargetCar.prototype.returnCount = 0;

            /**
             * StampTargetCar locked.
             * @member {boolean} locked
             * @memberof wm.protobuf.StampTargetCar
             * @instance
             */
            StampTargetCar.prototype.locked = false;

            /**
             * Creates a new StampTargetCar instance using the specified properties.
             * @function create
             * @memberof wm.protobuf.StampTargetCar
             * @static
             * @param {wm.protobuf.IStampTargetCar=} [properties] Properties to set
             * @returns {wm.protobuf.StampTargetCar} StampTargetCar instance
             */
            StampTargetCar.create = function create(properties) {
                return new StampTargetCar(properties);
            };

            /**
             * Encodes the specified StampTargetCar message. Does not implicitly {@link wm.protobuf.StampTargetCar.verify|verify} messages.
             * @function encode
             * @memberof wm.protobuf.StampTargetCar
             * @static
             * @param {wm.protobuf.IStampTargetCar} message StampTargetCar message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            StampTargetCar.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                $root.wm.protobuf.Car.encode(message.car, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.returnCount);
                writer.uint32(/* id 3, wireType 0 =*/24).bool(message.locked);
                return writer;
            };

            /**
             * Encodes the specified StampTargetCar message, length delimited. Does not implicitly {@link wm.protobuf.StampTargetCar.verify|verify} messages.
             * @function encodeDelimited
             * @memberof wm.protobuf.StampTargetCar
             * @static
             * @param {wm.protobuf.IStampTargetCar} message StampTargetCar message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            StampTargetCar.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a StampTargetCar message from the specified reader or buffer.
             * @function decode
             * @memberof wm.protobuf.StampTargetCar
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {wm.protobuf.StampTargetCar} StampTargetCar
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            StampTargetCar.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.wm.protobuf.StampTargetCar();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.car = $root.wm.protobuf.Car.decode(reader, reader.uint32());
                            break;
                        }
                    case 2: {
                            message.returnCount = reader.uint32();
                            break;
                        }
                    case 3: {
                            message.locked = reader.bool();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("car"))
                    throw $util.ProtocolError("missing required 'car'", { instance: message });
                if (!message.hasOwnProperty("returnCount"))
                    throw $util.ProtocolError("missing required 'returnCount'", { instance: message });
                if (!message.hasOwnProperty("locked"))
                    throw $util.ProtocolError("missing required 'locked'", { instance: message });
                return message;
            };

            /**
             * Decodes a StampTargetCar message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof wm.protobuf.StampTargetCar
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {wm.protobuf.StampTargetCar} StampTargetCar
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            StampTargetCar.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a StampTargetCar message.
             * @function verify
             * @memberof wm.protobuf.StampTargetCar
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            StampTargetCar.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                {
                    let error = $root.wm.protobuf.Car.verify(message.car);
                    if (error)
                        return "car." + error;
                }
                if (!$util.isInteger(message.returnCount))
                    return "returnCount: integer expected";
                if (typeof message.locked !== "boolean")
                    return "locked: boolean expected";
                return null;
            };

            /**
             * Creates a StampTargetCar message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof wm.protobuf.StampTargetCar
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {wm.protobuf.StampTargetCar} StampTargetCar
             */
            StampTargetCar.fromObject = function fromObject(object) {
                if (object instanceof $root.wm.protobuf.StampTargetCar)
                    return object;
                let message = new $root.wm.protobuf.StampTargetCar();
                if (object.car != null) {
                    if (typeof object.car !== "object")
                        throw TypeError(".wm.protobuf.StampTargetCar.car: object expected");
                    message.car = $root.wm.protobuf.Car.fromObject(object.car);
                }
                if (object.returnCount != null)
                    message.returnCount = object.returnCount >>> 0;
                if (object.locked != null)
                    message.locked = Boolean(object.locked);
                return message;
            };

            /**
             * Creates a plain object from a StampTargetCar message. Also converts values to other types if specified.
             * @function toObject
             * @memberof wm.protobuf.StampTargetCar
             * @static
             * @param {wm.protobuf.StampTargetCar} message StampTargetCar
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            StampTargetCar.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.car = null;
                    object.returnCount = 0;
                    object.locked = false;
                }
                if (message.car != null && message.hasOwnProperty("car"))
                    object.car = $root.wm.protobuf.Car.toObject(message.car, options);
                if (message.returnCount != null && message.hasOwnProperty("returnCount"))
                    object.returnCount = message.returnCount;
                if (message.locked != null && message.hasOwnProperty("locked"))
                    object.locked = message.locked;
                return object;
            };

            /**
             * Converts this StampTargetCar to JSON.
             * @function toJSON
             * @memberof wm.protobuf.StampTargetCar
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            StampTargetCar.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for StampTargetCar
             * @function getTypeUrl
             * @memberof wm.protobuf.StampTargetCar
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            StampTargetCar.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/wm.protobuf.StampTargetCar";
            };

            return StampTargetCar;
        })();

        protobuf.BookmarkedCar = (function() {

            /**
             * Properties of a BookmarkedCar.
             * @memberof wm.protobuf
             * @interface IBookmarkedCar
             * @property {wm.protobuf.ICar} car BookmarkedCar car
             * @property {number} returnCount BookmarkedCar returnCount
             */

            /**
             * Constructs a new BookmarkedCar.
             * @memberof wm.protobuf
             * @classdesc Represents a BookmarkedCar.
             * @implements IBookmarkedCar
             * @constructor
             * @param {wm.protobuf.IBookmarkedCar=} [properties] Properties to set
             */
            function BookmarkedCar(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * BookmarkedCar car.
             * @member {wm.protobuf.ICar} car
             * @memberof wm.protobuf.BookmarkedCar
             * @instance
             */
            BookmarkedCar.prototype.car = null;

            /**
             * BookmarkedCar returnCount.
             * @member {number} returnCount
             * @memberof wm.protobuf.BookmarkedCar
             * @instance
             */
            BookmarkedCar.prototype.returnCount = 0;

            /**
             * Creates a new BookmarkedCar instance using the specified properties.
             * @function create
             * @memberof wm.protobuf.BookmarkedCar
             * @static
             * @param {wm.protobuf.IBookmarkedCar=} [properties] Properties to set
             * @returns {wm.protobuf.BookmarkedCar} BookmarkedCar instance
             */
            BookmarkedCar.create = function create(properties) {
                return new BookmarkedCar(properties);
            };

            /**
             * Encodes the specified BookmarkedCar message. Does not implicitly {@link wm.protobuf.BookmarkedCar.verify|verify} messages.
             * @function encode
             * @memberof wm.protobuf.BookmarkedCar
             * @static
             * @param {wm.protobuf.IBookmarkedCar} message BookmarkedCar message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            BookmarkedCar.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                $root.wm.protobuf.Car.encode(message.car, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.returnCount);
                return writer;
            };

            /**
             * Encodes the specified BookmarkedCar message, length delimited. Does not implicitly {@link wm.protobuf.BookmarkedCar.verify|verify} messages.
             * @function encodeDelimited
             * @memberof wm.protobuf.BookmarkedCar
             * @static
             * @param {wm.protobuf.IBookmarkedCar} message BookmarkedCar message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            BookmarkedCar.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a BookmarkedCar message from the specified reader or buffer.
             * @function decode
             * @memberof wm.protobuf.BookmarkedCar
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {wm.protobuf.BookmarkedCar} BookmarkedCar
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            BookmarkedCar.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.wm.protobuf.BookmarkedCar();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.car = $root.wm.protobuf.Car.decode(reader, reader.uint32());
                            break;
                        }
                    case 2: {
                            message.returnCount = reader.uint32();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("car"))
                    throw $util.ProtocolError("missing required 'car'", { instance: message });
                if (!message.hasOwnProperty("returnCount"))
                    throw $util.ProtocolError("missing required 'returnCount'", { instance: message });
                return message;
            };

            /**
             * Decodes a BookmarkedCar message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof wm.protobuf.BookmarkedCar
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {wm.protobuf.BookmarkedCar} BookmarkedCar
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            BookmarkedCar.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a BookmarkedCar message.
             * @function verify
             * @memberof wm.protobuf.BookmarkedCar
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            BookmarkedCar.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                {
                    let error = $root.wm.protobuf.Car.verify(message.car);
                    if (error)
                        return "car." + error;
                }
                if (!$util.isInteger(message.returnCount))
                    return "returnCount: integer expected";
                return null;
            };

            /**
             * Creates a BookmarkedCar message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof wm.protobuf.BookmarkedCar
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {wm.protobuf.BookmarkedCar} BookmarkedCar
             */
            BookmarkedCar.fromObject = function fromObject(object) {
                if (object instanceof $root.wm.protobuf.BookmarkedCar)
                    return object;
                let message = new $root.wm.protobuf.BookmarkedCar();
                if (object.car != null) {
                    if (typeof object.car !== "object")
                        throw TypeError(".wm.protobuf.BookmarkedCar.car: object expected");
                    message.car = $root.wm.protobuf.Car.fromObject(object.car);
                }
                if (object.returnCount != null)
                    message.returnCount = object.returnCount >>> 0;
                return message;
            };

            /**
             * Creates a plain object from a BookmarkedCar message. Also converts values to other types if specified.
             * @function toObject
             * @memberof wm.protobuf.BookmarkedCar
             * @static
             * @param {wm.protobuf.BookmarkedCar} message BookmarkedCar
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            BookmarkedCar.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.car = null;
                    object.returnCount = 0;
                }
                if (message.car != null && message.hasOwnProperty("car"))
                    object.car = $root.wm.protobuf.Car.toObject(message.car, options);
                if (message.returnCount != null && message.hasOwnProperty("returnCount"))
                    object.returnCount = message.returnCount;
                return object;
            };

            /**
             * Converts this BookmarkedCar to JSON.
             * @function toJSON
             * @memberof wm.protobuf.BookmarkedCar
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            BookmarkedCar.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for BookmarkedCar
             * @function getTypeUrl
             * @memberof wm.protobuf.BookmarkedCar
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            BookmarkedCar.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/wm.protobuf.BookmarkedCar";
            };

            return BookmarkedCar;
        })();

        protobuf.PreviousVersionStampTargetCar = (function() {

            /**
             * Properties of a PreviousVersionStampTargetCar.
             * @memberof wm.protobuf
             * @interface IPreviousVersionStampTargetCar
             * @property {wm.protobuf.ICar} car PreviousVersionStampTargetCar car
             * @property {number} returnCount PreviousVersionStampTargetCar returnCount
             * @property {number|null} [currentCarId] PreviousVersionStampTargetCar currentCarId
             */

            /**
             * Constructs a new PreviousVersionStampTargetCar.
             * @memberof wm.protobuf
             * @classdesc Represents a PreviousVersionStampTargetCar.
             * @implements IPreviousVersionStampTargetCar
             * @constructor
             * @param {wm.protobuf.IPreviousVersionStampTargetCar=} [properties] Properties to set
             */
            function PreviousVersionStampTargetCar(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * PreviousVersionStampTargetCar car.
             * @member {wm.protobuf.ICar} car
             * @memberof wm.protobuf.PreviousVersionStampTargetCar
             * @instance
             */
            PreviousVersionStampTargetCar.prototype.car = null;

            /**
             * PreviousVersionStampTargetCar returnCount.
             * @member {number} returnCount
             * @memberof wm.protobuf.PreviousVersionStampTargetCar
             * @instance
             */
            PreviousVersionStampTargetCar.prototype.returnCount = 0;

            /**
             * PreviousVersionStampTargetCar currentCarId.
             * @member {number} currentCarId
             * @memberof wm.protobuf.PreviousVersionStampTargetCar
             * @instance
             */
            PreviousVersionStampTargetCar.prototype.currentCarId = 0;

            /**
             * Creates a new PreviousVersionStampTargetCar instance using the specified properties.
             * @function create
             * @memberof wm.protobuf.PreviousVersionStampTargetCar
             * @static
             * @param {wm.protobuf.IPreviousVersionStampTargetCar=} [properties] Properties to set
             * @returns {wm.protobuf.PreviousVersionStampTargetCar} PreviousVersionStampTargetCar instance
             */
            PreviousVersionStampTargetCar.create = function create(properties) {
                return new PreviousVersionStampTargetCar(properties);
            };

            /**
             * Encodes the specified PreviousVersionStampTargetCar message. Does not implicitly {@link wm.protobuf.PreviousVersionStampTargetCar.verify|verify} messages.
             * @function encode
             * @memberof wm.protobuf.PreviousVersionStampTargetCar
             * @static
             * @param {wm.protobuf.IPreviousVersionStampTargetCar} message PreviousVersionStampTargetCar message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PreviousVersionStampTargetCar.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                $root.wm.protobuf.Car.encode(message.car, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.currentCarId != null && Object.hasOwnProperty.call(message, "currentCarId"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.currentCarId);
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.returnCount);
                return writer;
            };

            /**
             * Encodes the specified PreviousVersionStampTargetCar message, length delimited. Does not implicitly {@link wm.protobuf.PreviousVersionStampTargetCar.verify|verify} messages.
             * @function encodeDelimited
             * @memberof wm.protobuf.PreviousVersionStampTargetCar
             * @static
             * @param {wm.protobuf.IPreviousVersionStampTargetCar} message PreviousVersionStampTargetCar message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PreviousVersionStampTargetCar.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a PreviousVersionStampTargetCar message from the specified reader or buffer.
             * @function decode
             * @memberof wm.protobuf.PreviousVersionStampTargetCar
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {wm.protobuf.PreviousVersionStampTargetCar} PreviousVersionStampTargetCar
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PreviousVersionStampTargetCar.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.wm.protobuf.PreviousVersionStampTargetCar();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.car = $root.wm.protobuf.Car.decode(reader, reader.uint32());
                            break;
                        }
                    case 3: {
                            message.returnCount = reader.uint32();
                            break;
                        }
                    case 2: {
                            message.currentCarId = reader.uint32();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("car"))
                    throw $util.ProtocolError("missing required 'car'", { instance: message });
                if (!message.hasOwnProperty("returnCount"))
                    throw $util.ProtocolError("missing required 'returnCount'", { instance: message });
                return message;
            };

            /**
             * Decodes a PreviousVersionStampTargetCar message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof wm.protobuf.PreviousVersionStampTargetCar
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {wm.protobuf.PreviousVersionStampTargetCar} PreviousVersionStampTargetCar
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PreviousVersionStampTargetCar.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a PreviousVersionStampTargetCar message.
             * @function verify
             * @memberof wm.protobuf.PreviousVersionStampTargetCar
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            PreviousVersionStampTargetCar.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                {
                    let error = $root.wm.protobuf.Car.verify(message.car);
                    if (error)
                        return "car." + error;
                }
                if (!$util.isInteger(message.returnCount))
                    return "returnCount: integer expected";
                if (message.currentCarId != null && message.hasOwnProperty("currentCarId"))
                    if (!$util.isInteger(message.currentCarId))
                        return "currentCarId: integer expected";
                return null;
            };

            /**
             * Creates a PreviousVersionStampTargetCar message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof wm.protobuf.PreviousVersionStampTargetCar
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {wm.protobuf.PreviousVersionStampTargetCar} PreviousVersionStampTargetCar
             */
            PreviousVersionStampTargetCar.fromObject = function fromObject(object) {
                if (object instanceof $root.wm.protobuf.PreviousVersionStampTargetCar)
                    return object;
                let message = new $root.wm.protobuf.PreviousVersionStampTargetCar();
                if (object.car != null) {
                    if (typeof object.car !== "object")
                        throw TypeError(".wm.protobuf.PreviousVersionStampTargetCar.car: object expected");
                    message.car = $root.wm.protobuf.Car.fromObject(object.car);
                }
                if (object.returnCount != null)
                    message.returnCount = object.returnCount >>> 0;
                if (object.currentCarId != null)
                    message.currentCarId = object.currentCarId >>> 0;
                return message;
            };

            /**
             * Creates a plain object from a PreviousVersionStampTargetCar message. Also converts values to other types if specified.
             * @function toObject
             * @memberof wm.protobuf.PreviousVersionStampTargetCar
             * @static
             * @param {wm.protobuf.PreviousVersionStampTargetCar} message PreviousVersionStampTargetCar
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            PreviousVersionStampTargetCar.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.car = null;
                    object.currentCarId = 0;
                    object.returnCount = 0;
                }
                if (message.car != null && message.hasOwnProperty("car"))
                    object.car = $root.wm.protobuf.Car.toObject(message.car, options);
                if (message.currentCarId != null && message.hasOwnProperty("currentCarId"))
                    object.currentCarId = message.currentCarId;
                if (message.returnCount != null && message.hasOwnProperty("returnCount"))
                    object.returnCount = message.returnCount;
                return object;
            };

            /**
             * Converts this PreviousVersionStampTargetCar to JSON.
             * @function toJSON
             * @memberof wm.protobuf.PreviousVersionStampTargetCar
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            PreviousVersionStampTargetCar.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for PreviousVersionStampTargetCar
             * @function getTypeUrl
             * @memberof wm.protobuf.PreviousVersionStampTargetCar
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            PreviousVersionStampTargetCar.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/wm.protobuf.PreviousVersionStampTargetCar";
            };

            return PreviousVersionStampTargetCar;
        })();

        protobuf.GhostCar = (function() {

            /**
             * Properties of a GhostCar.
             * @memberof wm.protobuf
             * @interface IGhostCar
             * @property {wm.protobuf.ICar} car GhostCar car
             * @property {number|null} [area] GhostCar area
             * @property {number|null} [ramp] GhostCar ramp
             * @property {number|null} [path] GhostCar path
             * @property {boolean|null} [nonhuman] GhostCar nonhuman
             * @property {wm.protobuf.GhostType|null} [type] GhostCar type
             * @property {number|Long|null} [trailId] GhostCar trailId
             */

            /**
             * Constructs a new GhostCar.
             * @memberof wm.protobuf
             * @classdesc Represents a GhostCar.
             * @implements IGhostCar
             * @constructor
             * @param {wm.protobuf.IGhostCar=} [properties] Properties to set
             */
            function GhostCar(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * GhostCar car.
             * @member {wm.protobuf.ICar} car
             * @memberof wm.protobuf.GhostCar
             * @instance
             */
            GhostCar.prototype.car = null;

            /**
             * GhostCar area.
             * @member {number} area
             * @memberof wm.protobuf.GhostCar
             * @instance
             */
            GhostCar.prototype.area = 0;

            /**
             * GhostCar ramp.
             * @member {number} ramp
             * @memberof wm.protobuf.GhostCar
             * @instance
             */
            GhostCar.prototype.ramp = 0;

            /**
             * GhostCar path.
             * @member {number} path
             * @memberof wm.protobuf.GhostCar
             * @instance
             */
            GhostCar.prototype.path = 0;

            /**
             * GhostCar nonhuman.
             * @member {boolean} nonhuman
             * @memberof wm.protobuf.GhostCar
             * @instance
             */
            GhostCar.prototype.nonhuman = false;

            /**
             * GhostCar type.
             * @member {wm.protobuf.GhostType} type
             * @memberof wm.protobuf.GhostCar
             * @instance
             */
            GhostCar.prototype.type = 1;

            /**
             * GhostCar trailId.
             * @member {number|Long} trailId
             * @memberof wm.protobuf.GhostCar
             * @instance
             */
            GhostCar.prototype.trailId = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

            /**
             * Creates a new GhostCar instance using the specified properties.
             * @function create
             * @memberof wm.protobuf.GhostCar
             * @static
             * @param {wm.protobuf.IGhostCar=} [properties] Properties to set
             * @returns {wm.protobuf.GhostCar} GhostCar instance
             */
            GhostCar.create = function create(properties) {
                return new GhostCar(properties);
            };

            /**
             * Encodes the specified GhostCar message. Does not implicitly {@link wm.protobuf.GhostCar.verify|verify} messages.
             * @function encode
             * @memberof wm.protobuf.GhostCar
             * @static
             * @param {wm.protobuf.IGhostCar} message GhostCar message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GhostCar.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                $root.wm.protobuf.Car.encode(message.car, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.area != null && Object.hasOwnProperty.call(message, "area"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.area);
                if (message.ramp != null && Object.hasOwnProperty.call(message, "ramp"))
                    writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.ramp);
                if (message.nonhuman != null && Object.hasOwnProperty.call(message, "nonhuman"))
                    writer.uint32(/* id 4, wireType 0 =*/32).bool(message.nonhuman);
                if (message.type != null && Object.hasOwnProperty.call(message, "type"))
                    writer.uint32(/* id 6, wireType 0 =*/48).int32(message.type);
                if (message.trailId != null && Object.hasOwnProperty.call(message, "trailId"))
                    writer.uint32(/* id 7, wireType 0 =*/56).uint64(message.trailId);
                if (message.path != null && Object.hasOwnProperty.call(message, "path"))
                    writer.uint32(/* id 8, wireType 0 =*/64).uint32(message.path);
                return writer;
            };

            /**
             * Encodes the specified GhostCar message, length delimited. Does not implicitly {@link wm.protobuf.GhostCar.verify|verify} messages.
             * @function encodeDelimited
             * @memberof wm.protobuf.GhostCar
             * @static
             * @param {wm.protobuf.IGhostCar} message GhostCar message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GhostCar.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a GhostCar message from the specified reader or buffer.
             * @function decode
             * @memberof wm.protobuf.GhostCar
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {wm.protobuf.GhostCar} GhostCar
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GhostCar.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.wm.protobuf.GhostCar();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.car = $root.wm.protobuf.Car.decode(reader, reader.uint32());
                            break;
                        }
                    case 2: {
                            message.area = reader.uint32();
                            break;
                        }
                    case 3: {
                            message.ramp = reader.uint32();
                            break;
                        }
                    case 8: {
                            message.path = reader.uint32();
                            break;
                        }
                    case 4: {
                            message.nonhuman = reader.bool();
                            break;
                        }
                    case 6: {
                            message.type = reader.int32();
                            break;
                        }
                    case 7: {
                            message.trailId = reader.uint64();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("car"))
                    throw $util.ProtocolError("missing required 'car'", { instance: message });
                return message;
            };

            /**
             * Decodes a GhostCar message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof wm.protobuf.GhostCar
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {wm.protobuf.GhostCar} GhostCar
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GhostCar.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a GhostCar message.
             * @function verify
             * @memberof wm.protobuf.GhostCar
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            GhostCar.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                {
                    let error = $root.wm.protobuf.Car.verify(message.car);
                    if (error)
                        return "car." + error;
                }
                if (message.area != null && message.hasOwnProperty("area"))
                    if (!$util.isInteger(message.area))
                        return "area: integer expected";
                if (message.ramp != null && message.hasOwnProperty("ramp"))
                    if (!$util.isInteger(message.ramp))
                        return "ramp: integer expected";
                if (message.path != null && message.hasOwnProperty("path"))
                    if (!$util.isInteger(message.path))
                        return "path: integer expected";
                if (message.nonhuman != null && message.hasOwnProperty("nonhuman"))
                    if (typeof message.nonhuman !== "boolean")
                        return "nonhuman: boolean expected";
                if (message.type != null && message.hasOwnProperty("type"))
                    switch (message.type) {
                    default:
                        return "type: enum value expected";
                    case 1:
                    case 2:
                    case 3:
                    case 4:
                    case 5:
                        break;
                    }
                if (message.trailId != null && message.hasOwnProperty("trailId"))
                    if (!$util.isInteger(message.trailId) && !(message.trailId && $util.isInteger(message.trailId.low) && $util.isInteger(message.trailId.high)))
                        return "trailId: integer|Long expected";
                return null;
            };

            /**
             * Creates a GhostCar message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof wm.protobuf.GhostCar
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {wm.protobuf.GhostCar} GhostCar
             */
            GhostCar.fromObject = function fromObject(object) {
                if (object instanceof $root.wm.protobuf.GhostCar)
                    return object;
                let message = new $root.wm.protobuf.GhostCar();
                if (object.car != null) {
                    if (typeof object.car !== "object")
                        throw TypeError(".wm.protobuf.GhostCar.car: object expected");
                    message.car = $root.wm.protobuf.Car.fromObject(object.car);
                }
                if (object.area != null)
                    message.area = object.area >>> 0;
                if (object.ramp != null)
                    message.ramp = object.ramp >>> 0;
                if (object.path != null)
                    message.path = object.path >>> 0;
                if (object.nonhuman != null)
                    message.nonhuman = Boolean(object.nonhuman);
                switch (object.type) {
                default:
                    if (typeof object.type === "number") {
                        message.type = object.type;
                        break;
                    }
                    break;
                case "GHOST_NORMAL":
                case 1:
                    message.type = 1;
                    break;
                case "GHOST_PINCH_RUNNER":
                case 2:
                    message.type = 2;
                    break;
                case "GHOST_DEFAULT":
                case 3:
                    message.type = 3;
                    break;
                case "GHOST_REGION":
                case 4:
                    message.type = 4;
                    break;
                case "GHOST_REGION_PINCH_RUNNER":
                case 5:
                    message.type = 5;
                    break;
                }
                if (object.trailId != null)
                    if ($util.Long)
                        (message.trailId = $util.Long.fromValue(object.trailId)).unsigned = true;
                    else if (typeof object.trailId === "string")
                        message.trailId = parseInt(object.trailId, 10);
                    else if (typeof object.trailId === "number")
                        message.trailId = object.trailId;
                    else if (typeof object.trailId === "object")
                        message.trailId = new $util.LongBits(object.trailId.low >>> 0, object.trailId.high >>> 0).toNumber(true);
                return message;
            };

            /**
             * Creates a plain object from a GhostCar message. Also converts values to other types if specified.
             * @function toObject
             * @memberof wm.protobuf.GhostCar
             * @static
             * @param {wm.protobuf.GhostCar} message GhostCar
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            GhostCar.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.car = null;
                    object.area = 0;
                    object.ramp = 0;
                    object.nonhuman = false;
                    object.type = options.enums === String ? "GHOST_NORMAL" : 1;
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, true);
                        object.trailId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.trailId = options.longs === String ? "0" : 0;
                    object.path = 0;
                }
                if (message.car != null && message.hasOwnProperty("car"))
                    object.car = $root.wm.protobuf.Car.toObject(message.car, options);
                if (message.area != null && message.hasOwnProperty("area"))
                    object.area = message.area;
                if (message.ramp != null && message.hasOwnProperty("ramp"))
                    object.ramp = message.ramp;
                if (message.nonhuman != null && message.hasOwnProperty("nonhuman"))
                    object.nonhuman = message.nonhuman;
                if (message.type != null && message.hasOwnProperty("type"))
                    object.type = options.enums === String ? $root.wm.protobuf.GhostType[message.type] === undefined ? message.type : $root.wm.protobuf.GhostType[message.type] : message.type;
                if (message.trailId != null && message.hasOwnProperty("trailId"))
                    if (typeof message.trailId === "number")
                        object.trailId = options.longs === String ? String(message.trailId) : message.trailId;
                    else
                        object.trailId = options.longs === String ? $util.Long.prototype.toString.call(message.trailId) : options.longs === Number ? new $util.LongBits(message.trailId.low >>> 0, message.trailId.high >>> 0).toNumber(true) : message.trailId;
                if (message.path != null && message.hasOwnProperty("path"))
                    object.path = message.path;
                return object;
            };

            /**
             * Converts this GhostCar to JSON.
             * @function toJSON
             * @memberof wm.protobuf.GhostCar
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            GhostCar.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for GhostCar
             * @function getTypeUrl
             * @memberof wm.protobuf.GhostCar
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            GhostCar.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/wm.protobuf.GhostCar";
            };

            return GhostCar;
        })();

        protobuf.Place = (function() {

            /**
             * Properties of a Place.
             * @memberof wm.protobuf
             * @interface IPlace
             * @property {string} placeId Place placeId
             * @property {string} shopName Place shopName
             * @property {number} regionId Place regionId
             * @property {string} country Place country
             */

            /**
             * Constructs a new Place.
             * @memberof wm.protobuf
             * @classdesc Represents a Place.
             * @implements IPlace
             * @constructor
             * @param {wm.protobuf.IPlace=} [properties] Properties to set
             */
            function Place(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Place placeId.
             * @member {string} placeId
             * @memberof wm.protobuf.Place
             * @instance
             */
            Place.prototype.placeId = "";

            /**
             * Place shopName.
             * @member {string} shopName
             * @memberof wm.protobuf.Place
             * @instance
             */
            Place.prototype.shopName = "";

            /**
             * Place regionId.
             * @member {number} regionId
             * @memberof wm.protobuf.Place
             * @instance
             */
            Place.prototype.regionId = 0;

            /**
             * Place country.
             * @member {string} country
             * @memberof wm.protobuf.Place
             * @instance
             */
            Place.prototype.country = "";

            /**
             * Creates a new Place instance using the specified properties.
             * @function create
             * @memberof wm.protobuf.Place
             * @static
             * @param {wm.protobuf.IPlace=} [properties] Properties to set
             * @returns {wm.protobuf.Place} Place instance
             */
            Place.create = function create(properties) {
                return new Place(properties);
            };

            /**
             * Encodes the specified Place message. Does not implicitly {@link wm.protobuf.Place.verify|verify} messages.
             * @function encode
             * @memberof wm.protobuf.Place
             * @static
             * @param {wm.protobuf.IPlace} message Place message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Place.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.placeId);
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.shopName);
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.regionId);
                writer.uint32(/* id 4, wireType 2 =*/34).string(message.country);
                return writer;
            };

            /**
             * Encodes the specified Place message, length delimited. Does not implicitly {@link wm.protobuf.Place.verify|verify} messages.
             * @function encodeDelimited
             * @memberof wm.protobuf.Place
             * @static
             * @param {wm.protobuf.IPlace} message Place message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Place.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a Place message from the specified reader or buffer.
             * @function decode
             * @memberof wm.protobuf.Place
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {wm.protobuf.Place} Place
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Place.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.wm.protobuf.Place();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.placeId = reader.string();
                            break;
                        }
                    case 2: {
                            message.shopName = reader.string();
                            break;
                        }
                    case 3: {
                            message.regionId = reader.uint32();
                            break;
                        }
                    case 4: {
                            message.country = reader.string();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("placeId"))
                    throw $util.ProtocolError("missing required 'placeId'", { instance: message });
                if (!message.hasOwnProperty("shopName"))
                    throw $util.ProtocolError("missing required 'shopName'", { instance: message });
                if (!message.hasOwnProperty("regionId"))
                    throw $util.ProtocolError("missing required 'regionId'", { instance: message });
                if (!message.hasOwnProperty("country"))
                    throw $util.ProtocolError("missing required 'country'", { instance: message });
                return message;
            };

            /**
             * Decodes a Place message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof wm.protobuf.Place
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {wm.protobuf.Place} Place
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Place.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a Place message.
             * @function verify
             * @memberof wm.protobuf.Place
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Place.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (!$util.isString(message.placeId))
                    return "placeId: string expected";
                if (!$util.isString(message.shopName))
                    return "shopName: string expected";
                if (!$util.isInteger(message.regionId))
                    return "regionId: integer expected";
                if (!$util.isString(message.country))
                    return "country: string expected";
                return null;
            };

            /**
             * Creates a Place message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof wm.protobuf.Place
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {wm.protobuf.Place} Place
             */
            Place.fromObject = function fromObject(object) {
                if (object instanceof $root.wm.protobuf.Place)
                    return object;
                let message = new $root.wm.protobuf.Place();
                if (object.placeId != null)
                    message.placeId = String(object.placeId);
                if (object.shopName != null)
                    message.shopName = String(object.shopName);
                if (object.regionId != null)
                    message.regionId = object.regionId >>> 0;
                if (object.country != null)
                    message.country = String(object.country);
                return message;
            };

            /**
             * Creates a plain object from a Place message. Also converts values to other types if specified.
             * @function toObject
             * @memberof wm.protobuf.Place
             * @static
             * @param {wm.protobuf.Place} message Place
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Place.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.placeId = "";
                    object.shopName = "";
                    object.regionId = 0;
                    object.country = "";
                }
                if (message.placeId != null && message.hasOwnProperty("placeId"))
                    object.placeId = message.placeId;
                if (message.shopName != null && message.hasOwnProperty("shopName"))
                    object.shopName = message.shopName;
                if (message.regionId != null && message.hasOwnProperty("regionId"))
                    object.regionId = message.regionId;
                if (message.country != null && message.hasOwnProperty("country"))
                    object.country = message.country;
                return object;
            };

            /**
             * Converts this Place to JSON.
             * @function toJSON
             * @memberof wm.protobuf.Place
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Place.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for Place
             * @function getTypeUrl
             * @memberof wm.protobuf.Place
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            Place.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/wm.protobuf.Place";
            };

            return Place;
        })();

        protobuf.SystemSetting = (function() {

            /**
             * Properties of a SystemSetting.
             * @memberof wm.protobuf
             * @interface ISystemSetting
             * @property {number} mCoinChute SystemSetting mCoinChute
             * @property {number} mBuyCardCost SystemSetting mBuyCardCost
             * @property {number} mGameCost SystemSetting mGameCost
             * @property {number} mContinueCost SystemSetting mContinueCost
             * @property {number} mFullCourseCost SystemSetting mFullCourseCost
             * @property {boolean} mFreePlay SystemSetting mFreePlay
             * @property {number|null} [mPcbId] SystemSetting mPcbId
             * @property {boolean} mIcCardRw SystemSetting mIcCardRw
             * @property {boolean} mIcCardVender SystemSetting mIcCardVender
             * @property {boolean|null} [mMgCardRw] SystemSetting mMgCardRw
             * @property {boolean|null} [mForceFeedback] SystemSetting mForceFeedback
             * @property {boolean} mWinsAndRemains SystemSetting mWinsAndRemains
             * @property {number} mEventMode SystemSetting mEventMode
             * @property {boolean} mEventModeDist SystemSetting mEventModeDist
             * @property {number} mCloseType SystemSetting mCloseType
             * @property {number} mCloseSun SystemSetting mCloseSun
             * @property {number} mCloseMon SystemSetting mCloseMon
             * @property {number} mCloseTue SystemSetting mCloseTue
             * @property {number} mCloseWed SystemSetting mCloseWed
             * @property {number} mCloseThu SystemSetting mCloseThu
             * @property {number} mCloseFri SystemSetting mCloseFri
             * @property {number} mCloseSat SystemSetting mCloseSat
             * @property {number} mCloseDay SystemSetting mCloseDay
             * @property {boolean|null} [mTouchPanel] SystemSetting mTouchPanel
             * @property {number} mGameVol SystemSetting mGameVol
             * @property {number} mAttractVol SystemSetting mAttractVol
             * @property {number|null} [mCalibHandleCenter] SystemSetting mCalibHandleCenter
             * @property {number|null} [mCalibAccelCenter] SystemSetting mCalibAccelCenter
             * @property {number|null} [mCalibBrakeCenter] SystemSetting mCalibBrakeCenter
             * @property {number|null} [mCalibTouchLeft] SystemSetting mCalibTouchLeft
             * @property {number|null} [mCalibTouchRight] SystemSetting mCalibTouchRight
             * @property {number|null} [mCalibTouchTop] SystemSetting mCalibTouchTop
             * @property {number|null} [mCalibTouchBottom] SystemSetting mCalibTouchBottom
             */

            /**
             * Constructs a new SystemSetting.
             * @memberof wm.protobuf
             * @classdesc Represents a SystemSetting.
             * @implements ISystemSetting
             * @constructor
             * @param {wm.protobuf.ISystemSetting=} [properties] Properties to set
             */
            function SystemSetting(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * SystemSetting mCoinChute.
             * @member {number} mCoinChute
             * @memberof wm.protobuf.SystemSetting
             * @instance
             */
            SystemSetting.prototype.mCoinChute = 0;

            /**
             * SystemSetting mBuyCardCost.
             * @member {number} mBuyCardCost
             * @memberof wm.protobuf.SystemSetting
             * @instance
             */
            SystemSetting.prototype.mBuyCardCost = 0;

            /**
             * SystemSetting mGameCost.
             * @member {number} mGameCost
             * @memberof wm.protobuf.SystemSetting
             * @instance
             */
            SystemSetting.prototype.mGameCost = 0;

            /**
             * SystemSetting mContinueCost.
             * @member {number} mContinueCost
             * @memberof wm.protobuf.SystemSetting
             * @instance
             */
            SystemSetting.prototype.mContinueCost = 0;

            /**
             * SystemSetting mFullCourseCost.
             * @member {number} mFullCourseCost
             * @memberof wm.protobuf.SystemSetting
             * @instance
             */
            SystemSetting.prototype.mFullCourseCost = 0;

            /**
             * SystemSetting mFreePlay.
             * @member {boolean} mFreePlay
             * @memberof wm.protobuf.SystemSetting
             * @instance
             */
            SystemSetting.prototype.mFreePlay = false;

            /**
             * SystemSetting mPcbId.
             * @member {number} mPcbId
             * @memberof wm.protobuf.SystemSetting
             * @instance
             */
            SystemSetting.prototype.mPcbId = 0;

            /**
             * SystemSetting mIcCardRw.
             * @member {boolean} mIcCardRw
             * @memberof wm.protobuf.SystemSetting
             * @instance
             */
            SystemSetting.prototype.mIcCardRw = false;

            /**
             * SystemSetting mIcCardVender.
             * @member {boolean} mIcCardVender
             * @memberof wm.protobuf.SystemSetting
             * @instance
             */
            SystemSetting.prototype.mIcCardVender = false;

            /**
             * SystemSetting mMgCardRw.
             * @member {boolean} mMgCardRw
             * @memberof wm.protobuf.SystemSetting
             * @instance
             */
            SystemSetting.prototype.mMgCardRw = false;

            /**
             * SystemSetting mForceFeedback.
             * @member {boolean} mForceFeedback
             * @memberof wm.protobuf.SystemSetting
             * @instance
             */
            SystemSetting.prototype.mForceFeedback = false;

            /**
             * SystemSetting mWinsAndRemains.
             * @member {boolean} mWinsAndRemains
             * @memberof wm.protobuf.SystemSetting
             * @instance
             */
            SystemSetting.prototype.mWinsAndRemains = false;

            /**
             * SystemSetting mEventMode.
             * @member {number} mEventMode
             * @memberof wm.protobuf.SystemSetting
             * @instance
             */
            SystemSetting.prototype.mEventMode = 0;

            /**
             * SystemSetting mEventModeDist.
             * @member {boolean} mEventModeDist
             * @memberof wm.protobuf.SystemSetting
             * @instance
             */
            SystemSetting.prototype.mEventModeDist = false;

            /**
             * SystemSetting mCloseType.
             * @member {number} mCloseType
             * @memberof wm.protobuf.SystemSetting
             * @instance
             */
            SystemSetting.prototype.mCloseType = 0;

            /**
             * SystemSetting mCloseSun.
             * @member {number} mCloseSun
             * @memberof wm.protobuf.SystemSetting
             * @instance
             */
            SystemSetting.prototype.mCloseSun = 0;

            /**
             * SystemSetting mCloseMon.
             * @member {number} mCloseMon
             * @memberof wm.protobuf.SystemSetting
             * @instance
             */
            SystemSetting.prototype.mCloseMon = 0;

            /**
             * SystemSetting mCloseTue.
             * @member {number} mCloseTue
             * @memberof wm.protobuf.SystemSetting
             * @instance
             */
            SystemSetting.prototype.mCloseTue = 0;

            /**
             * SystemSetting mCloseWed.
             * @member {number} mCloseWed
             * @memberof wm.protobuf.SystemSetting
             * @instance
             */
            SystemSetting.prototype.mCloseWed = 0;

            /**
             * SystemSetting mCloseThu.
             * @member {number} mCloseThu
             * @memberof wm.protobuf.SystemSetting
             * @instance
             */
            SystemSetting.prototype.mCloseThu = 0;

            /**
             * SystemSetting mCloseFri.
             * @member {number} mCloseFri
             * @memberof wm.protobuf.SystemSetting
             * @instance
             */
            SystemSetting.prototype.mCloseFri = 0;

            /**
             * SystemSetting mCloseSat.
             * @member {number} mCloseSat
             * @memberof wm.protobuf.SystemSetting
             * @instance
             */
            SystemSetting.prototype.mCloseSat = 0;

            /**
             * SystemSetting mCloseDay.
             * @member {number} mCloseDay
             * @memberof wm.protobuf.SystemSetting
             * @instance
             */
            SystemSetting.prototype.mCloseDay = 0;

            /**
             * SystemSetting mTouchPanel.
             * @member {boolean} mTouchPanel
             * @memberof wm.protobuf.SystemSetting
             * @instance
             */
            SystemSetting.prototype.mTouchPanel = false;

            /**
             * SystemSetting mGameVol.
             * @member {number} mGameVol
             * @memberof wm.protobuf.SystemSetting
             * @instance
             */
            SystemSetting.prototype.mGameVol = 0;

            /**
             * SystemSetting mAttractVol.
             * @member {number} mAttractVol
             * @memberof wm.protobuf.SystemSetting
             * @instance
             */
            SystemSetting.prototype.mAttractVol = 0;

            /**
             * SystemSetting mCalibHandleCenter.
             * @member {number} mCalibHandleCenter
             * @memberof wm.protobuf.SystemSetting
             * @instance
             */
            SystemSetting.prototype.mCalibHandleCenter = 0;

            /**
             * SystemSetting mCalibAccelCenter.
             * @member {number} mCalibAccelCenter
             * @memberof wm.protobuf.SystemSetting
             * @instance
             */
            SystemSetting.prototype.mCalibAccelCenter = 0;

            /**
             * SystemSetting mCalibBrakeCenter.
             * @member {number} mCalibBrakeCenter
             * @memberof wm.protobuf.SystemSetting
             * @instance
             */
            SystemSetting.prototype.mCalibBrakeCenter = 0;

            /**
             * SystemSetting mCalibTouchLeft.
             * @member {number} mCalibTouchLeft
             * @memberof wm.protobuf.SystemSetting
             * @instance
             */
            SystemSetting.prototype.mCalibTouchLeft = 0;

            /**
             * SystemSetting mCalibTouchRight.
             * @member {number} mCalibTouchRight
             * @memberof wm.protobuf.SystemSetting
             * @instance
             */
            SystemSetting.prototype.mCalibTouchRight = 0;

            /**
             * SystemSetting mCalibTouchTop.
             * @member {number} mCalibTouchTop
             * @memberof wm.protobuf.SystemSetting
             * @instance
             */
            SystemSetting.prototype.mCalibTouchTop = 0;

            /**
             * SystemSetting mCalibTouchBottom.
             * @member {number} mCalibTouchBottom
             * @memberof wm.protobuf.SystemSetting
             * @instance
             */
            SystemSetting.prototype.mCalibTouchBottom = 0;

            /**
             * Creates a new SystemSetting instance using the specified properties.
             * @function create
             * @memberof wm.protobuf.SystemSetting
             * @static
             * @param {wm.protobuf.ISystemSetting=} [properties] Properties to set
             * @returns {wm.protobuf.SystemSetting} SystemSetting instance
             */
            SystemSetting.create = function create(properties) {
                return new SystemSetting(properties);
            };

            /**
             * Encodes the specified SystemSetting message. Does not implicitly {@link wm.protobuf.SystemSetting.verify|verify} messages.
             * @function encode
             * @memberof wm.protobuf.SystemSetting
             * @static
             * @param {wm.protobuf.ISystemSetting} message SystemSetting message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SystemSetting.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.mCoinChute);
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.mBuyCardCost);
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.mGameCost);
                writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.mContinueCost);
                writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.mFullCourseCost);
                writer.uint32(/* id 6, wireType 0 =*/48).bool(message.mFreePlay);
                if (message.mPcbId != null && Object.hasOwnProperty.call(message, "mPcbId"))
                    writer.uint32(/* id 7, wireType 0 =*/56).uint32(message.mPcbId);
                writer.uint32(/* id 8, wireType 0 =*/64).bool(message.mIcCardRw);
                writer.uint32(/* id 9, wireType 0 =*/72).bool(message.mIcCardVender);
                if (message.mMgCardRw != null && Object.hasOwnProperty.call(message, "mMgCardRw"))
                    writer.uint32(/* id 10, wireType 0 =*/80).bool(message.mMgCardRw);
                if (message.mForceFeedback != null && Object.hasOwnProperty.call(message, "mForceFeedback"))
                    writer.uint32(/* id 11, wireType 0 =*/88).bool(message.mForceFeedback);
                writer.uint32(/* id 12, wireType 0 =*/96).bool(message.mWinsAndRemains);
                writer.uint32(/* id 13, wireType 0 =*/104).uint32(message.mEventMode);
                writer.uint32(/* id 14, wireType 0 =*/112).bool(message.mEventModeDist);
                writer.uint32(/* id 15, wireType 0 =*/120).uint32(message.mCloseType);
                writer.uint32(/* id 16, wireType 0 =*/128).uint32(message.mCloseSun);
                writer.uint32(/* id 17, wireType 0 =*/136).uint32(message.mCloseMon);
                writer.uint32(/* id 18, wireType 0 =*/144).uint32(message.mCloseTue);
                writer.uint32(/* id 19, wireType 0 =*/152).uint32(message.mCloseWed);
                writer.uint32(/* id 20, wireType 0 =*/160).uint32(message.mCloseThu);
                writer.uint32(/* id 21, wireType 0 =*/168).uint32(message.mCloseFri);
                writer.uint32(/* id 22, wireType 0 =*/176).uint32(message.mCloseSat);
                writer.uint32(/* id 23, wireType 0 =*/184).uint32(message.mCloseDay);
                if (message.mTouchPanel != null && Object.hasOwnProperty.call(message, "mTouchPanel"))
                    writer.uint32(/* id 24, wireType 0 =*/192).bool(message.mTouchPanel);
                writer.uint32(/* id 25, wireType 0 =*/200).uint32(message.mGameVol);
                writer.uint32(/* id 26, wireType 0 =*/208).uint32(message.mAttractVol);
                if (message.mCalibHandleCenter != null && Object.hasOwnProperty.call(message, "mCalibHandleCenter"))
                    writer.uint32(/* id 27, wireType 0 =*/216).uint32(message.mCalibHandleCenter);
                if (message.mCalibAccelCenter != null && Object.hasOwnProperty.call(message, "mCalibAccelCenter"))
                    writer.uint32(/* id 28, wireType 0 =*/224).uint32(message.mCalibAccelCenter);
                if (message.mCalibBrakeCenter != null && Object.hasOwnProperty.call(message, "mCalibBrakeCenter"))
                    writer.uint32(/* id 29, wireType 0 =*/232).uint32(message.mCalibBrakeCenter);
                if (message.mCalibTouchLeft != null && Object.hasOwnProperty.call(message, "mCalibTouchLeft"))
                    writer.uint32(/* id 30, wireType 0 =*/240).uint32(message.mCalibTouchLeft);
                if (message.mCalibTouchRight != null && Object.hasOwnProperty.call(message, "mCalibTouchRight"))
                    writer.uint32(/* id 31, wireType 0 =*/248).uint32(message.mCalibTouchRight);
                if (message.mCalibTouchTop != null && Object.hasOwnProperty.call(message, "mCalibTouchTop"))
                    writer.uint32(/* id 32, wireType 0 =*/256).uint32(message.mCalibTouchTop);
                if (message.mCalibTouchBottom != null && Object.hasOwnProperty.call(message, "mCalibTouchBottom"))
                    writer.uint32(/* id 33, wireType 0 =*/264).uint32(message.mCalibTouchBottom);
                return writer;
            };

            /**
             * Encodes the specified SystemSetting message, length delimited. Does not implicitly {@link wm.protobuf.SystemSetting.verify|verify} messages.
             * @function encodeDelimited
             * @memberof wm.protobuf.SystemSetting
             * @static
             * @param {wm.protobuf.ISystemSetting} message SystemSetting message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SystemSetting.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a SystemSetting message from the specified reader or buffer.
             * @function decode
             * @memberof wm.protobuf.SystemSetting
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {wm.protobuf.SystemSetting} SystemSetting
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SystemSetting.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.wm.protobuf.SystemSetting();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.mCoinChute = reader.uint32();
                            break;
                        }
                    case 2: {
                            message.mBuyCardCost = reader.uint32();
                            break;
                        }
                    case 3: {
                            message.mGameCost = reader.uint32();
                            break;
                        }
                    case 4: {
                            message.mContinueCost = reader.uint32();
                            break;
                        }
                    case 5: {
                            message.mFullCourseCost = reader.uint32();
                            break;
                        }
                    case 6: {
                            message.mFreePlay = reader.bool();
                            break;
                        }
                    case 7: {
                            message.mPcbId = reader.uint32();
                            break;
                        }
                    case 8: {
                            message.mIcCardRw = reader.bool();
                            break;
                        }
                    case 9: {
                            message.mIcCardVender = reader.bool();
                            break;
                        }
                    case 10: {
                            message.mMgCardRw = reader.bool();
                            break;
                        }
                    case 11: {
                            message.mForceFeedback = reader.bool();
                            break;
                        }
                    case 12: {
                            message.mWinsAndRemains = reader.bool();
                            break;
                        }
                    case 13: {
                            message.mEventMode = reader.uint32();
                            break;
                        }
                    case 14: {
                            message.mEventModeDist = reader.bool();
                            break;
                        }
                    case 15: {
                            message.mCloseType = reader.uint32();
                            break;
                        }
                    case 16: {
                            message.mCloseSun = reader.uint32();
                            break;
                        }
                    case 17: {
                            message.mCloseMon = reader.uint32();
                            break;
                        }
                    case 18: {
                            message.mCloseTue = reader.uint32();
                            break;
                        }
                    case 19: {
                            message.mCloseWed = reader.uint32();
                            break;
                        }
                    case 20: {
                            message.mCloseThu = reader.uint32();
                            break;
                        }
                    case 21: {
                            message.mCloseFri = reader.uint32();
                            break;
                        }
                    case 22: {
                            message.mCloseSat = reader.uint32();
                            break;
                        }
                    case 23: {
                            message.mCloseDay = reader.uint32();
                            break;
                        }
                    case 24: {
                            message.mTouchPanel = reader.bool();
                            break;
                        }
                    case 25: {
                            message.mGameVol = reader.uint32();
                            break;
                        }
                    case 26: {
                            message.mAttractVol = reader.uint32();
                            break;
                        }
                    case 27: {
                            message.mCalibHandleCenter = reader.uint32();
                            break;
                        }
                    case 28: {
                            message.mCalibAccelCenter = reader.uint32();
                            break;
                        }
                    case 29: {
                            message.mCalibBrakeCenter = reader.uint32();
                            break;
                        }
                    case 30: {
                            message.mCalibTouchLeft = reader.uint32();
                            break;
                        }
                    case 31: {
                            message.mCalibTouchRight = reader.uint32();
                            break;
                        }
                    case 32: {
                            message.mCalibTouchTop = reader.uint32();
                            break;
                        }
                    case 33: {
                            message.mCalibTouchBottom = reader.uint32();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("mCoinChute"))
                    throw $util.ProtocolError("missing required 'mCoinChute'", { instance: message });
                if (!message.hasOwnProperty("mBuyCardCost"))
                    throw $util.ProtocolError("missing required 'mBuyCardCost'", { instance: message });
                if (!message.hasOwnProperty("mGameCost"))
                    throw $util.ProtocolError("missing required 'mGameCost'", { instance: message });
                if (!message.hasOwnProperty("mContinueCost"))
                    throw $util.ProtocolError("missing required 'mContinueCost'", { instance: message });
                if (!message.hasOwnProperty("mFullCourseCost"))
                    throw $util.ProtocolError("missing required 'mFullCourseCost'", { instance: message });
                if (!message.hasOwnProperty("mFreePlay"))
                    throw $util.ProtocolError("missing required 'mFreePlay'", { instance: message });
                if (!message.hasOwnProperty("mIcCardRw"))
                    throw $util.ProtocolError("missing required 'mIcCardRw'", { instance: message });
                if (!message.hasOwnProperty("mIcCardVender"))
                    throw $util.ProtocolError("missing required 'mIcCardVender'", { instance: message });
                if (!message.hasOwnProperty("mWinsAndRemains"))
                    throw $util.ProtocolError("missing required 'mWinsAndRemains'", { instance: message });
                if (!message.hasOwnProperty("mEventMode"))
                    throw $util.ProtocolError("missing required 'mEventMode'", { instance: message });
                if (!message.hasOwnProperty("mEventModeDist"))
                    throw $util.ProtocolError("missing required 'mEventModeDist'", { instance: message });
                if (!message.hasOwnProperty("mCloseType"))
                    throw $util.ProtocolError("missing required 'mCloseType'", { instance: message });
                if (!message.hasOwnProperty("mCloseSun"))
                    throw $util.ProtocolError("missing required 'mCloseSun'", { instance: message });
                if (!message.hasOwnProperty("mCloseMon"))
                    throw $util.ProtocolError("missing required 'mCloseMon'", { instance: message });
                if (!message.hasOwnProperty("mCloseTue"))
                    throw $util.ProtocolError("missing required 'mCloseTue'", { instance: message });
                if (!message.hasOwnProperty("mCloseWed"))
                    throw $util.ProtocolError("missing required 'mCloseWed'", { instance: message });
                if (!message.hasOwnProperty("mCloseThu"))
                    throw $util.ProtocolError("missing required 'mCloseThu'", { instance: message });
                if (!message.hasOwnProperty("mCloseFri"))
                    throw $util.ProtocolError("missing required 'mCloseFri'", { instance: message });
                if (!message.hasOwnProperty("mCloseSat"))
                    throw $util.ProtocolError("missing required 'mCloseSat'", { instance: message });
                if (!message.hasOwnProperty("mCloseDay"))
                    throw $util.ProtocolError("missing required 'mCloseDay'", { instance: message });
                if (!message.hasOwnProperty("mGameVol"))
                    throw $util.ProtocolError("missing required 'mGameVol'", { instance: message });
                if (!message.hasOwnProperty("mAttractVol"))
                    throw $util.ProtocolError("missing required 'mAttractVol'", { instance: message });
                return message;
            };

            /**
             * Decodes a SystemSetting message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof wm.protobuf.SystemSetting
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {wm.protobuf.SystemSetting} SystemSetting
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SystemSetting.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a SystemSetting message.
             * @function verify
             * @memberof wm.protobuf.SystemSetting
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            SystemSetting.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (!$util.isInteger(message.mCoinChute))
                    return "mCoinChute: integer expected";
                if (!$util.isInteger(message.mBuyCardCost))
                    return "mBuyCardCost: integer expected";
                if (!$util.isInteger(message.mGameCost))
                    return "mGameCost: integer expected";
                if (!$util.isInteger(message.mContinueCost))
                    return "mContinueCost: integer expected";
                if (!$util.isInteger(message.mFullCourseCost))
                    return "mFullCourseCost: integer expected";
                if (typeof message.mFreePlay !== "boolean")
                    return "mFreePlay: boolean expected";
                if (message.mPcbId != null && message.hasOwnProperty("mPcbId"))
                    if (!$util.isInteger(message.mPcbId))
                        return "mPcbId: integer expected";
                if (typeof message.mIcCardRw !== "boolean")
                    return "mIcCardRw: boolean expected";
                if (typeof message.mIcCardVender !== "boolean")
                    return "mIcCardVender: boolean expected";
                if (message.mMgCardRw != null && message.hasOwnProperty("mMgCardRw"))
                    if (typeof message.mMgCardRw !== "boolean")
                        return "mMgCardRw: boolean expected";
                if (message.mForceFeedback != null && message.hasOwnProperty("mForceFeedback"))
                    if (typeof message.mForceFeedback !== "boolean")
                        return "mForceFeedback: boolean expected";
                if (typeof message.mWinsAndRemains !== "boolean")
                    return "mWinsAndRemains: boolean expected";
                if (!$util.isInteger(message.mEventMode))
                    return "mEventMode: integer expected";
                if (typeof message.mEventModeDist !== "boolean")
                    return "mEventModeDist: boolean expected";
                if (!$util.isInteger(message.mCloseType))
                    return "mCloseType: integer expected";
                if (!$util.isInteger(message.mCloseSun))
                    return "mCloseSun: integer expected";
                if (!$util.isInteger(message.mCloseMon))
                    return "mCloseMon: integer expected";
                if (!$util.isInteger(message.mCloseTue))
                    return "mCloseTue: integer expected";
                if (!$util.isInteger(message.mCloseWed))
                    return "mCloseWed: integer expected";
                if (!$util.isInteger(message.mCloseThu))
                    return "mCloseThu: integer expected";
                if (!$util.isInteger(message.mCloseFri))
                    return "mCloseFri: integer expected";
                if (!$util.isInteger(message.mCloseSat))
                    return "mCloseSat: integer expected";
                if (!$util.isInteger(message.mCloseDay))
                    return "mCloseDay: integer expected";
                if (message.mTouchPanel != null && message.hasOwnProperty("mTouchPanel"))
                    if (typeof message.mTouchPanel !== "boolean")
                        return "mTouchPanel: boolean expected";
                if (!$util.isInteger(message.mGameVol))
                    return "mGameVol: integer expected";
                if (!$util.isInteger(message.mAttractVol))
                    return "mAttractVol: integer expected";
                if (message.mCalibHandleCenter != null && message.hasOwnProperty("mCalibHandleCenter"))
                    if (!$util.isInteger(message.mCalibHandleCenter))
                        return "mCalibHandleCenter: integer expected";
                if (message.mCalibAccelCenter != null && message.hasOwnProperty("mCalibAccelCenter"))
                    if (!$util.isInteger(message.mCalibAccelCenter))
                        return "mCalibAccelCenter: integer expected";
                if (message.mCalibBrakeCenter != null && message.hasOwnProperty("mCalibBrakeCenter"))
                    if (!$util.isInteger(message.mCalibBrakeCenter))
                        return "mCalibBrakeCenter: integer expected";
                if (message.mCalibTouchLeft != null && message.hasOwnProperty("mCalibTouchLeft"))
                    if (!$util.isInteger(message.mCalibTouchLeft))
                        return "mCalibTouchLeft: integer expected";
                if (message.mCalibTouchRight != null && message.hasOwnProperty("mCalibTouchRight"))
                    if (!$util.isInteger(message.mCalibTouchRight))
                        return "mCalibTouchRight: integer expected";
                if (message.mCalibTouchTop != null && message.hasOwnProperty("mCalibTouchTop"))
                    if (!$util.isInteger(message.mCalibTouchTop))
                        return "mCalibTouchTop: integer expected";
                if (message.mCalibTouchBottom != null && message.hasOwnProperty("mCalibTouchBottom"))
                    if (!$util.isInteger(message.mCalibTouchBottom))
                        return "mCalibTouchBottom: integer expected";
                return null;
            };

            /**
             * Creates a SystemSetting message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof wm.protobuf.SystemSetting
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {wm.protobuf.SystemSetting} SystemSetting
             */
            SystemSetting.fromObject = function fromObject(object) {
                if (object instanceof $root.wm.protobuf.SystemSetting)
                    return object;
                let message = new $root.wm.protobuf.SystemSetting();
                if (object.mCoinChute != null)
                    message.mCoinChute = object.mCoinChute >>> 0;
                if (object.mBuyCardCost != null)
                    message.mBuyCardCost = object.mBuyCardCost >>> 0;
                if (object.mGameCost != null)
                    message.mGameCost = object.mGameCost >>> 0;
                if (object.mContinueCost != null)
                    message.mContinueCost = object.mContinueCost >>> 0;
                if (object.mFullCourseCost != null)
                    message.mFullCourseCost = object.mFullCourseCost >>> 0;
                if (object.mFreePlay != null)
                    message.mFreePlay = Boolean(object.mFreePlay);
                if (object.mPcbId != null)
                    message.mPcbId = object.mPcbId >>> 0;
                if (object.mIcCardRw != null)
                    message.mIcCardRw = Boolean(object.mIcCardRw);
                if (object.mIcCardVender != null)
                    message.mIcCardVender = Boolean(object.mIcCardVender);
                if (object.mMgCardRw != null)
                    message.mMgCardRw = Boolean(object.mMgCardRw);
                if (object.mForceFeedback != null)
                    message.mForceFeedback = Boolean(object.mForceFeedback);
                if (object.mWinsAndRemains != null)
                    message.mWinsAndRemains = Boolean(object.mWinsAndRemains);
                if (object.mEventMode != null)
                    message.mEventMode = object.mEventMode >>> 0;
                if (object.mEventModeDist != null)
                    message.mEventModeDist = Boolean(object.mEventModeDist);
                if (object.mCloseType != null)
                    message.mCloseType = object.mCloseType >>> 0;
                if (object.mCloseSun != null)
                    message.mCloseSun = object.mCloseSun >>> 0;
                if (object.mCloseMon != null)
                    message.mCloseMon = object.mCloseMon >>> 0;
                if (object.mCloseTue != null)
                    message.mCloseTue = object.mCloseTue >>> 0;
                if (object.mCloseWed != null)
                    message.mCloseWed = object.mCloseWed >>> 0;
                if (object.mCloseThu != null)
                    message.mCloseThu = object.mCloseThu >>> 0;
                if (object.mCloseFri != null)
                    message.mCloseFri = object.mCloseFri >>> 0;
                if (object.mCloseSat != null)
                    message.mCloseSat = object.mCloseSat >>> 0;
                if (object.mCloseDay != null)
                    message.mCloseDay = object.mCloseDay >>> 0;
                if (object.mTouchPanel != null)
                    message.mTouchPanel = Boolean(object.mTouchPanel);
                if (object.mGameVol != null)
                    message.mGameVol = object.mGameVol >>> 0;
                if (object.mAttractVol != null)
                    message.mAttractVol = object.mAttractVol >>> 0;
                if (object.mCalibHandleCenter != null)
                    message.mCalibHandleCenter = object.mCalibHandleCenter >>> 0;
                if (object.mCalibAccelCenter != null)
                    message.mCalibAccelCenter = object.mCalibAccelCenter >>> 0;
                if (object.mCalibBrakeCenter != null)
                    message.mCalibBrakeCenter = object.mCalibBrakeCenter >>> 0;
                if (object.mCalibTouchLeft != null)
                    message.mCalibTouchLeft = object.mCalibTouchLeft >>> 0;
                if (object.mCalibTouchRight != null)
                    message.mCalibTouchRight = object.mCalibTouchRight >>> 0;
                if (object.mCalibTouchTop != null)
                    message.mCalibTouchTop = object.mCalibTouchTop >>> 0;
                if (object.mCalibTouchBottom != null)
                    message.mCalibTouchBottom = object.mCalibTouchBottom >>> 0;
                return message;
            };

            /**
             * Creates a plain object from a SystemSetting message. Also converts values to other types if specified.
             * @function toObject
             * @memberof wm.protobuf.SystemSetting
             * @static
             * @param {wm.protobuf.SystemSetting} message SystemSetting
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            SystemSetting.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.mCoinChute = 0;
                    object.mBuyCardCost = 0;
                    object.mGameCost = 0;
                    object.mContinueCost = 0;
                    object.mFullCourseCost = 0;
                    object.mFreePlay = false;
                    object.mPcbId = 0;
                    object.mIcCardRw = false;
                    object.mIcCardVender = false;
                    object.mMgCardRw = false;
                    object.mForceFeedback = false;
                    object.mWinsAndRemains = false;
                    object.mEventMode = 0;
                    object.mEventModeDist = false;
                    object.mCloseType = 0;
                    object.mCloseSun = 0;
                    object.mCloseMon = 0;
                    object.mCloseTue = 0;
                    object.mCloseWed = 0;
                    object.mCloseThu = 0;
                    object.mCloseFri = 0;
                    object.mCloseSat = 0;
                    object.mCloseDay = 0;
                    object.mTouchPanel = false;
                    object.mGameVol = 0;
                    object.mAttractVol = 0;
                    object.mCalibHandleCenter = 0;
                    object.mCalibAccelCenter = 0;
                    object.mCalibBrakeCenter = 0;
                    object.mCalibTouchLeft = 0;
                    object.mCalibTouchRight = 0;
                    object.mCalibTouchTop = 0;
                    object.mCalibTouchBottom = 0;
                }
                if (message.mCoinChute != null && message.hasOwnProperty("mCoinChute"))
                    object.mCoinChute = message.mCoinChute;
                if (message.mBuyCardCost != null && message.hasOwnProperty("mBuyCardCost"))
                    object.mBuyCardCost = message.mBuyCardCost;
                if (message.mGameCost != null && message.hasOwnProperty("mGameCost"))
                    object.mGameCost = message.mGameCost;
                if (message.mContinueCost != null && message.hasOwnProperty("mContinueCost"))
                    object.mContinueCost = message.mContinueCost;
                if (message.mFullCourseCost != null && message.hasOwnProperty("mFullCourseCost"))
                    object.mFullCourseCost = message.mFullCourseCost;
                if (message.mFreePlay != null && message.hasOwnProperty("mFreePlay"))
                    object.mFreePlay = message.mFreePlay;
                if (message.mPcbId != null && message.hasOwnProperty("mPcbId"))
                    object.mPcbId = message.mPcbId;
                if (message.mIcCardRw != null && message.hasOwnProperty("mIcCardRw"))
                    object.mIcCardRw = message.mIcCardRw;
                if (message.mIcCardVender != null && message.hasOwnProperty("mIcCardVender"))
                    object.mIcCardVender = message.mIcCardVender;
                if (message.mMgCardRw != null && message.hasOwnProperty("mMgCardRw"))
                    object.mMgCardRw = message.mMgCardRw;
                if (message.mForceFeedback != null && message.hasOwnProperty("mForceFeedback"))
                    object.mForceFeedback = message.mForceFeedback;
                if (message.mWinsAndRemains != null && message.hasOwnProperty("mWinsAndRemains"))
                    object.mWinsAndRemains = message.mWinsAndRemains;
                if (message.mEventMode != null && message.hasOwnProperty("mEventMode"))
                    object.mEventMode = message.mEventMode;
                if (message.mEventModeDist != null && message.hasOwnProperty("mEventModeDist"))
                    object.mEventModeDist = message.mEventModeDist;
                if (message.mCloseType != null && message.hasOwnProperty("mCloseType"))
                    object.mCloseType = message.mCloseType;
                if (message.mCloseSun != null && message.hasOwnProperty("mCloseSun"))
                    object.mCloseSun = message.mCloseSun;
                if (message.mCloseMon != null && message.hasOwnProperty("mCloseMon"))
                    object.mCloseMon = message.mCloseMon;
                if (message.mCloseTue != null && message.hasOwnProperty("mCloseTue"))
                    object.mCloseTue = message.mCloseTue;
                if (message.mCloseWed != null && message.hasOwnProperty("mCloseWed"))
                    object.mCloseWed = message.mCloseWed;
                if (message.mCloseThu != null && message.hasOwnProperty("mCloseThu"))
                    object.mCloseThu = message.mCloseThu;
                if (message.mCloseFri != null && message.hasOwnProperty("mCloseFri"))
                    object.mCloseFri = message.mCloseFri;
                if (message.mCloseSat != null && message.hasOwnProperty("mCloseSat"))
                    object.mCloseSat = message.mCloseSat;
                if (message.mCloseDay != null && message.hasOwnProperty("mCloseDay"))
                    object.mCloseDay = message.mCloseDay;
                if (message.mTouchPanel != null && message.hasOwnProperty("mTouchPanel"))
                    object.mTouchPanel = message.mTouchPanel;
                if (message.mGameVol != null && message.hasOwnProperty("mGameVol"))
                    object.mGameVol = message.mGameVol;
                if (message.mAttractVol != null && message.hasOwnProperty("mAttractVol"))
                    object.mAttractVol = message.mAttractVol;
                if (message.mCalibHandleCenter != null && message.hasOwnProperty("mCalibHandleCenter"))
                    object.mCalibHandleCenter = message.mCalibHandleCenter;
                if (message.mCalibAccelCenter != null && message.hasOwnProperty("mCalibAccelCenter"))
                    object.mCalibAccelCenter = message.mCalibAccelCenter;
                if (message.mCalibBrakeCenter != null && message.hasOwnProperty("mCalibBrakeCenter"))
                    object.mCalibBrakeCenter = message.mCalibBrakeCenter;
                if (message.mCalibTouchLeft != null && message.hasOwnProperty("mCalibTouchLeft"))
                    object.mCalibTouchLeft = message.mCalibTouchLeft;
                if (message.mCalibTouchRight != null && message.hasOwnProperty("mCalibTouchRight"))
                    object.mCalibTouchRight = message.mCalibTouchRight;
                if (message.mCalibTouchTop != null && message.hasOwnProperty("mCalibTouchTop"))
                    object.mCalibTouchTop = message.mCalibTouchTop;
                if (message.mCalibTouchBottom != null && message.hasOwnProperty("mCalibTouchBottom"))
                    object.mCalibTouchBottom = message.mCalibTouchBottom;
                return object;
            };

            /**
             * Converts this SystemSetting to JSON.
             * @function toJSON
             * @memberof wm.protobuf.SystemSetting
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            SystemSetting.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for SystemSetting
             * @function getTypeUrl
             * @memberof wm.protobuf.SystemSetting
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            SystemSetting.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/wm.protobuf.SystemSetting";
            };

            return SystemSetting;
        })();

        protobuf.GhostCompetitionSchedule = (function() {

            /**
             * Properties of a GhostCompetitionSchedule.
             * @memberof wm.protobuf
             * @interface IGhostCompetitionSchedule
             * @property {number} competitionId GhostCompetitionSchedule competitionId
             * @property {number} qualifyingPeriodStartAt GhostCompetitionSchedule qualifyingPeriodStartAt
             * @property {number} qualifyingPeriodCloseAt GhostCompetitionSchedule qualifyingPeriodCloseAt
             * @property {number} competitionStartAt GhostCompetitionSchedule competitionStartAt
             * @property {number} competitionCloseAt GhostCompetitionSchedule competitionCloseAt
             * @property {number} competitionEndAt GhostCompetitionSchedule competitionEndAt
             * @property {number} lengthOfPeriod GhostCompetitionSchedule lengthOfPeriod
             * @property {number} lengthOfInterval GhostCompetitionSchedule lengthOfInterval
             * @property {number} area GhostCompetitionSchedule area
             * @property {number} minigamePatternId GhostCompetitionSchedule minigamePatternId
             */

            /**
             * Constructs a new GhostCompetitionSchedule.
             * @memberof wm.protobuf
             * @classdesc Represents a GhostCompetitionSchedule.
             * @implements IGhostCompetitionSchedule
             * @constructor
             * @param {wm.protobuf.IGhostCompetitionSchedule=} [properties] Properties to set
             */
            function GhostCompetitionSchedule(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * GhostCompetitionSchedule competitionId.
             * @member {number} competitionId
             * @memberof wm.protobuf.GhostCompetitionSchedule
             * @instance
             */
            GhostCompetitionSchedule.prototype.competitionId = 0;

            /**
             * GhostCompetitionSchedule qualifyingPeriodStartAt.
             * @member {number} qualifyingPeriodStartAt
             * @memberof wm.protobuf.GhostCompetitionSchedule
             * @instance
             */
            GhostCompetitionSchedule.prototype.qualifyingPeriodStartAt = 0;

            /**
             * GhostCompetitionSchedule qualifyingPeriodCloseAt.
             * @member {number} qualifyingPeriodCloseAt
             * @memberof wm.protobuf.GhostCompetitionSchedule
             * @instance
             */
            GhostCompetitionSchedule.prototype.qualifyingPeriodCloseAt = 0;

            /**
             * GhostCompetitionSchedule competitionStartAt.
             * @member {number} competitionStartAt
             * @memberof wm.protobuf.GhostCompetitionSchedule
             * @instance
             */
            GhostCompetitionSchedule.prototype.competitionStartAt = 0;

            /**
             * GhostCompetitionSchedule competitionCloseAt.
             * @member {number} competitionCloseAt
             * @memberof wm.protobuf.GhostCompetitionSchedule
             * @instance
             */
            GhostCompetitionSchedule.prototype.competitionCloseAt = 0;

            /**
             * GhostCompetitionSchedule competitionEndAt.
             * @member {number} competitionEndAt
             * @memberof wm.protobuf.GhostCompetitionSchedule
             * @instance
             */
            GhostCompetitionSchedule.prototype.competitionEndAt = 0;

            /**
             * GhostCompetitionSchedule lengthOfPeriod.
             * @member {number} lengthOfPeriod
             * @memberof wm.protobuf.GhostCompetitionSchedule
             * @instance
             */
            GhostCompetitionSchedule.prototype.lengthOfPeriod = 0;

            /**
             * GhostCompetitionSchedule lengthOfInterval.
             * @member {number} lengthOfInterval
             * @memberof wm.protobuf.GhostCompetitionSchedule
             * @instance
             */
            GhostCompetitionSchedule.prototype.lengthOfInterval = 0;

            /**
             * GhostCompetitionSchedule area.
             * @member {number} area
             * @memberof wm.protobuf.GhostCompetitionSchedule
             * @instance
             */
            GhostCompetitionSchedule.prototype.area = 0;

            /**
             * GhostCompetitionSchedule minigamePatternId.
             * @member {number} minigamePatternId
             * @memberof wm.protobuf.GhostCompetitionSchedule
             * @instance
             */
            GhostCompetitionSchedule.prototype.minigamePatternId = 0;

            /**
             * Creates a new GhostCompetitionSchedule instance using the specified properties.
             * @function create
             * @memberof wm.protobuf.GhostCompetitionSchedule
             * @static
             * @param {wm.protobuf.IGhostCompetitionSchedule=} [properties] Properties to set
             * @returns {wm.protobuf.GhostCompetitionSchedule} GhostCompetitionSchedule instance
             */
            GhostCompetitionSchedule.create = function create(properties) {
                return new GhostCompetitionSchedule(properties);
            };

            /**
             * Encodes the specified GhostCompetitionSchedule message. Does not implicitly {@link wm.protobuf.GhostCompetitionSchedule.verify|verify} messages.
             * @function encode
             * @memberof wm.protobuf.GhostCompetitionSchedule
             * @static
             * @param {wm.protobuf.IGhostCompetitionSchedule} message GhostCompetitionSchedule message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GhostCompetitionSchedule.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.competitionId);
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.qualifyingPeriodStartAt);
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.qualifyingPeriodCloseAt);
                writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.competitionStartAt);
                writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.competitionCloseAt);
                writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.competitionEndAt);
                writer.uint32(/* id 7, wireType 0 =*/56).uint32(message.lengthOfPeriod);
                writer.uint32(/* id 8, wireType 0 =*/64).uint32(message.lengthOfInterval);
                writer.uint32(/* id 9, wireType 0 =*/72).uint32(message.area);
                writer.uint32(/* id 10, wireType 0 =*/80).uint32(message.minigamePatternId);
                return writer;
            };

            /**
             * Encodes the specified GhostCompetitionSchedule message, length delimited. Does not implicitly {@link wm.protobuf.GhostCompetitionSchedule.verify|verify} messages.
             * @function encodeDelimited
             * @memberof wm.protobuf.GhostCompetitionSchedule
             * @static
             * @param {wm.protobuf.IGhostCompetitionSchedule} message GhostCompetitionSchedule message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GhostCompetitionSchedule.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a GhostCompetitionSchedule message from the specified reader or buffer.
             * @function decode
             * @memberof wm.protobuf.GhostCompetitionSchedule
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {wm.protobuf.GhostCompetitionSchedule} GhostCompetitionSchedule
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GhostCompetitionSchedule.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.wm.protobuf.GhostCompetitionSchedule();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.competitionId = reader.uint32();
                            break;
                        }
                    case 2: {
                            message.qualifyingPeriodStartAt = reader.uint32();
                            break;
                        }
                    case 3: {
                            message.qualifyingPeriodCloseAt = reader.uint32();
                            break;
                        }
                    case 4: {
                            message.competitionStartAt = reader.uint32();
                            break;
                        }
                    case 5: {
                            message.competitionCloseAt = reader.uint32();
                            break;
                        }
                    case 6: {
                            message.competitionEndAt = reader.uint32();
                            break;
                        }
                    case 7: {
                            message.lengthOfPeriod = reader.uint32();
                            break;
                        }
                    case 8: {
                            message.lengthOfInterval = reader.uint32();
                            break;
                        }
                    case 9: {
                            message.area = reader.uint32();
                            break;
                        }
                    case 10: {
                            message.minigamePatternId = reader.uint32();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("competitionId"))
                    throw $util.ProtocolError("missing required 'competitionId'", { instance: message });
                if (!message.hasOwnProperty("qualifyingPeriodStartAt"))
                    throw $util.ProtocolError("missing required 'qualifyingPeriodStartAt'", { instance: message });
                if (!message.hasOwnProperty("qualifyingPeriodCloseAt"))
                    throw $util.ProtocolError("missing required 'qualifyingPeriodCloseAt'", { instance: message });
                if (!message.hasOwnProperty("competitionStartAt"))
                    throw $util.ProtocolError("missing required 'competitionStartAt'", { instance: message });
                if (!message.hasOwnProperty("competitionCloseAt"))
                    throw $util.ProtocolError("missing required 'competitionCloseAt'", { instance: message });
                if (!message.hasOwnProperty("competitionEndAt"))
                    throw $util.ProtocolError("missing required 'competitionEndAt'", { instance: message });
                if (!message.hasOwnProperty("lengthOfPeriod"))
                    throw $util.ProtocolError("missing required 'lengthOfPeriod'", { instance: message });
                if (!message.hasOwnProperty("lengthOfInterval"))
                    throw $util.ProtocolError("missing required 'lengthOfInterval'", { instance: message });
                if (!message.hasOwnProperty("area"))
                    throw $util.ProtocolError("missing required 'area'", { instance: message });
                if (!message.hasOwnProperty("minigamePatternId"))
                    throw $util.ProtocolError("missing required 'minigamePatternId'", { instance: message });
                return message;
            };

            /**
             * Decodes a GhostCompetitionSchedule message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof wm.protobuf.GhostCompetitionSchedule
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {wm.protobuf.GhostCompetitionSchedule} GhostCompetitionSchedule
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GhostCompetitionSchedule.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a GhostCompetitionSchedule message.
             * @function verify
             * @memberof wm.protobuf.GhostCompetitionSchedule
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            GhostCompetitionSchedule.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (!$util.isInteger(message.competitionId))
                    return "competitionId: integer expected";
                if (!$util.isInteger(message.qualifyingPeriodStartAt))
                    return "qualifyingPeriodStartAt: integer expected";
                if (!$util.isInteger(message.qualifyingPeriodCloseAt))
                    return "qualifyingPeriodCloseAt: integer expected";
                if (!$util.isInteger(message.competitionStartAt))
                    return "competitionStartAt: integer expected";
                if (!$util.isInteger(message.competitionCloseAt))
                    return "competitionCloseAt: integer expected";
                if (!$util.isInteger(message.competitionEndAt))
                    return "competitionEndAt: integer expected";
                if (!$util.isInteger(message.lengthOfPeriod))
                    return "lengthOfPeriod: integer expected";
                if (!$util.isInteger(message.lengthOfInterval))
                    return "lengthOfInterval: integer expected";
                if (!$util.isInteger(message.area))
                    return "area: integer expected";
                if (!$util.isInteger(message.minigamePatternId))
                    return "minigamePatternId: integer expected";
                return null;
            };

            /**
             * Creates a GhostCompetitionSchedule message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof wm.protobuf.GhostCompetitionSchedule
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {wm.protobuf.GhostCompetitionSchedule} GhostCompetitionSchedule
             */
            GhostCompetitionSchedule.fromObject = function fromObject(object) {
                if (object instanceof $root.wm.protobuf.GhostCompetitionSchedule)
                    return object;
                let message = new $root.wm.protobuf.GhostCompetitionSchedule();
                if (object.competitionId != null)
                    message.competitionId = object.competitionId >>> 0;
                if (object.qualifyingPeriodStartAt != null)
                    message.qualifyingPeriodStartAt = object.qualifyingPeriodStartAt >>> 0;
                if (object.qualifyingPeriodCloseAt != null)
                    message.qualifyingPeriodCloseAt = object.qualifyingPeriodCloseAt >>> 0;
                if (object.competitionStartAt != null)
                    message.competitionStartAt = object.competitionStartAt >>> 0;
                if (object.competitionCloseAt != null)
                    message.competitionCloseAt = object.competitionCloseAt >>> 0;
                if (object.competitionEndAt != null)
                    message.competitionEndAt = object.competitionEndAt >>> 0;
                if (object.lengthOfPeriod != null)
                    message.lengthOfPeriod = object.lengthOfPeriod >>> 0;
                if (object.lengthOfInterval != null)
                    message.lengthOfInterval = object.lengthOfInterval >>> 0;
                if (object.area != null)
                    message.area = object.area >>> 0;
                if (object.minigamePatternId != null)
                    message.minigamePatternId = object.minigamePatternId >>> 0;
                return message;
            };

            /**
             * Creates a plain object from a GhostCompetitionSchedule message. Also converts values to other types if specified.
             * @function toObject
             * @memberof wm.protobuf.GhostCompetitionSchedule
             * @static
             * @param {wm.protobuf.GhostCompetitionSchedule} message GhostCompetitionSchedule
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            GhostCompetitionSchedule.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.competitionId = 0;
                    object.qualifyingPeriodStartAt = 0;
                    object.qualifyingPeriodCloseAt = 0;
                    object.competitionStartAt = 0;
                    object.competitionCloseAt = 0;
                    object.competitionEndAt = 0;
                    object.lengthOfPeriod = 0;
                    object.lengthOfInterval = 0;
                    object.area = 0;
                    object.minigamePatternId = 0;
                }
                if (message.competitionId != null && message.hasOwnProperty("competitionId"))
                    object.competitionId = message.competitionId;
                if (message.qualifyingPeriodStartAt != null && message.hasOwnProperty("qualifyingPeriodStartAt"))
                    object.qualifyingPeriodStartAt = message.qualifyingPeriodStartAt;
                if (message.qualifyingPeriodCloseAt != null && message.hasOwnProperty("qualifyingPeriodCloseAt"))
                    object.qualifyingPeriodCloseAt = message.qualifyingPeriodCloseAt;
                if (message.competitionStartAt != null && message.hasOwnProperty("competitionStartAt"))
                    object.competitionStartAt = message.competitionStartAt;
                if (message.competitionCloseAt != null && message.hasOwnProperty("competitionCloseAt"))
                    object.competitionCloseAt = message.competitionCloseAt;
                if (message.competitionEndAt != null && message.hasOwnProperty("competitionEndAt"))
                    object.competitionEndAt = message.competitionEndAt;
                if (message.lengthOfPeriod != null && message.hasOwnProperty("lengthOfPeriod"))
                    object.lengthOfPeriod = message.lengthOfPeriod;
                if (message.lengthOfInterval != null && message.hasOwnProperty("lengthOfInterval"))
                    object.lengthOfInterval = message.lengthOfInterval;
                if (message.area != null && message.hasOwnProperty("area"))
                    object.area = message.area;
                if (message.minigamePatternId != null && message.hasOwnProperty("minigamePatternId"))
                    object.minigamePatternId = message.minigamePatternId;
                return object;
            };

            /**
             * Converts this GhostCompetitionSchedule to JSON.
             * @function toJSON
             * @memberof wm.protobuf.GhostCompetitionSchedule
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            GhostCompetitionSchedule.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for GhostCompetitionSchedule
             * @function getTypeUrl
             * @memberof wm.protobuf.GhostCompetitionSchedule
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            GhostCompetitionSchedule.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/wm.protobuf.GhostCompetitionSchedule";
            };

            return GhostCompetitionSchedule;
        })();

        protobuf.GhostKoshienSchedule = (function() {

            /**
             * Properties of a GhostKoshienSchedule.
             * @memberof wm.protobuf
             * @interface IGhostKoshienSchedule
             * @property {number} koshienId GhostKoshienSchedule koshienId
             * @property {number} qualifyingFirstPeriodStartAt GhostKoshienSchedule qualifyingFirstPeriodStartAt
             * @property {number} qualifyingFirstPeriodCloseAt GhostKoshienSchedule qualifyingFirstPeriodCloseAt
             * @property {number} qualifyingSecondPeriodStartAt GhostKoshienSchedule qualifyingSecondPeriodStartAt
             * @property {number} qualifyingSecondPeriodCloseAt GhostKoshienSchedule qualifyingSecondPeriodCloseAt
             * @property {number} regionFinalStartAt GhostKoshienSchedule regionFinalStartAt
             * @property {number} regionFinalCloseAt GhostKoshienSchedule regionFinalCloseAt
             * @property {number} koshienStartAt GhostKoshienSchedule koshienStartAt
             * @property {number} koshienCloseAt GhostKoshienSchedule koshienCloseAt
             * @property {number} lengthOfPeriod GhostKoshienSchedule lengthOfPeriod
             * @property {number} lengthOfInterval GhostKoshienSchedule lengthOfInterval
             * @property {number} area GhostKoshienSchedule area
             * @property {number} aftereventStartAt GhostKoshienSchedule aftereventStartAt
             * @property {number} aftereventEndAt GhostKoshienSchedule aftereventEndAt
             */

            /**
             * Constructs a new GhostKoshienSchedule.
             * @memberof wm.protobuf
             * @classdesc Represents a GhostKoshienSchedule.
             * @implements IGhostKoshienSchedule
             * @constructor
             * @param {wm.protobuf.IGhostKoshienSchedule=} [properties] Properties to set
             */
            function GhostKoshienSchedule(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * GhostKoshienSchedule koshienId.
             * @member {number} koshienId
             * @memberof wm.protobuf.GhostKoshienSchedule
             * @instance
             */
            GhostKoshienSchedule.prototype.koshienId = 0;

            /**
             * GhostKoshienSchedule qualifyingFirstPeriodStartAt.
             * @member {number} qualifyingFirstPeriodStartAt
             * @memberof wm.protobuf.GhostKoshienSchedule
             * @instance
             */
            GhostKoshienSchedule.prototype.qualifyingFirstPeriodStartAt = 0;

            /**
             * GhostKoshienSchedule qualifyingFirstPeriodCloseAt.
             * @member {number} qualifyingFirstPeriodCloseAt
             * @memberof wm.protobuf.GhostKoshienSchedule
             * @instance
             */
            GhostKoshienSchedule.prototype.qualifyingFirstPeriodCloseAt = 0;

            /**
             * GhostKoshienSchedule qualifyingSecondPeriodStartAt.
             * @member {number} qualifyingSecondPeriodStartAt
             * @memberof wm.protobuf.GhostKoshienSchedule
             * @instance
             */
            GhostKoshienSchedule.prototype.qualifyingSecondPeriodStartAt = 0;

            /**
             * GhostKoshienSchedule qualifyingSecondPeriodCloseAt.
             * @member {number} qualifyingSecondPeriodCloseAt
             * @memberof wm.protobuf.GhostKoshienSchedule
             * @instance
             */
            GhostKoshienSchedule.prototype.qualifyingSecondPeriodCloseAt = 0;

            /**
             * GhostKoshienSchedule regionFinalStartAt.
             * @member {number} regionFinalStartAt
             * @memberof wm.protobuf.GhostKoshienSchedule
             * @instance
             */
            GhostKoshienSchedule.prototype.regionFinalStartAt = 0;

            /**
             * GhostKoshienSchedule regionFinalCloseAt.
             * @member {number} regionFinalCloseAt
             * @memberof wm.protobuf.GhostKoshienSchedule
             * @instance
             */
            GhostKoshienSchedule.prototype.regionFinalCloseAt = 0;

            /**
             * GhostKoshienSchedule koshienStartAt.
             * @member {number} koshienStartAt
             * @memberof wm.protobuf.GhostKoshienSchedule
             * @instance
             */
            GhostKoshienSchedule.prototype.koshienStartAt = 0;

            /**
             * GhostKoshienSchedule koshienCloseAt.
             * @member {number} koshienCloseAt
             * @memberof wm.protobuf.GhostKoshienSchedule
             * @instance
             */
            GhostKoshienSchedule.prototype.koshienCloseAt = 0;

            /**
             * GhostKoshienSchedule lengthOfPeriod.
             * @member {number} lengthOfPeriod
             * @memberof wm.protobuf.GhostKoshienSchedule
             * @instance
             */
            GhostKoshienSchedule.prototype.lengthOfPeriod = 0;

            /**
             * GhostKoshienSchedule lengthOfInterval.
             * @member {number} lengthOfInterval
             * @memberof wm.protobuf.GhostKoshienSchedule
             * @instance
             */
            GhostKoshienSchedule.prototype.lengthOfInterval = 0;

            /**
             * GhostKoshienSchedule area.
             * @member {number} area
             * @memberof wm.protobuf.GhostKoshienSchedule
             * @instance
             */
            GhostKoshienSchedule.prototype.area = 0;

            /**
             * GhostKoshienSchedule aftereventStartAt.
             * @member {number} aftereventStartAt
             * @memberof wm.protobuf.GhostKoshienSchedule
             * @instance
             */
            GhostKoshienSchedule.prototype.aftereventStartAt = 0;

            /**
             * GhostKoshienSchedule aftereventEndAt.
             * @member {number} aftereventEndAt
             * @memberof wm.protobuf.GhostKoshienSchedule
             * @instance
             */
            GhostKoshienSchedule.prototype.aftereventEndAt = 0;

            /**
             * Creates a new GhostKoshienSchedule instance using the specified properties.
             * @function create
             * @memberof wm.protobuf.GhostKoshienSchedule
             * @static
             * @param {wm.protobuf.IGhostKoshienSchedule=} [properties] Properties to set
             * @returns {wm.protobuf.GhostKoshienSchedule} GhostKoshienSchedule instance
             */
            GhostKoshienSchedule.create = function create(properties) {
                return new GhostKoshienSchedule(properties);
            };

            /**
             * Encodes the specified GhostKoshienSchedule message. Does not implicitly {@link wm.protobuf.GhostKoshienSchedule.verify|verify} messages.
             * @function encode
             * @memberof wm.protobuf.GhostKoshienSchedule
             * @static
             * @param {wm.protobuf.IGhostKoshienSchedule} message GhostKoshienSchedule message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GhostKoshienSchedule.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.koshienId);
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.qualifyingFirstPeriodStartAt);
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.qualifyingFirstPeriodCloseAt);
                writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.qualifyingSecondPeriodStartAt);
                writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.qualifyingSecondPeriodCloseAt);
                writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.regionFinalStartAt);
                writer.uint32(/* id 7, wireType 0 =*/56).uint32(message.regionFinalCloseAt);
                writer.uint32(/* id 9, wireType 0 =*/72).uint32(message.koshienStartAt);
                writer.uint32(/* id 10, wireType 0 =*/80).uint32(message.koshienCloseAt);
                writer.uint32(/* id 12, wireType 0 =*/96).uint32(message.lengthOfPeriod);
                writer.uint32(/* id 13, wireType 0 =*/104).uint32(message.lengthOfInterval);
                writer.uint32(/* id 14, wireType 0 =*/112).uint32(message.area);
                writer.uint32(/* id 15, wireType 0 =*/120).uint32(message.aftereventStartAt);
                writer.uint32(/* id 16, wireType 0 =*/128).uint32(message.aftereventEndAt);
                return writer;
            };

            /**
             * Encodes the specified GhostKoshienSchedule message, length delimited. Does not implicitly {@link wm.protobuf.GhostKoshienSchedule.verify|verify} messages.
             * @function encodeDelimited
             * @memberof wm.protobuf.GhostKoshienSchedule
             * @static
             * @param {wm.protobuf.IGhostKoshienSchedule} message GhostKoshienSchedule message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GhostKoshienSchedule.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a GhostKoshienSchedule message from the specified reader or buffer.
             * @function decode
             * @memberof wm.protobuf.GhostKoshienSchedule
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {wm.protobuf.GhostKoshienSchedule} GhostKoshienSchedule
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GhostKoshienSchedule.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.wm.protobuf.GhostKoshienSchedule();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.koshienId = reader.uint32();
                            break;
                        }
                    case 2: {
                            message.qualifyingFirstPeriodStartAt = reader.uint32();
                            break;
                        }
                    case 3: {
                            message.qualifyingFirstPeriodCloseAt = reader.uint32();
                            break;
                        }
                    case 4: {
                            message.qualifyingSecondPeriodStartAt = reader.uint32();
                            break;
                        }
                    case 5: {
                            message.qualifyingSecondPeriodCloseAt = reader.uint32();
                            break;
                        }
                    case 6: {
                            message.regionFinalStartAt = reader.uint32();
                            break;
                        }
                    case 7: {
                            message.regionFinalCloseAt = reader.uint32();
                            break;
                        }
                    case 9: {
                            message.koshienStartAt = reader.uint32();
                            break;
                        }
                    case 10: {
                            message.koshienCloseAt = reader.uint32();
                            break;
                        }
                    case 12: {
                            message.lengthOfPeriod = reader.uint32();
                            break;
                        }
                    case 13: {
                            message.lengthOfInterval = reader.uint32();
                            break;
                        }
                    case 14: {
                            message.area = reader.uint32();
                            break;
                        }
                    case 15: {
                            message.aftereventStartAt = reader.uint32();
                            break;
                        }
                    case 16: {
                            message.aftereventEndAt = reader.uint32();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("koshienId"))
                    throw $util.ProtocolError("missing required 'koshienId'", { instance: message });
                if (!message.hasOwnProperty("qualifyingFirstPeriodStartAt"))
                    throw $util.ProtocolError("missing required 'qualifyingFirstPeriodStartAt'", { instance: message });
                if (!message.hasOwnProperty("qualifyingFirstPeriodCloseAt"))
                    throw $util.ProtocolError("missing required 'qualifyingFirstPeriodCloseAt'", { instance: message });
                if (!message.hasOwnProperty("qualifyingSecondPeriodStartAt"))
                    throw $util.ProtocolError("missing required 'qualifyingSecondPeriodStartAt'", { instance: message });
                if (!message.hasOwnProperty("qualifyingSecondPeriodCloseAt"))
                    throw $util.ProtocolError("missing required 'qualifyingSecondPeriodCloseAt'", { instance: message });
                if (!message.hasOwnProperty("regionFinalStartAt"))
                    throw $util.ProtocolError("missing required 'regionFinalStartAt'", { instance: message });
                if (!message.hasOwnProperty("regionFinalCloseAt"))
                    throw $util.ProtocolError("missing required 'regionFinalCloseAt'", { instance: message });
                if (!message.hasOwnProperty("koshienStartAt"))
                    throw $util.ProtocolError("missing required 'koshienStartAt'", { instance: message });
                if (!message.hasOwnProperty("koshienCloseAt"))
                    throw $util.ProtocolError("missing required 'koshienCloseAt'", { instance: message });
                if (!message.hasOwnProperty("lengthOfPeriod"))
                    throw $util.ProtocolError("missing required 'lengthOfPeriod'", { instance: message });
                if (!message.hasOwnProperty("lengthOfInterval"))
                    throw $util.ProtocolError("missing required 'lengthOfInterval'", { instance: message });
                if (!message.hasOwnProperty("area"))
                    throw $util.ProtocolError("missing required 'area'", { instance: message });
                if (!message.hasOwnProperty("aftereventStartAt"))
                    throw $util.ProtocolError("missing required 'aftereventStartAt'", { instance: message });
                if (!message.hasOwnProperty("aftereventEndAt"))
                    throw $util.ProtocolError("missing required 'aftereventEndAt'", { instance: message });
                return message;
            };

            /**
             * Decodes a GhostKoshienSchedule message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof wm.protobuf.GhostKoshienSchedule
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {wm.protobuf.GhostKoshienSchedule} GhostKoshienSchedule
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GhostKoshienSchedule.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a GhostKoshienSchedule message.
             * @function verify
             * @memberof wm.protobuf.GhostKoshienSchedule
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            GhostKoshienSchedule.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (!$util.isInteger(message.koshienId))
                    return "koshienId: integer expected";
                if (!$util.isInteger(message.qualifyingFirstPeriodStartAt))
                    return "qualifyingFirstPeriodStartAt: integer expected";
                if (!$util.isInteger(message.qualifyingFirstPeriodCloseAt))
                    return "qualifyingFirstPeriodCloseAt: integer expected";
                if (!$util.isInteger(message.qualifyingSecondPeriodStartAt))
                    return "qualifyingSecondPeriodStartAt: integer expected";
                if (!$util.isInteger(message.qualifyingSecondPeriodCloseAt))
                    return "qualifyingSecondPeriodCloseAt: integer expected";
                if (!$util.isInteger(message.regionFinalStartAt))
                    return "regionFinalStartAt: integer expected";
                if (!$util.isInteger(message.regionFinalCloseAt))
                    return "regionFinalCloseAt: integer expected";
                if (!$util.isInteger(message.koshienStartAt))
                    return "koshienStartAt: integer expected";
                if (!$util.isInteger(message.koshienCloseAt))
                    return "koshienCloseAt: integer expected";
                if (!$util.isInteger(message.lengthOfPeriod))
                    return "lengthOfPeriod: integer expected";
                if (!$util.isInteger(message.lengthOfInterval))
                    return "lengthOfInterval: integer expected";
                if (!$util.isInteger(message.area))
                    return "area: integer expected";
                if (!$util.isInteger(message.aftereventStartAt))
                    return "aftereventStartAt: integer expected";
                if (!$util.isInteger(message.aftereventEndAt))
                    return "aftereventEndAt: integer expected";
                return null;
            };

            /**
             * Creates a GhostKoshienSchedule message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof wm.protobuf.GhostKoshienSchedule
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {wm.protobuf.GhostKoshienSchedule} GhostKoshienSchedule
             */
            GhostKoshienSchedule.fromObject = function fromObject(object) {
                if (object instanceof $root.wm.protobuf.GhostKoshienSchedule)
                    return object;
                let message = new $root.wm.protobuf.GhostKoshienSchedule();
                if (object.koshienId != null)
                    message.koshienId = object.koshienId >>> 0;
                if (object.qualifyingFirstPeriodStartAt != null)
                    message.qualifyingFirstPeriodStartAt = object.qualifyingFirstPeriodStartAt >>> 0;
                if (object.qualifyingFirstPeriodCloseAt != null)
                    message.qualifyingFirstPeriodCloseAt = object.qualifyingFirstPeriodCloseAt >>> 0;
                if (object.qualifyingSecondPeriodStartAt != null)
                    message.qualifyingSecondPeriodStartAt = object.qualifyingSecondPeriodStartAt >>> 0;
                if (object.qualifyingSecondPeriodCloseAt != null)
                    message.qualifyingSecondPeriodCloseAt = object.qualifyingSecondPeriodCloseAt >>> 0;
                if (object.regionFinalStartAt != null)
                    message.regionFinalStartAt = object.regionFinalStartAt >>> 0;
                if (object.regionFinalCloseAt != null)
                    message.regionFinalCloseAt = object.regionFinalCloseAt >>> 0;
                if (object.koshienStartAt != null)
                    message.koshienStartAt = object.koshienStartAt >>> 0;
                if (object.koshienCloseAt != null)
                    message.koshienCloseAt = object.koshienCloseAt >>> 0;
                if (object.lengthOfPeriod != null)
                    message.lengthOfPeriod = object.lengthOfPeriod >>> 0;
                if (object.lengthOfInterval != null)
                    message.lengthOfInterval = object.lengthOfInterval >>> 0;
                if (object.area != null)
                    message.area = object.area >>> 0;
                if (object.aftereventStartAt != null)
                    message.aftereventStartAt = object.aftereventStartAt >>> 0;
                if (object.aftereventEndAt != null)
                    message.aftereventEndAt = object.aftereventEndAt >>> 0;
                return message;
            };

            /**
             * Creates a plain object from a GhostKoshienSchedule message. Also converts values to other types if specified.
             * @function toObject
             * @memberof wm.protobuf.GhostKoshienSchedule
             * @static
             * @param {wm.protobuf.GhostKoshienSchedule} message GhostKoshienSchedule
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            GhostKoshienSchedule.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.koshienId = 0;
                    object.qualifyingFirstPeriodStartAt = 0;
                    object.qualifyingFirstPeriodCloseAt = 0;
                    object.qualifyingSecondPeriodStartAt = 0;
                    object.qualifyingSecondPeriodCloseAt = 0;
                    object.regionFinalStartAt = 0;
                    object.regionFinalCloseAt = 0;
                    object.koshienStartAt = 0;
                    object.koshienCloseAt = 0;
                    object.lengthOfPeriod = 0;
                    object.lengthOfInterval = 0;
                    object.area = 0;
                    object.aftereventStartAt = 0;
                    object.aftereventEndAt = 0;
                }
                if (message.koshienId != null && message.hasOwnProperty("koshienId"))
                    object.koshienId = message.koshienId;
                if (message.qualifyingFirstPeriodStartAt != null && message.hasOwnProperty("qualifyingFirstPeriodStartAt"))
                    object.qualifyingFirstPeriodStartAt = message.qualifyingFirstPeriodStartAt;
                if (message.qualifyingFirstPeriodCloseAt != null && message.hasOwnProperty("qualifyingFirstPeriodCloseAt"))
                    object.qualifyingFirstPeriodCloseAt = message.qualifyingFirstPeriodCloseAt;
                if (message.qualifyingSecondPeriodStartAt != null && message.hasOwnProperty("qualifyingSecondPeriodStartAt"))
                    object.qualifyingSecondPeriodStartAt = message.qualifyingSecondPeriodStartAt;
                if (message.qualifyingSecondPeriodCloseAt != null && message.hasOwnProperty("qualifyingSecondPeriodCloseAt"))
                    object.qualifyingSecondPeriodCloseAt = message.qualifyingSecondPeriodCloseAt;
                if (message.regionFinalStartAt != null && message.hasOwnProperty("regionFinalStartAt"))
                    object.regionFinalStartAt = message.regionFinalStartAt;
                if (message.regionFinalCloseAt != null && message.hasOwnProperty("regionFinalCloseAt"))
                    object.regionFinalCloseAt = message.regionFinalCloseAt;
                if (message.koshienStartAt != null && message.hasOwnProperty("koshienStartAt"))
                    object.koshienStartAt = message.koshienStartAt;
                if (message.koshienCloseAt != null && message.hasOwnProperty("koshienCloseAt"))
                    object.koshienCloseAt = message.koshienCloseAt;
                if (message.lengthOfPeriod != null && message.hasOwnProperty("lengthOfPeriod"))
                    object.lengthOfPeriod = message.lengthOfPeriod;
                if (message.lengthOfInterval != null && message.hasOwnProperty("lengthOfInterval"))
                    object.lengthOfInterval = message.lengthOfInterval;
                if (message.area != null && message.hasOwnProperty("area"))
                    object.area = message.area;
                if (message.aftereventStartAt != null && message.hasOwnProperty("aftereventStartAt"))
                    object.aftereventStartAt = message.aftereventStartAt;
                if (message.aftereventEndAt != null && message.hasOwnProperty("aftereventEndAt"))
                    object.aftereventEndAt = message.aftereventEndAt;
                return object;
            };

            /**
             * Converts this GhostKoshienSchedule to JSON.
             * @function toJSON
             * @memberof wm.protobuf.GhostKoshienSchedule
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            GhostKoshienSchedule.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for GhostKoshienSchedule
             * @function getTypeUrl
             * @memberof wm.protobuf.GhostKoshienSchedule
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            GhostKoshienSchedule.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/wm.protobuf.GhostKoshienSchedule";
            };

            return GhostKoshienSchedule;
        })();

        protobuf.GhostKoshienPrize = (function() {

            /**
             * Properties of a GhostKoshienPrize.
             * @memberof wm.protobuf
             * @interface IGhostKoshienPrize
             * @property {wm.protobuf.ICarItem} firstParticipationPrize GhostKoshienPrize firstParticipationPrize
             * @property {wm.protobuf.ICarItem} secondParticipationPrize GhostKoshienPrize secondParticipationPrize
             * @property {wm.protobuf.ICarItem} regionParticipationPrize GhostKoshienPrize regionParticipationPrize
             * @property {wm.protobuf.ICarItem} participationPrize GhostKoshienPrize participationPrize
             * @property {wm.protobuf.ICarItem} firstMvpPrize GhostKoshienPrize firstMvpPrize
             * @property {wm.protobuf.ICarItem} secondMvpPrize GhostKoshienPrize secondMvpPrize
             * @property {wm.protobuf.ICarItem} regionMvpPrize GhostKoshienPrize regionMvpPrize
             * @property {wm.protobuf.ICarItem} mvpPrize GhostKoshienPrize mvpPrize
             * @property {wm.protobuf.ICarItem} winnerPrize GhostKoshienPrize winnerPrize
             * @property {wm.protobuf.ICarItem} secondPlacePrize GhostKoshienPrize secondPlacePrize
             * @property {wm.protobuf.ICarItem} aftereventRivalMarker GhostKoshienPrize aftereventRivalMarker
             * @property {string} aftereventSpecialTitle GhostKoshienPrize aftereventSpecialTitle
             */

            /**
             * Constructs a new GhostKoshienPrize.
             * @memberof wm.protobuf
             * @classdesc Represents a GhostKoshienPrize.
             * @implements IGhostKoshienPrize
             * @constructor
             * @param {wm.protobuf.IGhostKoshienPrize=} [properties] Properties to set
             */
            function GhostKoshienPrize(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * GhostKoshienPrize firstParticipationPrize.
             * @member {wm.protobuf.ICarItem} firstParticipationPrize
             * @memberof wm.protobuf.GhostKoshienPrize
             * @instance
             */
            GhostKoshienPrize.prototype.firstParticipationPrize = null;

            /**
             * GhostKoshienPrize secondParticipationPrize.
             * @member {wm.protobuf.ICarItem} secondParticipationPrize
             * @memberof wm.protobuf.GhostKoshienPrize
             * @instance
             */
            GhostKoshienPrize.prototype.secondParticipationPrize = null;

            /**
             * GhostKoshienPrize regionParticipationPrize.
             * @member {wm.protobuf.ICarItem} regionParticipationPrize
             * @memberof wm.protobuf.GhostKoshienPrize
             * @instance
             */
            GhostKoshienPrize.prototype.regionParticipationPrize = null;

            /**
             * GhostKoshienPrize participationPrize.
             * @member {wm.protobuf.ICarItem} participationPrize
             * @memberof wm.protobuf.GhostKoshienPrize
             * @instance
             */
            GhostKoshienPrize.prototype.participationPrize = null;

            /**
             * GhostKoshienPrize firstMvpPrize.
             * @member {wm.protobuf.ICarItem} firstMvpPrize
             * @memberof wm.protobuf.GhostKoshienPrize
             * @instance
             */
            GhostKoshienPrize.prototype.firstMvpPrize = null;

            /**
             * GhostKoshienPrize secondMvpPrize.
             * @member {wm.protobuf.ICarItem} secondMvpPrize
             * @memberof wm.protobuf.GhostKoshienPrize
             * @instance
             */
            GhostKoshienPrize.prototype.secondMvpPrize = null;

            /**
             * GhostKoshienPrize regionMvpPrize.
             * @member {wm.protobuf.ICarItem} regionMvpPrize
             * @memberof wm.protobuf.GhostKoshienPrize
             * @instance
             */
            GhostKoshienPrize.prototype.regionMvpPrize = null;

            /**
             * GhostKoshienPrize mvpPrize.
             * @member {wm.protobuf.ICarItem} mvpPrize
             * @memberof wm.protobuf.GhostKoshienPrize
             * @instance
             */
            GhostKoshienPrize.prototype.mvpPrize = null;

            /**
             * GhostKoshienPrize winnerPrize.
             * @member {wm.protobuf.ICarItem} winnerPrize
             * @memberof wm.protobuf.GhostKoshienPrize
             * @instance
             */
            GhostKoshienPrize.prototype.winnerPrize = null;

            /**
             * GhostKoshienPrize secondPlacePrize.
             * @member {wm.protobuf.ICarItem} secondPlacePrize
             * @memberof wm.protobuf.GhostKoshienPrize
             * @instance
             */
            GhostKoshienPrize.prototype.secondPlacePrize = null;

            /**
             * GhostKoshienPrize aftereventRivalMarker.
             * @member {wm.protobuf.ICarItem} aftereventRivalMarker
             * @memberof wm.protobuf.GhostKoshienPrize
             * @instance
             */
            GhostKoshienPrize.prototype.aftereventRivalMarker = null;

            /**
             * GhostKoshienPrize aftereventSpecialTitle.
             * @member {string} aftereventSpecialTitle
             * @memberof wm.protobuf.GhostKoshienPrize
             * @instance
             */
            GhostKoshienPrize.prototype.aftereventSpecialTitle = "";

            /**
             * Creates a new GhostKoshienPrize instance using the specified properties.
             * @function create
             * @memberof wm.protobuf.GhostKoshienPrize
             * @static
             * @param {wm.protobuf.IGhostKoshienPrize=} [properties] Properties to set
             * @returns {wm.protobuf.GhostKoshienPrize} GhostKoshienPrize instance
             */
            GhostKoshienPrize.create = function create(properties) {
                return new GhostKoshienPrize(properties);
            };

            /**
             * Encodes the specified GhostKoshienPrize message. Does not implicitly {@link wm.protobuf.GhostKoshienPrize.verify|verify} messages.
             * @function encode
             * @memberof wm.protobuf.GhostKoshienPrize
             * @static
             * @param {wm.protobuf.IGhostKoshienPrize} message GhostKoshienPrize message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GhostKoshienPrize.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                $root.wm.protobuf.CarItem.encode(message.firstParticipationPrize, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                $root.wm.protobuf.CarItem.encode(message.secondParticipationPrize, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                $root.wm.protobuf.CarItem.encode(message.regionParticipationPrize, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                $root.wm.protobuf.CarItem.encode(message.participationPrize, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                $root.wm.protobuf.CarItem.encode(message.firstMvpPrize, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                $root.wm.protobuf.CarItem.encode(message.secondMvpPrize, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                $root.wm.protobuf.CarItem.encode(message.regionMvpPrize, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                $root.wm.protobuf.CarItem.encode(message.mvpPrize, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                $root.wm.protobuf.CarItem.encode(message.winnerPrize, writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();
                $root.wm.protobuf.CarItem.encode(message.secondPlacePrize, writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();
                $root.wm.protobuf.CarItem.encode(message.aftereventRivalMarker, writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();
                writer.uint32(/* id 12, wireType 2 =*/98).string(message.aftereventSpecialTitle);
                return writer;
            };

            /**
             * Encodes the specified GhostKoshienPrize message, length delimited. Does not implicitly {@link wm.protobuf.GhostKoshienPrize.verify|verify} messages.
             * @function encodeDelimited
             * @memberof wm.protobuf.GhostKoshienPrize
             * @static
             * @param {wm.protobuf.IGhostKoshienPrize} message GhostKoshienPrize message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GhostKoshienPrize.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a GhostKoshienPrize message from the specified reader or buffer.
             * @function decode
             * @memberof wm.protobuf.GhostKoshienPrize
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {wm.protobuf.GhostKoshienPrize} GhostKoshienPrize
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GhostKoshienPrize.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.wm.protobuf.GhostKoshienPrize();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.firstParticipationPrize = $root.wm.protobuf.CarItem.decode(reader, reader.uint32());
                            break;
                        }
                    case 2: {
                            message.secondParticipationPrize = $root.wm.protobuf.CarItem.decode(reader, reader.uint32());
                            break;
                        }
                    case 3: {
                            message.regionParticipationPrize = $root.wm.protobuf.CarItem.decode(reader, reader.uint32());
                            break;
                        }
                    case 4: {
                            message.participationPrize = $root.wm.protobuf.CarItem.decode(reader, reader.uint32());
                            break;
                        }
                    case 5: {
                            message.firstMvpPrize = $root.wm.protobuf.CarItem.decode(reader, reader.uint32());
                            break;
                        }
                    case 6: {
                            message.secondMvpPrize = $root.wm.protobuf.CarItem.decode(reader, reader.uint32());
                            break;
                        }
                    case 7: {
                            message.regionMvpPrize = $root.wm.protobuf.CarItem.decode(reader, reader.uint32());
                            break;
                        }
                    case 8: {
                            message.mvpPrize = $root.wm.protobuf.CarItem.decode(reader, reader.uint32());
                            break;
                        }
                    case 9: {
                            message.winnerPrize = $root.wm.protobuf.CarItem.decode(reader, reader.uint32());
                            break;
                        }
                    case 10: {
                            message.secondPlacePrize = $root.wm.protobuf.CarItem.decode(reader, reader.uint32());
                            break;
                        }
                    case 11: {
                            message.aftereventRivalMarker = $root.wm.protobuf.CarItem.decode(reader, reader.uint32());
                            break;
                        }
                    case 12: {
                            message.aftereventSpecialTitle = reader.string();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("firstParticipationPrize"))
                    throw $util.ProtocolError("missing required 'firstParticipationPrize'", { instance: message });
                if (!message.hasOwnProperty("secondParticipationPrize"))
                    throw $util.ProtocolError("missing required 'secondParticipationPrize'", { instance: message });
                if (!message.hasOwnProperty("regionParticipationPrize"))
                    throw $util.ProtocolError("missing required 'regionParticipationPrize'", { instance: message });
                if (!message.hasOwnProperty("participationPrize"))
                    throw $util.ProtocolError("missing required 'participationPrize'", { instance: message });
                if (!message.hasOwnProperty("firstMvpPrize"))
                    throw $util.ProtocolError("missing required 'firstMvpPrize'", { instance: message });
                if (!message.hasOwnProperty("secondMvpPrize"))
                    throw $util.ProtocolError("missing required 'secondMvpPrize'", { instance: message });
                if (!message.hasOwnProperty("regionMvpPrize"))
                    throw $util.ProtocolError("missing required 'regionMvpPrize'", { instance: message });
                if (!message.hasOwnProperty("mvpPrize"))
                    throw $util.ProtocolError("missing required 'mvpPrize'", { instance: message });
                if (!message.hasOwnProperty("winnerPrize"))
                    throw $util.ProtocolError("missing required 'winnerPrize'", { instance: message });
                if (!message.hasOwnProperty("secondPlacePrize"))
                    throw $util.ProtocolError("missing required 'secondPlacePrize'", { instance: message });
                if (!message.hasOwnProperty("aftereventRivalMarker"))
                    throw $util.ProtocolError("missing required 'aftereventRivalMarker'", { instance: message });
                if (!message.hasOwnProperty("aftereventSpecialTitle"))
                    throw $util.ProtocolError("missing required 'aftereventSpecialTitle'", { instance: message });
                return message;
            };

            /**
             * Decodes a GhostKoshienPrize message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof wm.protobuf.GhostKoshienPrize
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {wm.protobuf.GhostKoshienPrize} GhostKoshienPrize
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GhostKoshienPrize.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a GhostKoshienPrize message.
             * @function verify
             * @memberof wm.protobuf.GhostKoshienPrize
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            GhostKoshienPrize.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                {
                    let error = $root.wm.protobuf.CarItem.verify(message.firstParticipationPrize);
                    if (error)
                        return "firstParticipationPrize." + error;
                }
                {
                    let error = $root.wm.protobuf.CarItem.verify(message.secondParticipationPrize);
                    if (error)
                        return "secondParticipationPrize." + error;
                }
                {
                    let error = $root.wm.protobuf.CarItem.verify(message.regionParticipationPrize);
                    if (error)
                        return "regionParticipationPrize." + error;
                }
                {
                    let error = $root.wm.protobuf.CarItem.verify(message.participationPrize);
                    if (error)
                        return "participationPrize." + error;
                }
                {
                    let error = $root.wm.protobuf.CarItem.verify(message.firstMvpPrize);
                    if (error)
                        return "firstMvpPrize." + error;
                }
                {
                    let error = $root.wm.protobuf.CarItem.verify(message.secondMvpPrize);
                    if (error)
                        return "secondMvpPrize." + error;
                }
                {
                    let error = $root.wm.protobuf.CarItem.verify(message.regionMvpPrize);
                    if (error)
                        return "regionMvpPrize." + error;
                }
                {
                    let error = $root.wm.protobuf.CarItem.verify(message.mvpPrize);
                    if (error)
                        return "mvpPrize." + error;
                }
                {
                    let error = $root.wm.protobuf.CarItem.verify(message.winnerPrize);
                    if (error)
                        return "winnerPrize." + error;
                }
                {
                    let error = $root.wm.protobuf.CarItem.verify(message.secondPlacePrize);
                    if (error)
                        return "secondPlacePrize." + error;
                }
                {
                    let error = $root.wm.protobuf.CarItem.verify(message.aftereventRivalMarker);
                    if (error)
                        return "aftereventRivalMarker." + error;
                }
                if (!$util.isString(message.aftereventSpecialTitle))
                    return "aftereventSpecialTitle: string expected";
                return null;
            };

            /**
             * Creates a GhostKoshienPrize message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof wm.protobuf.GhostKoshienPrize
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {wm.protobuf.GhostKoshienPrize} GhostKoshienPrize
             */
            GhostKoshienPrize.fromObject = function fromObject(object) {
                if (object instanceof $root.wm.protobuf.GhostKoshienPrize)
                    return object;
                let message = new $root.wm.protobuf.GhostKoshienPrize();
                if (object.firstParticipationPrize != null) {
                    if (typeof object.firstParticipationPrize !== "object")
                        throw TypeError(".wm.protobuf.GhostKoshienPrize.firstParticipationPrize: object expected");
                    message.firstParticipationPrize = $root.wm.protobuf.CarItem.fromObject(object.firstParticipationPrize);
                }
                if (object.secondParticipationPrize != null) {
                    if (typeof object.secondParticipationPrize !== "object")
                        throw TypeError(".wm.protobuf.GhostKoshienPrize.secondParticipationPrize: object expected");
                    message.secondParticipationPrize = $root.wm.protobuf.CarItem.fromObject(object.secondParticipationPrize);
                }
                if (object.regionParticipationPrize != null) {
                    if (typeof object.regionParticipationPrize !== "object")
                        throw TypeError(".wm.protobuf.GhostKoshienPrize.regionParticipationPrize: object expected");
                    message.regionParticipationPrize = $root.wm.protobuf.CarItem.fromObject(object.regionParticipationPrize);
                }
                if (object.participationPrize != null) {
                    if (typeof object.participationPrize !== "object")
                        throw TypeError(".wm.protobuf.GhostKoshienPrize.participationPrize: object expected");
                    message.participationPrize = $root.wm.protobuf.CarItem.fromObject(object.participationPrize);
                }
                if (object.firstMvpPrize != null) {
                    if (typeof object.firstMvpPrize !== "object")
                        throw TypeError(".wm.protobuf.GhostKoshienPrize.firstMvpPrize: object expected");
                    message.firstMvpPrize = $root.wm.protobuf.CarItem.fromObject(object.firstMvpPrize);
                }
                if (object.secondMvpPrize != null) {
                    if (typeof object.secondMvpPrize !== "object")
                        throw TypeError(".wm.protobuf.GhostKoshienPrize.secondMvpPrize: object expected");
                    message.secondMvpPrize = $root.wm.protobuf.CarItem.fromObject(object.secondMvpPrize);
                }
                if (object.regionMvpPrize != null) {
                    if (typeof object.regionMvpPrize !== "object")
                        throw TypeError(".wm.protobuf.GhostKoshienPrize.regionMvpPrize: object expected");
                    message.regionMvpPrize = $root.wm.protobuf.CarItem.fromObject(object.regionMvpPrize);
                }
                if (object.mvpPrize != null) {
                    if (typeof object.mvpPrize !== "object")
                        throw TypeError(".wm.protobuf.GhostKoshienPrize.mvpPrize: object expected");
                    message.mvpPrize = $root.wm.protobuf.CarItem.fromObject(object.mvpPrize);
                }
                if (object.winnerPrize != null) {
                    if (typeof object.winnerPrize !== "object")
                        throw TypeError(".wm.protobuf.GhostKoshienPrize.winnerPrize: object expected");
                    message.winnerPrize = $root.wm.protobuf.CarItem.fromObject(object.winnerPrize);
                }
                if (object.secondPlacePrize != null) {
                    if (typeof object.secondPlacePrize !== "object")
                        throw TypeError(".wm.protobuf.GhostKoshienPrize.secondPlacePrize: object expected");
                    message.secondPlacePrize = $root.wm.protobuf.CarItem.fromObject(object.secondPlacePrize);
                }
                if (object.aftereventRivalMarker != null) {
                    if (typeof object.aftereventRivalMarker !== "object")
                        throw TypeError(".wm.protobuf.GhostKoshienPrize.aftereventRivalMarker: object expected");
                    message.aftereventRivalMarker = $root.wm.protobuf.CarItem.fromObject(object.aftereventRivalMarker);
                }
                if (object.aftereventSpecialTitle != null)
                    message.aftereventSpecialTitle = String(object.aftereventSpecialTitle);
                return message;
            };

            /**
             * Creates a plain object from a GhostKoshienPrize message. Also converts values to other types if specified.
             * @function toObject
             * @memberof wm.protobuf.GhostKoshienPrize
             * @static
             * @param {wm.protobuf.GhostKoshienPrize} message GhostKoshienPrize
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            GhostKoshienPrize.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.firstParticipationPrize = null;
                    object.secondParticipationPrize = null;
                    object.regionParticipationPrize = null;
                    object.participationPrize = null;
                    object.firstMvpPrize = null;
                    object.secondMvpPrize = null;
                    object.regionMvpPrize = null;
                    object.mvpPrize = null;
                    object.winnerPrize = null;
                    object.secondPlacePrize = null;
                    object.aftereventRivalMarker = null;
                    object.aftereventSpecialTitle = "";
                }
                if (message.firstParticipationPrize != null && message.hasOwnProperty("firstParticipationPrize"))
                    object.firstParticipationPrize = $root.wm.protobuf.CarItem.toObject(message.firstParticipationPrize, options);
                if (message.secondParticipationPrize != null && message.hasOwnProperty("secondParticipationPrize"))
                    object.secondParticipationPrize = $root.wm.protobuf.CarItem.toObject(message.secondParticipationPrize, options);
                if (message.regionParticipationPrize != null && message.hasOwnProperty("regionParticipationPrize"))
                    object.regionParticipationPrize = $root.wm.protobuf.CarItem.toObject(message.regionParticipationPrize, options);
                if (message.participationPrize != null && message.hasOwnProperty("participationPrize"))
                    object.participationPrize = $root.wm.protobuf.CarItem.toObject(message.participationPrize, options);
                if (message.firstMvpPrize != null && message.hasOwnProperty("firstMvpPrize"))
                    object.firstMvpPrize = $root.wm.protobuf.CarItem.toObject(message.firstMvpPrize, options);
                if (message.secondMvpPrize != null && message.hasOwnProperty("secondMvpPrize"))
                    object.secondMvpPrize = $root.wm.protobuf.CarItem.toObject(message.secondMvpPrize, options);
                if (message.regionMvpPrize != null && message.hasOwnProperty("regionMvpPrize"))
                    object.regionMvpPrize = $root.wm.protobuf.CarItem.toObject(message.regionMvpPrize, options);
                if (message.mvpPrize != null && message.hasOwnProperty("mvpPrize"))
                    object.mvpPrize = $root.wm.protobuf.CarItem.toObject(message.mvpPrize, options);
                if (message.winnerPrize != null && message.hasOwnProperty("winnerPrize"))
                    object.winnerPrize = $root.wm.protobuf.CarItem.toObject(message.winnerPrize, options);
                if (message.secondPlacePrize != null && message.hasOwnProperty("secondPlacePrize"))
                    object.secondPlacePrize = $root.wm.protobuf.CarItem.toObject(message.secondPlacePrize, options);
                if (message.aftereventRivalMarker != null && message.hasOwnProperty("aftereventRivalMarker"))
                    object.aftereventRivalMarker = $root.wm.protobuf.CarItem.toObject(message.aftereventRivalMarker, options);
                if (message.aftereventSpecialTitle != null && message.hasOwnProperty("aftereventSpecialTitle"))
                    object.aftereventSpecialTitle = message.aftereventSpecialTitle;
                return object;
            };

            /**
             * Converts this GhostKoshienPrize to JSON.
             * @function toJSON
             * @memberof wm.protobuf.GhostKoshienPrize
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            GhostKoshienPrize.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for GhostKoshienPrize
             * @function getTypeUrl
             * @memberof wm.protobuf.GhostKoshienPrize
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            GhostKoshienPrize.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/wm.protobuf.GhostKoshienPrize";
            };

            return GhostKoshienPrize;
        })();

        protobuf.GhostKoshienWonShop = (function() {

            /**
             * Properties of a GhostKoshienWonShop.
             * @memberof wm.protobuf
             * @interface IGhostKoshienWonShop
             * @property {number} koshienId GhostKoshienWonShop koshienId
             * @property {string} shopName GhostKoshienWonShop shopName
             * @property {number} rank GhostKoshienWonShop rank
             */

            /**
             * Constructs a new GhostKoshienWonShop.
             * @memberof wm.protobuf
             * @classdesc Represents a GhostKoshienWonShop.
             * @implements IGhostKoshienWonShop
             * @constructor
             * @param {wm.protobuf.IGhostKoshienWonShop=} [properties] Properties to set
             */
            function GhostKoshienWonShop(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * GhostKoshienWonShop koshienId.
             * @member {number} koshienId
             * @memberof wm.protobuf.GhostKoshienWonShop
             * @instance
             */
            GhostKoshienWonShop.prototype.koshienId = 0;

            /**
             * GhostKoshienWonShop shopName.
             * @member {string} shopName
             * @memberof wm.protobuf.GhostKoshienWonShop
             * @instance
             */
            GhostKoshienWonShop.prototype.shopName = "";

            /**
             * GhostKoshienWonShop rank.
             * @member {number} rank
             * @memberof wm.protobuf.GhostKoshienWonShop
             * @instance
             */
            GhostKoshienWonShop.prototype.rank = 0;

            /**
             * Creates a new GhostKoshienWonShop instance using the specified properties.
             * @function create
             * @memberof wm.protobuf.GhostKoshienWonShop
             * @static
             * @param {wm.protobuf.IGhostKoshienWonShop=} [properties] Properties to set
             * @returns {wm.protobuf.GhostKoshienWonShop} GhostKoshienWonShop instance
             */
            GhostKoshienWonShop.create = function create(properties) {
                return new GhostKoshienWonShop(properties);
            };

            /**
             * Encodes the specified GhostKoshienWonShop message. Does not implicitly {@link wm.protobuf.GhostKoshienWonShop.verify|verify} messages.
             * @function encode
             * @memberof wm.protobuf.GhostKoshienWonShop
             * @static
             * @param {wm.protobuf.IGhostKoshienWonShop} message GhostKoshienWonShop message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GhostKoshienWonShop.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.koshienId);
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.shopName);
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.rank);
                return writer;
            };

            /**
             * Encodes the specified GhostKoshienWonShop message, length delimited. Does not implicitly {@link wm.protobuf.GhostKoshienWonShop.verify|verify} messages.
             * @function encodeDelimited
             * @memberof wm.protobuf.GhostKoshienWonShop
             * @static
             * @param {wm.protobuf.IGhostKoshienWonShop} message GhostKoshienWonShop message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GhostKoshienWonShop.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a GhostKoshienWonShop message from the specified reader or buffer.
             * @function decode
             * @memberof wm.protobuf.GhostKoshienWonShop
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {wm.protobuf.GhostKoshienWonShop} GhostKoshienWonShop
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GhostKoshienWonShop.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.wm.protobuf.GhostKoshienWonShop();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.koshienId = reader.uint32();
                            break;
                        }
                    case 2: {
                            message.shopName = reader.string();
                            break;
                        }
                    case 3: {
                            message.rank = reader.uint32();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("koshienId"))
                    throw $util.ProtocolError("missing required 'koshienId'", { instance: message });
                if (!message.hasOwnProperty("shopName"))
                    throw $util.ProtocolError("missing required 'shopName'", { instance: message });
                if (!message.hasOwnProperty("rank"))
                    throw $util.ProtocolError("missing required 'rank'", { instance: message });
                return message;
            };

            /**
             * Decodes a GhostKoshienWonShop message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof wm.protobuf.GhostKoshienWonShop
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {wm.protobuf.GhostKoshienWonShop} GhostKoshienWonShop
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GhostKoshienWonShop.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a GhostKoshienWonShop message.
             * @function verify
             * @memberof wm.protobuf.GhostKoshienWonShop
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            GhostKoshienWonShop.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (!$util.isInteger(message.koshienId))
                    return "koshienId: integer expected";
                if (!$util.isString(message.shopName))
                    return "shopName: string expected";
                if (!$util.isInteger(message.rank))
                    return "rank: integer expected";
                return null;
            };

            /**
             * Creates a GhostKoshienWonShop message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof wm.protobuf.GhostKoshienWonShop
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {wm.protobuf.GhostKoshienWonShop} GhostKoshienWonShop
             */
            GhostKoshienWonShop.fromObject = function fromObject(object) {
                if (object instanceof $root.wm.protobuf.GhostKoshienWonShop)
                    return object;
                let message = new $root.wm.protobuf.GhostKoshienWonShop();
                if (object.koshienId != null)
                    message.koshienId = object.koshienId >>> 0;
                if (object.shopName != null)
                    message.shopName = String(object.shopName);
                if (object.rank != null)
                    message.rank = object.rank >>> 0;
                return message;
            };

            /**
             * Creates a plain object from a GhostKoshienWonShop message. Also converts values to other types if specified.
             * @function toObject
             * @memberof wm.protobuf.GhostKoshienWonShop
             * @static
             * @param {wm.protobuf.GhostKoshienWonShop} message GhostKoshienWonShop
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            GhostKoshienWonShop.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.koshienId = 0;
                    object.shopName = "";
                    object.rank = 0;
                }
                if (message.koshienId != null && message.hasOwnProperty("koshienId"))
                    object.koshienId = message.koshienId;
                if (message.shopName != null && message.hasOwnProperty("shopName"))
                    object.shopName = message.shopName;
                if (message.rank != null && message.hasOwnProperty("rank"))
                    object.rank = message.rank;
                return object;
            };

            /**
             * Converts this GhostKoshienWonShop to JSON.
             * @function toJSON
             * @memberof wm.protobuf.GhostKoshienWonShop
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            GhostKoshienWonShop.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for GhostKoshienWonShop
             * @function getTypeUrl
             * @memberof wm.protobuf.GhostKoshienWonShop
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            GhostKoshienWonShop.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/wm.protobuf.GhostKoshienWonShop";
            };

            return GhostKoshienWonShop;
        })();

        protobuf.GhostKoshienRoundRank = (function() {

            /**
             * Properties of a GhostKoshienRoundRank.
             * @memberof wm.protobuf
             * @interface IGhostKoshienRoundRank
             * @property {number} roundId GhostKoshienRoundRank roundId
             * @property {number} rank GhostKoshienRoundRank rank
             */

            /**
             * Constructs a new GhostKoshienRoundRank.
             * @memberof wm.protobuf
             * @classdesc Represents a GhostKoshienRoundRank.
             * @implements IGhostKoshienRoundRank
             * @constructor
             * @param {wm.protobuf.IGhostKoshienRoundRank=} [properties] Properties to set
             */
            function GhostKoshienRoundRank(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * GhostKoshienRoundRank roundId.
             * @member {number} roundId
             * @memberof wm.protobuf.GhostKoshienRoundRank
             * @instance
             */
            GhostKoshienRoundRank.prototype.roundId = 0;

            /**
             * GhostKoshienRoundRank rank.
             * @member {number} rank
             * @memberof wm.protobuf.GhostKoshienRoundRank
             * @instance
             */
            GhostKoshienRoundRank.prototype.rank = 0;

            /**
             * Creates a new GhostKoshienRoundRank instance using the specified properties.
             * @function create
             * @memberof wm.protobuf.GhostKoshienRoundRank
             * @static
             * @param {wm.protobuf.IGhostKoshienRoundRank=} [properties] Properties to set
             * @returns {wm.protobuf.GhostKoshienRoundRank} GhostKoshienRoundRank instance
             */
            GhostKoshienRoundRank.create = function create(properties) {
                return new GhostKoshienRoundRank(properties);
            };

            /**
             * Encodes the specified GhostKoshienRoundRank message. Does not implicitly {@link wm.protobuf.GhostKoshienRoundRank.verify|verify} messages.
             * @function encode
             * @memberof wm.protobuf.GhostKoshienRoundRank
             * @static
             * @param {wm.protobuf.IGhostKoshienRoundRank} message GhostKoshienRoundRank message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GhostKoshienRoundRank.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.roundId);
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.rank);
                return writer;
            };

            /**
             * Encodes the specified GhostKoshienRoundRank message, length delimited. Does not implicitly {@link wm.protobuf.GhostKoshienRoundRank.verify|verify} messages.
             * @function encodeDelimited
             * @memberof wm.protobuf.GhostKoshienRoundRank
             * @static
             * @param {wm.protobuf.IGhostKoshienRoundRank} message GhostKoshienRoundRank message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GhostKoshienRoundRank.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a GhostKoshienRoundRank message from the specified reader or buffer.
             * @function decode
             * @memberof wm.protobuf.GhostKoshienRoundRank
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {wm.protobuf.GhostKoshienRoundRank} GhostKoshienRoundRank
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GhostKoshienRoundRank.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.wm.protobuf.GhostKoshienRoundRank();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.roundId = reader.uint32();
                            break;
                        }
                    case 2: {
                            message.rank = reader.uint32();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("roundId"))
                    throw $util.ProtocolError("missing required 'roundId'", { instance: message });
                if (!message.hasOwnProperty("rank"))
                    throw $util.ProtocolError("missing required 'rank'", { instance: message });
                return message;
            };

            /**
             * Decodes a GhostKoshienRoundRank message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof wm.protobuf.GhostKoshienRoundRank
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {wm.protobuf.GhostKoshienRoundRank} GhostKoshienRoundRank
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GhostKoshienRoundRank.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a GhostKoshienRoundRank message.
             * @function verify
             * @memberof wm.protobuf.GhostKoshienRoundRank
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            GhostKoshienRoundRank.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (!$util.isInteger(message.roundId))
                    return "roundId: integer expected";
                if (!$util.isInteger(message.rank))
                    return "rank: integer expected";
                return null;
            };

            /**
             * Creates a GhostKoshienRoundRank message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof wm.protobuf.GhostKoshienRoundRank
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {wm.protobuf.GhostKoshienRoundRank} GhostKoshienRoundRank
             */
            GhostKoshienRoundRank.fromObject = function fromObject(object) {
                if (object instanceof $root.wm.protobuf.GhostKoshienRoundRank)
                    return object;
                let message = new $root.wm.protobuf.GhostKoshienRoundRank();
                if (object.roundId != null)
                    message.roundId = object.roundId >>> 0;
                if (object.rank != null)
                    message.rank = object.rank >>> 0;
                return message;
            };

            /**
             * Creates a plain object from a GhostKoshienRoundRank message. Also converts values to other types if specified.
             * @function toObject
             * @memberof wm.protobuf.GhostKoshienRoundRank
             * @static
             * @param {wm.protobuf.GhostKoshienRoundRank} message GhostKoshienRoundRank
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            GhostKoshienRoundRank.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.roundId = 0;
                    object.rank = 0;
                }
                if (message.roundId != null && message.hasOwnProperty("roundId"))
                    object.roundId = message.roundId;
                if (message.rank != null && message.hasOwnProperty("rank"))
                    object.rank = message.rank;
                return object;
            };

            /**
             * Converts this GhostKoshienRoundRank to JSON.
             * @function toJSON
             * @memberof wm.protobuf.GhostKoshienRoundRank
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            GhostKoshienRoundRank.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for GhostKoshienRoundRank
             * @function getTypeUrl
             * @memberof wm.protobuf.GhostKoshienRoundRank
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            GhostKoshienRoundRank.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/wm.protobuf.GhostKoshienRoundRank";
            };

            return GhostKoshienRoundRank;
        })();

        protobuf.GhostCompetitionParameter = (function() {

            /**
             * Properties of a GhostCompetitionParameter.
             * @memberof wm.protobuf
             * @interface IGhostCompetitionParameter
             * @property {Array.<number>|null} [parameters1] GhostCompetitionParameter parameters1
             * @property {boolean} parameters2 GhostCompetitionParameter parameters2
             */

            /**
             * Constructs a new GhostCompetitionParameter.
             * @memberof wm.protobuf
             * @classdesc Represents a GhostCompetitionParameter.
             * @implements IGhostCompetitionParameter
             * @constructor
             * @param {wm.protobuf.IGhostCompetitionParameter=} [properties] Properties to set
             */
            function GhostCompetitionParameter(properties) {
                this.parameters1 = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * GhostCompetitionParameter parameters1.
             * @member {Array.<number>} parameters1
             * @memberof wm.protobuf.GhostCompetitionParameter
             * @instance
             */
            GhostCompetitionParameter.prototype.parameters1 = $util.emptyArray;

            /**
             * GhostCompetitionParameter parameters2.
             * @member {boolean} parameters2
             * @memberof wm.protobuf.GhostCompetitionParameter
             * @instance
             */
            GhostCompetitionParameter.prototype.parameters2 = false;

            /**
             * Creates a new GhostCompetitionParameter instance using the specified properties.
             * @function create
             * @memberof wm.protobuf.GhostCompetitionParameter
             * @static
             * @param {wm.protobuf.IGhostCompetitionParameter=} [properties] Properties to set
             * @returns {wm.protobuf.GhostCompetitionParameter} GhostCompetitionParameter instance
             */
            GhostCompetitionParameter.create = function create(properties) {
                return new GhostCompetitionParameter(properties);
            };

            /**
             * Encodes the specified GhostCompetitionParameter message. Does not implicitly {@link wm.protobuf.GhostCompetitionParameter.verify|verify} messages.
             * @function encode
             * @memberof wm.protobuf.GhostCompetitionParameter
             * @static
             * @param {wm.protobuf.IGhostCompetitionParameter} message GhostCompetitionParameter message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GhostCompetitionParameter.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.parameters1 != null && message.parameters1.length)
                    for (let i = 0; i < message.parameters1.length; ++i)
                        writer.uint32(/* id 1, wireType 5 =*/13).float(message.parameters1[i]);
                writer.uint32(/* id 2, wireType 0 =*/16).bool(message.parameters2);
                return writer;
            };

            /**
             * Encodes the specified GhostCompetitionParameter message, length delimited. Does not implicitly {@link wm.protobuf.GhostCompetitionParameter.verify|verify} messages.
             * @function encodeDelimited
             * @memberof wm.protobuf.GhostCompetitionParameter
             * @static
             * @param {wm.protobuf.IGhostCompetitionParameter} message GhostCompetitionParameter message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GhostCompetitionParameter.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a GhostCompetitionParameter message from the specified reader or buffer.
             * @function decode
             * @memberof wm.protobuf.GhostCompetitionParameter
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {wm.protobuf.GhostCompetitionParameter} GhostCompetitionParameter
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GhostCompetitionParameter.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.wm.protobuf.GhostCompetitionParameter();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            if (!(message.parameters1 && message.parameters1.length))
                                message.parameters1 = [];
                            if ((tag & 7) === 2) {
                                let end2 = reader.uint32() + reader.pos;
                                while (reader.pos < end2)
                                    message.parameters1.push(reader.float());
                            } else
                                message.parameters1.push(reader.float());
                            break;
                        }
                    case 2: {
                            message.parameters2 = reader.bool();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("parameters2"))
                    throw $util.ProtocolError("missing required 'parameters2'", { instance: message });
                return message;
            };

            /**
             * Decodes a GhostCompetitionParameter message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof wm.protobuf.GhostCompetitionParameter
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {wm.protobuf.GhostCompetitionParameter} GhostCompetitionParameter
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GhostCompetitionParameter.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a GhostCompetitionParameter message.
             * @function verify
             * @memberof wm.protobuf.GhostCompetitionParameter
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            GhostCompetitionParameter.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.parameters1 != null && message.hasOwnProperty("parameters1")) {
                    if (!Array.isArray(message.parameters1))
                        return "parameters1: array expected";
                    for (let i = 0; i < message.parameters1.length; ++i)
                        if (typeof message.parameters1[i] !== "number")
                            return "parameters1: number[] expected";
                }
                if (typeof message.parameters2 !== "boolean")
                    return "parameters2: boolean expected";
                return null;
            };

            /**
             * Creates a GhostCompetitionParameter message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof wm.protobuf.GhostCompetitionParameter
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {wm.protobuf.GhostCompetitionParameter} GhostCompetitionParameter
             */
            GhostCompetitionParameter.fromObject = function fromObject(object) {
                if (object instanceof $root.wm.protobuf.GhostCompetitionParameter)
                    return object;
                let message = new $root.wm.protobuf.GhostCompetitionParameter();
                if (object.parameters1) {
                    if (!Array.isArray(object.parameters1))
                        throw TypeError(".wm.protobuf.GhostCompetitionParameter.parameters1: array expected");
                    message.parameters1 = [];
                    for (let i = 0; i < object.parameters1.length; ++i)
                        message.parameters1[i] = Number(object.parameters1[i]);
                }
                if (object.parameters2 != null)
                    message.parameters2 = Boolean(object.parameters2);
                return message;
            };

            /**
             * Creates a plain object from a GhostCompetitionParameter message. Also converts values to other types if specified.
             * @function toObject
             * @memberof wm.protobuf.GhostCompetitionParameter
             * @static
             * @param {wm.protobuf.GhostCompetitionParameter} message GhostCompetitionParameter
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            GhostCompetitionParameter.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.parameters1 = [];
                if (options.defaults)
                    object.parameters2 = false;
                if (message.parameters1 && message.parameters1.length) {
                    object.parameters1 = [];
                    for (let j = 0; j < message.parameters1.length; ++j)
                        object.parameters1[j] = options.json && !isFinite(message.parameters1[j]) ? String(message.parameters1[j]) : message.parameters1[j];
                }
                if (message.parameters2 != null && message.hasOwnProperty("parameters2"))
                    object.parameters2 = message.parameters2;
                return object;
            };

            /**
             * Converts this GhostCompetitionParameter to JSON.
             * @function toJSON
             * @memberof wm.protobuf.GhostCompetitionParameter
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            GhostCompetitionParameter.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for GhostCompetitionParameter
             * @function getTypeUrl
             * @memberof wm.protobuf.GhostCompetitionParameter
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            GhostCompetitionParameter.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/wm.protobuf.GhostCompetitionParameter";
            };

            return GhostCompetitionParameter;
        })();

        protobuf.TransferNotice = (function() {

            /**
             * Properties of a TransferNotice.
             * @memberof wm.protobuf
             * @interface ITransferNotice
             * @property {boolean} needToSeeTransferred TransferNotice needToSeeTransferred
             */

            /**
             * Constructs a new TransferNotice.
             * @memberof wm.protobuf
             * @classdesc Represents a TransferNotice.
             * @implements ITransferNotice
             * @constructor
             * @param {wm.protobuf.ITransferNotice=} [properties] Properties to set
             */
            function TransferNotice(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * TransferNotice needToSeeTransferred.
             * @member {boolean} needToSeeTransferred
             * @memberof wm.protobuf.TransferNotice
             * @instance
             */
            TransferNotice.prototype.needToSeeTransferred = false;

            /**
             * Creates a new TransferNotice instance using the specified properties.
             * @function create
             * @memberof wm.protobuf.TransferNotice
             * @static
             * @param {wm.protobuf.ITransferNotice=} [properties] Properties to set
             * @returns {wm.protobuf.TransferNotice} TransferNotice instance
             */
            TransferNotice.create = function create(properties) {
                return new TransferNotice(properties);
            };

            /**
             * Encodes the specified TransferNotice message. Does not implicitly {@link wm.protobuf.TransferNotice.verify|verify} messages.
             * @function encode
             * @memberof wm.protobuf.TransferNotice
             * @static
             * @param {wm.protobuf.ITransferNotice} message TransferNotice message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            TransferNotice.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                writer.uint32(/* id 1, wireType 0 =*/8).bool(message.needToSeeTransferred);
                return writer;
            };

            /**
             * Encodes the specified TransferNotice message, length delimited. Does not implicitly {@link wm.protobuf.TransferNotice.verify|verify} messages.
             * @function encodeDelimited
             * @memberof wm.protobuf.TransferNotice
             * @static
             * @param {wm.protobuf.ITransferNotice} message TransferNotice message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            TransferNotice.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a TransferNotice message from the specified reader or buffer.
             * @function decode
             * @memberof wm.protobuf.TransferNotice
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {wm.protobuf.TransferNotice} TransferNotice
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            TransferNotice.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.wm.protobuf.TransferNotice();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.needToSeeTransferred = reader.bool();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("needToSeeTransferred"))
                    throw $util.ProtocolError("missing required 'needToSeeTransferred'", { instance: message });
                return message;
            };

            /**
             * Decodes a TransferNotice message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof wm.protobuf.TransferNotice
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {wm.protobuf.TransferNotice} TransferNotice
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            TransferNotice.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a TransferNotice message.
             * @function verify
             * @memberof wm.protobuf.TransferNotice
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            TransferNotice.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (typeof message.needToSeeTransferred !== "boolean")
                    return "needToSeeTransferred: boolean expected";
                return null;
            };

            /**
             * Creates a TransferNotice message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof wm.protobuf.TransferNotice
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {wm.protobuf.TransferNotice} TransferNotice
             */
            TransferNotice.fromObject = function fromObject(object) {
                if (object instanceof $root.wm.protobuf.TransferNotice)
                    return object;
                let message = new $root.wm.protobuf.TransferNotice();
                if (object.needToSeeTransferred != null)
                    message.needToSeeTransferred = Boolean(object.needToSeeTransferred);
                return message;
            };

            /**
             * Creates a plain object from a TransferNotice message. Also converts values to other types if specified.
             * @function toObject
             * @memberof wm.protobuf.TransferNotice
             * @static
             * @param {wm.protobuf.TransferNotice} message TransferNotice
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            TransferNotice.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults)
                    object.needToSeeTransferred = false;
                if (message.needToSeeTransferred != null && message.hasOwnProperty("needToSeeTransferred"))
                    object.needToSeeTransferred = message.needToSeeTransferred;
                return object;
            };

            /**
             * Converts this TransferNotice to JSON.
             * @function toJSON
             * @memberof wm.protobuf.TransferNotice
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            TransferNotice.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for TransferNotice
             * @function getTypeUrl
             * @memberof wm.protobuf.TransferNotice
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            TransferNotice.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/wm.protobuf.TransferNotice";
            };

            return TransferNotice;
        })();

        protobuf.GameFeatureVersion = (function() {

            /**
             * Properties of a GameFeatureVersion.
             * @memberof wm.protobuf
             * @interface IGameFeatureVersion
             * @property {number} version GameFeatureVersion version
             * @property {number} year GameFeatureVersion year
             * @property {number} month GameFeatureVersion month
             * @property {number} pluses GameFeatureVersion pluses
             * @property {number} releaseAt GameFeatureVersion releaseAt
             */

            /**
             * Constructs a new GameFeatureVersion.
             * @memberof wm.protobuf
             * @classdesc Represents a GameFeatureVersion.
             * @implements IGameFeatureVersion
             * @constructor
             * @param {wm.protobuf.IGameFeatureVersion=} [properties] Properties to set
             */
            function GameFeatureVersion(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * GameFeatureVersion version.
             * @member {number} version
             * @memberof wm.protobuf.GameFeatureVersion
             * @instance
             */
            GameFeatureVersion.prototype.version = 0;

            /**
             * GameFeatureVersion year.
             * @member {number} year
             * @memberof wm.protobuf.GameFeatureVersion
             * @instance
             */
            GameFeatureVersion.prototype.year = 0;

            /**
             * GameFeatureVersion month.
             * @member {number} month
             * @memberof wm.protobuf.GameFeatureVersion
             * @instance
             */
            GameFeatureVersion.prototype.month = 0;

            /**
             * GameFeatureVersion pluses.
             * @member {number} pluses
             * @memberof wm.protobuf.GameFeatureVersion
             * @instance
             */
            GameFeatureVersion.prototype.pluses = 0;

            /**
             * GameFeatureVersion releaseAt.
             * @member {number} releaseAt
             * @memberof wm.protobuf.GameFeatureVersion
             * @instance
             */
            GameFeatureVersion.prototype.releaseAt = 0;

            /**
             * Creates a new GameFeatureVersion instance using the specified properties.
             * @function create
             * @memberof wm.protobuf.GameFeatureVersion
             * @static
             * @param {wm.protobuf.IGameFeatureVersion=} [properties] Properties to set
             * @returns {wm.protobuf.GameFeatureVersion} GameFeatureVersion instance
             */
            GameFeatureVersion.create = function create(properties) {
                return new GameFeatureVersion(properties);
            };

            /**
             * Encodes the specified GameFeatureVersion message. Does not implicitly {@link wm.protobuf.GameFeatureVersion.verify|verify} messages.
             * @function encode
             * @memberof wm.protobuf.GameFeatureVersion
             * @static
             * @param {wm.protobuf.IGameFeatureVersion} message GameFeatureVersion message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GameFeatureVersion.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.version);
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.year);
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.month);
                writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.pluses);
                writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.releaseAt);
                return writer;
            };

            /**
             * Encodes the specified GameFeatureVersion message, length delimited. Does not implicitly {@link wm.protobuf.GameFeatureVersion.verify|verify} messages.
             * @function encodeDelimited
             * @memberof wm.protobuf.GameFeatureVersion
             * @static
             * @param {wm.protobuf.IGameFeatureVersion} message GameFeatureVersion message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GameFeatureVersion.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a GameFeatureVersion message from the specified reader or buffer.
             * @function decode
             * @memberof wm.protobuf.GameFeatureVersion
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {wm.protobuf.GameFeatureVersion} GameFeatureVersion
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GameFeatureVersion.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.wm.protobuf.GameFeatureVersion();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.version = reader.uint32();
                            break;
                        }
                    case 2: {
                            message.year = reader.uint32();
                            break;
                        }
                    case 3: {
                            message.month = reader.uint32();
                            break;
                        }
                    case 4: {
                            message.pluses = reader.uint32();
                            break;
                        }
                    case 5: {
                            message.releaseAt = reader.uint32();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("version"))
                    throw $util.ProtocolError("missing required 'version'", { instance: message });
                if (!message.hasOwnProperty("year"))
                    throw $util.ProtocolError("missing required 'year'", { instance: message });
                if (!message.hasOwnProperty("month"))
                    throw $util.ProtocolError("missing required 'month'", { instance: message });
                if (!message.hasOwnProperty("pluses"))
                    throw $util.ProtocolError("missing required 'pluses'", { instance: message });
                if (!message.hasOwnProperty("releaseAt"))
                    throw $util.ProtocolError("missing required 'releaseAt'", { instance: message });
                return message;
            };

            /**
             * Decodes a GameFeatureVersion message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof wm.protobuf.GameFeatureVersion
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {wm.protobuf.GameFeatureVersion} GameFeatureVersion
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GameFeatureVersion.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a GameFeatureVersion message.
             * @function verify
             * @memberof wm.protobuf.GameFeatureVersion
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            GameFeatureVersion.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (!$util.isInteger(message.version))
                    return "version: integer expected";
                if (!$util.isInteger(message.year))
                    return "year: integer expected";
                if (!$util.isInteger(message.month))
                    return "month: integer expected";
                if (!$util.isInteger(message.pluses))
                    return "pluses: integer expected";
                if (!$util.isInteger(message.releaseAt))
                    return "releaseAt: integer expected";
                return null;
            };

            /**
             * Creates a GameFeatureVersion message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof wm.protobuf.GameFeatureVersion
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {wm.protobuf.GameFeatureVersion} GameFeatureVersion
             */
            GameFeatureVersion.fromObject = function fromObject(object) {
                if (object instanceof $root.wm.protobuf.GameFeatureVersion)
                    return object;
                let message = new $root.wm.protobuf.GameFeatureVersion();
                if (object.version != null)
                    message.version = object.version >>> 0;
                if (object.year != null)
                    message.year = object.year >>> 0;
                if (object.month != null)
                    message.month = object.month >>> 0;
                if (object.pluses != null)
                    message.pluses = object.pluses >>> 0;
                if (object.releaseAt != null)
                    message.releaseAt = object.releaseAt >>> 0;
                return message;
            };

            /**
             * Creates a plain object from a GameFeatureVersion message. Also converts values to other types if specified.
             * @function toObject
             * @memberof wm.protobuf.GameFeatureVersion
             * @static
             * @param {wm.protobuf.GameFeatureVersion} message GameFeatureVersion
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            GameFeatureVersion.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.version = 0;
                    object.year = 0;
                    object.month = 0;
                    object.pluses = 0;
                    object.releaseAt = 0;
                }
                if (message.version != null && message.hasOwnProperty("version"))
                    object.version = message.version;
                if (message.year != null && message.hasOwnProperty("year"))
                    object.year = message.year;
                if (message.month != null && message.hasOwnProperty("month"))
                    object.month = message.month;
                if (message.pluses != null && message.hasOwnProperty("pluses"))
                    object.pluses = message.pluses;
                if (message.releaseAt != null && message.hasOwnProperty("releaseAt"))
                    object.releaseAt = message.releaseAt;
                return object;
            };

            /**
             * Converts this GameFeatureVersion to JSON.
             * @function toJSON
             * @memberof wm.protobuf.GameFeatureVersion
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            GameFeatureVersion.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for GameFeatureVersion
             * @function getTypeUrl
             * @memberof wm.protobuf.GameFeatureVersion
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            GameFeatureVersion.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/wm.protobuf.GameFeatureVersion";
            };

            return GameFeatureVersion;
        })();

        protobuf.ScratchSheet = (function() {

            /**
             * Properties of a ScratchSheet.
             * @memberof wm.protobuf
             * @interface IScratchSheet
             * @property {Array.<wm.protobuf.ScratchSheet.IScratchSquare>|null} [squares] ScratchSheet squares
             */

            /**
             * Constructs a new ScratchSheet.
             * @memberof wm.protobuf
             * @classdesc Represents a ScratchSheet.
             * @implements IScratchSheet
             * @constructor
             * @param {wm.protobuf.IScratchSheet=} [properties] Properties to set
             */
            function ScratchSheet(properties) {
                this.squares = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * ScratchSheet squares.
             * @member {Array.<wm.protobuf.ScratchSheet.IScratchSquare>} squares
             * @memberof wm.protobuf.ScratchSheet
             * @instance
             */
            ScratchSheet.prototype.squares = $util.emptyArray;

            /**
             * Creates a new ScratchSheet instance using the specified properties.
             * @function create
             * @memberof wm.protobuf.ScratchSheet
             * @static
             * @param {wm.protobuf.IScratchSheet=} [properties] Properties to set
             * @returns {wm.protobuf.ScratchSheet} ScratchSheet instance
             */
            ScratchSheet.create = function create(properties) {
                return new ScratchSheet(properties);
            };

            /**
             * Encodes the specified ScratchSheet message. Does not implicitly {@link wm.protobuf.ScratchSheet.verify|verify} messages.
             * @function encode
             * @memberof wm.protobuf.ScratchSheet
             * @static
             * @param {wm.protobuf.IScratchSheet} message ScratchSheet message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ScratchSheet.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.squares != null && message.squares.length)
                    for (let i = 0; i < message.squares.length; ++i)
                        $root.wm.protobuf.ScratchSheet.ScratchSquare.encode(message.squares[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified ScratchSheet message, length delimited. Does not implicitly {@link wm.protobuf.ScratchSheet.verify|verify} messages.
             * @function encodeDelimited
             * @memberof wm.protobuf.ScratchSheet
             * @static
             * @param {wm.protobuf.IScratchSheet} message ScratchSheet message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ScratchSheet.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a ScratchSheet message from the specified reader or buffer.
             * @function decode
             * @memberof wm.protobuf.ScratchSheet
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {wm.protobuf.ScratchSheet} ScratchSheet
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ScratchSheet.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.wm.protobuf.ScratchSheet();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            if (!(message.squares && message.squares.length))
                                message.squares = [];
                            message.squares.push($root.wm.protobuf.ScratchSheet.ScratchSquare.decode(reader, reader.uint32()));
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a ScratchSheet message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof wm.protobuf.ScratchSheet
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {wm.protobuf.ScratchSheet} ScratchSheet
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ScratchSheet.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a ScratchSheet message.
             * @function verify
             * @memberof wm.protobuf.ScratchSheet
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ScratchSheet.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.squares != null && message.hasOwnProperty("squares")) {
                    if (!Array.isArray(message.squares))
                        return "squares: array expected";
                    for (let i = 0; i < message.squares.length; ++i) {
                        let error = $root.wm.protobuf.ScratchSheet.ScratchSquare.verify(message.squares[i]);
                        if (error)
                            return "squares." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a ScratchSheet message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof wm.protobuf.ScratchSheet
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {wm.protobuf.ScratchSheet} ScratchSheet
             */
            ScratchSheet.fromObject = function fromObject(object) {
                if (object instanceof $root.wm.protobuf.ScratchSheet)
                    return object;
                let message = new $root.wm.protobuf.ScratchSheet();
                if (object.squares) {
                    if (!Array.isArray(object.squares))
                        throw TypeError(".wm.protobuf.ScratchSheet.squares: array expected");
                    message.squares = [];
                    for (let i = 0; i < object.squares.length; ++i) {
                        if (typeof object.squares[i] !== "object")
                            throw TypeError(".wm.protobuf.ScratchSheet.squares: object expected");
                        message.squares[i] = $root.wm.protobuf.ScratchSheet.ScratchSquare.fromObject(object.squares[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from a ScratchSheet message. Also converts values to other types if specified.
             * @function toObject
             * @memberof wm.protobuf.ScratchSheet
             * @static
             * @param {wm.protobuf.ScratchSheet} message ScratchSheet
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ScratchSheet.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.squares = [];
                if (message.squares && message.squares.length) {
                    object.squares = [];
                    for (let j = 0; j < message.squares.length; ++j)
                        object.squares[j] = $root.wm.protobuf.ScratchSheet.ScratchSquare.toObject(message.squares[j], options);
                }
                return object;
            };

            /**
             * Converts this ScratchSheet to JSON.
             * @function toJSON
             * @memberof wm.protobuf.ScratchSheet
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ScratchSheet.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for ScratchSheet
             * @function getTypeUrl
             * @memberof wm.protobuf.ScratchSheet
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            ScratchSheet.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/wm.protobuf.ScratchSheet";
            };

            ScratchSheet.ScratchSquare = (function() {

                /**
                 * Properties of a ScratchSquare.
                 * @memberof wm.protobuf.ScratchSheet
                 * @interface IScratchSquare
                 * @property {wm.protobuf.ItemCategory} category ScratchSquare category
                 * @property {number} itemId ScratchSquare itemId
                 * @property {boolean} earned ScratchSquare earned
                 */

                /**
                 * Constructs a new ScratchSquare.
                 * @memberof wm.protobuf.ScratchSheet
                 * @classdesc Represents a ScratchSquare.
                 * @implements IScratchSquare
                 * @constructor
                 * @param {wm.protobuf.ScratchSheet.IScratchSquare=} [properties] Properties to set
                 */
                function ScratchSquare(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * ScratchSquare category.
                 * @member {wm.protobuf.ItemCategory} category
                 * @memberof wm.protobuf.ScratchSheet.ScratchSquare
                 * @instance
                 */
                ScratchSquare.prototype.category = 1;

                /**
                 * ScratchSquare itemId.
                 * @member {number} itemId
                 * @memberof wm.protobuf.ScratchSheet.ScratchSquare
                 * @instance
                 */
                ScratchSquare.prototype.itemId = 0;

                /**
                 * ScratchSquare earned.
                 * @member {boolean} earned
                 * @memberof wm.protobuf.ScratchSheet.ScratchSquare
                 * @instance
                 */
                ScratchSquare.prototype.earned = false;

                /**
                 * Creates a new ScratchSquare instance using the specified properties.
                 * @function create
                 * @memberof wm.protobuf.ScratchSheet.ScratchSquare
                 * @static
                 * @param {wm.protobuf.ScratchSheet.IScratchSquare=} [properties] Properties to set
                 * @returns {wm.protobuf.ScratchSheet.ScratchSquare} ScratchSquare instance
                 */
                ScratchSquare.create = function create(properties) {
                    return new ScratchSquare(properties);
                };

                /**
                 * Encodes the specified ScratchSquare message. Does not implicitly {@link wm.protobuf.ScratchSheet.ScratchSquare.verify|verify} messages.
                 * @function encode
                 * @memberof wm.protobuf.ScratchSheet.ScratchSquare
                 * @static
                 * @param {wm.protobuf.ScratchSheet.IScratchSquare} message ScratchSquare message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ScratchSquare.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.category);
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.itemId);
                    writer.uint32(/* id 3, wireType 0 =*/24).bool(message.earned);
                    return writer;
                };

                /**
                 * Encodes the specified ScratchSquare message, length delimited. Does not implicitly {@link wm.protobuf.ScratchSheet.ScratchSquare.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof wm.protobuf.ScratchSheet.ScratchSquare
                 * @static
                 * @param {wm.protobuf.ScratchSheet.IScratchSquare} message ScratchSquare message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ScratchSquare.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a ScratchSquare message from the specified reader or buffer.
                 * @function decode
                 * @memberof wm.protobuf.ScratchSheet.ScratchSquare
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {wm.protobuf.ScratchSheet.ScratchSquare} ScratchSquare
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ScratchSquare.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.wm.protobuf.ScratchSheet.ScratchSquare();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.category = reader.int32();
                                break;
                            }
                        case 2: {
                                message.itemId = reader.uint32();
                                break;
                            }
                        case 3: {
                                message.earned = reader.bool();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    if (!message.hasOwnProperty("category"))
                        throw $util.ProtocolError("missing required 'category'", { instance: message });
                    if (!message.hasOwnProperty("itemId"))
                        throw $util.ProtocolError("missing required 'itemId'", { instance: message });
                    if (!message.hasOwnProperty("earned"))
                        throw $util.ProtocolError("missing required 'earned'", { instance: message });
                    return message;
                };

                /**
                 * Decodes a ScratchSquare message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof wm.protobuf.ScratchSheet.ScratchSquare
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {wm.protobuf.ScratchSheet.ScratchSquare} ScratchSquare
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ScratchSquare.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a ScratchSquare message.
                 * @function verify
                 * @memberof wm.protobuf.ScratchSheet.ScratchSquare
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ScratchSquare.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    switch (message.category) {
                    default:
                        return "category: enum value expected";
                    case 1:
                    case 2:
                    case 3:
                    case 4:
                    case 5:
                    case 6:
                    case 8:
                    case 9:
                    case 10:
                    case 12:
                    case 14:
                    case 15:
                    case 16:
                    case 17:
                    case 18:
                    case 19:
                    case 22:
                    case 24:
                    case 25:
                    case 26:
                    case 27:
                    case 28:
                    case 201:
                    case 202:
                    case 203:
                    case 400:
                    case 300:
                    case 301:
                        break;
                    }
                    if (!$util.isInteger(message.itemId))
                        return "itemId: integer expected";
                    if (typeof message.earned !== "boolean")
                        return "earned: boolean expected";
                    return null;
                };

                /**
                 * Creates a ScratchSquare message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof wm.protobuf.ScratchSheet.ScratchSquare
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {wm.protobuf.ScratchSheet.ScratchSquare} ScratchSquare
                 */
                ScratchSquare.fromObject = function fromObject(object) {
                    if (object instanceof $root.wm.protobuf.ScratchSheet.ScratchSquare)
                        return object;
                    let message = new $root.wm.protobuf.ScratchSheet.ScratchSquare();
                    switch (object.category) {
                    default:
                        if (typeof object.category === "number") {
                            message.category = object.category;
                            break;
                        }
                        break;
                    case "CAT_CUSTOM_COLOR":
                    case 1:
                        message.category = 1;
                        break;
                    case "CAT_WHEEL":
                    case 2:
                        message.category = 2;
                        break;
                    case "CAT_AERO":
                    case 3:
                        message.category = 3;
                        break;
                    case "CAT_BONNET":
                    case 4:
                        message.category = 4;
                        break;
                    case "CAT_WING":
                    case 5:
                        message.category = 5;
                        break;
                    case "CAT_MIRROR":
                    case 6:
                        message.category = 6;
                        break;
                    case "CAT_NEON":
                    case 8:
                        message.category = 8;
                        break;
                    case "CAT_TRUNK":
                    case 9:
                        message.category = 9;
                        break;
                    case "CAT_NUMBER_PLATE":
                    case 10:
                        message.category = 10;
                        break;
                    case "CAT_GT_WING":
                    case 12:
                        message.category = 12;
                        break;
                    case "CAT_AURA_MOTIF":
                    case 14:
                        message.category = 14;
                        break;
                    case "CAT_METER":
                    case 15:
                        message.category = 15;
                        break;
                    case "CAT_BGM":
                    case 16:
                        message.category = 16;
                        break;
                    case "CAT_NAME_PLATE":
                    case 17:
                        message.category = 17;
                        break;
                    case "CAT_CUSTOM_FRAME":
                    case 18:
                        message.category = 18;
                        break;
                    case "CAT_NUMBER":
                    case 19:
                        message.category = 19;
                        break;
                    case "CAT_BGM_TRACK":
                    case 22:
                        message.category = 22;
                        break;
                    case "CAT_WINDOW_STICKER_FONT":
                    case 24:
                        message.category = 24;
                        break;
                    case "CAT_WINDOW_DECORATION":
                    case 25:
                        message.category = 25;
                        break;
                    case "CAT_RIVAL_MARKER":
                    case 26:
                        message.category = 26;
                        break;
                    case "CAT_STAMP":
                    case 27:
                        message.category = 27;
                        break;
                    case "CAT_TERMINAL_BACKGROUND":
                    case 28:
                        message.category = 28;
                        break;
                    case "CAT_CAR_TICKET":
                    case 201:
                        message.category = 201;
                        break;
                    case "CAT_CONSUMPTION_ITEM":
                    case 202:
                        message.category = 202;
                        break;
                    case "CAT_CAR_TICKET_FREE":
                    case 203:
                        message.category = 203;
                        break;
                    case "CAT_CAR_TITLE":
                    case 400:
                        message.category = 400;
                        break;
                    case "CAT_AERO_FULLSET":
                    case 300:
                        message.category = 300;
                        break;
                    case "CAT_AERO_LIMITED":
                    case 301:
                        message.category = 301;
                        break;
                    }
                    if (object.itemId != null)
                        message.itemId = object.itemId >>> 0;
                    if (object.earned != null)
                        message.earned = Boolean(object.earned);
                    return message;
                };

                /**
                 * Creates a plain object from a ScratchSquare message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof wm.protobuf.ScratchSheet.ScratchSquare
                 * @static
                 * @param {wm.protobuf.ScratchSheet.ScratchSquare} message ScratchSquare
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ScratchSquare.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        object.category = options.enums === String ? "CAT_CUSTOM_COLOR" : 1;
                        object.itemId = 0;
                        object.earned = false;
                    }
                    if (message.category != null && message.hasOwnProperty("category"))
                        object.category = options.enums === String ? $root.wm.protobuf.ItemCategory[message.category] === undefined ? message.category : $root.wm.protobuf.ItemCategory[message.category] : message.category;
                    if (message.itemId != null && message.hasOwnProperty("itemId"))
                        object.itemId = message.itemId;
                    if (message.earned != null && message.hasOwnProperty("earned"))
                        object.earned = message.earned;
                    return object;
                };

                /**
                 * Converts this ScratchSquare to JSON.
                 * @function toJSON
                 * @memberof wm.protobuf.ScratchSheet.ScratchSquare
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ScratchSquare.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                /**
                 * Gets the default type url for ScratchSquare
                 * @function getTypeUrl
                 * @memberof wm.protobuf.ScratchSheet.ScratchSquare
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                ScratchSquare.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/wm.protobuf.ScratchSheet.ScratchSquare";
                };

                return ScratchSquare;
            })();

            return ScratchSheet;
        })();

        protobuf.UserItem = (function() {

            /**
             * Properties of a UserItem.
             * @memberof wm.protobuf
             * @interface IUserItem
             * @property {wm.protobuf.ItemCategory} category UserItem category
             * @property {number} itemId UserItem itemId
             * @property {number|null} [userItemId] UserItem userItemId
             * @property {number|null} [earnedAt] UserItem earnedAt
             * @property {number|null} [expireAt] UserItem expireAt
             * @property {string|null} [titleName] UserItem titleName
             */

            /**
             * Constructs a new UserItem.
             * @memberof wm.protobuf
             * @classdesc Represents a UserItem.
             * @implements IUserItem
             * @constructor
             * @param {wm.protobuf.IUserItem=} [properties] Properties to set
             */
            function UserItem(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * UserItem category.
             * @member {wm.protobuf.ItemCategory} category
             * @memberof wm.protobuf.UserItem
             * @instance
             */
            UserItem.prototype.category = 1;

            /**
             * UserItem itemId.
             * @member {number} itemId
             * @memberof wm.protobuf.UserItem
             * @instance
             */
            UserItem.prototype.itemId = 0;

            /**
             * UserItem userItemId.
             * @member {number} userItemId
             * @memberof wm.protobuf.UserItem
             * @instance
             */
            UserItem.prototype.userItemId = 0;

            /**
             * UserItem earnedAt.
             * @member {number} earnedAt
             * @memberof wm.protobuf.UserItem
             * @instance
             */
            UserItem.prototype.earnedAt = 0;

            /**
             * UserItem expireAt.
             * @member {number} expireAt
             * @memberof wm.protobuf.UserItem
             * @instance
             */
            UserItem.prototype.expireAt = 0;

            /**
             * UserItem titleName.
             * @member {string} titleName
             * @memberof wm.protobuf.UserItem
             * @instance
             */
            UserItem.prototype.titleName = "";

            /**
             * Creates a new UserItem instance using the specified properties.
             * @function create
             * @memberof wm.protobuf.UserItem
             * @static
             * @param {wm.protobuf.IUserItem=} [properties] Properties to set
             * @returns {wm.protobuf.UserItem} UserItem instance
             */
            UserItem.create = function create(properties) {
                return new UserItem(properties);
            };

            /**
             * Encodes the specified UserItem message. Does not implicitly {@link wm.protobuf.UserItem.verify|verify} messages.
             * @function encode
             * @memberof wm.protobuf.UserItem
             * @static
             * @param {wm.protobuf.IUserItem} message UserItem message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            UserItem.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.category);
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.itemId);
                if (message.userItemId != null && Object.hasOwnProperty.call(message, "userItemId"))
                    writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.userItemId);
                if (message.earnedAt != null && Object.hasOwnProperty.call(message, "earnedAt"))
                    writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.earnedAt);
                if (message.expireAt != null && Object.hasOwnProperty.call(message, "expireAt"))
                    writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.expireAt);
                if (message.titleName != null && Object.hasOwnProperty.call(message, "titleName"))
                    writer.uint32(/* id 6, wireType 2 =*/50).string(message.titleName);
                return writer;
            };

            /**
             * Encodes the specified UserItem message, length delimited. Does not implicitly {@link wm.protobuf.UserItem.verify|verify} messages.
             * @function encodeDelimited
             * @memberof wm.protobuf.UserItem
             * @static
             * @param {wm.protobuf.IUserItem} message UserItem message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            UserItem.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a UserItem message from the specified reader or buffer.
             * @function decode
             * @memberof wm.protobuf.UserItem
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {wm.protobuf.UserItem} UserItem
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            UserItem.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.wm.protobuf.UserItem();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.category = reader.int32();
                            break;
                        }
                    case 2: {
                            message.itemId = reader.uint32();
                            break;
                        }
                    case 3: {
                            message.userItemId = reader.uint32();
                            break;
                        }
                    case 4: {
                            message.earnedAt = reader.uint32();
                            break;
                        }
                    case 5: {
                            message.expireAt = reader.uint32();
                            break;
                        }
                    case 6: {
                            message.titleName = reader.string();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("category"))
                    throw $util.ProtocolError("missing required 'category'", { instance: message });
                if (!message.hasOwnProperty("itemId"))
                    throw $util.ProtocolError("missing required 'itemId'", { instance: message });
                return message;
            };

            /**
             * Decodes a UserItem message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof wm.protobuf.UserItem
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {wm.protobuf.UserItem} UserItem
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            UserItem.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a UserItem message.
             * @function verify
             * @memberof wm.protobuf.UserItem
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            UserItem.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                switch (message.category) {
                default:
                    return "category: enum value expected";
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 8:
                case 9:
                case 10:
                case 12:
                case 14:
                case 15:
                case 16:
                case 17:
                case 18:
                case 19:
                case 22:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 201:
                case 202:
                case 203:
                case 400:
                case 300:
                case 301:
                    break;
                }
                if (!$util.isInteger(message.itemId))
                    return "itemId: integer expected";
                if (message.userItemId != null && message.hasOwnProperty("userItemId"))
                    if (!$util.isInteger(message.userItemId))
                        return "userItemId: integer expected";
                if (message.earnedAt != null && message.hasOwnProperty("earnedAt"))
                    if (!$util.isInteger(message.earnedAt))
                        return "earnedAt: integer expected";
                if (message.expireAt != null && message.hasOwnProperty("expireAt"))
                    if (!$util.isInteger(message.expireAt))
                        return "expireAt: integer expected";
                if (message.titleName != null && message.hasOwnProperty("titleName"))
                    if (!$util.isString(message.titleName))
                        return "titleName: string expected";
                return null;
            };

            /**
             * Creates a UserItem message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof wm.protobuf.UserItem
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {wm.protobuf.UserItem} UserItem
             */
            UserItem.fromObject = function fromObject(object) {
                if (object instanceof $root.wm.protobuf.UserItem)
                    return object;
                let message = new $root.wm.protobuf.UserItem();
                switch (object.category) {
                default:
                    if (typeof object.category === "number") {
                        message.category = object.category;
                        break;
                    }
                    break;
                case "CAT_CUSTOM_COLOR":
                case 1:
                    message.category = 1;
                    break;
                case "CAT_WHEEL":
                case 2:
                    message.category = 2;
                    break;
                case "CAT_AERO":
                case 3:
                    message.category = 3;
                    break;
                case "CAT_BONNET":
                case 4:
                    message.category = 4;
                    break;
                case "CAT_WING":
                case 5:
                    message.category = 5;
                    break;
                case "CAT_MIRROR":
                case 6:
                    message.category = 6;
                    break;
                case "CAT_NEON":
                case 8:
                    message.category = 8;
                    break;
                case "CAT_TRUNK":
                case 9:
                    message.category = 9;
                    break;
                case "CAT_NUMBER_PLATE":
                case 10:
                    message.category = 10;
                    break;
                case "CAT_GT_WING":
                case 12:
                    message.category = 12;
                    break;
                case "CAT_AURA_MOTIF":
                case 14:
                    message.category = 14;
                    break;
                case "CAT_METER":
                case 15:
                    message.category = 15;
                    break;
                case "CAT_BGM":
                case 16:
                    message.category = 16;
                    break;
                case "CAT_NAME_PLATE":
                case 17:
                    message.category = 17;
                    break;
                case "CAT_CUSTOM_FRAME":
                case 18:
                    message.category = 18;
                    break;
                case "CAT_NUMBER":
                case 19:
                    message.category = 19;
                    break;
                case "CAT_BGM_TRACK":
                case 22:
                    message.category = 22;
                    break;
                case "CAT_WINDOW_STICKER_FONT":
                case 24:
                    message.category = 24;
                    break;
                case "CAT_WINDOW_DECORATION":
                case 25:
                    message.category = 25;
                    break;
                case "CAT_RIVAL_MARKER":
                case 26:
                    message.category = 26;
                    break;
                case "CAT_STAMP":
                case 27:
                    message.category = 27;
                    break;
                case "CAT_TERMINAL_BACKGROUND":
                case 28:
                    message.category = 28;
                    break;
                case "CAT_CAR_TICKET":
                case 201:
                    message.category = 201;
                    break;
                case "CAT_CONSUMPTION_ITEM":
                case 202:
                    message.category = 202;
                    break;
                case "CAT_CAR_TICKET_FREE":
                case 203:
                    message.category = 203;
                    break;
                case "CAT_CAR_TITLE":
                case 400:
                    message.category = 400;
                    break;
                case "CAT_AERO_FULLSET":
                case 300:
                    message.category = 300;
                    break;
                case "CAT_AERO_LIMITED":
                case 301:
                    message.category = 301;
                    break;
                }
                if (object.itemId != null)
                    message.itemId = object.itemId >>> 0;
                if (object.userItemId != null)
                    message.userItemId = object.userItemId >>> 0;
                if (object.earnedAt != null)
                    message.earnedAt = object.earnedAt >>> 0;
                if (object.expireAt != null)
                    message.expireAt = object.expireAt >>> 0;
                if (object.titleName != null)
                    message.titleName = String(object.titleName);
                return message;
            };

            /**
             * Creates a plain object from a UserItem message. Also converts values to other types if specified.
             * @function toObject
             * @memberof wm.protobuf.UserItem
             * @static
             * @param {wm.protobuf.UserItem} message UserItem
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            UserItem.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.category = options.enums === String ? "CAT_CUSTOM_COLOR" : 1;
                    object.itemId = 0;
                    object.userItemId = 0;
                    object.earnedAt = 0;
                    object.expireAt = 0;
                    object.titleName = "";
                }
                if (message.category != null && message.hasOwnProperty("category"))
                    object.category = options.enums === String ? $root.wm.protobuf.ItemCategory[message.category] === undefined ? message.category : $root.wm.protobuf.ItemCategory[message.category] : message.category;
                if (message.itemId != null && message.hasOwnProperty("itemId"))
                    object.itemId = message.itemId;
                if (message.userItemId != null && message.hasOwnProperty("userItemId"))
                    object.userItemId = message.userItemId;
                if (message.earnedAt != null && message.hasOwnProperty("earnedAt"))
                    object.earnedAt = message.earnedAt;
                if (message.expireAt != null && message.hasOwnProperty("expireAt"))
                    object.expireAt = message.expireAt;
                if (message.titleName != null && message.hasOwnProperty("titleName"))
                    object.titleName = message.titleName;
                return object;
            };

            /**
             * Converts this UserItem to JSON.
             * @function toJSON
             * @memberof wm.protobuf.UserItem
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            UserItem.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for UserItem
             * @function getTypeUrl
             * @memberof wm.protobuf.UserItem
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            UserItem.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/wm.protobuf.UserItem";
            };

            return UserItem;
        })();

        protobuf.InviteFriendCampaignSchedule = (function() {

            /**
             * Properties of an InviteFriendCampaignSchedule.
             * @memberof wm.protobuf
             * @interface IInviteFriendCampaignSchedule
             * @property {number} campaignId InviteFriendCampaignSchedule campaignId
             * @property {number} startAt InviteFriendCampaignSchedule startAt
             * @property {number} endAt InviteFriendCampaignSchedule endAt
             * @property {number} couponUnreceivableAt InviteFriendCampaignSchedule couponUnreceivableAt
             */

            /**
             * Constructs a new InviteFriendCampaignSchedule.
             * @memberof wm.protobuf
             * @classdesc Represents an InviteFriendCampaignSchedule.
             * @implements IInviteFriendCampaignSchedule
             * @constructor
             * @param {wm.protobuf.IInviteFriendCampaignSchedule=} [properties] Properties to set
             */
            function InviteFriendCampaignSchedule(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * InviteFriendCampaignSchedule campaignId.
             * @member {number} campaignId
             * @memberof wm.protobuf.InviteFriendCampaignSchedule
             * @instance
             */
            InviteFriendCampaignSchedule.prototype.campaignId = 0;

            /**
             * InviteFriendCampaignSchedule startAt.
             * @member {number} startAt
             * @memberof wm.protobuf.InviteFriendCampaignSchedule
             * @instance
             */
            InviteFriendCampaignSchedule.prototype.startAt = 0;

            /**
             * InviteFriendCampaignSchedule endAt.
             * @member {number} endAt
             * @memberof wm.protobuf.InviteFriendCampaignSchedule
             * @instance
             */
            InviteFriendCampaignSchedule.prototype.endAt = 0;

            /**
             * InviteFriendCampaignSchedule couponUnreceivableAt.
             * @member {number} couponUnreceivableAt
             * @memberof wm.protobuf.InviteFriendCampaignSchedule
             * @instance
             */
            InviteFriendCampaignSchedule.prototype.couponUnreceivableAt = 0;

            /**
             * Creates a new InviteFriendCampaignSchedule instance using the specified properties.
             * @function create
             * @memberof wm.protobuf.InviteFriendCampaignSchedule
             * @static
             * @param {wm.protobuf.IInviteFriendCampaignSchedule=} [properties] Properties to set
             * @returns {wm.protobuf.InviteFriendCampaignSchedule} InviteFriendCampaignSchedule instance
             */
            InviteFriendCampaignSchedule.create = function create(properties) {
                return new InviteFriendCampaignSchedule(properties);
            };

            /**
             * Encodes the specified InviteFriendCampaignSchedule message. Does not implicitly {@link wm.protobuf.InviteFriendCampaignSchedule.verify|verify} messages.
             * @function encode
             * @memberof wm.protobuf.InviteFriendCampaignSchedule
             * @static
             * @param {wm.protobuf.IInviteFriendCampaignSchedule} message InviteFriendCampaignSchedule message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            InviteFriendCampaignSchedule.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.campaignId);
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.startAt);
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.endAt);
                writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.couponUnreceivableAt);
                return writer;
            };

            /**
             * Encodes the specified InviteFriendCampaignSchedule message, length delimited. Does not implicitly {@link wm.protobuf.InviteFriendCampaignSchedule.verify|verify} messages.
             * @function encodeDelimited
             * @memberof wm.protobuf.InviteFriendCampaignSchedule
             * @static
             * @param {wm.protobuf.IInviteFriendCampaignSchedule} message InviteFriendCampaignSchedule message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            InviteFriendCampaignSchedule.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an InviteFriendCampaignSchedule message from the specified reader or buffer.
             * @function decode
             * @memberof wm.protobuf.InviteFriendCampaignSchedule
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {wm.protobuf.InviteFriendCampaignSchedule} InviteFriendCampaignSchedule
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            InviteFriendCampaignSchedule.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.wm.protobuf.InviteFriendCampaignSchedule();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.campaignId = reader.uint32();
                            break;
                        }
                    case 2: {
                            message.startAt = reader.uint32();
                            break;
                        }
                    case 3: {
                            message.endAt = reader.uint32();
                            break;
                        }
                    case 4: {
                            message.couponUnreceivableAt = reader.uint32();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("campaignId"))
                    throw $util.ProtocolError("missing required 'campaignId'", { instance: message });
                if (!message.hasOwnProperty("startAt"))
                    throw $util.ProtocolError("missing required 'startAt'", { instance: message });
                if (!message.hasOwnProperty("endAt"))
                    throw $util.ProtocolError("missing required 'endAt'", { instance: message });
                if (!message.hasOwnProperty("couponUnreceivableAt"))
                    throw $util.ProtocolError("missing required 'couponUnreceivableAt'", { instance: message });
                return message;
            };

            /**
             * Decodes an InviteFriendCampaignSchedule message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof wm.protobuf.InviteFriendCampaignSchedule
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {wm.protobuf.InviteFriendCampaignSchedule} InviteFriendCampaignSchedule
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            InviteFriendCampaignSchedule.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an InviteFriendCampaignSchedule message.
             * @function verify
             * @memberof wm.protobuf.InviteFriendCampaignSchedule
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            InviteFriendCampaignSchedule.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (!$util.isInteger(message.campaignId))
                    return "campaignId: integer expected";
                if (!$util.isInteger(message.startAt))
                    return "startAt: integer expected";
                if (!$util.isInteger(message.endAt))
                    return "endAt: integer expected";
                if (!$util.isInteger(message.couponUnreceivableAt))
                    return "couponUnreceivableAt: integer expected";
                return null;
            };

            /**
             * Creates an InviteFriendCampaignSchedule message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof wm.protobuf.InviteFriendCampaignSchedule
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {wm.protobuf.InviteFriendCampaignSchedule} InviteFriendCampaignSchedule
             */
            InviteFriendCampaignSchedule.fromObject = function fromObject(object) {
                if (object instanceof $root.wm.protobuf.InviteFriendCampaignSchedule)
                    return object;
                let message = new $root.wm.protobuf.InviteFriendCampaignSchedule();
                if (object.campaignId != null)
                    message.campaignId = object.campaignId >>> 0;
                if (object.startAt != null)
                    message.startAt = object.startAt >>> 0;
                if (object.endAt != null)
                    message.endAt = object.endAt >>> 0;
                if (object.couponUnreceivableAt != null)
                    message.couponUnreceivableAt = object.couponUnreceivableAt >>> 0;
                return message;
            };

            /**
             * Creates a plain object from an InviteFriendCampaignSchedule message. Also converts values to other types if specified.
             * @function toObject
             * @memberof wm.protobuf.InviteFriendCampaignSchedule
             * @static
             * @param {wm.protobuf.InviteFriendCampaignSchedule} message InviteFriendCampaignSchedule
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            InviteFriendCampaignSchedule.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.campaignId = 0;
                    object.startAt = 0;
                    object.endAt = 0;
                    object.couponUnreceivableAt = 0;
                }
                if (message.campaignId != null && message.hasOwnProperty("campaignId"))
                    object.campaignId = message.campaignId;
                if (message.startAt != null && message.hasOwnProperty("startAt"))
                    object.startAt = message.startAt;
                if (message.endAt != null && message.hasOwnProperty("endAt"))
                    object.endAt = message.endAt;
                if (message.couponUnreceivableAt != null && message.hasOwnProperty("couponUnreceivableAt"))
                    object.couponUnreceivableAt = message.couponUnreceivableAt;
                return object;
            };

            /**
             * Converts this InviteFriendCampaignSchedule to JSON.
             * @function toJSON
             * @memberof wm.protobuf.InviteFriendCampaignSchedule
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            InviteFriendCampaignSchedule.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for InviteFriendCampaignSchedule
             * @function getTypeUrl
             * @memberof wm.protobuf.InviteFriendCampaignSchedule
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            InviteFriendCampaignSchedule.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/wm.protobuf.InviteFriendCampaignSchedule";
            };

            return InviteFriendCampaignSchedule;
        })();

        protobuf.GhostExpeditionSchedule = (function() {

            /**
             * Properties of a GhostExpeditionSchedule.
             * @memberof wm.protobuf
             * @interface IGhostExpeditionSchedule
             * @property {number} ghostExpeditionId GhostExpeditionSchedule ghostExpeditionId
             * @property {number} startAt GhostExpeditionSchedule startAt
             * @property {number} endAt GhostExpeditionSchedule endAt
             * @property {number} aftereventEndAt GhostExpeditionSchedule aftereventEndAt
             * @property {string} opponentCountry GhostExpeditionSchedule opponentCountry
             */

            /**
             * Constructs a new GhostExpeditionSchedule.
             * @memberof wm.protobuf
             * @classdesc Represents a GhostExpeditionSchedule.
             * @implements IGhostExpeditionSchedule
             * @constructor
             * @param {wm.protobuf.IGhostExpeditionSchedule=} [properties] Properties to set
             */
            function GhostExpeditionSchedule(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * GhostExpeditionSchedule ghostExpeditionId.
             * @member {number} ghostExpeditionId
             * @memberof wm.protobuf.GhostExpeditionSchedule
             * @instance
             */
            GhostExpeditionSchedule.prototype.ghostExpeditionId = 0;

            /**
             * GhostExpeditionSchedule startAt.
             * @member {number} startAt
             * @memberof wm.protobuf.GhostExpeditionSchedule
             * @instance
             */
            GhostExpeditionSchedule.prototype.startAt = 0;

            /**
             * GhostExpeditionSchedule endAt.
             * @member {number} endAt
             * @memberof wm.protobuf.GhostExpeditionSchedule
             * @instance
             */
            GhostExpeditionSchedule.prototype.endAt = 0;

            /**
             * GhostExpeditionSchedule aftereventEndAt.
             * @member {number} aftereventEndAt
             * @memberof wm.protobuf.GhostExpeditionSchedule
             * @instance
             */
            GhostExpeditionSchedule.prototype.aftereventEndAt = 0;

            /**
             * GhostExpeditionSchedule opponentCountry.
             * @member {string} opponentCountry
             * @memberof wm.protobuf.GhostExpeditionSchedule
             * @instance
             */
            GhostExpeditionSchedule.prototype.opponentCountry = "";

            /**
             * Creates a new GhostExpeditionSchedule instance using the specified properties.
             * @function create
             * @memberof wm.protobuf.GhostExpeditionSchedule
             * @static
             * @param {wm.protobuf.IGhostExpeditionSchedule=} [properties] Properties to set
             * @returns {wm.protobuf.GhostExpeditionSchedule} GhostExpeditionSchedule instance
             */
            GhostExpeditionSchedule.create = function create(properties) {
                return new GhostExpeditionSchedule(properties);
            };

            /**
             * Encodes the specified GhostExpeditionSchedule message. Does not implicitly {@link wm.protobuf.GhostExpeditionSchedule.verify|verify} messages.
             * @function encode
             * @memberof wm.protobuf.GhostExpeditionSchedule
             * @static
             * @param {wm.protobuf.IGhostExpeditionSchedule} message GhostExpeditionSchedule message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GhostExpeditionSchedule.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.ghostExpeditionId);
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.startAt);
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.endAt);
                writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.aftereventEndAt);
                writer.uint32(/* id 5, wireType 2 =*/42).string(message.opponentCountry);
                return writer;
            };

            /**
             * Encodes the specified GhostExpeditionSchedule message, length delimited. Does not implicitly {@link wm.protobuf.GhostExpeditionSchedule.verify|verify} messages.
             * @function encodeDelimited
             * @memberof wm.protobuf.GhostExpeditionSchedule
             * @static
             * @param {wm.protobuf.IGhostExpeditionSchedule} message GhostExpeditionSchedule message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GhostExpeditionSchedule.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a GhostExpeditionSchedule message from the specified reader or buffer.
             * @function decode
             * @memberof wm.protobuf.GhostExpeditionSchedule
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {wm.protobuf.GhostExpeditionSchedule} GhostExpeditionSchedule
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GhostExpeditionSchedule.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.wm.protobuf.GhostExpeditionSchedule();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.ghostExpeditionId = reader.uint32();
                            break;
                        }
                    case 2: {
                            message.startAt = reader.uint32();
                            break;
                        }
                    case 3: {
                            message.endAt = reader.uint32();
                            break;
                        }
                    case 4: {
                            message.aftereventEndAt = reader.uint32();
                            break;
                        }
                    case 5: {
                            message.opponentCountry = reader.string();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("ghostExpeditionId"))
                    throw $util.ProtocolError("missing required 'ghostExpeditionId'", { instance: message });
                if (!message.hasOwnProperty("startAt"))
                    throw $util.ProtocolError("missing required 'startAt'", { instance: message });
                if (!message.hasOwnProperty("endAt"))
                    throw $util.ProtocolError("missing required 'endAt'", { instance: message });
                if (!message.hasOwnProperty("aftereventEndAt"))
                    throw $util.ProtocolError("missing required 'aftereventEndAt'", { instance: message });
                if (!message.hasOwnProperty("opponentCountry"))
                    throw $util.ProtocolError("missing required 'opponentCountry'", { instance: message });
                return message;
            };

            /**
             * Decodes a GhostExpeditionSchedule message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof wm.protobuf.GhostExpeditionSchedule
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {wm.protobuf.GhostExpeditionSchedule} GhostExpeditionSchedule
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GhostExpeditionSchedule.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a GhostExpeditionSchedule message.
             * @function verify
             * @memberof wm.protobuf.GhostExpeditionSchedule
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            GhostExpeditionSchedule.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (!$util.isInteger(message.ghostExpeditionId))
                    return "ghostExpeditionId: integer expected";
                if (!$util.isInteger(message.startAt))
                    return "startAt: integer expected";
                if (!$util.isInteger(message.endAt))
                    return "endAt: integer expected";
                if (!$util.isInteger(message.aftereventEndAt))
                    return "aftereventEndAt: integer expected";
                if (!$util.isString(message.opponentCountry))
                    return "opponentCountry: string expected";
                return null;
            };

            /**
             * Creates a GhostExpeditionSchedule message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof wm.protobuf.GhostExpeditionSchedule
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {wm.protobuf.GhostExpeditionSchedule} GhostExpeditionSchedule
             */
            GhostExpeditionSchedule.fromObject = function fromObject(object) {
                if (object instanceof $root.wm.protobuf.GhostExpeditionSchedule)
                    return object;
                let message = new $root.wm.protobuf.GhostExpeditionSchedule();
                if (object.ghostExpeditionId != null)
                    message.ghostExpeditionId = object.ghostExpeditionId >>> 0;
                if (object.startAt != null)
                    message.startAt = object.startAt >>> 0;
                if (object.endAt != null)
                    message.endAt = object.endAt >>> 0;
                if (object.aftereventEndAt != null)
                    message.aftereventEndAt = object.aftereventEndAt >>> 0;
                if (object.opponentCountry != null)
                    message.opponentCountry = String(object.opponentCountry);
                return message;
            };

            /**
             * Creates a plain object from a GhostExpeditionSchedule message. Also converts values to other types if specified.
             * @function toObject
             * @memberof wm.protobuf.GhostExpeditionSchedule
             * @static
             * @param {wm.protobuf.GhostExpeditionSchedule} message GhostExpeditionSchedule
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            GhostExpeditionSchedule.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.ghostExpeditionId = 0;
                    object.startAt = 0;
                    object.endAt = 0;
                    object.aftereventEndAt = 0;
                    object.opponentCountry = "";
                }
                if (message.ghostExpeditionId != null && message.hasOwnProperty("ghostExpeditionId"))
                    object.ghostExpeditionId = message.ghostExpeditionId;
                if (message.startAt != null && message.hasOwnProperty("startAt"))
                    object.startAt = message.startAt;
                if (message.endAt != null && message.hasOwnProperty("endAt"))
                    object.endAt = message.endAt;
                if (message.aftereventEndAt != null && message.hasOwnProperty("aftereventEndAt"))
                    object.aftereventEndAt = message.aftereventEndAt;
                if (message.opponentCountry != null && message.hasOwnProperty("opponentCountry"))
                    object.opponentCountry = message.opponentCountry;
                return object;
            };

            /**
             * Converts this GhostExpeditionSchedule to JSON.
             * @function toJSON
             * @memberof wm.protobuf.GhostExpeditionSchedule
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            GhostExpeditionSchedule.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for GhostExpeditionSchedule
             * @function getTypeUrl
             * @memberof wm.protobuf.GhostExpeditionSchedule
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            GhostExpeditionSchedule.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/wm.protobuf.GhostExpeditionSchedule";
            };

            return GhostExpeditionSchedule;
        })();

        protobuf.GhostExpeditionRankingEntry = (function() {

            /**
             * Properties of a GhostExpeditionRankingEntry.
             * @memberof wm.protobuf
             * @interface IGhostExpeditionRankingEntry
             * @property {number|null} [rank] GhostExpeditionRankingEntry rank
             * @property {number} score GhostExpeditionRankingEntry score
             * @property {wm.protobuf.ICar} car GhostExpeditionRankingEntry car
             */

            /**
             * Constructs a new GhostExpeditionRankingEntry.
             * @memberof wm.protobuf
             * @classdesc Represents a GhostExpeditionRankingEntry.
             * @implements IGhostExpeditionRankingEntry
             * @constructor
             * @param {wm.protobuf.IGhostExpeditionRankingEntry=} [properties] Properties to set
             */
            function GhostExpeditionRankingEntry(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * GhostExpeditionRankingEntry rank.
             * @member {number} rank
             * @memberof wm.protobuf.GhostExpeditionRankingEntry
             * @instance
             */
            GhostExpeditionRankingEntry.prototype.rank = 0;

            /**
             * GhostExpeditionRankingEntry score.
             * @member {number} score
             * @memberof wm.protobuf.GhostExpeditionRankingEntry
             * @instance
             */
            GhostExpeditionRankingEntry.prototype.score = 0;

            /**
             * GhostExpeditionRankingEntry car.
             * @member {wm.protobuf.ICar} car
             * @memberof wm.protobuf.GhostExpeditionRankingEntry
             * @instance
             */
            GhostExpeditionRankingEntry.prototype.car = null;

            /**
             * Creates a new GhostExpeditionRankingEntry instance using the specified properties.
             * @function create
             * @memberof wm.protobuf.GhostExpeditionRankingEntry
             * @static
             * @param {wm.protobuf.IGhostExpeditionRankingEntry=} [properties] Properties to set
             * @returns {wm.protobuf.GhostExpeditionRankingEntry} GhostExpeditionRankingEntry instance
             */
            GhostExpeditionRankingEntry.create = function create(properties) {
                return new GhostExpeditionRankingEntry(properties);
            };

            /**
             * Encodes the specified GhostExpeditionRankingEntry message. Does not implicitly {@link wm.protobuf.GhostExpeditionRankingEntry.verify|verify} messages.
             * @function encode
             * @memberof wm.protobuf.GhostExpeditionRankingEntry
             * @static
             * @param {wm.protobuf.IGhostExpeditionRankingEntry} message GhostExpeditionRankingEntry message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GhostExpeditionRankingEntry.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.rank != null && Object.hasOwnProperty.call(message, "rank"))
                    writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.rank);
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.score);
                $root.wm.protobuf.Car.encode(message.car, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified GhostExpeditionRankingEntry message, length delimited. Does not implicitly {@link wm.protobuf.GhostExpeditionRankingEntry.verify|verify} messages.
             * @function encodeDelimited
             * @memberof wm.protobuf.GhostExpeditionRankingEntry
             * @static
             * @param {wm.protobuf.IGhostExpeditionRankingEntry} message GhostExpeditionRankingEntry message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GhostExpeditionRankingEntry.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a GhostExpeditionRankingEntry message from the specified reader or buffer.
             * @function decode
             * @memberof wm.protobuf.GhostExpeditionRankingEntry
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {wm.protobuf.GhostExpeditionRankingEntry} GhostExpeditionRankingEntry
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GhostExpeditionRankingEntry.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.wm.protobuf.GhostExpeditionRankingEntry();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.rank = reader.uint32();
                            break;
                        }
                    case 2: {
                            message.score = reader.uint32();
                            break;
                        }
                    case 3: {
                            message.car = $root.wm.protobuf.Car.decode(reader, reader.uint32());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("score"))
                    throw $util.ProtocolError("missing required 'score'", { instance: message });
                if (!message.hasOwnProperty("car"))
                    throw $util.ProtocolError("missing required 'car'", { instance: message });
                return message;
            };

            /**
             * Decodes a GhostExpeditionRankingEntry message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof wm.protobuf.GhostExpeditionRankingEntry
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {wm.protobuf.GhostExpeditionRankingEntry} GhostExpeditionRankingEntry
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GhostExpeditionRankingEntry.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a GhostExpeditionRankingEntry message.
             * @function verify
             * @memberof wm.protobuf.GhostExpeditionRankingEntry
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            GhostExpeditionRankingEntry.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.rank != null && message.hasOwnProperty("rank"))
                    if (!$util.isInteger(message.rank))
                        return "rank: integer expected";
                if (!$util.isInteger(message.score))
                    return "score: integer expected";
                {
                    let error = $root.wm.protobuf.Car.verify(message.car);
                    if (error)
                        return "car." + error;
                }
                return null;
            };

            /**
             * Creates a GhostExpeditionRankingEntry message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof wm.protobuf.GhostExpeditionRankingEntry
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {wm.protobuf.GhostExpeditionRankingEntry} GhostExpeditionRankingEntry
             */
            GhostExpeditionRankingEntry.fromObject = function fromObject(object) {
                if (object instanceof $root.wm.protobuf.GhostExpeditionRankingEntry)
                    return object;
                let message = new $root.wm.protobuf.GhostExpeditionRankingEntry();
                if (object.rank != null)
                    message.rank = object.rank >>> 0;
                if (object.score != null)
                    message.score = object.score >>> 0;
                if (object.car != null) {
                    if (typeof object.car !== "object")
                        throw TypeError(".wm.protobuf.GhostExpeditionRankingEntry.car: object expected");
                    message.car = $root.wm.protobuf.Car.fromObject(object.car);
                }
                return message;
            };

            /**
             * Creates a plain object from a GhostExpeditionRankingEntry message. Also converts values to other types if specified.
             * @function toObject
             * @memberof wm.protobuf.GhostExpeditionRankingEntry
             * @static
             * @param {wm.protobuf.GhostExpeditionRankingEntry} message GhostExpeditionRankingEntry
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            GhostExpeditionRankingEntry.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.rank = 0;
                    object.score = 0;
                    object.car = null;
                }
                if (message.rank != null && message.hasOwnProperty("rank"))
                    object.rank = message.rank;
                if (message.score != null && message.hasOwnProperty("score"))
                    object.score = message.score;
                if (message.car != null && message.hasOwnProperty("car"))
                    object.car = $root.wm.protobuf.Car.toObject(message.car, options);
                return object;
            };

            /**
             * Converts this GhostExpeditionRankingEntry to JSON.
             * @function toJSON
             * @memberof wm.protobuf.GhostExpeditionRankingEntry
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            GhostExpeditionRankingEntry.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for GhostExpeditionRankingEntry
             * @function getTypeUrl
             * @memberof wm.protobuf.GhostExpeditionRankingEntry
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            GhostExpeditionRankingEntry.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/wm.protobuf.GhostExpeditionRankingEntry";
            };

            return GhostExpeditionRankingEntry;
        })();

        protobuf.WantedCar = (function() {

            /**
             * Properties of a WantedCar.
             * @memberof wm.protobuf
             * @interface IWantedCar
             * @property {wm.protobuf.IGhostCar} ghost WantedCar ghost
             * @property {number} wantedId WantedCar wantedId
             * @property {number} bonus WantedCar bonus
             * @property {number} numOfHostages WantedCar numOfHostages
             * @property {number|null} [defeatedMeCount] WantedCar defeatedMeCount
             * @property {wm.protobuf.ICarEntry|null} [hostage] WantedCar hostage
             */

            /**
             * Constructs a new WantedCar.
             * @memberof wm.protobuf
             * @classdesc Represents a WantedCar.
             * @implements IWantedCar
             * @constructor
             * @param {wm.protobuf.IWantedCar=} [properties] Properties to set
             */
            function WantedCar(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * WantedCar ghost.
             * @member {wm.protobuf.IGhostCar} ghost
             * @memberof wm.protobuf.WantedCar
             * @instance
             */
            WantedCar.prototype.ghost = null;

            /**
             * WantedCar wantedId.
             * @member {number} wantedId
             * @memberof wm.protobuf.WantedCar
             * @instance
             */
            WantedCar.prototype.wantedId = 0;

            /**
             * WantedCar bonus.
             * @member {number} bonus
             * @memberof wm.protobuf.WantedCar
             * @instance
             */
            WantedCar.prototype.bonus = 0;

            /**
             * WantedCar numOfHostages.
             * @member {number} numOfHostages
             * @memberof wm.protobuf.WantedCar
             * @instance
             */
            WantedCar.prototype.numOfHostages = 0;

            /**
             * WantedCar defeatedMeCount.
             * @member {number} defeatedMeCount
             * @memberof wm.protobuf.WantedCar
             * @instance
             */
            WantedCar.prototype.defeatedMeCount = 0;

            /**
             * WantedCar hostage.
             * @member {wm.protobuf.ICarEntry|null|undefined} hostage
             * @memberof wm.protobuf.WantedCar
             * @instance
             */
            WantedCar.prototype.hostage = null;

            /**
             * Creates a new WantedCar instance using the specified properties.
             * @function create
             * @memberof wm.protobuf.WantedCar
             * @static
             * @param {wm.protobuf.IWantedCar=} [properties] Properties to set
             * @returns {wm.protobuf.WantedCar} WantedCar instance
             */
            WantedCar.create = function create(properties) {
                return new WantedCar(properties);
            };

            /**
             * Encodes the specified WantedCar message. Does not implicitly {@link wm.protobuf.WantedCar.verify|verify} messages.
             * @function encode
             * @memberof wm.protobuf.WantedCar
             * @static
             * @param {wm.protobuf.IWantedCar} message WantedCar message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            WantedCar.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                $root.wm.protobuf.GhostCar.encode(message.ghost, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.wantedId);
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.bonus);
                writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.numOfHostages);
                if (message.hostage != null && Object.hasOwnProperty.call(message, "hostage"))
                    $root.wm.protobuf.CarEntry.encode(message.hostage, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                if (message.defeatedMeCount != null && Object.hasOwnProperty.call(message, "defeatedMeCount"))
                    writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.defeatedMeCount);
                return writer;
            };

            /**
             * Encodes the specified WantedCar message, length delimited. Does not implicitly {@link wm.protobuf.WantedCar.verify|verify} messages.
             * @function encodeDelimited
             * @memberof wm.protobuf.WantedCar
             * @static
             * @param {wm.protobuf.IWantedCar} message WantedCar message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            WantedCar.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a WantedCar message from the specified reader or buffer.
             * @function decode
             * @memberof wm.protobuf.WantedCar
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {wm.protobuf.WantedCar} WantedCar
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            WantedCar.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.wm.protobuf.WantedCar();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.ghost = $root.wm.protobuf.GhostCar.decode(reader, reader.uint32());
                            break;
                        }
                    case 2: {
                            message.wantedId = reader.uint32();
                            break;
                        }
                    case 3: {
                            message.bonus = reader.uint32();
                            break;
                        }
                    case 4: {
                            message.numOfHostages = reader.uint32();
                            break;
                        }
                    case 6: {
                            message.defeatedMeCount = reader.uint32();
                            break;
                        }
                    case 5: {
                            message.hostage = $root.wm.protobuf.CarEntry.decode(reader, reader.uint32());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("ghost"))
                    throw $util.ProtocolError("missing required 'ghost'", { instance: message });
                if (!message.hasOwnProperty("wantedId"))
                    throw $util.ProtocolError("missing required 'wantedId'", { instance: message });
                if (!message.hasOwnProperty("bonus"))
                    throw $util.ProtocolError("missing required 'bonus'", { instance: message });
                if (!message.hasOwnProperty("numOfHostages"))
                    throw $util.ProtocolError("missing required 'numOfHostages'", { instance: message });
                return message;
            };

            /**
             * Decodes a WantedCar message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof wm.protobuf.WantedCar
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {wm.protobuf.WantedCar} WantedCar
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            WantedCar.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a WantedCar message.
             * @function verify
             * @memberof wm.protobuf.WantedCar
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            WantedCar.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                {
                    let error = $root.wm.protobuf.GhostCar.verify(message.ghost);
                    if (error)
                        return "ghost." + error;
                }
                if (!$util.isInteger(message.wantedId))
                    return "wantedId: integer expected";
                if (!$util.isInteger(message.bonus))
                    return "bonus: integer expected";
                if (!$util.isInteger(message.numOfHostages))
                    return "numOfHostages: integer expected";
                if (message.defeatedMeCount != null && message.hasOwnProperty("defeatedMeCount"))
                    if (!$util.isInteger(message.defeatedMeCount))
                        return "defeatedMeCount: integer expected";
                if (message.hostage != null && message.hasOwnProperty("hostage")) {
                    let error = $root.wm.protobuf.CarEntry.verify(message.hostage);
                    if (error)
                        return "hostage." + error;
                }
                return null;
            };

            /**
             * Creates a WantedCar message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof wm.protobuf.WantedCar
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {wm.protobuf.WantedCar} WantedCar
             */
            WantedCar.fromObject = function fromObject(object) {
                if (object instanceof $root.wm.protobuf.WantedCar)
                    return object;
                let message = new $root.wm.protobuf.WantedCar();
                if (object.ghost != null) {
                    if (typeof object.ghost !== "object")
                        throw TypeError(".wm.protobuf.WantedCar.ghost: object expected");
                    message.ghost = $root.wm.protobuf.GhostCar.fromObject(object.ghost);
                }
                if (object.wantedId != null)
                    message.wantedId = object.wantedId >>> 0;
                if (object.bonus != null)
                    message.bonus = object.bonus >>> 0;
                if (object.numOfHostages != null)
                    message.numOfHostages = object.numOfHostages >>> 0;
                if (object.defeatedMeCount != null)
                    message.defeatedMeCount = object.defeatedMeCount >>> 0;
                if (object.hostage != null) {
                    if (typeof object.hostage !== "object")
                        throw TypeError(".wm.protobuf.WantedCar.hostage: object expected");
                    message.hostage = $root.wm.protobuf.CarEntry.fromObject(object.hostage);
                }
                return message;
            };

            /**
             * Creates a plain object from a WantedCar message. Also converts values to other types if specified.
             * @function toObject
             * @memberof wm.protobuf.WantedCar
             * @static
             * @param {wm.protobuf.WantedCar} message WantedCar
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            WantedCar.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.ghost = null;
                    object.wantedId = 0;
                    object.bonus = 0;
                    object.numOfHostages = 0;
                    object.hostage = null;
                    object.defeatedMeCount = 0;
                }
                if (message.ghost != null && message.hasOwnProperty("ghost"))
                    object.ghost = $root.wm.protobuf.GhostCar.toObject(message.ghost, options);
                if (message.wantedId != null && message.hasOwnProperty("wantedId"))
                    object.wantedId = message.wantedId;
                if (message.bonus != null && message.hasOwnProperty("bonus"))
                    object.bonus = message.bonus;
                if (message.numOfHostages != null && message.hasOwnProperty("numOfHostages"))
                    object.numOfHostages = message.numOfHostages;
                if (message.hostage != null && message.hasOwnProperty("hostage"))
                    object.hostage = $root.wm.protobuf.CarEntry.toObject(message.hostage, options);
                if (message.defeatedMeCount != null && message.hasOwnProperty("defeatedMeCount"))
                    object.defeatedMeCount = message.defeatedMeCount;
                return object;
            };

            /**
             * Converts this WantedCar to JSON.
             * @function toJSON
             * @memberof wm.protobuf.WantedCar
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            WantedCar.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for WantedCar
             * @function getTypeUrl
             * @memberof wm.protobuf.WantedCar
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            WantedCar.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/wm.protobuf.WantedCar";
            };

            return WantedCar;
        })();

        protobuf.CarEntry = (function() {

            /**
             * Properties of a CarEntry.
             * @memberof wm.protobuf
             * @interface ICarEntry
             * @property {string} name CarEntry name
             * @property {number} level CarEntry level
             * @property {string} title CarEntry title
             * @property {number} model CarEntry model
             * @property {number} visualModel CarEntry visualModel
             * @property {number} defaultColor CarEntry defaultColor
             * @property {number|null} [score] CarEntry score
             */

            /**
             * Constructs a new CarEntry.
             * @memberof wm.protobuf
             * @classdesc Represents a CarEntry.
             * @implements ICarEntry
             * @constructor
             * @param {wm.protobuf.ICarEntry=} [properties] Properties to set
             */
            function CarEntry(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * CarEntry name.
             * @member {string} name
             * @memberof wm.protobuf.CarEntry
             * @instance
             */
            CarEntry.prototype.name = "";

            /**
             * CarEntry level.
             * @member {number} level
             * @memberof wm.protobuf.CarEntry
             * @instance
             */
            CarEntry.prototype.level = 0;

            /**
             * CarEntry title.
             * @member {string} title
             * @memberof wm.protobuf.CarEntry
             * @instance
             */
            CarEntry.prototype.title = "";

            /**
             * CarEntry model.
             * @member {number} model
             * @memberof wm.protobuf.CarEntry
             * @instance
             */
            CarEntry.prototype.model = 0;

            /**
             * CarEntry visualModel.
             * @member {number} visualModel
             * @memberof wm.protobuf.CarEntry
             * @instance
             */
            CarEntry.prototype.visualModel = 0;

            /**
             * CarEntry defaultColor.
             * @member {number} defaultColor
             * @memberof wm.protobuf.CarEntry
             * @instance
             */
            CarEntry.prototype.defaultColor = 0;

            /**
             * CarEntry score.
             * @member {number} score
             * @memberof wm.protobuf.CarEntry
             * @instance
             */
            CarEntry.prototype.score = 0;

            /**
             * Creates a new CarEntry instance using the specified properties.
             * @function create
             * @memberof wm.protobuf.CarEntry
             * @static
             * @param {wm.protobuf.ICarEntry=} [properties] Properties to set
             * @returns {wm.protobuf.CarEntry} CarEntry instance
             */
            CarEntry.create = function create(properties) {
                return new CarEntry(properties);
            };

            /**
             * Encodes the specified CarEntry message. Does not implicitly {@link wm.protobuf.CarEntry.verify|verify} messages.
             * @function encode
             * @memberof wm.protobuf.CarEntry
             * @static
             * @param {wm.protobuf.ICarEntry} message CarEntry message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            CarEntry.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.level);
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.title);
                writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.model);
                writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.visualModel);
                writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.defaultColor);
                if (message.score != null && Object.hasOwnProperty.call(message, "score"))
                    writer.uint32(/* id 7, wireType 0 =*/56).uint32(message.score);
                return writer;
            };

            /**
             * Encodes the specified CarEntry message, length delimited. Does not implicitly {@link wm.protobuf.CarEntry.verify|verify} messages.
             * @function encodeDelimited
             * @memberof wm.protobuf.CarEntry
             * @static
             * @param {wm.protobuf.ICarEntry} message CarEntry message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            CarEntry.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a CarEntry message from the specified reader or buffer.
             * @function decode
             * @memberof wm.protobuf.CarEntry
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {wm.protobuf.CarEntry} CarEntry
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            CarEntry.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.wm.protobuf.CarEntry();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.name = reader.string();
                            break;
                        }
                    case 2: {
                            message.level = reader.uint32();
                            break;
                        }
                    case 3: {
                            message.title = reader.string();
                            break;
                        }
                    case 4: {
                            message.model = reader.uint32();
                            break;
                        }
                    case 5: {
                            message.visualModel = reader.uint32();
                            break;
                        }
                    case 6: {
                            message.defaultColor = reader.uint32();
                            break;
                        }
                    case 7: {
                            message.score = reader.uint32();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("name"))
                    throw $util.ProtocolError("missing required 'name'", { instance: message });
                if (!message.hasOwnProperty("level"))
                    throw $util.ProtocolError("missing required 'level'", { instance: message });
                if (!message.hasOwnProperty("title"))
                    throw $util.ProtocolError("missing required 'title'", { instance: message });
                if (!message.hasOwnProperty("model"))
                    throw $util.ProtocolError("missing required 'model'", { instance: message });
                if (!message.hasOwnProperty("visualModel"))
                    throw $util.ProtocolError("missing required 'visualModel'", { instance: message });
                if (!message.hasOwnProperty("defaultColor"))
                    throw $util.ProtocolError("missing required 'defaultColor'", { instance: message });
                return message;
            };

            /**
             * Decodes a CarEntry message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof wm.protobuf.CarEntry
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {wm.protobuf.CarEntry} CarEntry
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            CarEntry.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a CarEntry message.
             * @function verify
             * @memberof wm.protobuf.CarEntry
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            CarEntry.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (!$util.isString(message.name))
                    return "name: string expected";
                if (!$util.isInteger(message.level))
                    return "level: integer expected";
                if (!$util.isString(message.title))
                    return "title: string expected";
                if (!$util.isInteger(message.model))
                    return "model: integer expected";
                if (!$util.isInteger(message.visualModel))
                    return "visualModel: integer expected";
                if (!$util.isInteger(message.defaultColor))
                    return "defaultColor: integer expected";
                if (message.score != null && message.hasOwnProperty("score"))
                    if (!$util.isInteger(message.score))
                        return "score: integer expected";
                return null;
            };

            /**
             * Creates a CarEntry message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof wm.protobuf.CarEntry
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {wm.protobuf.CarEntry} CarEntry
             */
            CarEntry.fromObject = function fromObject(object) {
                if (object instanceof $root.wm.protobuf.CarEntry)
                    return object;
                let message = new $root.wm.protobuf.CarEntry();
                if (object.name != null)
                    message.name = String(object.name);
                if (object.level != null)
                    message.level = object.level >>> 0;
                if (object.title != null)
                    message.title = String(object.title);
                if (object.model != null)
                    message.model = object.model >>> 0;
                if (object.visualModel != null)
                    message.visualModel = object.visualModel >>> 0;
                if (object.defaultColor != null)
                    message.defaultColor = object.defaultColor >>> 0;
                if (object.score != null)
                    message.score = object.score >>> 0;
                return message;
            };

            /**
             * Creates a plain object from a CarEntry message. Also converts values to other types if specified.
             * @function toObject
             * @memberof wm.protobuf.CarEntry
             * @static
             * @param {wm.protobuf.CarEntry} message CarEntry
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            CarEntry.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.name = "";
                    object.level = 0;
                    object.title = "";
                    object.model = 0;
                    object.visualModel = 0;
                    object.defaultColor = 0;
                    object.score = 0;
                }
                if (message.name != null && message.hasOwnProperty("name"))
                    object.name = message.name;
                if (message.level != null && message.hasOwnProperty("level"))
                    object.level = message.level;
                if (message.title != null && message.hasOwnProperty("title"))
                    object.title = message.title;
                if (message.model != null && message.hasOwnProperty("model"))
                    object.model = message.model;
                if (message.visualModel != null && message.hasOwnProperty("visualModel"))
                    object.visualModel = message.visualModel;
                if (message.defaultColor != null && message.hasOwnProperty("defaultColor"))
                    object.defaultColor = message.defaultColor;
                if (message.score != null && message.hasOwnProperty("score"))
                    object.score = message.score;
                return object;
            };

            /**
             * Converts this CarEntry to JSON.
             * @function toJSON
             * @memberof wm.protobuf.CarEntry
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            CarEntry.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for CarEntry
             * @function getTypeUrl
             * @memberof wm.protobuf.CarEntry
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            CarEntry.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/wm.protobuf.CarEntry";
            };

            return CarEntry;
        })();

        protobuf.BingoRevengeCar = (function() {

            /**
             * Properties of a BingoRevengeCar.
             * @memberof wm.protobuf
             * @interface IBingoRevengeCar
             * @property {wm.protobuf.IGhostCar} ghost BingoRevengeCar ghost
             * @property {number} revengeNumber BingoRevengeCar revengeNumber
             * @property {boolean} locked BingoRevengeCar locked
             */

            /**
             * Constructs a new BingoRevengeCar.
             * @memberof wm.protobuf
             * @classdesc Represents a BingoRevengeCar.
             * @implements IBingoRevengeCar
             * @constructor
             * @param {wm.protobuf.IBingoRevengeCar=} [properties] Properties to set
             */
            function BingoRevengeCar(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * BingoRevengeCar ghost.
             * @member {wm.protobuf.IGhostCar} ghost
             * @memberof wm.protobuf.BingoRevengeCar
             * @instance
             */
            BingoRevengeCar.prototype.ghost = null;

            /**
             * BingoRevengeCar revengeNumber.
             * @member {number} revengeNumber
             * @memberof wm.protobuf.BingoRevengeCar
             * @instance
             */
            BingoRevengeCar.prototype.revengeNumber = 0;

            /**
             * BingoRevengeCar locked.
             * @member {boolean} locked
             * @memberof wm.protobuf.BingoRevengeCar
             * @instance
             */
            BingoRevengeCar.prototype.locked = false;

            /**
             * Creates a new BingoRevengeCar instance using the specified properties.
             * @function create
             * @memberof wm.protobuf.BingoRevengeCar
             * @static
             * @param {wm.protobuf.IBingoRevengeCar=} [properties] Properties to set
             * @returns {wm.protobuf.BingoRevengeCar} BingoRevengeCar instance
             */
            BingoRevengeCar.create = function create(properties) {
                return new BingoRevengeCar(properties);
            };

            /**
             * Encodes the specified BingoRevengeCar message. Does not implicitly {@link wm.protobuf.BingoRevengeCar.verify|verify} messages.
             * @function encode
             * @memberof wm.protobuf.BingoRevengeCar
             * @static
             * @param {wm.protobuf.IBingoRevengeCar} message BingoRevengeCar message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            BingoRevengeCar.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                $root.wm.protobuf.GhostCar.encode(message.ghost, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.revengeNumber);
                writer.uint32(/* id 3, wireType 0 =*/24).bool(message.locked);
                return writer;
            };

            /**
             * Encodes the specified BingoRevengeCar message, length delimited. Does not implicitly {@link wm.protobuf.BingoRevengeCar.verify|verify} messages.
             * @function encodeDelimited
             * @memberof wm.protobuf.BingoRevengeCar
             * @static
             * @param {wm.protobuf.IBingoRevengeCar} message BingoRevengeCar message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            BingoRevengeCar.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a BingoRevengeCar message from the specified reader or buffer.
             * @function decode
             * @memberof wm.protobuf.BingoRevengeCar
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {wm.protobuf.BingoRevengeCar} BingoRevengeCar
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            BingoRevengeCar.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.wm.protobuf.BingoRevengeCar();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.ghost = $root.wm.protobuf.GhostCar.decode(reader, reader.uint32());
                            break;
                        }
                    case 2: {
                            message.revengeNumber = reader.uint32();
                            break;
                        }
                    case 3: {
                            message.locked = reader.bool();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("ghost"))
                    throw $util.ProtocolError("missing required 'ghost'", { instance: message });
                if (!message.hasOwnProperty("revengeNumber"))
                    throw $util.ProtocolError("missing required 'revengeNumber'", { instance: message });
                if (!message.hasOwnProperty("locked"))
                    throw $util.ProtocolError("missing required 'locked'", { instance: message });
                return message;
            };

            /**
             * Decodes a BingoRevengeCar message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof wm.protobuf.BingoRevengeCar
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {wm.protobuf.BingoRevengeCar} BingoRevengeCar
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            BingoRevengeCar.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a BingoRevengeCar message.
             * @function verify
             * @memberof wm.protobuf.BingoRevengeCar
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            BingoRevengeCar.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                {
                    let error = $root.wm.protobuf.GhostCar.verify(message.ghost);
                    if (error)
                        return "ghost." + error;
                }
                if (!$util.isInteger(message.revengeNumber))
                    return "revengeNumber: integer expected";
                if (typeof message.locked !== "boolean")
                    return "locked: boolean expected";
                return null;
            };

            /**
             * Creates a BingoRevengeCar message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof wm.protobuf.BingoRevengeCar
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {wm.protobuf.BingoRevengeCar} BingoRevengeCar
             */
            BingoRevengeCar.fromObject = function fromObject(object) {
                if (object instanceof $root.wm.protobuf.BingoRevengeCar)
                    return object;
                let message = new $root.wm.protobuf.BingoRevengeCar();
                if (object.ghost != null) {
                    if (typeof object.ghost !== "object")
                        throw TypeError(".wm.protobuf.BingoRevengeCar.ghost: object expected");
                    message.ghost = $root.wm.protobuf.GhostCar.fromObject(object.ghost);
                }
                if (object.revengeNumber != null)
                    message.revengeNumber = object.revengeNumber >>> 0;
                if (object.locked != null)
                    message.locked = Boolean(object.locked);
                return message;
            };

            /**
             * Creates a plain object from a BingoRevengeCar message. Also converts values to other types if specified.
             * @function toObject
             * @memberof wm.protobuf.BingoRevengeCar
             * @static
             * @param {wm.protobuf.BingoRevengeCar} message BingoRevengeCar
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            BingoRevengeCar.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.ghost = null;
                    object.revengeNumber = 0;
                    object.locked = false;
                }
                if (message.ghost != null && message.hasOwnProperty("ghost"))
                    object.ghost = $root.wm.protobuf.GhostCar.toObject(message.ghost, options);
                if (message.revengeNumber != null && message.hasOwnProperty("revengeNumber"))
                    object.revengeNumber = message.revengeNumber;
                if (message.locked != null && message.hasOwnProperty("locked"))
                    object.locked = message.locked;
                return object;
            };

            /**
             * Converts this BingoRevengeCar to JSON.
             * @function toJSON
             * @memberof wm.protobuf.BingoRevengeCar
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            BingoRevengeCar.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for BingoRevengeCar
             * @function getTypeUrl
             * @memberof wm.protobuf.BingoRevengeCar
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            BingoRevengeCar.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/wm.protobuf.BingoRevengeCar";
            };

            return BingoRevengeCar;
        })();

        protobuf.BingoPrize = (function() {

            /**
             * Properties of a BingoPrize.
             * @memberof wm.protobuf
             * @interface IBingoPrize
             * @property {number} bingoPatterns BingoPrize bingoPatterns
             * @property {wm.protobuf.ItemCategory} category BingoPrize category
             * @property {number} itemId BingoPrize itemId
             */

            /**
             * Constructs a new BingoPrize.
             * @memberof wm.protobuf
             * @classdesc Represents a BingoPrize.
             * @implements IBingoPrize
             * @constructor
             * @param {wm.protobuf.IBingoPrize=} [properties] Properties to set
             */
            function BingoPrize(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * BingoPrize bingoPatterns.
             * @member {number} bingoPatterns
             * @memberof wm.protobuf.BingoPrize
             * @instance
             */
            BingoPrize.prototype.bingoPatterns = 0;

            /**
             * BingoPrize category.
             * @member {wm.protobuf.ItemCategory} category
             * @memberof wm.protobuf.BingoPrize
             * @instance
             */
            BingoPrize.prototype.category = 1;

            /**
             * BingoPrize itemId.
             * @member {number} itemId
             * @memberof wm.protobuf.BingoPrize
             * @instance
             */
            BingoPrize.prototype.itemId = 0;

            /**
             * Creates a new BingoPrize instance using the specified properties.
             * @function create
             * @memberof wm.protobuf.BingoPrize
             * @static
             * @param {wm.protobuf.IBingoPrize=} [properties] Properties to set
             * @returns {wm.protobuf.BingoPrize} BingoPrize instance
             */
            BingoPrize.create = function create(properties) {
                return new BingoPrize(properties);
            };

            /**
             * Encodes the specified BingoPrize message. Does not implicitly {@link wm.protobuf.BingoPrize.verify|verify} messages.
             * @function encode
             * @memberof wm.protobuf.BingoPrize
             * @static
             * @param {wm.protobuf.IBingoPrize} message BingoPrize message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            BingoPrize.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.bingoPatterns);
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.category);
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.itemId);
                return writer;
            };

            /**
             * Encodes the specified BingoPrize message, length delimited. Does not implicitly {@link wm.protobuf.BingoPrize.verify|verify} messages.
             * @function encodeDelimited
             * @memberof wm.protobuf.BingoPrize
             * @static
             * @param {wm.protobuf.IBingoPrize} message BingoPrize message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            BingoPrize.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a BingoPrize message from the specified reader or buffer.
             * @function decode
             * @memberof wm.protobuf.BingoPrize
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {wm.protobuf.BingoPrize} BingoPrize
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            BingoPrize.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.wm.protobuf.BingoPrize();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.bingoPatterns = reader.uint32();
                            break;
                        }
                    case 2: {
                            message.category = reader.int32();
                            break;
                        }
                    case 3: {
                            message.itemId = reader.uint32();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("bingoPatterns"))
                    throw $util.ProtocolError("missing required 'bingoPatterns'", { instance: message });
                if (!message.hasOwnProperty("category"))
                    throw $util.ProtocolError("missing required 'category'", { instance: message });
                if (!message.hasOwnProperty("itemId"))
                    throw $util.ProtocolError("missing required 'itemId'", { instance: message });
                return message;
            };

            /**
             * Decodes a BingoPrize message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof wm.protobuf.BingoPrize
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {wm.protobuf.BingoPrize} BingoPrize
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            BingoPrize.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a BingoPrize message.
             * @function verify
             * @memberof wm.protobuf.BingoPrize
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            BingoPrize.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (!$util.isInteger(message.bingoPatterns))
                    return "bingoPatterns: integer expected";
                switch (message.category) {
                default:
                    return "category: enum value expected";
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 8:
                case 9:
                case 10:
                case 12:
                case 14:
                case 15:
                case 16:
                case 17:
                case 18:
                case 19:
                case 22:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 201:
                case 202:
                case 203:
                case 400:
                case 300:
                case 301:
                    break;
                }
                if (!$util.isInteger(message.itemId))
                    return "itemId: integer expected";
                return null;
            };

            /**
             * Creates a BingoPrize message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof wm.protobuf.BingoPrize
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {wm.protobuf.BingoPrize} BingoPrize
             */
            BingoPrize.fromObject = function fromObject(object) {
                if (object instanceof $root.wm.protobuf.BingoPrize)
                    return object;
                let message = new $root.wm.protobuf.BingoPrize();
                if (object.bingoPatterns != null)
                    message.bingoPatterns = object.bingoPatterns >>> 0;
                switch (object.category) {
                default:
                    if (typeof object.category === "number") {
                        message.category = object.category;
                        break;
                    }
                    break;
                case "CAT_CUSTOM_COLOR":
                case 1:
                    message.category = 1;
                    break;
                case "CAT_WHEEL":
                case 2:
                    message.category = 2;
                    break;
                case "CAT_AERO":
                case 3:
                    message.category = 3;
                    break;
                case "CAT_BONNET":
                case 4:
                    message.category = 4;
                    break;
                case "CAT_WING":
                case 5:
                    message.category = 5;
                    break;
                case "CAT_MIRROR":
                case 6:
                    message.category = 6;
                    break;
                case "CAT_NEON":
                case 8:
                    message.category = 8;
                    break;
                case "CAT_TRUNK":
                case 9:
                    message.category = 9;
                    break;
                case "CAT_NUMBER_PLATE":
                case 10:
                    message.category = 10;
                    break;
                case "CAT_GT_WING":
                case 12:
                    message.category = 12;
                    break;
                case "CAT_AURA_MOTIF":
                case 14:
                    message.category = 14;
                    break;
                case "CAT_METER":
                case 15:
                    message.category = 15;
                    break;
                case "CAT_BGM":
                case 16:
                    message.category = 16;
                    break;
                case "CAT_NAME_PLATE":
                case 17:
                    message.category = 17;
                    break;
                case "CAT_CUSTOM_FRAME":
                case 18:
                    message.category = 18;
                    break;
                case "CAT_NUMBER":
                case 19:
                    message.category = 19;
                    break;
                case "CAT_BGM_TRACK":
                case 22:
                    message.category = 22;
                    break;
                case "CAT_WINDOW_STICKER_FONT":
                case 24:
                    message.category = 24;
                    break;
                case "CAT_WINDOW_DECORATION":
                case 25:
                    message.category = 25;
                    break;
                case "CAT_RIVAL_MARKER":
                case 26:
                    message.category = 26;
                    break;
                case "CAT_STAMP":
                case 27:
                    message.category = 27;
                    break;
                case "CAT_TERMINAL_BACKGROUND":
                case 28:
                    message.category = 28;
                    break;
                case "CAT_CAR_TICKET":
                case 201:
                    message.category = 201;
                    break;
                case "CAT_CONSUMPTION_ITEM":
                case 202:
                    message.category = 202;
                    break;
                case "CAT_CAR_TICKET_FREE":
                case 203:
                    message.category = 203;
                    break;
                case "CAT_CAR_TITLE":
                case 400:
                    message.category = 400;
                    break;
                case "CAT_AERO_FULLSET":
                case 300:
                    message.category = 300;
                    break;
                case "CAT_AERO_LIMITED":
                case 301:
                    message.category = 301;
                    break;
                }
                if (object.itemId != null)
                    message.itemId = object.itemId >>> 0;
                return message;
            };

            /**
             * Creates a plain object from a BingoPrize message. Also converts values to other types if specified.
             * @function toObject
             * @memberof wm.protobuf.BingoPrize
             * @static
             * @param {wm.protobuf.BingoPrize} message BingoPrize
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            BingoPrize.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.bingoPatterns = 0;
                    object.category = options.enums === String ? "CAT_CUSTOM_COLOR" : 1;
                    object.itemId = 0;
                }
                if (message.bingoPatterns != null && message.hasOwnProperty("bingoPatterns"))
                    object.bingoPatterns = message.bingoPatterns;
                if (message.category != null && message.hasOwnProperty("category"))
                    object.category = options.enums === String ? $root.wm.protobuf.ItemCategory[message.category] === undefined ? message.category : $root.wm.protobuf.ItemCategory[message.category] : message.category;
                if (message.itemId != null && message.hasOwnProperty("itemId"))
                    object.itemId = message.itemId;
                return object;
            };

            /**
             * Converts this BingoPrize to JSON.
             * @function toJSON
             * @memberof wm.protobuf.BingoPrize
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            BingoPrize.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for BingoPrize
             * @function getTypeUrl
             * @memberof wm.protobuf.BingoPrize
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            BingoPrize.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/wm.protobuf.BingoPrize";
            };

            return BingoPrize;
        })();

        protobuf.CarTuning = (function() {

            /**
             * Properties of a CarTuning.
             * @memberof wm.protobuf
             * @interface ICarTuning
             * @property {number} carId CarTuning carId
             * @property {number} tunePower CarTuning tunePower
             * @property {number} tuneHandling CarTuning tuneHandling
             * @property {number|null} [lastPlayedAt] CarTuning lastPlayedAt
             * @property {wm.protobuf.GhostType|null} [type] CarTuning type
             */

            /**
             * Constructs a new CarTuning.
             * @memberof wm.protobuf
             * @classdesc Represents a CarTuning.
             * @implements ICarTuning
             * @constructor
             * @param {wm.protobuf.ICarTuning=} [properties] Properties to set
             */
            function CarTuning(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * CarTuning carId.
             * @member {number} carId
             * @memberof wm.protobuf.CarTuning
             * @instance
             */
            CarTuning.prototype.carId = 0;

            /**
             * CarTuning tunePower.
             * @member {number} tunePower
             * @memberof wm.protobuf.CarTuning
             * @instance
             */
            CarTuning.prototype.tunePower = 0;

            /**
             * CarTuning tuneHandling.
             * @member {number} tuneHandling
             * @memberof wm.protobuf.CarTuning
             * @instance
             */
            CarTuning.prototype.tuneHandling = 0;

            /**
             * CarTuning lastPlayedAt.
             * @member {number} lastPlayedAt
             * @memberof wm.protobuf.CarTuning
             * @instance
             */
            CarTuning.prototype.lastPlayedAt = 0;

            /**
             * CarTuning type.
             * @member {wm.protobuf.GhostType} type
             * @memberof wm.protobuf.CarTuning
             * @instance
             */
            CarTuning.prototype.type = 1;

            /**
             * Creates a new CarTuning instance using the specified properties.
             * @function create
             * @memberof wm.protobuf.CarTuning
             * @static
             * @param {wm.protobuf.ICarTuning=} [properties] Properties to set
             * @returns {wm.protobuf.CarTuning} CarTuning instance
             */
            CarTuning.create = function create(properties) {
                return new CarTuning(properties);
            };

            /**
             * Encodes the specified CarTuning message. Does not implicitly {@link wm.protobuf.CarTuning.verify|verify} messages.
             * @function encode
             * @memberof wm.protobuf.CarTuning
             * @static
             * @param {wm.protobuf.ICarTuning} message CarTuning message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            CarTuning.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.carId);
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.tunePower);
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.tuneHandling);
                if (message.lastPlayedAt != null && Object.hasOwnProperty.call(message, "lastPlayedAt"))
                    writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.lastPlayedAt);
                if (message.type != null && Object.hasOwnProperty.call(message, "type"))
                    writer.uint32(/* id 5, wireType 0 =*/40).int32(message.type);
                return writer;
            };

            /**
             * Encodes the specified CarTuning message, length delimited. Does not implicitly {@link wm.protobuf.CarTuning.verify|verify} messages.
             * @function encodeDelimited
             * @memberof wm.protobuf.CarTuning
             * @static
             * @param {wm.protobuf.ICarTuning} message CarTuning message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            CarTuning.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a CarTuning message from the specified reader or buffer.
             * @function decode
             * @memberof wm.protobuf.CarTuning
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {wm.protobuf.CarTuning} CarTuning
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            CarTuning.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.wm.protobuf.CarTuning();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.carId = reader.uint32();
                            break;
                        }
                    case 2: {
                            message.tunePower = reader.uint32();
                            break;
                        }
                    case 3: {
                            message.tuneHandling = reader.uint32();
                            break;
                        }
                    case 4: {
                            message.lastPlayedAt = reader.uint32();
                            break;
                        }
                    case 5: {
                            message.type = reader.int32();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("carId"))
                    throw $util.ProtocolError("missing required 'carId'", { instance: message });
                if (!message.hasOwnProperty("tunePower"))
                    throw $util.ProtocolError("missing required 'tunePower'", { instance: message });
                if (!message.hasOwnProperty("tuneHandling"))
                    throw $util.ProtocolError("missing required 'tuneHandling'", { instance: message });
                return message;
            };

            /**
             * Decodes a CarTuning message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof wm.protobuf.CarTuning
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {wm.protobuf.CarTuning} CarTuning
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            CarTuning.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a CarTuning message.
             * @function verify
             * @memberof wm.protobuf.CarTuning
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            CarTuning.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (!$util.isInteger(message.carId))
                    return "carId: integer expected";
                if (!$util.isInteger(message.tunePower))
                    return "tunePower: integer expected";
                if (!$util.isInteger(message.tuneHandling))
                    return "tuneHandling: integer expected";
                if (message.lastPlayedAt != null && message.hasOwnProperty("lastPlayedAt"))
                    if (!$util.isInteger(message.lastPlayedAt))
                        return "lastPlayedAt: integer expected";
                if (message.type != null && message.hasOwnProperty("type"))
                    switch (message.type) {
                    default:
                        return "type: enum value expected";
                    case 1:
                    case 2:
                    case 3:
                    case 4:
                    case 5:
                        break;
                    }
                return null;
            };

            /**
             * Creates a CarTuning message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof wm.protobuf.CarTuning
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {wm.protobuf.CarTuning} CarTuning
             */
            CarTuning.fromObject = function fromObject(object) {
                if (object instanceof $root.wm.protobuf.CarTuning)
                    return object;
                let message = new $root.wm.protobuf.CarTuning();
                if (object.carId != null)
                    message.carId = object.carId >>> 0;
                if (object.tunePower != null)
                    message.tunePower = object.tunePower >>> 0;
                if (object.tuneHandling != null)
                    message.tuneHandling = object.tuneHandling >>> 0;
                if (object.lastPlayedAt != null)
                    message.lastPlayedAt = object.lastPlayedAt >>> 0;
                switch (object.type) {
                default:
                    if (typeof object.type === "number") {
                        message.type = object.type;
                        break;
                    }
                    break;
                case "GHOST_NORMAL":
                case 1:
                    message.type = 1;
                    break;
                case "GHOST_PINCH_RUNNER":
                case 2:
                    message.type = 2;
                    break;
                case "GHOST_DEFAULT":
                case 3:
                    message.type = 3;
                    break;
                case "GHOST_REGION":
                case 4:
                    message.type = 4;
                    break;
                case "GHOST_REGION_PINCH_RUNNER":
                case 5:
                    message.type = 5;
                    break;
                }
                return message;
            };

            /**
             * Creates a plain object from a CarTuning message. Also converts values to other types if specified.
             * @function toObject
             * @memberof wm.protobuf.CarTuning
             * @static
             * @param {wm.protobuf.CarTuning} message CarTuning
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            CarTuning.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.carId = 0;
                    object.tunePower = 0;
                    object.tuneHandling = 0;
                    object.lastPlayedAt = 0;
                    object.type = options.enums === String ? "GHOST_NORMAL" : 1;
                }
                if (message.carId != null && message.hasOwnProperty("carId"))
                    object.carId = message.carId;
                if (message.tunePower != null && message.hasOwnProperty("tunePower"))
                    object.tunePower = message.tunePower;
                if (message.tuneHandling != null && message.hasOwnProperty("tuneHandling"))
                    object.tuneHandling = message.tuneHandling;
                if (message.lastPlayedAt != null && message.hasOwnProperty("lastPlayedAt"))
                    object.lastPlayedAt = message.lastPlayedAt;
                if (message.type != null && message.hasOwnProperty("type"))
                    object.type = options.enums === String ? $root.wm.protobuf.GhostType[message.type] === undefined ? message.type : $root.wm.protobuf.GhostType[message.type] : message.type;
                return object;
            };

            /**
             * Converts this CarTuning to JSON.
             * @function toJSON
             * @memberof wm.protobuf.CarTuning
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            CarTuning.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for CarTuning
             * @function getTypeUrl
             * @memberof wm.protobuf.CarTuning
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            CarTuning.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/wm.protobuf.CarTuning";
            };

            return CarTuning;
        })();

        protobuf.BinaryData = (function() {

            /**
             * Properties of a BinaryData.
             * @memberof wm.protobuf
             * @interface IBinaryData
             * @property {Uint8Array} data BinaryData data
             * @property {number} mergeSerial BinaryData mergeSerial
             */

            /**
             * Constructs a new BinaryData.
             * @memberof wm.protobuf
             * @classdesc Represents a BinaryData.
             * @implements IBinaryData
             * @constructor
             * @param {wm.protobuf.IBinaryData=} [properties] Properties to set
             */
            function BinaryData(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * BinaryData data.
             * @member {Uint8Array} data
             * @memberof wm.protobuf.BinaryData
             * @instance
             */
            BinaryData.prototype.data = $util.newBuffer([]);

            /**
             * BinaryData mergeSerial.
             * @member {number} mergeSerial
             * @memberof wm.protobuf.BinaryData
             * @instance
             */
            BinaryData.prototype.mergeSerial = 0;

            /**
             * Creates a new BinaryData instance using the specified properties.
             * @function create
             * @memberof wm.protobuf.BinaryData
             * @static
             * @param {wm.protobuf.IBinaryData=} [properties] Properties to set
             * @returns {wm.protobuf.BinaryData} BinaryData instance
             */
            BinaryData.create = function create(properties) {
                return new BinaryData(properties);
            };

            /**
             * Encodes the specified BinaryData message. Does not implicitly {@link wm.protobuf.BinaryData.verify|verify} messages.
             * @function encode
             * @memberof wm.protobuf.BinaryData
             * @static
             * @param {wm.protobuf.IBinaryData} message BinaryData message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            BinaryData.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.data);
                writer.uint32(/* id 2, wireType 0 =*/16).sint32(message.mergeSerial);
                return writer;
            };

            /**
             * Encodes the specified BinaryData message, length delimited. Does not implicitly {@link wm.protobuf.BinaryData.verify|verify} messages.
             * @function encodeDelimited
             * @memberof wm.protobuf.BinaryData
             * @static
             * @param {wm.protobuf.IBinaryData} message BinaryData message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            BinaryData.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a BinaryData message from the specified reader or buffer.
             * @function decode
             * @memberof wm.protobuf.BinaryData
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {wm.protobuf.BinaryData} BinaryData
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            BinaryData.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.wm.protobuf.BinaryData();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.data = reader.bytes();
                            break;
                        }
                    case 2: {
                            message.mergeSerial = reader.sint32();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("data"))
                    throw $util.ProtocolError("missing required 'data'", { instance: message });
                if (!message.hasOwnProperty("mergeSerial"))
                    throw $util.ProtocolError("missing required 'mergeSerial'", { instance: message });
                return message;
            };

            /**
             * Decodes a BinaryData message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof wm.protobuf.BinaryData
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {wm.protobuf.BinaryData} BinaryData
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            BinaryData.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a BinaryData message.
             * @function verify
             * @memberof wm.protobuf.BinaryData
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            BinaryData.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (!(message.data && typeof message.data.length === "number" || $util.isString(message.data)))
                    return "data: buffer expected";
                if (!$util.isInteger(message.mergeSerial))
                    return "mergeSerial: integer expected";
                return null;
            };

            /**
             * Creates a BinaryData message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof wm.protobuf.BinaryData
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {wm.protobuf.BinaryData} BinaryData
             */
            BinaryData.fromObject = function fromObject(object) {
                if (object instanceof $root.wm.protobuf.BinaryData)
                    return object;
                let message = new $root.wm.protobuf.BinaryData();
                if (object.data != null)
                    if (typeof object.data === "string")
                        $util.base64.decode(object.data, message.data = $util.newBuffer($util.base64.length(object.data)), 0);
                    else if (object.data.length >= 0)
                        message.data = object.data;
                if (object.mergeSerial != null)
                    message.mergeSerial = object.mergeSerial | 0;
                return message;
            };

            /**
             * Creates a plain object from a BinaryData message. Also converts values to other types if specified.
             * @function toObject
             * @memberof wm.protobuf.BinaryData
             * @static
             * @param {wm.protobuf.BinaryData} message BinaryData
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            BinaryData.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    if (options.bytes === String)
                        object.data = "";
                    else {
                        object.data = [];
                        if (options.bytes !== Array)
                            object.data = $util.newBuffer(object.data);
                    }
                    object.mergeSerial = 0;
                }
                if (message.data != null && message.hasOwnProperty("data"))
                    object.data = options.bytes === String ? $util.base64.encode(message.data, 0, message.data.length) : options.bytes === Array ? Array.prototype.slice.call(message.data) : message.data;
                if (message.mergeSerial != null && message.hasOwnProperty("mergeSerial"))
                    object.mergeSerial = message.mergeSerial;
                return object;
            };

            /**
             * Converts this BinaryData to JSON.
             * @function toJSON
             * @memberof wm.protobuf.BinaryData
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            BinaryData.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for BinaryData
             * @function getTypeUrl
             * @memberof wm.protobuf.BinaryData
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            BinaryData.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/wm.protobuf.BinaryData";
            };

            return BinaryData;
        })();

        protobuf.GhostTrail = (function() {

            /**
             * Properties of a GhostTrail.
             * @memberof wm.protobuf
             * @interface IGhostTrail
             * @property {number} carId GhostTrail carId
             * @property {number} area GhostTrail area
             * @property {number} ramp GhostTrail ramp
             * @property {number} path GhostTrail path
             * @property {number} playedAt GhostTrail playedAt
             * @property {wm.protobuf.IPlace|null} [playedPlace] GhostTrail playedPlace
             * @property {Uint8Array} trail GhostTrail trail
             */

            /**
             * Constructs a new GhostTrail.
             * @memberof wm.protobuf
             * @classdesc Represents a GhostTrail.
             * @implements IGhostTrail
             * @constructor
             * @param {wm.protobuf.IGhostTrail=} [properties] Properties to set
             */
            function GhostTrail(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * GhostTrail carId.
             * @member {number} carId
             * @memberof wm.protobuf.GhostTrail
             * @instance
             */
            GhostTrail.prototype.carId = 0;

            /**
             * GhostTrail area.
             * @member {number} area
             * @memberof wm.protobuf.GhostTrail
             * @instance
             */
            GhostTrail.prototype.area = 0;

            /**
             * GhostTrail ramp.
             * @member {number} ramp
             * @memberof wm.protobuf.GhostTrail
             * @instance
             */
            GhostTrail.prototype.ramp = 0;

            /**
             * GhostTrail path.
             * @member {number} path
             * @memberof wm.protobuf.GhostTrail
             * @instance
             */
            GhostTrail.prototype.path = 0;

            /**
             * GhostTrail playedAt.
             * @member {number} playedAt
             * @memberof wm.protobuf.GhostTrail
             * @instance
             */
            GhostTrail.prototype.playedAt = 0;

            /**
             * GhostTrail playedPlace.
             * @member {wm.protobuf.IPlace|null|undefined} playedPlace
             * @memberof wm.protobuf.GhostTrail
             * @instance
             */
            GhostTrail.prototype.playedPlace = null;

            /**
             * GhostTrail trail.
             * @member {Uint8Array} trail
             * @memberof wm.protobuf.GhostTrail
             * @instance
             */
            GhostTrail.prototype.trail = $util.newBuffer([]);

            /**
             * Creates a new GhostTrail instance using the specified properties.
             * @function create
             * @memberof wm.protobuf.GhostTrail
             * @static
             * @param {wm.protobuf.IGhostTrail=} [properties] Properties to set
             * @returns {wm.protobuf.GhostTrail} GhostTrail instance
             */
            GhostTrail.create = function create(properties) {
                return new GhostTrail(properties);
            };

            /**
             * Encodes the specified GhostTrail message. Does not implicitly {@link wm.protobuf.GhostTrail.verify|verify} messages.
             * @function encode
             * @memberof wm.protobuf.GhostTrail
             * @static
             * @param {wm.protobuf.IGhostTrail} message GhostTrail message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GhostTrail.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.carId);
                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.area);
                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.ramp);
                writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.playedAt);
                if (message.playedPlace != null && Object.hasOwnProperty.call(message, "playedPlace"))
                    $root.wm.protobuf.Place.encode(message.playedPlace, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                writer.uint32(/* id 6, wireType 2 =*/50).bytes(message.trail);
                writer.uint32(/* id 7, wireType 0 =*/56).uint32(message.path);
                return writer;
            };

            /**
             * Encodes the specified GhostTrail message, length delimited. Does not implicitly {@link wm.protobuf.GhostTrail.verify|verify} messages.
             * @function encodeDelimited
             * @memberof wm.protobuf.GhostTrail
             * @static
             * @param {wm.protobuf.IGhostTrail} message GhostTrail message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GhostTrail.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a GhostTrail message from the specified reader or buffer.
             * @function decode
             * @memberof wm.protobuf.GhostTrail
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {wm.protobuf.GhostTrail} GhostTrail
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GhostTrail.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.wm.protobuf.GhostTrail();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.carId = reader.uint32();
                            break;
                        }
                    case 2: {
                            message.area = reader.uint32();
                            break;
                        }
                    case 3: {
                            message.ramp = reader.uint32();
                            break;
                        }
                    case 7: {
                            message.path = reader.uint32();
                            break;
                        }
                    case 4: {
                            message.playedAt = reader.uint32();
                            break;
                        }
                    case 5: {
                            message.playedPlace = $root.wm.protobuf.Place.decode(reader, reader.uint32());
                            break;
                        }
                    case 6: {
                            message.trail = reader.bytes();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("carId"))
                    throw $util.ProtocolError("missing required 'carId'", { instance: message });
                if (!message.hasOwnProperty("area"))
                    throw $util.ProtocolError("missing required 'area'", { instance: message });
                if (!message.hasOwnProperty("ramp"))
                    throw $util.ProtocolError("missing required 'ramp'", { instance: message });
                if (!message.hasOwnProperty("path"))
                    throw $util.ProtocolError("missing required 'path'", { instance: message });
                if (!message.hasOwnProperty("playedAt"))
                    throw $util.ProtocolError("missing required 'playedAt'", { instance: message });
                if (!message.hasOwnProperty("trail"))
                    throw $util.ProtocolError("missing required 'trail'", { instance: message });
                return message;
            };

            /**
             * Decodes a GhostTrail message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof wm.protobuf.GhostTrail
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {wm.protobuf.GhostTrail} GhostTrail
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GhostTrail.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a GhostTrail message.
             * @function verify
             * @memberof wm.protobuf.GhostTrail
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            GhostTrail.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (!$util.isInteger(message.carId))
                    return "carId: integer expected";
                if (!$util.isInteger(message.area))
                    return "area: integer expected";
                if (!$util.isInteger(message.ramp))
                    return "ramp: integer expected";
                if (!$util.isInteger(message.path))
                    return "path: integer expected";
                if (!$util.isInteger(message.playedAt))
                    return "playedAt: integer expected";
                if (message.playedPlace != null && message.hasOwnProperty("playedPlace")) {
                    let error = $root.wm.protobuf.Place.verify(message.playedPlace);
                    if (error)
                        return "playedPlace." + error;
                }
                if (!(message.trail && typeof message.trail.length === "number" || $util.isString(message.trail)))
                    return "trail: buffer expected";
                return null;
            };

            /**
             * Creates a GhostTrail message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof wm.protobuf.GhostTrail
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {wm.protobuf.GhostTrail} GhostTrail
             */
            GhostTrail.fromObject = function fromObject(object) {
                if (object instanceof $root.wm.protobuf.GhostTrail)
                    return object;
                let message = new $root.wm.protobuf.GhostTrail();
                if (object.carId != null)
                    message.carId = object.carId >>> 0;
                if (object.area != null)
                    message.area = object.area >>> 0;
                if (object.ramp != null)
                    message.ramp = object.ramp >>> 0;
                if (object.path != null)
                    message.path = object.path >>> 0;
                if (object.playedAt != null)
                    message.playedAt = object.playedAt >>> 0;
                if (object.playedPlace != null) {
                    if (typeof object.playedPlace !== "object")
                        throw TypeError(".wm.protobuf.GhostTrail.playedPlace: object expected");
                    message.playedPlace = $root.wm.protobuf.Place.fromObject(object.playedPlace);
                }
                if (object.trail != null)
                    if (typeof object.trail === "string")
                        $util.base64.decode(object.trail, message.trail = $util.newBuffer($util.base64.length(object.trail)), 0);
                    else if (object.trail.length >= 0)
                        message.trail = object.trail;
                return message;
            };

            /**
             * Creates a plain object from a GhostTrail message. Also converts values to other types if specified.
             * @function toObject
             * @memberof wm.protobuf.GhostTrail
             * @static
             * @param {wm.protobuf.GhostTrail} message GhostTrail
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            GhostTrail.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.carId = 0;
                    object.area = 0;
                    object.ramp = 0;
                    object.playedAt = 0;
                    object.playedPlace = null;
                    if (options.bytes === String)
                        object.trail = "";
                    else {
                        object.trail = [];
                        if (options.bytes !== Array)
                            object.trail = $util.newBuffer(object.trail);
                    }
                    object.path = 0;
                }
                if (message.carId != null && message.hasOwnProperty("carId"))
                    object.carId = message.carId;
                if (message.area != null && message.hasOwnProperty("area"))
                    object.area = message.area;
                if (message.ramp != null && message.hasOwnProperty("ramp"))
                    object.ramp = message.ramp;
                if (message.playedAt != null && message.hasOwnProperty("playedAt"))
                    object.playedAt = message.playedAt;
                if (message.playedPlace != null && message.hasOwnProperty("playedPlace"))
                    object.playedPlace = $root.wm.protobuf.Place.toObject(message.playedPlace, options);
                if (message.trail != null && message.hasOwnProperty("trail"))
                    object.trail = options.bytes === String ? $util.base64.encode(message.trail, 0, message.trail.length) : options.bytes === Array ? Array.prototype.slice.call(message.trail) : message.trail;
                if (message.path != null && message.hasOwnProperty("path"))
                    object.path = message.path;
                return object;
            };

            /**
             * Converts this GhostTrail to JSON.
             * @function toJSON
             * @memberof wm.protobuf.GhostTrail
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            GhostTrail.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for GhostTrail
             * @function getTypeUrl
             * @memberof wm.protobuf.GhostTrail
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            GhostTrail.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/wm.protobuf.GhostTrail";
            };

            return GhostTrail;
        })();

        protobuf.PlaceList = (function() {

            /**
             * Properties of a PlaceList.
             * @memberof wm.protobuf
             * @interface IPlaceList
             * @property {Array.<wm.protobuf.IPlace>|null} [places] PlaceList places
             */

            /**
             * Constructs a new PlaceList.
             * @memberof wm.protobuf
             * @classdesc Represents a PlaceList.
             * @implements IPlaceList
             * @constructor
             * @param {wm.protobuf.IPlaceList=} [properties] Properties to set
             */
            function PlaceList(properties) {
                this.places = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * PlaceList places.
             * @member {Array.<wm.protobuf.IPlace>} places
             * @memberof wm.protobuf.PlaceList
             * @instance
             */
            PlaceList.prototype.places = $util.emptyArray;

            /**
             * Creates a new PlaceList instance using the specified properties.
             * @function create
             * @memberof wm.protobuf.PlaceList
             * @static
             * @param {wm.protobuf.IPlaceList=} [properties] Properties to set
             * @returns {wm.protobuf.PlaceList} PlaceList instance
             */
            PlaceList.create = function create(properties) {
                return new PlaceList(properties);
            };

            /**
             * Encodes the specified PlaceList message. Does not implicitly {@link wm.protobuf.PlaceList.verify|verify} messages.
             * @function encode
             * @memberof wm.protobuf.PlaceList
             * @static
             * @param {wm.protobuf.IPlaceList} message PlaceList message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PlaceList.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.places != null && message.places.length)
                    for (let i = 0; i < message.places.length; ++i)
                        $root.wm.protobuf.Place.encode(message.places[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified PlaceList message, length delimited. Does not implicitly {@link wm.protobuf.PlaceList.verify|verify} messages.
             * @function encodeDelimited
             * @memberof wm.protobuf.PlaceList
             * @static
             * @param {wm.protobuf.IPlaceList} message PlaceList message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PlaceList.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a PlaceList message from the specified reader or buffer.
             * @function decode
             * @memberof wm.protobuf.PlaceList
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {wm.protobuf.PlaceList} PlaceList
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PlaceList.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.wm.protobuf.PlaceList();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            if (!(message.places && message.places.length))
                                message.places = [];
                            message.places.push($root.wm.protobuf.Place.decode(reader, reader.uint32()));
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a PlaceList message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof wm.protobuf.PlaceList
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {wm.protobuf.PlaceList} PlaceList
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PlaceList.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a PlaceList message.
             * @function verify
             * @memberof wm.protobuf.PlaceList
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            PlaceList.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.places != null && message.hasOwnProperty("places")) {
                    if (!Array.isArray(message.places))
                        return "places: array expected";
                    for (let i = 0; i < message.places.length; ++i) {
                        let error = $root.wm.protobuf.Place.verify(message.places[i]);
                        if (error)
                            return "places." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a PlaceList message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof wm.protobuf.PlaceList
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {wm.protobuf.PlaceList} PlaceList
             */
            PlaceList.fromObject = function fromObject(object) {
                if (object instanceof $root.wm.protobuf.PlaceList)
                    return object;
                let message = new $root.wm.protobuf.PlaceList();
                if (object.places) {
                    if (!Array.isArray(object.places))
                        throw TypeError(".wm.protobuf.PlaceList.places: array expected");
                    message.places = [];
                    for (let i = 0; i < object.places.length; ++i) {
                        if (typeof object.places[i] !== "object")
                            throw TypeError(".wm.protobuf.PlaceList.places: object expected");
                        message.places[i] = $root.wm.protobuf.Place.fromObject(object.places[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from a PlaceList message. Also converts values to other types if specified.
             * @function toObject
             * @memberof wm.protobuf.PlaceList
             * @static
             * @param {wm.protobuf.PlaceList} message PlaceList
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            PlaceList.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.places = [];
                if (message.places && message.places.length) {
                    object.places = [];
                    for (let j = 0; j < message.places.length; ++j)
                        object.places[j] = $root.wm.protobuf.Place.toObject(message.places[j], options);
                }
                return object;
            };

            /**
             * Converts this PlaceList to JSON.
             * @function toJSON
             * @memberof wm.protobuf.PlaceList
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            PlaceList.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for PlaceList
             * @function getTypeUrl
             * @memberof wm.protobuf.PlaceList
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            PlaceList.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/wm.protobuf.PlaceList";
            };

            return PlaceList;
        })();

        protobuf.GhostList = (function() {

            /**
             * Properties of a GhostList.
             * @memberof wm.protobuf
             * @interface IGhostList
             * @property {Array.<wm.protobuf.IGhostCar>|null} [ghosts] GhostList ghosts
             */

            /**
             * Constructs a new GhostList.
             * @memberof wm.protobuf
             * @classdesc Represents a GhostList.
             * @implements IGhostList
             * @constructor
             * @param {wm.protobuf.IGhostList=} [properties] Properties to set
             */
            function GhostList(properties) {
                this.ghosts = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * GhostList ghosts.
             * @member {Array.<wm.protobuf.IGhostCar>} ghosts
             * @memberof wm.protobuf.GhostList
             * @instance
             */
            GhostList.prototype.ghosts = $util.emptyArray;

            /**
             * Creates a new GhostList instance using the specified properties.
             * @function create
             * @memberof wm.protobuf.GhostList
             * @static
             * @param {wm.protobuf.IGhostList=} [properties] Properties to set
             * @returns {wm.protobuf.GhostList} GhostList instance
             */
            GhostList.create = function create(properties) {
                return new GhostList(properties);
            };

            /**
             * Encodes the specified GhostList message. Does not implicitly {@link wm.protobuf.GhostList.verify|verify} messages.
             * @function encode
             * @memberof wm.protobuf.GhostList
             * @static
             * @param {wm.protobuf.IGhostList} message GhostList message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GhostList.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.ghosts != null && message.ghosts.length)
                    for (let i = 0; i < message.ghosts.length; ++i)
                        $root.wm.protobuf.GhostCar.encode(message.ghosts[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified GhostList message, length delimited. Does not implicitly {@link wm.protobuf.GhostList.verify|verify} messages.
             * @function encodeDelimited
             * @memberof wm.protobuf.GhostList
             * @static
             * @param {wm.protobuf.IGhostList} message GhostList message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GhostList.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a GhostList message from the specified reader or buffer.
             * @function decode
             * @memberof wm.protobuf.GhostList
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {wm.protobuf.GhostList} GhostList
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GhostList.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.wm.protobuf.GhostList();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            if (!(message.ghosts && message.ghosts.length))
                                message.ghosts = [];
                            message.ghosts.push($root.wm.protobuf.GhostCar.decode(reader, reader.uint32()));
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a GhostList message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof wm.protobuf.GhostList
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {wm.protobuf.GhostList} GhostList
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GhostList.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a GhostList message.
             * @function verify
             * @memberof wm.protobuf.GhostList
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            GhostList.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.ghosts != null && message.hasOwnProperty("ghosts")) {
                    if (!Array.isArray(message.ghosts))
                        return "ghosts: array expected";
                    for (let i = 0; i < message.ghosts.length; ++i) {
                        let error = $root.wm.protobuf.GhostCar.verify(message.ghosts[i]);
                        if (error)
                            return "ghosts." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a GhostList message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof wm.protobuf.GhostList
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {wm.protobuf.GhostList} GhostList
             */
            GhostList.fromObject = function fromObject(object) {
                if (object instanceof $root.wm.protobuf.GhostList)
                    return object;
                let message = new $root.wm.protobuf.GhostList();
                if (object.ghosts) {
                    if (!Array.isArray(object.ghosts))
                        throw TypeError(".wm.protobuf.GhostList.ghosts: array expected");
                    message.ghosts = [];
                    for (let i = 0; i < object.ghosts.length; ++i) {
                        if (typeof object.ghosts[i] !== "object")
                            throw TypeError(".wm.protobuf.GhostList.ghosts: object expected");
                        message.ghosts[i] = $root.wm.protobuf.GhostCar.fromObject(object.ghosts[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from a GhostList message. Also converts values to other types if specified.
             * @function toObject
             * @memberof wm.protobuf.GhostList
             * @static
             * @param {wm.protobuf.GhostList} message GhostList
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            GhostList.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.ghosts = [];
                if (message.ghosts && message.ghosts.length) {
                    object.ghosts = [];
                    for (let j = 0; j < message.ghosts.length; ++j)
                        object.ghosts[j] = $root.wm.protobuf.GhostCar.toObject(message.ghosts[j], options);
                }
                return object;
            };

            /**
             * Converts this GhostList to JSON.
             * @function toJSON
             * @memberof wm.protobuf.GhostList
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            GhostList.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for GhostList
             * @function getTypeUrl
             * @memberof wm.protobuf.GhostList
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            GhostList.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/wm.protobuf.GhostList";
            };

            return GhostList;
        })();

        protobuf.CarSummary = (function() {

            /**
             * Properties of a CarSummary.
             * @memberof wm.protobuf
             * @interface ICarSummary
             * @property {number} hitCount CarSummary hitCount
             * @property {Array.<wm.protobuf.ICar>|null} [cars] CarSummary cars
             */

            /**
             * Constructs a new CarSummary.
             * @memberof wm.protobuf
             * @classdesc Represents a CarSummary.
             * @implements ICarSummary
             * @constructor
             * @param {wm.protobuf.ICarSummary=} [properties] Properties to set
             */
            function CarSummary(properties) {
                this.cars = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * CarSummary hitCount.
             * @member {number} hitCount
             * @memberof wm.protobuf.CarSummary
             * @instance
             */
            CarSummary.prototype.hitCount = 0;

            /**
             * CarSummary cars.
             * @member {Array.<wm.protobuf.ICar>} cars
             * @memberof wm.protobuf.CarSummary
             * @instance
             */
            CarSummary.prototype.cars = $util.emptyArray;

            /**
             * Creates a new CarSummary instance using the specified properties.
             * @function create
             * @memberof wm.protobuf.CarSummary
             * @static
             * @param {wm.protobuf.ICarSummary=} [properties] Properties to set
             * @returns {wm.protobuf.CarSummary} CarSummary instance
             */
            CarSummary.create = function create(properties) {
                return new CarSummary(properties);
            };

            /**
             * Encodes the specified CarSummary message. Does not implicitly {@link wm.protobuf.CarSummary.verify|verify} messages.
             * @function encode
             * @memberof wm.protobuf.CarSummary
             * @static
             * @param {wm.protobuf.ICarSummary} message CarSummary message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            CarSummary.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.hitCount);
                if (message.cars != null && message.cars.length)
                    for (let i = 0; i < message.cars.length; ++i)
                        $root.wm.protobuf.Car.encode(message.cars[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified CarSummary message, length delimited. Does not implicitly {@link wm.protobuf.CarSummary.verify|verify} messages.
             * @function encodeDelimited
             * @memberof wm.protobuf.CarSummary
             * @static
             * @param {wm.protobuf.ICarSummary} message CarSummary message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            CarSummary.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a CarSummary message from the specified reader or buffer.
             * @function decode
             * @memberof wm.protobuf.CarSummary
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {wm.protobuf.CarSummary} CarSummary
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            CarSummary.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.wm.protobuf.CarSummary();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.hitCount = reader.uint32();
                            break;
                        }
                    case 2: {
                            if (!(message.cars && message.cars.length))
                                message.cars = [];
                            message.cars.push($root.wm.protobuf.Car.decode(reader, reader.uint32()));
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("hitCount"))
                    throw $util.ProtocolError("missing required 'hitCount'", { instance: message });
                return message;
            };

            /**
             * Decodes a CarSummary message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof wm.protobuf.CarSummary
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {wm.protobuf.CarSummary} CarSummary
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            CarSummary.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a CarSummary message.
             * @function verify
             * @memberof wm.protobuf.CarSummary
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            CarSummary.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (!$util.isInteger(message.hitCount))
                    return "hitCount: integer expected";
                if (message.cars != null && message.hasOwnProperty("cars")) {
                    if (!Array.isArray(message.cars))
                        return "cars: array expected";
                    for (let i = 0; i < message.cars.length; ++i) {
                        let error = $root.wm.protobuf.Car.verify(message.cars[i]);
                        if (error)
                            return "cars." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a CarSummary message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof wm.protobuf.CarSummary
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {wm.protobuf.CarSummary} CarSummary
             */
            CarSummary.fromObject = function fromObject(object) {
                if (object instanceof $root.wm.protobuf.CarSummary)
                    return object;
                let message = new $root.wm.protobuf.CarSummary();
                if (object.hitCount != null)
                    message.hitCount = object.hitCount >>> 0;
                if (object.cars) {
                    if (!Array.isArray(object.cars))
                        throw TypeError(".wm.protobuf.CarSummary.cars: array expected");
                    message.cars = [];
                    for (let i = 0; i < object.cars.length; ++i) {
                        if (typeof object.cars[i] !== "object")
                            throw TypeError(".wm.protobuf.CarSummary.cars: object expected");
                        message.cars[i] = $root.wm.protobuf.Car.fromObject(object.cars[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from a CarSummary message. Also converts values to other types if specified.
             * @function toObject
             * @memberof wm.protobuf.CarSummary
             * @static
             * @param {wm.protobuf.CarSummary} message CarSummary
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            CarSummary.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.cars = [];
                if (options.defaults)
                    object.hitCount = 0;
                if (message.hitCount != null && message.hasOwnProperty("hitCount"))
                    object.hitCount = message.hitCount;
                if (message.cars && message.cars.length) {
                    object.cars = [];
                    for (let j = 0; j < message.cars.length; ++j)
                        object.cars[j] = $root.wm.protobuf.Car.toObject(message.cars[j], options);
                }
                return object;
            };

            /**
             * Converts this CarSummary to JSON.
             * @function toJSON
             * @memberof wm.protobuf.CarSummary
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            CarSummary.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for CarSummary
             * @function getTypeUrl
             * @memberof wm.protobuf.CarSummary
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            CarSummary.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/wm.protobuf.CarSummary";
            };

            return CarSummary;
        })();

        protobuf.FileList = (function() {

            /**
             * Properties of a FileList.
             * @memberof wm.protobuf
             * @interface IFileList
             * @property {Array.<wm.protobuf.FileList.IFileInfo>|null} [files] FileList files
             * @property {number|null} [interval] FileList interval
             */

            /**
             * Constructs a new FileList.
             * @memberof wm.protobuf
             * @classdesc Represents a FileList.
             * @implements IFileList
             * @constructor
             * @param {wm.protobuf.IFileList=} [properties] Properties to set
             */
            function FileList(properties) {
                this.files = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * FileList files.
             * @member {Array.<wm.protobuf.FileList.IFileInfo>} files
             * @memberof wm.protobuf.FileList
             * @instance
             */
            FileList.prototype.files = $util.emptyArray;

            /**
             * FileList interval.
             * @member {number} interval
             * @memberof wm.protobuf.FileList
             * @instance
             */
            FileList.prototype.interval = 0;

            /**
             * Creates a new FileList instance using the specified properties.
             * @function create
             * @memberof wm.protobuf.FileList
             * @static
             * @param {wm.protobuf.IFileList=} [properties] Properties to set
             * @returns {wm.protobuf.FileList} FileList instance
             */
            FileList.create = function create(properties) {
                return new FileList(properties);
            };

            /**
             * Encodes the specified FileList message. Does not implicitly {@link wm.protobuf.FileList.verify|verify} messages.
             * @function encode
             * @memberof wm.protobuf.FileList
             * @static
             * @param {wm.protobuf.IFileList} message FileList message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FileList.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.files != null && message.files.length)
                    for (let i = 0; i < message.files.length; ++i)
                        $root.wm.protobuf.FileList.FileInfo.encode(message.files[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.interval != null && Object.hasOwnProperty.call(message, "interval"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.interval);
                return writer;
            };

            /**
             * Encodes the specified FileList message, length delimited. Does not implicitly {@link wm.protobuf.FileList.verify|verify} messages.
             * @function encodeDelimited
             * @memberof wm.protobuf.FileList
             * @static
             * @param {wm.protobuf.IFileList} message FileList message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FileList.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a FileList message from the specified reader or buffer.
             * @function decode
             * @memberof wm.protobuf.FileList
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {wm.protobuf.FileList} FileList
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FileList.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.wm.protobuf.FileList();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            if (!(message.files && message.files.length))
                                message.files = [];
                            message.files.push($root.wm.protobuf.FileList.FileInfo.decode(reader, reader.uint32()));
                            break;
                        }
                    case 2: {
                            message.interval = reader.uint32();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a FileList message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof wm.protobuf.FileList
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {wm.protobuf.FileList} FileList
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FileList.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a FileList message.
             * @function verify
             * @memberof wm.protobuf.FileList
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            FileList.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.files != null && message.hasOwnProperty("files")) {
                    if (!Array.isArray(message.files))
                        return "files: array expected";
                    for (let i = 0; i < message.files.length; ++i) {
                        let error = $root.wm.protobuf.FileList.FileInfo.verify(message.files[i]);
                        if (error)
                            return "files." + error;
                    }
                }
                if (message.interval != null && message.hasOwnProperty("interval"))
                    if (!$util.isInteger(message.interval))
                        return "interval: integer expected";
                return null;
            };

            /**
             * Creates a FileList message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof wm.protobuf.FileList
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {wm.protobuf.FileList} FileList
             */
            FileList.fromObject = function fromObject(object) {
                if (object instanceof $root.wm.protobuf.FileList)
                    return object;
                let message = new $root.wm.protobuf.FileList();
                if (object.files) {
                    if (!Array.isArray(object.files))
                        throw TypeError(".wm.protobuf.FileList.files: array expected");
                    message.files = [];
                    for (let i = 0; i < object.files.length; ++i) {
                        if (typeof object.files[i] !== "object")
                            throw TypeError(".wm.protobuf.FileList.files: object expected");
                        message.files[i] = $root.wm.protobuf.FileList.FileInfo.fromObject(object.files[i]);
                    }
                }
                if (object.interval != null)
                    message.interval = object.interval >>> 0;
                return message;
            };

            /**
             * Creates a plain object from a FileList message. Also converts values to other types if specified.
             * @function toObject
             * @memberof wm.protobuf.FileList
             * @static
             * @param {wm.protobuf.FileList} message FileList
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            FileList.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.files = [];
                if (options.defaults)
                    object.interval = 0;
                if (message.files && message.files.length) {
                    object.files = [];
                    for (let j = 0; j < message.files.length; ++j)
                        object.files[j] = $root.wm.protobuf.FileList.FileInfo.toObject(message.files[j], options);
                }
                if (message.interval != null && message.hasOwnProperty("interval"))
                    object.interval = message.interval;
                return object;
            };

            /**
             * Converts this FileList to JSON.
             * @function toJSON
             * @memberof wm.protobuf.FileList
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            FileList.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for FileList
             * @function getTypeUrl
             * @memberof wm.protobuf.FileList
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            FileList.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/wm.protobuf.FileList";
            };

            FileList.FileInfo = (function() {

                /**
                 * Properties of a FileInfo.
                 * @memberof wm.protobuf.FileList
                 * @interface IFileInfo
                 * @property {number} fileId FileInfo fileId
                 * @property {wm.protobuf.FileType} fileType FileInfo fileType
                 * @property {number} fileSize FileInfo fileSize
                 * @property {string} url FileInfo url
                 * @property {Uint8Array} sha1sum FileInfo sha1sum
                 * @property {number} notBefore FileInfo notBefore
                 * @property {number} notAfter FileInfo notAfter
                 */

                /**
                 * Constructs a new FileInfo.
                 * @memberof wm.protobuf.FileList
                 * @classdesc Represents a FileInfo.
                 * @implements IFileInfo
                 * @constructor
                 * @param {wm.protobuf.FileList.IFileInfo=} [properties] Properties to set
                 */
                function FileInfo(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * FileInfo fileId.
                 * @member {number} fileId
                 * @memberof wm.protobuf.FileList.FileInfo
                 * @instance
                 */
                FileInfo.prototype.fileId = 0;

                /**
                 * FileInfo fileType.
                 * @member {wm.protobuf.FileType} fileType
                 * @memberof wm.protobuf.FileList.FileInfo
                 * @instance
                 */
                FileInfo.prototype.fileType = 1;

                /**
                 * FileInfo fileSize.
                 * @member {number} fileSize
                 * @memberof wm.protobuf.FileList.FileInfo
                 * @instance
                 */
                FileInfo.prototype.fileSize = 0;

                /**
                 * FileInfo url.
                 * @member {string} url
                 * @memberof wm.protobuf.FileList.FileInfo
                 * @instance
                 */
                FileInfo.prototype.url = "";

                /**
                 * FileInfo sha1sum.
                 * @member {Uint8Array} sha1sum
                 * @memberof wm.protobuf.FileList.FileInfo
                 * @instance
                 */
                FileInfo.prototype.sha1sum = $util.newBuffer([]);

                /**
                 * FileInfo notBefore.
                 * @member {number} notBefore
                 * @memberof wm.protobuf.FileList.FileInfo
                 * @instance
                 */
                FileInfo.prototype.notBefore = 0;

                /**
                 * FileInfo notAfter.
                 * @member {number} notAfter
                 * @memberof wm.protobuf.FileList.FileInfo
                 * @instance
                 */
                FileInfo.prototype.notAfter = 0;

                /**
                 * Creates a new FileInfo instance using the specified properties.
                 * @function create
                 * @memberof wm.protobuf.FileList.FileInfo
                 * @static
                 * @param {wm.protobuf.FileList.IFileInfo=} [properties] Properties to set
                 * @returns {wm.protobuf.FileList.FileInfo} FileInfo instance
                 */
                FileInfo.create = function create(properties) {
                    return new FileInfo(properties);
                };

                /**
                 * Encodes the specified FileInfo message. Does not implicitly {@link wm.protobuf.FileList.FileInfo.verify|verify} messages.
                 * @function encode
                 * @memberof wm.protobuf.FileList.FileInfo
                 * @static
                 * @param {wm.protobuf.FileList.IFileInfo} message FileInfo message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FileInfo.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.fileId);
                    writer.uint32(/* id 2, wireType 0 =*/16).int32(message.fileType);
                    writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.fileSize);
                    writer.uint32(/* id 4, wireType 2 =*/34).string(message.url);
                    writer.uint32(/* id 5, wireType 2 =*/42).bytes(message.sha1sum);
                    writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.notBefore);
                    writer.uint32(/* id 7, wireType 0 =*/56).uint32(message.notAfter);
                    return writer;
                };

                /**
                 * Encodes the specified FileInfo message, length delimited. Does not implicitly {@link wm.protobuf.FileList.FileInfo.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof wm.protobuf.FileList.FileInfo
                 * @static
                 * @param {wm.protobuf.FileList.IFileInfo} message FileInfo message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FileInfo.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a FileInfo message from the specified reader or buffer.
                 * @function decode
                 * @memberof wm.protobuf.FileList.FileInfo
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {wm.protobuf.FileList.FileInfo} FileInfo
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FileInfo.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.wm.protobuf.FileList.FileInfo();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.fileId = reader.uint32();
                                break;
                            }
                        case 2: {
                                message.fileType = reader.int32();
                                break;
                            }
                        case 3: {
                                message.fileSize = reader.uint32();
                                break;
                            }
                        case 4: {
                                message.url = reader.string();
                                break;
                            }
                        case 5: {
                                message.sha1sum = reader.bytes();
                                break;
                            }
                        case 6: {
                                message.notBefore = reader.uint32();
                                break;
                            }
                        case 7: {
                                message.notAfter = reader.uint32();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    if (!message.hasOwnProperty("fileId"))
                        throw $util.ProtocolError("missing required 'fileId'", { instance: message });
                    if (!message.hasOwnProperty("fileType"))
                        throw $util.ProtocolError("missing required 'fileType'", { instance: message });
                    if (!message.hasOwnProperty("fileSize"))
                        throw $util.ProtocolError("missing required 'fileSize'", { instance: message });
                    if (!message.hasOwnProperty("url"))
                        throw $util.ProtocolError("missing required 'url'", { instance: message });
                    if (!message.hasOwnProperty("sha1sum"))
                        throw $util.ProtocolError("missing required 'sha1sum'", { instance: message });
                    if (!message.hasOwnProperty("notBefore"))
                        throw $util.ProtocolError("missing required 'notBefore'", { instance: message });
                    if (!message.hasOwnProperty("notAfter"))
                        throw $util.ProtocolError("missing required 'notAfter'", { instance: message });
                    return message;
                };

                /**
                 * Decodes a FileInfo message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof wm.protobuf.FileList.FileInfo
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {wm.protobuf.FileList.FileInfo} FileInfo
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FileInfo.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a FileInfo message.
                 * @function verify
                 * @memberof wm.protobuf.FileList.FileInfo
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                FileInfo.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (!$util.isInteger(message.fileId))
                        return "fileId: integer expected";
                    switch (message.fileType) {
                    default:
                        return "fileType: enum value expected";
                    case 1:
                    case 4:
                    case 6:
                    case 7:
                        break;
                    }
                    if (!$util.isInteger(message.fileSize))
                        return "fileSize: integer expected";
                    if (!$util.isString(message.url))
                        return "url: string expected";
                    if (!(message.sha1sum && typeof message.sha1sum.length === "number" || $util.isString(message.sha1sum)))
                        return "sha1sum: buffer expected";
                    if (!$util.isInteger(message.notBefore))
                        return "notBefore: integer expected";
                    if (!$util.isInteger(message.notAfter))
                        return "notAfter: integer expected";
                    return null;
                };

                /**
                 * Creates a FileInfo message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof wm.protobuf.FileList.FileInfo
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {wm.protobuf.FileList.FileInfo} FileInfo
                 */
                FileInfo.fromObject = function fromObject(object) {
                    if (object instanceof $root.wm.protobuf.FileList.FileInfo)
                        return object;
                    let message = new $root.wm.protobuf.FileList.FileInfo();
                    if (object.fileId != null)
                        message.fileId = object.fileId >>> 0;
                    switch (object.fileType) {
                    default:
                        if (typeof object.fileType === "number") {
                            message.fileType = object.fileType;
                            break;
                        }
                        break;
                    case "FILE_PROMOTION_ANNOUNCEMENT":
                    case 1:
                        message.fileType = 1;
                        break;
                    case "FILE_FEATURE_ANNOUNCEMENT":
                    case 4:
                        message.fileType = 4;
                        break;
                    case "FILE_SPAPP_ANNOUNCEMENT":
                    case 6:
                        message.fileType = 6;
                        break;
                    case "FILE_TRIAL_ANNOUNCEMENT":
                    case 7:
                        message.fileType = 7;
                        break;
                    }
                    if (object.fileSize != null)
                        message.fileSize = object.fileSize >>> 0;
                    if (object.url != null)
                        message.url = String(object.url);
                    if (object.sha1sum != null)
                        if (typeof object.sha1sum === "string")
                            $util.base64.decode(object.sha1sum, message.sha1sum = $util.newBuffer($util.base64.length(object.sha1sum)), 0);
                        else if (object.sha1sum.length >= 0)
                            message.sha1sum = object.sha1sum;
                    if (object.notBefore != null)
                        message.notBefore = object.notBefore >>> 0;
                    if (object.notAfter != null)
                        message.notAfter = object.notAfter >>> 0;
                    return message;
                };

                /**
                 * Creates a plain object from a FileInfo message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof wm.protobuf.FileList.FileInfo
                 * @static
                 * @param {wm.protobuf.FileList.FileInfo} message FileInfo
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                FileInfo.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        object.fileId = 0;
                        object.fileType = options.enums === String ? "FILE_PROMOTION_ANNOUNCEMENT" : 1;
                        object.fileSize = 0;
                        object.url = "";
                        if (options.bytes === String)
                            object.sha1sum = "";
                        else {
                            object.sha1sum = [];
                            if (options.bytes !== Array)
                                object.sha1sum = $util.newBuffer(object.sha1sum);
                        }
                        object.notBefore = 0;
                        object.notAfter = 0;
                    }
                    if (message.fileId != null && message.hasOwnProperty("fileId"))
                        object.fileId = message.fileId;
                    if (message.fileType != null && message.hasOwnProperty("fileType"))
                        object.fileType = options.enums === String ? $root.wm.protobuf.FileType[message.fileType] === undefined ? message.fileType : $root.wm.protobuf.FileType[message.fileType] : message.fileType;
                    if (message.fileSize != null && message.hasOwnProperty("fileSize"))
                        object.fileSize = message.fileSize;
                    if (message.url != null && message.hasOwnProperty("url"))
                        object.url = message.url;
                    if (message.sha1sum != null && message.hasOwnProperty("sha1sum"))
                        object.sha1sum = options.bytes === String ? $util.base64.encode(message.sha1sum, 0, message.sha1sum.length) : options.bytes === Array ? Array.prototype.slice.call(message.sha1sum) : message.sha1sum;
                    if (message.notBefore != null && message.hasOwnProperty("notBefore"))
                        object.notBefore = message.notBefore;
                    if (message.notAfter != null && message.hasOwnProperty("notAfter"))
                        object.notAfter = message.notAfter;
                    return object;
                };

                /**
                 * Converts this FileInfo to JSON.
                 * @function toJSON
                 * @memberof wm.protobuf.FileList.FileInfo
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                FileInfo.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                /**
                 * Gets the default type url for FileInfo
                 * @function getTypeUrl
                 * @memberof wm.protobuf.FileList.FileInfo
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                FileInfo.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/wm.protobuf.FileList.FileInfo";
                };

                return FileInfo;
            })();

            return FileList;
        })();

        protobuf.GhostCompetitionTarget = (function() {

            /**
             * Properties of a GhostCompetitionTarget.
             * @memberof wm.protobuf
             * @interface IGhostCompetitionTarget
             * @property {number} competitionId GhostCompetitionTarget competitionId
             * @property {number|null} [specialGhostId] GhostCompetitionTarget specialGhostId
             * @property {wm.protobuf.IGhostCar} ghostCar GhostCompetitionTarget ghostCar
             * @property {number|Long} trailId GhostCompetitionTarget trailId
             * @property {number} updatedAt GhostCompetitionTarget updatedAt
             * @property {wm.protobuf.IGhostCompetitionSchedule|null} [competitionSchedule] GhostCompetitionTarget competitionSchedule
             */

            /**
             * Constructs a new GhostCompetitionTarget.
             * @memberof wm.protobuf
             * @classdesc Represents a GhostCompetitionTarget.
             * @implements IGhostCompetitionTarget
             * @constructor
             * @param {wm.protobuf.IGhostCompetitionTarget=} [properties] Properties to set
             */
            function GhostCompetitionTarget(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * GhostCompetitionTarget competitionId.
             * @member {number} competitionId
             * @memberof wm.protobuf.GhostCompetitionTarget
             * @instance
             */
            GhostCompetitionTarget.prototype.competitionId = 0;

            /**
             * GhostCompetitionTarget specialGhostId.
             * @member {number} specialGhostId
             * @memberof wm.protobuf.GhostCompetitionTarget
             * @instance
             */
            GhostCompetitionTarget.prototype.specialGhostId = 0;

            /**
             * GhostCompetitionTarget ghostCar.
             * @member {wm.protobuf.IGhostCar} ghostCar
             * @memberof wm.protobuf.GhostCompetitionTarget
             * @instance
             */
            GhostCompetitionTarget.prototype.ghostCar = null;

            /**
             * GhostCompetitionTarget trailId.
             * @member {number|Long} trailId
             * @memberof wm.protobuf.GhostCompetitionTarget
             * @instance
             */
            GhostCompetitionTarget.prototype.trailId = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

            /**
             * GhostCompetitionTarget updatedAt.
             * @member {number} updatedAt
             * @memberof wm.protobuf.GhostCompetitionTarget
             * @instance
             */
            GhostCompetitionTarget.prototype.updatedAt = 0;

            /**
             * GhostCompetitionTarget competitionSchedule.
             * @member {wm.protobuf.IGhostCompetitionSchedule|null|undefined} competitionSchedule
             * @memberof wm.protobuf.GhostCompetitionTarget
             * @instance
             */
            GhostCompetitionTarget.prototype.competitionSchedule = null;

            /**
             * Creates a new GhostCompetitionTarget instance using the specified properties.
             * @function create
             * @memberof wm.protobuf.GhostCompetitionTarget
             * @static
             * @param {wm.protobuf.IGhostCompetitionTarget=} [properties] Properties to set
             * @returns {wm.protobuf.GhostCompetitionTarget} GhostCompetitionTarget instance
             */
            GhostCompetitionTarget.create = function create(properties) {
                return new GhostCompetitionTarget(properties);
            };

            /**
             * Encodes the specified GhostCompetitionTarget message. Does not implicitly {@link wm.protobuf.GhostCompetitionTarget.verify|verify} messages.
             * @function encode
             * @memberof wm.protobuf.GhostCompetitionTarget
             * @static
             * @param {wm.protobuf.IGhostCompetitionTarget} message GhostCompetitionTarget message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GhostCompetitionTarget.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.competitionId);
                if (message.specialGhostId != null && Object.hasOwnProperty.call(message, "specialGhostId"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.specialGhostId);
                $root.wm.protobuf.GhostCar.encode(message.ghostCar, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                writer.uint32(/* id 4, wireType 0 =*/32).uint64(message.trailId);
                writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.updatedAt);
                if (message.competitionSchedule != null && Object.hasOwnProperty.call(message, "competitionSchedule"))
                    $root.wm.protobuf.GhostCompetitionSchedule.encode(message.competitionSchedule, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified GhostCompetitionTarget message, length delimited. Does not implicitly {@link wm.protobuf.GhostCompetitionTarget.verify|verify} messages.
             * @function encodeDelimited
             * @memberof wm.protobuf.GhostCompetitionTarget
             * @static
             * @param {wm.protobuf.IGhostCompetitionTarget} message GhostCompetitionTarget message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GhostCompetitionTarget.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a GhostCompetitionTarget message from the specified reader or buffer.
             * @function decode
             * @memberof wm.protobuf.GhostCompetitionTarget
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {wm.protobuf.GhostCompetitionTarget} GhostCompetitionTarget
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GhostCompetitionTarget.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.wm.protobuf.GhostCompetitionTarget();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.competitionId = reader.uint32();
                            break;
                        }
                    case 2: {
                            message.specialGhostId = reader.uint32();
                            break;
                        }
                    case 3: {
                            message.ghostCar = $root.wm.protobuf.GhostCar.decode(reader, reader.uint32());
                            break;
                        }
                    case 4: {
                            message.trailId = reader.uint64();
                            break;
                        }
                    case 5: {
                            message.updatedAt = reader.uint32();
                            break;
                        }
                    case 6: {
                            message.competitionSchedule = $root.wm.protobuf.GhostCompetitionSchedule.decode(reader, reader.uint32());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("competitionId"))
                    throw $util.ProtocolError("missing required 'competitionId'", { instance: message });
                if (!message.hasOwnProperty("ghostCar"))
                    throw $util.ProtocolError("missing required 'ghostCar'", { instance: message });
                if (!message.hasOwnProperty("trailId"))
                    throw $util.ProtocolError("missing required 'trailId'", { instance: message });
                if (!message.hasOwnProperty("updatedAt"))
                    throw $util.ProtocolError("missing required 'updatedAt'", { instance: message });
                return message;
            };

            /**
             * Decodes a GhostCompetitionTarget message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof wm.protobuf.GhostCompetitionTarget
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {wm.protobuf.GhostCompetitionTarget} GhostCompetitionTarget
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GhostCompetitionTarget.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a GhostCompetitionTarget message.
             * @function verify
             * @memberof wm.protobuf.GhostCompetitionTarget
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            GhostCompetitionTarget.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (!$util.isInteger(message.competitionId))
                    return "competitionId: integer expected";
                if (message.specialGhostId != null && message.hasOwnProperty("specialGhostId"))
                    if (!$util.isInteger(message.specialGhostId))
                        return "specialGhostId: integer expected";
                {
                    let error = $root.wm.protobuf.GhostCar.verify(message.ghostCar);
                    if (error)
                        return "ghostCar." + error;
                }
                if (!$util.isInteger(message.trailId) && !(message.trailId && $util.isInteger(message.trailId.low) && $util.isInteger(message.trailId.high)))
                    return "trailId: integer|Long expected";
                if (!$util.isInteger(message.updatedAt))
                    return "updatedAt: integer expected";
                if (message.competitionSchedule != null && message.hasOwnProperty("competitionSchedule")) {
                    let error = $root.wm.protobuf.GhostCompetitionSchedule.verify(message.competitionSchedule);
                    if (error)
                        return "competitionSchedule." + error;
                }
                return null;
            };

            /**
             * Creates a GhostCompetitionTarget message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof wm.protobuf.GhostCompetitionTarget
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {wm.protobuf.GhostCompetitionTarget} GhostCompetitionTarget
             */
            GhostCompetitionTarget.fromObject = function fromObject(object) {
                if (object instanceof $root.wm.protobuf.GhostCompetitionTarget)
                    return object;
                let message = new $root.wm.protobuf.GhostCompetitionTarget();
                if (object.competitionId != null)
                    message.competitionId = object.competitionId >>> 0;
                if (object.specialGhostId != null)
                    message.specialGhostId = object.specialGhostId >>> 0;
                if (object.ghostCar != null) {
                    if (typeof object.ghostCar !== "object")
                        throw TypeError(".wm.protobuf.GhostCompetitionTarget.ghostCar: object expected");
                    message.ghostCar = $root.wm.protobuf.GhostCar.fromObject(object.ghostCar);
                }
                if (object.trailId != null)
                    if ($util.Long)
                        (message.trailId = $util.Long.fromValue(object.trailId)).unsigned = true;
                    else if (typeof object.trailId === "string")
                        message.trailId = parseInt(object.trailId, 10);
                    else if (typeof object.trailId === "number")
                        message.trailId = object.trailId;
                    else if (typeof object.trailId === "object")
                        message.trailId = new $util.LongBits(object.trailId.low >>> 0, object.trailId.high >>> 0).toNumber(true);
                if (object.updatedAt != null)
                    message.updatedAt = object.updatedAt >>> 0;
                if (object.competitionSchedule != null) {
                    if (typeof object.competitionSchedule !== "object")
                        throw TypeError(".wm.protobuf.GhostCompetitionTarget.competitionSchedule: object expected");
                    message.competitionSchedule = $root.wm.protobuf.GhostCompetitionSchedule.fromObject(object.competitionSchedule);
                }
                return message;
            };

            /**
             * Creates a plain object from a GhostCompetitionTarget message. Also converts values to other types if specified.
             * @function toObject
             * @memberof wm.protobuf.GhostCompetitionTarget
             * @static
             * @param {wm.protobuf.GhostCompetitionTarget} message GhostCompetitionTarget
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            GhostCompetitionTarget.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.competitionId = 0;
                    object.specialGhostId = 0;
                    object.ghostCar = null;
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, true);
                        object.trailId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.trailId = options.longs === String ? "0" : 0;
                    object.updatedAt = 0;
                    object.competitionSchedule = null;
                }
                if (message.competitionId != null && message.hasOwnProperty("competitionId"))
                    object.competitionId = message.competitionId;
                if (message.specialGhostId != null && message.hasOwnProperty("specialGhostId"))
                    object.specialGhostId = message.specialGhostId;
                if (message.ghostCar != null && message.hasOwnProperty("ghostCar"))
                    object.ghostCar = $root.wm.protobuf.GhostCar.toObject(message.ghostCar, options);
                if (message.trailId != null && message.hasOwnProperty("trailId"))
                    if (typeof message.trailId === "number")
                        object.trailId = options.longs === String ? String(message.trailId) : message.trailId;
                    else
                        object.trailId = options.longs === String ? $util.Long.prototype.toString.call(message.trailId) : options.longs === Number ? new $util.LongBits(message.trailId.low >>> 0, message.trailId.high >>> 0).toNumber(true) : message.trailId;
                if (message.updatedAt != null && message.hasOwnProperty("updatedAt"))
                    object.updatedAt = message.updatedAt;
                if (message.competitionSchedule != null && message.hasOwnProperty("competitionSchedule"))
                    object.competitionSchedule = $root.wm.protobuf.GhostCompetitionSchedule.toObject(message.competitionSchedule, options);
                return object;
            };

            /**
             * Converts this GhostCompetitionTarget to JSON.
             * @function toJSON
             * @memberof wm.protobuf.GhostCompetitionTarget
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            GhostCompetitionTarget.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for GhostCompetitionTarget
             * @function getTypeUrl
             * @memberof wm.protobuf.GhostCompetitionTarget
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            GhostCompetitionTarget.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/wm.protobuf.GhostCompetitionTarget";
            };

            return GhostCompetitionTarget;
        })();

        protobuf.GhostKoshienParticipatingShop = (function() {

            /**
             * Properties of a GhostKoshienParticipatingShop.
             * @memberof wm.protobuf
             * @interface IGhostKoshienParticipatingShop
             * @property {number} koshienId GhostKoshienParticipatingShop koshienId
             * @property {Array.<wm.protobuf.IGhostKoshienRoundRank>|null} [roundRank] GhostKoshienParticipatingShop roundRank
             * @property {Array.<wm.protobuf.GhostKoshienParticipatingShop.IParticipantShop>|null} [participantStore] GhostKoshienParticipatingShop participantStore
             */

            /**
             * Constructs a new GhostKoshienParticipatingShop.
             * @memberof wm.protobuf
             * @classdesc Represents a GhostKoshienParticipatingShop.
             * @implements IGhostKoshienParticipatingShop
             * @constructor
             * @param {wm.protobuf.IGhostKoshienParticipatingShop=} [properties] Properties to set
             */
            function GhostKoshienParticipatingShop(properties) {
                this.roundRank = [];
                this.participantStore = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * GhostKoshienParticipatingShop koshienId.
             * @member {number} koshienId
             * @memberof wm.protobuf.GhostKoshienParticipatingShop
             * @instance
             */
            GhostKoshienParticipatingShop.prototype.koshienId = 0;

            /**
             * GhostKoshienParticipatingShop roundRank.
             * @member {Array.<wm.protobuf.IGhostKoshienRoundRank>} roundRank
             * @memberof wm.protobuf.GhostKoshienParticipatingShop
             * @instance
             */
            GhostKoshienParticipatingShop.prototype.roundRank = $util.emptyArray;

            /**
             * GhostKoshienParticipatingShop participantStore.
             * @member {Array.<wm.protobuf.GhostKoshienParticipatingShop.IParticipantShop>} participantStore
             * @memberof wm.protobuf.GhostKoshienParticipatingShop
             * @instance
             */
            GhostKoshienParticipatingShop.prototype.participantStore = $util.emptyArray;

            /**
             * Creates a new GhostKoshienParticipatingShop instance using the specified properties.
             * @function create
             * @memberof wm.protobuf.GhostKoshienParticipatingShop
             * @static
             * @param {wm.protobuf.IGhostKoshienParticipatingShop=} [properties] Properties to set
             * @returns {wm.protobuf.GhostKoshienParticipatingShop} GhostKoshienParticipatingShop instance
             */
            GhostKoshienParticipatingShop.create = function create(properties) {
                return new GhostKoshienParticipatingShop(properties);
            };

            /**
             * Encodes the specified GhostKoshienParticipatingShop message. Does not implicitly {@link wm.protobuf.GhostKoshienParticipatingShop.verify|verify} messages.
             * @function encode
             * @memberof wm.protobuf.GhostKoshienParticipatingShop
             * @static
             * @param {wm.protobuf.IGhostKoshienParticipatingShop} message GhostKoshienParticipatingShop message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GhostKoshienParticipatingShop.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.koshienId);
                if (message.roundRank != null && message.roundRank.length)
                    for (let i = 0; i < message.roundRank.length; ++i)
                        $root.wm.protobuf.GhostKoshienRoundRank.encode(message.roundRank[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                if (message.participantStore != null && message.participantStore.length)
                    for (let i = 0; i < message.participantStore.length; ++i)
                        $root.wm.protobuf.GhostKoshienParticipatingShop.ParticipantShop.encode(message.participantStore[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified GhostKoshienParticipatingShop message, length delimited. Does not implicitly {@link wm.protobuf.GhostKoshienParticipatingShop.verify|verify} messages.
             * @function encodeDelimited
             * @memberof wm.protobuf.GhostKoshienParticipatingShop
             * @static
             * @param {wm.protobuf.IGhostKoshienParticipatingShop} message GhostKoshienParticipatingShop message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GhostKoshienParticipatingShop.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a GhostKoshienParticipatingShop message from the specified reader or buffer.
             * @function decode
             * @memberof wm.protobuf.GhostKoshienParticipatingShop
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {wm.protobuf.GhostKoshienParticipatingShop} GhostKoshienParticipatingShop
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GhostKoshienParticipatingShop.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.wm.protobuf.GhostKoshienParticipatingShop();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.koshienId = reader.uint32();
                            break;
                        }
                    case 2: {
                            if (!(message.roundRank && message.roundRank.length))
                                message.roundRank = [];
                            message.roundRank.push($root.wm.protobuf.GhostKoshienRoundRank.decode(reader, reader.uint32()));
                            break;
                        }
                    case 3: {
                            if (!(message.participantStore && message.participantStore.length))
                                message.participantStore = [];
                            message.participantStore.push($root.wm.protobuf.GhostKoshienParticipatingShop.ParticipantShop.decode(reader, reader.uint32()));
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("koshienId"))
                    throw $util.ProtocolError("missing required 'koshienId'", { instance: message });
                return message;
            };

            /**
             * Decodes a GhostKoshienParticipatingShop message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof wm.protobuf.GhostKoshienParticipatingShop
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {wm.protobuf.GhostKoshienParticipatingShop} GhostKoshienParticipatingShop
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GhostKoshienParticipatingShop.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a GhostKoshienParticipatingShop message.
             * @function verify
             * @memberof wm.protobuf.GhostKoshienParticipatingShop
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            GhostKoshienParticipatingShop.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (!$util.isInteger(message.koshienId))
                    return "koshienId: integer expected";
                if (message.roundRank != null && message.hasOwnProperty("roundRank")) {
                    if (!Array.isArray(message.roundRank))
                        return "roundRank: array expected";
                    for (let i = 0; i < message.roundRank.length; ++i) {
                        let error = $root.wm.protobuf.GhostKoshienRoundRank.verify(message.roundRank[i]);
                        if (error)
                            return "roundRank." + error;
                    }
                }
                if (message.participantStore != null && message.hasOwnProperty("participantStore")) {
                    if (!Array.isArray(message.participantStore))
                        return "participantStore: array expected";
                    for (let i = 0; i < message.participantStore.length; ++i) {
                        let error = $root.wm.protobuf.GhostKoshienParticipatingShop.ParticipantShop.verify(message.participantStore[i]);
                        if (error)
                            return "participantStore." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a GhostKoshienParticipatingShop message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof wm.protobuf.GhostKoshienParticipatingShop
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {wm.protobuf.GhostKoshienParticipatingShop} GhostKoshienParticipatingShop
             */
            GhostKoshienParticipatingShop.fromObject = function fromObject(object) {
                if (object instanceof $root.wm.protobuf.GhostKoshienParticipatingShop)
                    return object;
                let message = new $root.wm.protobuf.GhostKoshienParticipatingShop();
                if (object.koshienId != null)
                    message.koshienId = object.koshienId >>> 0;
                if (object.roundRank) {
                    if (!Array.isArray(object.roundRank))
                        throw TypeError(".wm.protobuf.GhostKoshienParticipatingShop.roundRank: array expected");
                    message.roundRank = [];
                    for (let i = 0; i < object.roundRank.length; ++i) {
                        if (typeof object.roundRank[i] !== "object")
                            throw TypeError(".wm.protobuf.GhostKoshienParticipatingShop.roundRank: object expected");
                        message.roundRank[i] = $root.wm.protobuf.GhostKoshienRoundRank.fromObject(object.roundRank[i]);
                    }
                }
                if (object.participantStore) {
                    if (!Array.isArray(object.participantStore))
                        throw TypeError(".wm.protobuf.GhostKoshienParticipatingShop.participantStore: array expected");
                    message.participantStore = [];
                    for (let i = 0; i < object.participantStore.length; ++i) {
                        if (typeof object.participantStore[i] !== "object")
                            throw TypeError(".wm.protobuf.GhostKoshienParticipatingShop.participantStore: object expected");
                        message.participantStore[i] = $root.wm.protobuf.GhostKoshienParticipatingShop.ParticipantShop.fromObject(object.participantStore[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from a GhostKoshienParticipatingShop message. Also converts values to other types if specified.
             * @function toObject
             * @memberof wm.protobuf.GhostKoshienParticipatingShop
             * @static
             * @param {wm.protobuf.GhostKoshienParticipatingShop} message GhostKoshienParticipatingShop
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            GhostKoshienParticipatingShop.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults) {
                    object.roundRank = [];
                    object.participantStore = [];
                }
                if (options.defaults)
                    object.koshienId = 0;
                if (message.koshienId != null && message.hasOwnProperty("koshienId"))
                    object.koshienId = message.koshienId;
                if (message.roundRank && message.roundRank.length) {
                    object.roundRank = [];
                    for (let j = 0; j < message.roundRank.length; ++j)
                        object.roundRank[j] = $root.wm.protobuf.GhostKoshienRoundRank.toObject(message.roundRank[j], options);
                }
                if (message.participantStore && message.participantStore.length) {
                    object.participantStore = [];
                    for (let j = 0; j < message.participantStore.length; ++j)
                        object.participantStore[j] = $root.wm.protobuf.GhostKoshienParticipatingShop.ParticipantShop.toObject(message.participantStore[j], options);
                }
                return object;
            };

            /**
             * Converts this GhostKoshienParticipatingShop to JSON.
             * @function toJSON
             * @memberof wm.protobuf.GhostKoshienParticipatingShop
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            GhostKoshienParticipatingShop.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for GhostKoshienParticipatingShop
             * @function getTypeUrl
             * @memberof wm.protobuf.GhostKoshienParticipatingShop
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            GhostKoshienParticipatingShop.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/wm.protobuf.GhostKoshienParticipatingShop";
            };

            GhostKoshienParticipatingShop.ParticipantShop = (function() {

                /**
                 * Properties of a ParticipantShop.
                 * @memberof wm.protobuf.GhostKoshienParticipatingShop
                 * @interface IParticipantShop
                 * @property {string} name ParticipantShop name
                 * @property {number} regionId ParticipantShop regionId
                 */

                /**
                 * Constructs a new ParticipantShop.
                 * @memberof wm.protobuf.GhostKoshienParticipatingShop
                 * @classdesc Represents a ParticipantShop.
                 * @implements IParticipantShop
                 * @constructor
                 * @param {wm.protobuf.GhostKoshienParticipatingShop.IParticipantShop=} [properties] Properties to set
                 */
                function ParticipantShop(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * ParticipantShop name.
                 * @member {string} name
                 * @memberof wm.protobuf.GhostKoshienParticipatingShop.ParticipantShop
                 * @instance
                 */
                ParticipantShop.prototype.name = "";

                /**
                 * ParticipantShop regionId.
                 * @member {number} regionId
                 * @memberof wm.protobuf.GhostKoshienParticipatingShop.ParticipantShop
                 * @instance
                 */
                ParticipantShop.prototype.regionId = 0;

                /**
                 * Creates a new ParticipantShop instance using the specified properties.
                 * @function create
                 * @memberof wm.protobuf.GhostKoshienParticipatingShop.ParticipantShop
                 * @static
                 * @param {wm.protobuf.GhostKoshienParticipatingShop.IParticipantShop=} [properties] Properties to set
                 * @returns {wm.protobuf.GhostKoshienParticipatingShop.ParticipantShop} ParticipantShop instance
                 */
                ParticipantShop.create = function create(properties) {
                    return new ParticipantShop(properties);
                };

                /**
                 * Encodes the specified ParticipantShop message. Does not implicitly {@link wm.protobuf.GhostKoshienParticipatingShop.ParticipantShop.verify|verify} messages.
                 * @function encode
                 * @memberof wm.protobuf.GhostKoshienParticipatingShop.ParticipantShop
                 * @static
                 * @param {wm.protobuf.GhostKoshienParticipatingShop.IParticipantShop} message ParticipantShop message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ParticipantShop.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.regionId);
                    return writer;
                };

                /**
                 * Encodes the specified ParticipantShop message, length delimited. Does not implicitly {@link wm.protobuf.GhostKoshienParticipatingShop.ParticipantShop.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof wm.protobuf.GhostKoshienParticipatingShop.ParticipantShop
                 * @static
                 * @param {wm.protobuf.GhostKoshienParticipatingShop.IParticipantShop} message ParticipantShop message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ParticipantShop.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a ParticipantShop message from the specified reader or buffer.
                 * @function decode
                 * @memberof wm.protobuf.GhostKoshienParticipatingShop.ParticipantShop
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {wm.protobuf.GhostKoshienParticipatingShop.ParticipantShop} ParticipantShop
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ParticipantShop.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.wm.protobuf.GhostKoshienParticipatingShop.ParticipantShop();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.name = reader.string();
                                break;
                            }
                        case 2: {
                                message.regionId = reader.uint32();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    if (!message.hasOwnProperty("name"))
                        throw $util.ProtocolError("missing required 'name'", { instance: message });
                    if (!message.hasOwnProperty("regionId"))
                        throw $util.ProtocolError("missing required 'regionId'", { instance: message });
                    return message;
                };

                /**
                 * Decodes a ParticipantShop message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof wm.protobuf.GhostKoshienParticipatingShop.ParticipantShop
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {wm.protobuf.GhostKoshienParticipatingShop.ParticipantShop} ParticipantShop
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ParticipantShop.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a ParticipantShop message.
                 * @function verify
                 * @memberof wm.protobuf.GhostKoshienParticipatingShop.ParticipantShop
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ParticipantShop.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (!$util.isString(message.name))
                        return "name: string expected";
                    if (!$util.isInteger(message.regionId))
                        return "regionId: integer expected";
                    return null;
                };

                /**
                 * Creates a ParticipantShop message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof wm.protobuf.GhostKoshienParticipatingShop.ParticipantShop
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {wm.protobuf.GhostKoshienParticipatingShop.ParticipantShop} ParticipantShop
                 */
                ParticipantShop.fromObject = function fromObject(object) {
                    if (object instanceof $root.wm.protobuf.GhostKoshienParticipatingShop.ParticipantShop)
                        return object;
                    let message = new $root.wm.protobuf.GhostKoshienParticipatingShop.ParticipantShop();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.regionId != null)
                        message.regionId = object.regionId >>> 0;
                    return message;
                };

                /**
                 * Creates a plain object from a ParticipantShop message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof wm.protobuf.GhostKoshienParticipatingShop.ParticipantShop
                 * @static
                 * @param {wm.protobuf.GhostKoshienParticipatingShop.ParticipantShop} message ParticipantShop
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ParticipantShop.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        object.name = "";
                        object.regionId = 0;
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message.regionId != null && message.hasOwnProperty("regionId"))
                        object.regionId = message.regionId;
                    return object;
                };

                /**
                 * Converts this ParticipantShop to JSON.
                 * @function toJSON
                 * @memberof wm.protobuf.GhostKoshienParticipatingShop.ParticipantShop
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ParticipantShop.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                /**
                 * Gets the default type url for ParticipantShop
                 * @function getTypeUrl
                 * @memberof wm.protobuf.GhostKoshienParticipatingShop.ParticipantShop
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                ParticipantShop.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/wm.protobuf.GhostKoshienParticipatingShop.ParticipantShop";
                };

                return ParticipantShop;
            })();

            return GhostKoshienParticipatingShop;
        })();

        protobuf.GhostExpeditionRanking = (function() {

            /**
             * Properties of a GhostExpeditionRanking.
             * @memberof wm.protobuf
             * @interface IGhostExpeditionRanking
             * @property {number} localScore GhostExpeditionRanking localScore
             * @property {wm.protobuf.IGhostExpeditionRankingEntry|null} [todaysMvp] GhostExpeditionRanking todaysMvp
             * @property {Array.<wm.protobuf.IGhostExpeditionRankingEntry>|null} [localRanking] GhostExpeditionRanking localRanking
             */

            /**
             * Constructs a new GhostExpeditionRanking.
             * @memberof wm.protobuf
             * @classdesc Represents a GhostExpeditionRanking.
             * @implements IGhostExpeditionRanking
             * @constructor
             * @param {wm.protobuf.IGhostExpeditionRanking=} [properties] Properties to set
             */
            function GhostExpeditionRanking(properties) {
                this.localRanking = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * GhostExpeditionRanking localScore.
             * @member {number} localScore
             * @memberof wm.protobuf.GhostExpeditionRanking
             * @instance
             */
            GhostExpeditionRanking.prototype.localScore = 0;

            /**
             * GhostExpeditionRanking todaysMvp.
             * @member {wm.protobuf.IGhostExpeditionRankingEntry|null|undefined} todaysMvp
             * @memberof wm.protobuf.GhostExpeditionRanking
             * @instance
             */
            GhostExpeditionRanking.prototype.todaysMvp = null;

            /**
             * GhostExpeditionRanking localRanking.
             * @member {Array.<wm.protobuf.IGhostExpeditionRankingEntry>} localRanking
             * @memberof wm.protobuf.GhostExpeditionRanking
             * @instance
             */
            GhostExpeditionRanking.prototype.localRanking = $util.emptyArray;

            /**
             * Creates a new GhostExpeditionRanking instance using the specified properties.
             * @function create
             * @memberof wm.protobuf.GhostExpeditionRanking
             * @static
             * @param {wm.protobuf.IGhostExpeditionRanking=} [properties] Properties to set
             * @returns {wm.protobuf.GhostExpeditionRanking} GhostExpeditionRanking instance
             */
            GhostExpeditionRanking.create = function create(properties) {
                return new GhostExpeditionRanking(properties);
            };

            /**
             * Encodes the specified GhostExpeditionRanking message. Does not implicitly {@link wm.protobuf.GhostExpeditionRanking.verify|verify} messages.
             * @function encode
             * @memberof wm.protobuf.GhostExpeditionRanking
             * @static
             * @param {wm.protobuf.IGhostExpeditionRanking} message GhostExpeditionRanking message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GhostExpeditionRanking.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.localScore);
                if (message.todaysMvp != null && Object.hasOwnProperty.call(message, "todaysMvp"))
                    $root.wm.protobuf.GhostExpeditionRankingEntry.encode(message.todaysMvp, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                if (message.localRanking != null && message.localRanking.length)
                    for (let i = 0; i < message.localRanking.length; ++i)
                        $root.wm.protobuf.GhostExpeditionRankingEntry.encode(message.localRanking[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified GhostExpeditionRanking message, length delimited. Does not implicitly {@link wm.protobuf.GhostExpeditionRanking.verify|verify} messages.
             * @function encodeDelimited
             * @memberof wm.protobuf.GhostExpeditionRanking
             * @static
             * @param {wm.protobuf.IGhostExpeditionRanking} message GhostExpeditionRanking message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GhostExpeditionRanking.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a GhostExpeditionRanking message from the specified reader or buffer.
             * @function decode
             * @memberof wm.protobuf.GhostExpeditionRanking
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {wm.protobuf.GhostExpeditionRanking} GhostExpeditionRanking
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GhostExpeditionRanking.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.wm.protobuf.GhostExpeditionRanking();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.localScore = reader.uint32();
                            break;
                        }
                    case 2: {
                            message.todaysMvp = $root.wm.protobuf.GhostExpeditionRankingEntry.decode(reader, reader.uint32());
                            break;
                        }
                    case 3: {
                            if (!(message.localRanking && message.localRanking.length))
                                message.localRanking = [];
                            message.localRanking.push($root.wm.protobuf.GhostExpeditionRankingEntry.decode(reader, reader.uint32()));
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("localScore"))
                    throw $util.ProtocolError("missing required 'localScore'", { instance: message });
                return message;
            };

            /**
             * Decodes a GhostExpeditionRanking message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof wm.protobuf.GhostExpeditionRanking
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {wm.protobuf.GhostExpeditionRanking} GhostExpeditionRanking
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GhostExpeditionRanking.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a GhostExpeditionRanking message.
             * @function verify
             * @memberof wm.protobuf.GhostExpeditionRanking
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            GhostExpeditionRanking.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (!$util.isInteger(message.localScore))
                    return "localScore: integer expected";
                if (message.todaysMvp != null && message.hasOwnProperty("todaysMvp")) {
                    let error = $root.wm.protobuf.GhostExpeditionRankingEntry.verify(message.todaysMvp);
                    if (error)
                        return "todaysMvp." + error;
                }
                if (message.localRanking != null && message.hasOwnProperty("localRanking")) {
                    if (!Array.isArray(message.localRanking))
                        return "localRanking: array expected";
                    for (let i = 0; i < message.localRanking.length; ++i) {
                        let error = $root.wm.protobuf.GhostExpeditionRankingEntry.verify(message.localRanking[i]);
                        if (error)
                            return "localRanking." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a GhostExpeditionRanking message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof wm.protobuf.GhostExpeditionRanking
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {wm.protobuf.GhostExpeditionRanking} GhostExpeditionRanking
             */
            GhostExpeditionRanking.fromObject = function fromObject(object) {
                if (object instanceof $root.wm.protobuf.GhostExpeditionRanking)
                    return object;
                let message = new $root.wm.protobuf.GhostExpeditionRanking();
                if (object.localScore != null)
                    message.localScore = object.localScore >>> 0;
                if (object.todaysMvp != null) {
                    if (typeof object.todaysMvp !== "object")
                        throw TypeError(".wm.protobuf.GhostExpeditionRanking.todaysMvp: object expected");
                    message.todaysMvp = $root.wm.protobuf.GhostExpeditionRankingEntry.fromObject(object.todaysMvp);
                }
                if (object.localRanking) {
                    if (!Array.isArray(object.localRanking))
                        throw TypeError(".wm.protobuf.GhostExpeditionRanking.localRanking: array expected");
                    message.localRanking = [];
                    for (let i = 0; i < object.localRanking.length; ++i) {
                        if (typeof object.localRanking[i] !== "object")
                            throw TypeError(".wm.protobuf.GhostExpeditionRanking.localRanking: object expected");
                        message.localRanking[i] = $root.wm.protobuf.GhostExpeditionRankingEntry.fromObject(object.localRanking[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from a GhostExpeditionRanking message. Also converts values to other types if specified.
             * @function toObject
             * @memberof wm.protobuf.GhostExpeditionRanking
             * @static
             * @param {wm.protobuf.GhostExpeditionRanking} message GhostExpeditionRanking
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            GhostExpeditionRanking.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.localRanking = [];
                if (options.defaults) {
                    object.localScore = 0;
                    object.todaysMvp = null;
                }
                if (message.localScore != null && message.hasOwnProperty("localScore"))
                    object.localScore = message.localScore;
                if (message.todaysMvp != null && message.hasOwnProperty("todaysMvp"))
                    object.todaysMvp = $root.wm.protobuf.GhostExpeditionRankingEntry.toObject(message.todaysMvp, options);
                if (message.localRanking && message.localRanking.length) {
                    object.localRanking = [];
                    for (let j = 0; j < message.localRanking.length; ++j)
                        object.localRanking[j] = $root.wm.protobuf.GhostExpeditionRankingEntry.toObject(message.localRanking[j], options);
                }
                return object;
            };

            /**
             * Converts this GhostExpeditionRanking to JSON.
             * @function toJSON
             * @memberof wm.protobuf.GhostExpeditionRanking
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            GhostExpeditionRanking.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for GhostExpeditionRanking
             * @function getTypeUrl
             * @memberof wm.protobuf.GhostExpeditionRanking
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            GhostExpeditionRanking.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/wm.protobuf.GhostExpeditionRanking";
            };

            return GhostExpeditionRanking;
        })();

        protobuf.GhostExpeditionParticipants = (function() {

            /**
             * Properties of a GhostExpeditionParticipants.
             * @memberof wm.protobuf
             * @interface IGhostExpeditionParticipants
             * @property {string} placeId GhostExpeditionParticipants placeId
             * @property {Array.<number>|null} [participantCars] GhostExpeditionParticipants participantCars
             */

            /**
             * Constructs a new GhostExpeditionParticipants.
             * @memberof wm.protobuf
             * @classdesc Represents a GhostExpeditionParticipants.
             * @implements IGhostExpeditionParticipants
             * @constructor
             * @param {wm.protobuf.IGhostExpeditionParticipants=} [properties] Properties to set
             */
            function GhostExpeditionParticipants(properties) {
                this.participantCars = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * GhostExpeditionParticipants placeId.
             * @member {string} placeId
             * @memberof wm.protobuf.GhostExpeditionParticipants
             * @instance
             */
            GhostExpeditionParticipants.prototype.placeId = "";

            /**
             * GhostExpeditionParticipants participantCars.
             * @member {Array.<number>} participantCars
             * @memberof wm.protobuf.GhostExpeditionParticipants
             * @instance
             */
            GhostExpeditionParticipants.prototype.participantCars = $util.emptyArray;

            /**
             * Creates a new GhostExpeditionParticipants instance using the specified properties.
             * @function create
             * @memberof wm.protobuf.GhostExpeditionParticipants
             * @static
             * @param {wm.protobuf.IGhostExpeditionParticipants=} [properties] Properties to set
             * @returns {wm.protobuf.GhostExpeditionParticipants} GhostExpeditionParticipants instance
             */
            GhostExpeditionParticipants.create = function create(properties) {
                return new GhostExpeditionParticipants(properties);
            };

            /**
             * Encodes the specified GhostExpeditionParticipants message. Does not implicitly {@link wm.protobuf.GhostExpeditionParticipants.verify|verify} messages.
             * @function encode
             * @memberof wm.protobuf.GhostExpeditionParticipants
             * @static
             * @param {wm.protobuf.IGhostExpeditionParticipants} message GhostExpeditionParticipants message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GhostExpeditionParticipants.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.placeId);
                if (message.participantCars != null && message.participantCars.length)
                    for (let i = 0; i < message.participantCars.length; ++i)
                        writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.participantCars[i]);
                return writer;
            };

            /**
             * Encodes the specified GhostExpeditionParticipants message, length delimited. Does not implicitly {@link wm.protobuf.GhostExpeditionParticipants.verify|verify} messages.
             * @function encodeDelimited
             * @memberof wm.protobuf.GhostExpeditionParticipants
             * @static
             * @param {wm.protobuf.IGhostExpeditionParticipants} message GhostExpeditionParticipants message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GhostExpeditionParticipants.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a GhostExpeditionParticipants message from the specified reader or buffer.
             * @function decode
             * @memberof wm.protobuf.GhostExpeditionParticipants
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {wm.protobuf.GhostExpeditionParticipants} GhostExpeditionParticipants
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GhostExpeditionParticipants.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.wm.protobuf.GhostExpeditionParticipants();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.placeId = reader.string();
                            break;
                        }
                    case 2: {
                            if (!(message.participantCars && message.participantCars.length))
                                message.participantCars = [];
                            if ((tag & 7) === 2) {
                                let end2 = reader.uint32() + reader.pos;
                                while (reader.pos < end2)
                                    message.participantCars.push(reader.uint32());
                            } else
                                message.participantCars.push(reader.uint32());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("placeId"))
                    throw $util.ProtocolError("missing required 'placeId'", { instance: message });
                return message;
            };

            /**
             * Decodes a GhostExpeditionParticipants message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof wm.protobuf.GhostExpeditionParticipants
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {wm.protobuf.GhostExpeditionParticipants} GhostExpeditionParticipants
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GhostExpeditionParticipants.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a GhostExpeditionParticipants message.
             * @function verify
             * @memberof wm.protobuf.GhostExpeditionParticipants
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            GhostExpeditionParticipants.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (!$util.isString(message.placeId))
                    return "placeId: string expected";
                if (message.participantCars != null && message.hasOwnProperty("participantCars")) {
                    if (!Array.isArray(message.participantCars))
                        return "participantCars: array expected";
                    for (let i = 0; i < message.participantCars.length; ++i)
                        if (!$util.isInteger(message.participantCars[i]))
                            return "participantCars: integer[] expected";
                }
                return null;
            };

            /**
             * Creates a GhostExpeditionParticipants message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof wm.protobuf.GhostExpeditionParticipants
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {wm.protobuf.GhostExpeditionParticipants} GhostExpeditionParticipants
             */
            GhostExpeditionParticipants.fromObject = function fromObject(object) {
                if (object instanceof $root.wm.protobuf.GhostExpeditionParticipants)
                    return object;
                let message = new $root.wm.protobuf.GhostExpeditionParticipants();
                if (object.placeId != null)
                    message.placeId = String(object.placeId);
                if (object.participantCars) {
                    if (!Array.isArray(object.participantCars))
                        throw TypeError(".wm.protobuf.GhostExpeditionParticipants.participantCars: array expected");
                    message.participantCars = [];
                    for (let i = 0; i < object.participantCars.length; ++i)
                        message.participantCars[i] = object.participantCars[i] >>> 0;
                }
                return message;
            };

            /**
             * Creates a plain object from a GhostExpeditionParticipants message. Also converts values to other types if specified.
             * @function toObject
             * @memberof wm.protobuf.GhostExpeditionParticipants
             * @static
             * @param {wm.protobuf.GhostExpeditionParticipants} message GhostExpeditionParticipants
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            GhostExpeditionParticipants.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.participantCars = [];
                if (options.defaults)
                    object.placeId = "";
                if (message.placeId != null && message.hasOwnProperty("placeId"))
                    object.placeId = message.placeId;
                if (message.participantCars && message.participantCars.length) {
                    object.participantCars = [];
                    for (let j = 0; j < message.participantCars.length; ++j)
                        object.participantCars[j] = message.participantCars[j];
                }
                return object;
            };

            /**
             * Converts this GhostExpeditionParticipants to JSON.
             * @function toJSON
             * @memberof wm.protobuf.GhostExpeditionParticipants
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            GhostExpeditionParticipants.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for GhostExpeditionParticipants
             * @function getTypeUrl
             * @memberof wm.protobuf.GhostExpeditionParticipants
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            GhostExpeditionParticipants.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/wm.protobuf.GhostExpeditionParticipants";
            };

            return GhostExpeditionParticipants;
        })();

        protobuf.GhostKoshienTarget = (function() {

            /**
             * Properties of a GhostKoshienTarget.
             * @memberof wm.protobuf
             * @interface IGhostKoshienTarget
             * @property {number} koshienId GhostKoshienTarget koshienId
             * @property {wm.protobuf.IGhostCar} ghostCar GhostKoshienTarget ghostCar
             * @property {number|Long} trailId GhostKoshienTarget trailId
             * @property {number} updatedAt GhostKoshienTarget updatedAt
             * @property {number} koshienPeriodId GhostKoshienTarget koshienPeriodId
             * @property {number|null} [regionId] GhostKoshienTarget regionId
             * @property {wm.protobuf.IPlace|null} [participantShop] GhostKoshienTarget participantShop
             */

            /**
             * Constructs a new GhostKoshienTarget.
             * @memberof wm.protobuf
             * @classdesc Represents a GhostKoshienTarget.
             * @implements IGhostKoshienTarget
             * @constructor
             * @param {wm.protobuf.IGhostKoshienTarget=} [properties] Properties to set
             */
            function GhostKoshienTarget(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * GhostKoshienTarget koshienId.
             * @member {number} koshienId
             * @memberof wm.protobuf.GhostKoshienTarget
             * @instance
             */
            GhostKoshienTarget.prototype.koshienId = 0;

            /**
             * GhostKoshienTarget ghostCar.
             * @member {wm.protobuf.IGhostCar} ghostCar
             * @memberof wm.protobuf.GhostKoshienTarget
             * @instance
             */
            GhostKoshienTarget.prototype.ghostCar = null;

            /**
             * GhostKoshienTarget trailId.
             * @member {number|Long} trailId
             * @memberof wm.protobuf.GhostKoshienTarget
             * @instance
             */
            GhostKoshienTarget.prototype.trailId = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

            /**
             * GhostKoshienTarget updatedAt.
             * @member {number} updatedAt
             * @memberof wm.protobuf.GhostKoshienTarget
             * @instance
             */
            GhostKoshienTarget.prototype.updatedAt = 0;

            /**
             * GhostKoshienTarget koshienPeriodId.
             * @member {number} koshienPeriodId
             * @memberof wm.protobuf.GhostKoshienTarget
             * @instance
             */
            GhostKoshienTarget.prototype.koshienPeriodId = 0;

            /**
             * GhostKoshienTarget regionId.
             * @member {number} regionId
             * @memberof wm.protobuf.GhostKoshienTarget
             * @instance
             */
            GhostKoshienTarget.prototype.regionId = 0;

            /**
             * GhostKoshienTarget participantShop.
             * @member {wm.protobuf.IPlace|null|undefined} participantShop
             * @memberof wm.protobuf.GhostKoshienTarget
             * @instance
             */
            GhostKoshienTarget.prototype.participantShop = null;

            /**
             * Creates a new GhostKoshienTarget instance using the specified properties.
             * @function create
             * @memberof wm.protobuf.GhostKoshienTarget
             * @static
             * @param {wm.protobuf.IGhostKoshienTarget=} [properties] Properties to set
             * @returns {wm.protobuf.GhostKoshienTarget} GhostKoshienTarget instance
             */
            GhostKoshienTarget.create = function create(properties) {
                return new GhostKoshienTarget(properties);
            };

            /**
             * Encodes the specified GhostKoshienTarget message. Does not implicitly {@link wm.protobuf.GhostKoshienTarget.verify|verify} messages.
             * @function encode
             * @memberof wm.protobuf.GhostKoshienTarget
             * @static
             * @param {wm.protobuf.IGhostKoshienTarget} message GhostKoshienTarget message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GhostKoshienTarget.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.koshienId);
                $root.wm.protobuf.GhostCar.encode(message.ghostCar, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                writer.uint32(/* id 4, wireType 0 =*/32).uint64(message.trailId);
                writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.updatedAt);
                writer.uint32(/* id 7, wireType 0 =*/56).uint32(message.koshienPeriodId);
                if (message.regionId != null && Object.hasOwnProperty.call(message, "regionId"))
                    writer.uint32(/* id 8, wireType 0 =*/64).uint32(message.regionId);
                if (message.participantShop != null && Object.hasOwnProperty.call(message, "participantShop"))
                    $root.wm.protobuf.Place.encode(message.participantShop, writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified GhostKoshienTarget message, length delimited. Does not implicitly {@link wm.protobuf.GhostKoshienTarget.verify|verify} messages.
             * @function encodeDelimited
             * @memberof wm.protobuf.GhostKoshienTarget
             * @static
             * @param {wm.protobuf.IGhostKoshienTarget} message GhostKoshienTarget message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GhostKoshienTarget.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a GhostKoshienTarget message from the specified reader or buffer.
             * @function decode
             * @memberof wm.protobuf.GhostKoshienTarget
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {wm.protobuf.GhostKoshienTarget} GhostKoshienTarget
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GhostKoshienTarget.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.wm.protobuf.GhostKoshienTarget();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.koshienId = reader.uint32();
                            break;
                        }
                    case 3: {
                            message.ghostCar = $root.wm.protobuf.GhostCar.decode(reader, reader.uint32());
                            break;
                        }
                    case 4: {
                            message.trailId = reader.uint64();
                            break;
                        }
                    case 5: {
                            message.updatedAt = reader.uint32();
                            break;
                        }
                    case 7: {
                            message.koshienPeriodId = reader.uint32();
                            break;
                        }
                    case 8: {
                            message.regionId = reader.uint32();
                            break;
                        }
                    case 9: {
                            message.participantShop = $root.wm.protobuf.Place.decode(reader, reader.uint32());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                if (!message.hasOwnProperty("koshienId"))
                    throw $util.ProtocolError("missing required 'koshienId'", { instance: message });
                if (!message.hasOwnProperty("ghostCar"))
                    throw $util.ProtocolError("missing required 'ghostCar'", { instance: message });
                if (!message.hasOwnProperty("trailId"))
                    throw $util.ProtocolError("missing required 'trailId'", { instance: message });
                if (!message.hasOwnProperty("updatedAt"))
                    throw $util.ProtocolError("missing required 'updatedAt'", { instance: message });
                if (!message.hasOwnProperty("koshienPeriodId"))
                    throw $util.ProtocolError("missing required 'koshienPeriodId'", { instance: message });
                return message;
            };

            /**
             * Decodes a GhostKoshienTarget message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof wm.protobuf.GhostKoshienTarget
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {wm.protobuf.GhostKoshienTarget} GhostKoshienTarget
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GhostKoshienTarget.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a GhostKoshienTarget message.
             * @function verify
             * @memberof wm.protobuf.GhostKoshienTarget
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            GhostKoshienTarget.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (!$util.isInteger(message.koshienId))
                    return "koshienId: integer expected";
                {
                    let error = $root.wm.protobuf.GhostCar.verify(message.ghostCar);
                    if (error)
                        return "ghostCar." + error;
                }
                if (!$util.isInteger(message.trailId) && !(message.trailId && $util.isInteger(message.trailId.low) && $util.isInteger(message.trailId.high)))
                    return "trailId: integer|Long expected";
                if (!$util.isInteger(message.updatedAt))
                    return "updatedAt: integer expected";
                if (!$util.isInteger(message.koshienPeriodId))
                    return "koshienPeriodId: integer expected";
                if (message.regionId != null && message.hasOwnProperty("regionId"))
                    if (!$util.isInteger(message.regionId))
                        return "regionId: integer expected";
                if (message.participantShop != null && message.hasOwnProperty("participantShop")) {
                    let error = $root.wm.protobuf.Place.verify(message.participantShop);
                    if (error)
                        return "participantShop." + error;
                }
                return null;
            };

            /**
             * Creates a GhostKoshienTarget message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof wm.protobuf.GhostKoshienTarget
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {wm.protobuf.GhostKoshienTarget} GhostKoshienTarget
             */
            GhostKoshienTarget.fromObject = function fromObject(object) {
                if (object instanceof $root.wm.protobuf.GhostKoshienTarget)
                    return object;
                let message = new $root.wm.protobuf.GhostKoshienTarget();
                if (object.koshienId != null)
                    message.koshienId = object.koshienId >>> 0;
                if (object.ghostCar != null) {
                    if (typeof object.ghostCar !== "object")
                        throw TypeError(".wm.protobuf.GhostKoshienTarget.ghostCar: object expected");
                    message.ghostCar = $root.wm.protobuf.GhostCar.fromObject(object.ghostCar);
                }
                if (object.trailId != null)
                    if ($util.Long)
                        (message.trailId = $util.Long.fromValue(object.trailId)).unsigned = true;
                    else if (typeof object.trailId === "string")
                        message.trailId = parseInt(object.trailId, 10);
                    else if (typeof object.trailId === "number")
                        message.trailId = object.trailId;
                    else if (typeof object.trailId === "object")
                        message.trailId = new $util.LongBits(object.trailId.low >>> 0, object.trailId.high >>> 0).toNumber(true);
                if (object.updatedAt != null)
                    message.updatedAt = object.updatedAt >>> 0;
                if (object.koshienPeriodId != null)
                    message.koshienPeriodId = object.koshienPeriodId >>> 0;
                if (object.regionId != null)
                    message.regionId = object.regionId >>> 0;
                if (object.participantShop != null) {
                    if (typeof object.participantShop !== "object")
                        throw TypeError(".wm.protobuf.GhostKoshienTarget.participantShop: object expected");
                    message.participantShop = $root.wm.protobuf.Place.fromObject(object.participantShop);
                }
                return message;
            };

            /**
             * Creates a plain object from a GhostKoshienTarget message. Also converts values to other types if specified.
             * @function toObject
             * @memberof wm.protobuf.GhostKoshienTarget
             * @static
             * @param {wm.protobuf.GhostKoshienTarget} message GhostKoshienTarget
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            GhostKoshienTarget.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.koshienId = 0;
                    object.ghostCar = null;
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, true);
                        object.trailId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.trailId = options.longs === String ? "0" : 0;
                    object.updatedAt = 0;
                    object.koshienPeriodId = 0;
                    object.regionId = 0;
                    object.participantShop = null;
                }
                if (message.koshienId != null && message.hasOwnProperty("koshienId"))
                    object.koshienId = message.koshienId;
                if (message.ghostCar != null && message.hasOwnProperty("ghostCar"))
                    object.ghostCar = $root.wm.protobuf.GhostCar.toObject(message.ghostCar, options);
                if (message.trailId != null && message.hasOwnProperty("trailId"))
                    if (typeof message.trailId === "number")
                        object.trailId = options.longs === String ? String(message.trailId) : message.trailId;
                    else
                        object.trailId = options.longs === String ? $util.Long.prototype.toString.call(message.trailId) : options.longs === Number ? new $util.LongBits(message.trailId.low >>> 0, message.trailId.high >>> 0).toNumber(true) : message.trailId;
                if (message.updatedAt != null && message.hasOwnProperty("updatedAt"))
                    object.updatedAt = message.updatedAt;
                if (message.koshienPeriodId != null && message.hasOwnProperty("koshienPeriodId"))
                    object.koshienPeriodId = message.koshienPeriodId;
                if (message.regionId != null && message.hasOwnProperty("regionId"))
                    object.regionId = message.regionId;
                if (message.participantShop != null && message.hasOwnProperty("participantShop"))
                    object.participantShop = $root.wm.protobuf.Place.toObject(message.participantShop, options);
                return object;
            };

            /**
             * Converts this GhostKoshienTarget to JSON.
             * @function toJSON
             * @memberof wm.protobuf.GhostKoshienTarget
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            GhostKoshienTarget.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for GhostKoshienTarget
             * @function getTypeUrl
             * @memberof wm.protobuf.GhostKoshienTarget
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            GhostKoshienTarget.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/wm.protobuf.GhostKoshienTarget";
            };

            return GhostKoshienTarget;
        })();

        return protobuf;
    })();

    return wm;
})();

export { $root as default };
